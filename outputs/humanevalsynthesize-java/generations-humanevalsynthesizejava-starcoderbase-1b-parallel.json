[["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff > threshold) {\n                return true;\n            }\n            if (diff < -threshold) {\n                return false;\n            }\n            if (diff == 0) {\n                if (numbers.get(i) == numbers.get(i + 1)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n        for (int i = 1; i < numbers.size(); i++) {\n            double current = numbers.get(i);\n            if (Math.abs(current - min) > threshold || Math.abs(current - max) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i + 1) - numbers.get(i)) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n        for (int i = 1; i < numbers.size(); i++) {\n            double current = numbers.get(i);\n            if (Math.abs(current - min) > threshold || Math.abs(current - max) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        double diff = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - min) < threshold && Math.abs(numbers.get(i) - max) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            double current = numbers.get(i);\n            if (Math.abs(current - min) > threshold) {\n                min = current;\n            }\n            if (Math.abs(max - current) > threshold) {\n                max = current;\n            }\n        }\n        return Math.abs(max - min) <= threshold;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = 0.0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = 0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) > threshold) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n\n        Collections.sort(numbers);\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i + 1) - numbers.get(i)) > threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) > threshold) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double diff = max - min;\n        return diff > threshold;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = 0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = 0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            double current = numbers.get(i);\n            if (Math.abs(current - min) > threshold) {\n                min = current;\n            }\n            if (Math.abs(current - max) > threshold) {\n                max = current;\n            }\n        }\n\n        return Math.abs(max - min) < threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.empty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] strings = paren_string.split(\"\\\\(\");\n        for (String s : strings) {\n            if (s.equals(\"(\")) {\n                result.add(\"()\");\n            } else if (s.equals(\")\")) {\n                result.add(\"()\");\n            } else if (s.equals(\"(\") || s.equals(\")\")) {\n                result.add(s);\n            } else {\n                result.add(s.substring(1, s.length() - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_split = paren_group.split(\"\\\\)\");\n            for (String paren_group_split_item : paren_group_split) {\n                result.add(paren_group_split_item);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String temp = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                temp += c;\n            } else if (c == ')') {\n                if (temp.length() > 0) {\n                    result.add(temp);\n                    temp = \"\";\n                }\n            }\n        }\n        if (temp.length() > 0) {\n            result.add(temp);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] paren_groups = paren_string.split(\" \");\n        for (String group : paren_groups) {\n            if (group.equals(\"(\")) {\n                result.add(\"()\");\n            } else if (group.equals(\")\")) {\n                result.add(\")\");\n            } else if (group.equals(\"(\")) {\n                result.add(\"(\");\n            } else if (group.equals(\")\")) {\n                result.add(\")\");\n            } else {\n                result.add(group);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_split = paren_group.split(\"\\\\)\");\n            for (String paren_group_split_item : paren_group_split) {\n                result.add(paren_group_split_item);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_split = paren_group.split(\"\\\\)\");\n            if (paren_group_split.length == 1) {\n                result.add(paren_group);\n            } else {\n                result.add(paren_group_split[0]);\n                result.addAll(separateParenGroups(paren_group_split[1]));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] groups = paren_string.split(\"\\\\(\");\n        for (String group : groups) {\n            String[] sub_groups = group.split(\"\\\\)\");\n            for (String sub_group : sub_groups) {\n                result.add(sub_group);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] tokens = paren_string.split(\" \");\n        for (String token : tokens) {\n            if (token.equals(\"(\")) {\n                result.add(\"(\");\n            } else if (token.equals(\")\")) {\n                if (result.size() == 0) {\n                    result.add(\"()\");\n                } else {\n                    result.remove(result.size() - 1);\n                }\n            } else {\n                result.add(token);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_split = paren_group.split(\"\\\\)\");\n            for (String paren_group_split_item : paren_group_split) {\n                result.add(paren_group_split_item);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_parts = paren_group.split(\"\\\\)\");\n            String open_paren = paren_group_parts[0];\n            String close_paren = paren_group_parts[1];\n            String open_brace = open_paren.substring(1, open_paren.length() - 1);\n            String close_brace = close_paren.substring(0, close_paren.length() - 1);\n            String open_brace_count = open_brace.replaceAll(\"\\\\(\", \"\");\n            String close_brace_count = close_brace.replaceAll(\"\\\\)\", \"\");\n            if (open_brace_count.equals(close_brace_count)) {\n                result.add(open_paren);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] paren_array = paren_string.split(\" \");\n        for (int i = 0; i < paren_array.length; i++) {\n            String paren = paren_array[i];\n            if (paren.equals(\"(\")) {\n                result.add(\"(\");\n            } else if (paren.equals(\")\")) {\n                if (result.size() > 0 && result.get(result.size() - 1).equals(\"(\")) {\n                    result.remove(result.size() - 1);\n                } else {\n                    result.add(\")\");\n                }\n            } else {\n                result.add(paren);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_split = paren_group.split(\"\\\\)\");\n            for (String paren_group_split_item : paren_group_split) {\n                result.add(paren_group_split_item);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_split = paren_group.split(\"\\\\)\");\n            if (paren_group_split.length == 1) {\n                result.add(paren_group);\n            } else {\n                result.add(paren_group_split[0]);\n                for (String paren_group_sub : paren_group_split) {\n                    result.add(paren_group_sub);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decPart = number - intPart;\n        return decPart;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (Integer operation : operations) {\n            sum += operation;\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (Integer operation : operations) {\n            sum += operation;\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (Integer operation : operations) {\n            sum += operation;\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (Integer operation : operations) {\n            sum += operation;\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (Integer operation : operations) {\n            sum += operation;\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (Integer operation : operations) {\n            sum += operation;\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        return mad / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        return mad / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad = mad / numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return Math.abs(sum / numbers.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        return mad / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double mad = 0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i + 1 < numbers.size()) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i + 1 < numbers.size()) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop() == '(' ? 1 : -1);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            stack.pop();\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] split = paren_string.split(\" \");\n        for (String s : split) {\n            if (s.startsWith(\"(\")) {\n                result.add(2);\n            } else if (s.startsWith(\")\")) {\n                result.add(1);\n            } else {\n                result.add(0);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop() == '(' ? 1 : -1);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        String[] parens = paren_string.split(\" \");\n        for (int i = 0; i < parens.length; i++) {\n            if (parens[i].equals(\"(\")) {\n                result.add(1);\n            } else {\n                result.add(0);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] str_array = paren_string.split(\" \");\n        for (int i = 0; i < str_array.length; i++) {\n            String str = str_array[i];\n            if (str.startsWith(\"(\")) {\n                result.add(1);\n            } else if (str.endsWith(\")\")) {\n                result.add(0);\n            } else {\n                result.add(0);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            sum.add(sum.get(i) + numbers.get(i));\n            product.add(product.get(i) * numbers.get(i));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (Integer number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (Integer num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        int sum_ = 0;\n        int product_ = 1;\n        for (int i : numbers) {\n            sum_. += i;\n            product_. *= i;\n        }\n        sum.add(sum_);\n        product.add(product_);\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        int sum_ = 0;\n        int product_ = 1;\n        for (int i : numbers) {\n            sum_. += i;\n            product_. *= i;\n        }\n        sum.add(sum_);\n        product.add(product_);\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            sum.add(sum.get(i) + numbers.get(i));\n            product.add(product.get(i) * numbers.get(i));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        int sum_i = 0;\n        int product_i = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum_i += numbers.get(i);\n            product_i *= numbers.get(i);\n            sum.add(sum_i);\n            product.add(product_i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        for (Integer num : numbers) {\n            sum.add(num);\n            product.add(num * num);\n        }\n        return Arrays.asList(sum.get(0), product.get(0));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            sum.add(numbers.get(i));\n            product.add(numbers.get(i) * numbers.get(i));\n        }\n        return Arrays.asList(sum.get(0), product.get(0));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        for (int i : numbers) {\n            sum.add(sum.get(sum.size() - 1) + i);\n            product.add(product.get(product.size() - 1) * i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        for (Integer num : numbers) {\n            sum.add(num);\n            product.add(num * num);\n        }\n        return Arrays.asList(sum.stream().reduce(0, (a, b) -> a + b), product.stream().reduce(1, (a, b) -> a * b));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        for (Integer num : numbers) {\n            sum.add(num);\n            product.add(num * num);\n        }\n        return Arrays.asList(sum.get(0), product.get(0));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return List.of(sum, product);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int len = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < len; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] rollingMax = new int[n];\n        for (int i = 0; i < n; i++) {\n            rollingMax[i] = numbers.get(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            if (i == 0) {\n                result.add(numbers.get(0));\n            } else {\n                result.add(Math.max(numbers.get(i), rollingMax[i - 1]));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        max[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.max(max[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(max[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                rollingMax.add(numbers.get(i));\n            } else {\n                int max = numbers.get(i);\n                for (int j = i - 1; j >= 0; j--) {\n                    if (numbers.get(j) > max) {\n                        max = numbers.get(j);\n                    }\n                }\n                rollingMax.add(max);\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] rollingMax = new int[n];\n        for (int i = 0; i < n; i++) {\n            rollingMax[i] = numbers.get(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                int max = rollingMax[i - 1];\n                int min = numbers.get(i);\n                if (max < min) {\n                    result.add(max);\n                } else {\n                    result.add(min);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        for (int i = 0; i < n; i++) {\n            max[i] = numbers.get(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            if (max[i] > max[i + 1]) {\n                result.add(max[i]);\n            } else {\n                max[i] = max[i + 1];\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        max[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.max(max[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(max[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int len = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < len; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        String result = \"\";\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (isPalindrome(string.substring(i, j + 1))) {\n                result += string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aInt = Integer.parseInt(a, 2);\n        int bInt = Integer.parseInt(b, 2);\n        int xor = aInt ^ bInt;\n        String xorString = Integer.toBinaryString(xor);\n        return xorString.substring(1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aArr = new int[a.length()];\n        int[] bArr = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            aArr[i] = a.charAt(i) - '0';\n            bArr[i] = b.charAt(i) - '0';\n        }\n        int xor = 0;\n        for (int i = 0; i < a.length(); i++) {\n            xor ^= aArr[i] ^ bArr[i];\n        }\n        return String.valueOf(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int aLen = aChars.length;\n        int bLen = bChars.length;\n        int xor = 0;\n        for (int i = 0; i < aLen; i++) {\n            xor ^= aChars[i];\n        }\n        for (int i = 0; i < bLen; i++) {\n            xor ^= bChars[i];\n        }\n        return String.valueOf(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aInt = Integer.parseInt(a, 2);\n        int bInt = Integer.parseInt(b, 2);\n        int xor = aInt ^ bInt;\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aInt = Integer.parseInt(a, 2);\n        int bInt = Integer.parseInt(b, 2);\n        int xor = aInt ^ bInt;\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aInt = Integer.parseInt(a, 2);\n        int bInt = Integer.parseInt(b, 2);\n        int xor = aInt ^ bInt;\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int len = aChar.length;\n        int xor = 0;\n        for (int i = 0; i < len; i++) {\n            xor ^= aChar[i] ^ bChar[i];\n        }\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aInt = Integer.parseInt(a, 2);\n        int bInt = Integer.parseInt(b, 2);\n        int xor = aInt ^ bInt;\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int xor = 0;\n        for (int i = 0; i < aChar.length; i++) {\n            xor ^= aChar[i] ^ bChar[i];\n        }\n        return String.valueOf(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int a_length = a.length();\n        int b_length = b.length();\n        int xor = 0;\n        for (int i = 0; i < a_length; i++) {\n            xor ^= a.charAt(i) ^ b.charAt(i);\n        }\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int lenA = a.length();\n        int lenB = b.length();\n        int len = lenA + lenB;\n        char[] result = new char[len];\n        for (int i = 0; i < len; i++) {\n            if (a.charAt(i) == '1') {\n                result[i] = '0';\n            } else {\n                result[i] = '1';\n            }\n        }\n        return new String(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] a_chars = a.toCharArray();\n        char[] b_chars = b.toCharArray();\n        int a_len = a_chars.length;\n        int b_len = b_chars.length;\n        int xor = 0;\n        for (int i = 0; i < a_len; i++) {\n            xor ^= a_chars[i];\n        }\n        for (int i = 0; i < b_len; i++) {\n            xor ^= b_chars[i];\n        }\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int i = 0;\n        int j = 0;\n        int xor = 0;\n        int len = a.length();\n        StringBuilder sb = new StringBuilder();\n        while(i < len){\n            xor = a.charAt(i) ^ b.charAt(j);\n            sb.append(xor);\n            i++;\n            j++;\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aInt = new int[a.length()];\n        int[] bInt = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            aInt[i] = a.charAt(i) - '0';\n            bInt[i] = b.charAt(i) - '0';\n        }\n        int[] xor = new int[aInt.length];\n        for (int i = 0; i < aInt.length; i++) {\n            xor[i] = aInt[i] ^ bInt[i];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < xor.length; i++) {\n            sb.append(xor[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aInt = Integer.parseInt(a, 2);\n        int bInt = Integer.parseInt(b, 2);\n        return Integer.toBinaryString(aInt ^ bInt);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int aLen = aChars.length;\n        int bLen = bChars.length;\n        int xor = 0;\n        for (int i = 0; i < aLen; i++) {\n            xor ^= aChars[i];\n        }\n        for (int i = 0; i < bLen; i++) {\n            xor ^= bChars[i];\n        }\n        return Integer.toBinaryString(xor).substring(1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aInt = Integer.parseInt(a, 2);\n        int bInt = Integer.parseInt(b, 2);\n        return Integer.toBinaryString(aInt ^ bInt);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int xor = 0;\n        for (int i = 0; i < aChar.length; i++) {\n            xor ^= aChar[i];\n        }\n        for (int i = 0; i < bChar.length; i++) {\n            xor ^= bChar[i];\n        }\n        return Integer.toBinaryString(xor).substring(2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int len = aChars.length;\n        char[] result = new char[len];\n        for (int i = 0; i < len; i++) {\n            result[i] = (aChars[i] ^ bChars[i]) == 1 ? '1' : '0';\n        }\n        return new String(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        int x = a;\n        int y = b;\n        int r = 0;\n        while (x != 0 && y != 0) {\n            r = x % y;\n            x = y;\n            y = r;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = b;\n        b = a % b;\n        a = temp;\n        while (b != 0) {\n            temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a < b) {\n            return greatestCommonDivisor(b, a);\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a % b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int x = a;\n        int y = b;\n        int z = 0;\n        while (x != y) {\n            z = x % y;\n            x = y;\n            y = z;\n        }\n        return z;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int remainder = a % b;\n        return greatestCommonDivisor(b, remainder);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        int temp = b;\n        b = a % b;\n        a = temp;\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a < b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        int i = 0;\n        while (a % b != 0) {\n            i++;\n            a = b;\n            b = a % b;\n        }\n        return a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = b;\n        b = a % b;\n        a = temp;\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = b;\n        b = a % b;\n        a = temp;\n        while (b != 0) {\n            temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp % a;\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp % a;\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        int c = b % a;\n        if (c == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(a, c);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp % a;\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(a, b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp;\n        while (b != 0) {\n            temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = 0; j < string.length() - i; j++) {\n                if (string.charAt(j) == string.charAt(i)) {\n                    prefixes.add(string.substring(0, i + 1));\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) != prefix.charAt(0)) {\n                prefix = string.substring(0, i);\n                prefixes.add(prefix);\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (string.charAt(i) == ' ') {\n                prefixes.add(prefix);\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (string.charAt(i - 1) != prefix.charAt(prefix.length() - 1)) {\n                    prefixes.add(prefix);\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String[] words = string.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String prefix = \"\";\n            for (int j = 0; j < words.length - i; j++) {\n                prefix += words[j];\n                if (j == words.length - 1) {\n                    prefixes.add(prefix);\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (string.charAt(i) == ' ') {\n                prefixes.add(prefix);\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (string.charAt(i - 1) == prefix.charAt(prefix.length() - 1)) {\n                    prefix = prefix.substring(0, prefix.length() - 1);\n                } else {\n                    prefixes.add(prefix);\n                    prefix = \"\";\n                }\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j < string.length(); j++) {\n                if (string.charAt(i) == string.charAt(j)) {\n                    prefixes.add(string.substring(i, j + 1));\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j >= 0; j--) {\n                if (string.charAt(j) == string.charAt(i)) {\n                    prefixes.add(string.substring(0, j + 1));\n                }\n            }\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s = s + \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i < n; i++) {\n            str = str + \" \" + i;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i <= n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result = result + \" \" + i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result = result + \" \" + i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += String.valueOf(i);\n            if (i != n - 1) {\n                result += \" \";\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i < n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i < n; i++) {\n            str += String.valueOf(i) + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += String.valueOf(i) + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += String.valueOf(i) + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i <= n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result = result + \" \" + i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            } else if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c == c.toLowerCase()) {\n                count++;\n            } else {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            } else if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == chars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            } else if (c >= 'A' && c <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        char[] chars = string.toCharArray();\n        HashSet<Character> set = new HashSet<Character>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                set.remove(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            } else if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] != chars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        HashSet<Character> set = new HashSet<Character>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                count++;\n            }\n            set.add(c);\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            } else if (c >= 'A' && c <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c == c.toLowerCase()) {\n                count++;\n            } else {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        char[] chars = string.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (c == c.toLowerCase()) {\n                count++;\n            } else if (c == c.toUpperCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        HashSet<Character> set = new HashSet<Character>();\n        for (char c : string.toCharArray()) {\n            if (set.contains(c)) {\n                set.remove(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            } else if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                list.add(4);\n            } else if (c == '|') {\n                list.add(2);\n            } else if (c == '.') {\n                list.add(1);\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == 'o' || c == '|' || c == '.') {\n                result.add(2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == 'o' || c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                list.add(4);\n            } else if (c == '|') {\n                list.add(2);\n            } else if (c == '.') {\n                list.add(1);\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == 'o' || c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<Integer>();\n        String[] split = string.split(\" \");\n        for (int i = 0; i < split.length; i++) {\n            char c = split[i].charAt(0);\n            if (c == 'o') {\n                list.add(4);\n            } else if (c == 'o' || c == '|' || c == '.') {\n                list.add(2);\n            } else if (c == '|' || c == '|' || c == '|') {\n                list.add(1);\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == 'o' || c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == 'o' || c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == 'o' || c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                end = start + substring.length();\n                count++;\n                start = string.indexOf(substring, end);\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                end = start + substring.length();\n                count++;\n                start = string.indexOf(substring, end);\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                end = start + substring.length();\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                end = start + substring.length();\n                count++;\n                start = string.indexOf(substring, end);\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        int length = substring.length();\n        while (start < string.length()) {\n            end = string.indexOf(substring, start);\n            if (end == -1) {\n                end = string.length();\n            }\n            count += end - start;\n            start = end + length;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                end = start + substring.length();\n                count++;\n                start = string.indexOf(substring, end);\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                end = start + substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        int length = substring.length();\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                end = start + length;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                end = start + substring.length();\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        int length = substring.length();\n        while (start < string.length()) {\n            end = start + length;\n            if (string.substring(start, end).equals(substring)) {\n                count++;\n            }\n            start++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        int length = substring.length();\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                end = start + length;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                end = start + substring.length();\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i];\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        String result = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            result += numbersArray[i];\n            if (i < numbersArray.length - 1) {\n                result += \" \";\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i].charAt(0);\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i];\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i];\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i];\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        // Write your code here\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        // Write your code here\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - min) < Math.abs(num - max)) {\n                closest.add(num);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i) - numbers.get(i + 1);\n            if (diff < 0) {\n                closest.add(numbers.get(i));\n            } else {\n                closest.add(numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - min) < Math.abs(num - max)) {\n                closest.add(num);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i) - numbers.get(i + 1);\n            if (diff < min) {\n                closest.clear();\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i + 1));\n                min = diff;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        Collections.sort(numbers);\n        closest.add(numbers.get(0));\n        closest.add(numbers.get(1));\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        int i = 0;\n        int j = numbers.size() - 1;\n        while (i < j) {\n            if (numbers.get(i) == numbers.get(j)) {\n                i++;\n                j--;\n            } else if (numbers.get(i) > numbers.get(j)) {\n                closest.add(numbers.get(j));\n                j--;\n            } else {\n                closest.add(numbers.get(i));\n                i++;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < min) {\n                    min = diff;\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (num == min) {\n                continue;\n            }\n            double diff = Math.abs(num - min);\n            if (closest.size() == 0 || diff < closest.get(0)) {\n                closest.add(num);\n            } else if (diff < closest.get(1)) {\n                closest.add(num);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < 0) {\n                closest.add(numbers.get(i));\n            } else {\n                closest.add(numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i) - numbers.get(i + 1);\n            if (diff < min) {\n                closest.clear();\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i + 1));\n                min = diff;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i) - numbers.get(i + 1);\n            if (diff < min) {\n                min = diff;\n                closest.clear();\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i + 1));\n            } else if (diff == min) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i) - numbers.get(i + 1);\n            if (diff < 0) {\n                closest.add(numbers.get(i));\n            } else {\n                closest.add(numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (num == min) {\n                continue;\n            }\n            double diff = Math.abs(num - min);\n            if (closest.size() == 0) {\n                closest.add(num);\n                closest.add(num);\n            } else {\n                for (int i = 0; i < closest.size(); i++) {\n                    if (diff < Math.abs(closest.get(i) - num)) {\n                        closest.set(i, num);\n                    }\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.set(0, numbers.get(i));\n                    closest.set(1, numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (Double number : numbers) {\n            if (Math.abs(number - min) < min) {\n                closest.add(number);\n                min = Math.abs(number - min);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < 0) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < Math.abs(closest.get(i) - closest.get(i + 1))) {\n                closest.set(i, numbers.get(i));\n                closest.set(i + 1, numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n                    min = Math.abs(numbers.get(i) - numbers.get(j));\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closestElements = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double current = numbers.get(i);\n            double next = numbers.get(i + 1);\n            if (Math.abs(current - next) < Math.abs(current - closestElements.get(0))) {\n                closestElements.add(current);\n            }\n        }\n        return closestElements;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closestElements = new ArrayList<Double>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (numbers.get(i) < numbers.get(j)) {\n                    closestElements.add(numbers.get(i));\n                    closestElements.add(numbers.get(j));\n                }\n            }\n        }\n        return closestElements;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) / range);\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (Double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must have at least two elements\");\n        }\n        List<Double> result = new ArrayList<>();\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double scale = (max - min) / (numbers.get(numbers.size() - 1) - min);\n        for (Double num : numbers) {\n            result.add(num * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        List<Double> result = new ArrayList<Double>();\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            double number = numbers.get(i);\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            double number = numbers.get(i);\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double range = max - min;\n        for (double num : numbers) {\n            num = (num - min) / range;\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must have at least two elements\");\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        double[] rescaled = new double[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            rescaled[i] = (numbers.get(i) - min) / range;\n        }\n        return Arrays.asList(rescaled);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double range = max - min;\n        for (Double num : numbers) {\n            num = (num - min) / range;\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / (numbers.size() - 1);\n        for (Double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double range = max - min;\n        for (Double num : numbers) {\n            result.add((num - min) / range);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> rescaled = new ArrayList<Double>();\n        for (double number : numbers) {\n            rescaled.add(number * scale);\n        }\n        return rescaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / (numbers.size() - 1);\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / (numbers.size() - 1);\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = max - min;\n        List<Double> rescaled = new ArrayList<Double>();\n        for (Double number : numbers) {\n            rescaled.add(number * scale / min);\n        }\n        return rescaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        for (Double number : numbers) {\n            result.add((number - min) / range);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double scale = (max - min) / 2.0;\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add((number - min) / range);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        for (Double number : numbers) {\n            result.add((number - min) / range);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                if (divisor > largest) {\n                    largest = divisor;\n                }\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest < n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (mid % 2 == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (n % divisor == 0) {\n            largest = divisor;\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                if (divisor > largest) {\n                    largest = divisor;\n                }\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                if (divisor > largest) {\n                    largest = divisor;\n                }\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = n;\n        int min = n;\n        int mid;\n        while (max >= min) {\n            mid = (max + min) / 2;\n            if (mid % n == 0) {\n                max = mid;\n            } else {\n                min = mid;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(i * i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int[] primes = new int[n + 1];\n        primes[0] = 2;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n                for (int j = 2; j * i <= n; j++) {\n                    primes[j * i] = i;\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (primes[i] != 0) {\n                factors.add(primes[i]);\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer number : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number, map.get(number) + 1);\n            } else {\n                map.put(number, 1);\n            }\n        }\n        for (Integer number : map.keySet()) {\n            if (map.get(number) == 1) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer number : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number, map.get(number) + 1);\n            } else {\n                result.add(number);\n                map.put(number, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n                charArray[i] += 32;\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i] -= 32;\n            }\n        }\n        return new String(charArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n                charArray[i] -= 32;\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i] += 32;\n            }\n        }\n        return String.valueOf(charArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n                charArray[i] -= 32;\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i] += 32;\n            }\n        }\n        return new String(charArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n                charArray[i] = (char) (charArray[i] + 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i] = (char) (charArray[i] - 32);\n            }\n        }\n        return new String(charArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2)\n            return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double max = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double max = xs.get(xs.size() - 1);\n        for (int i = 0; i < xs.size() - 1; i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double min = xs.get(0);\n        for (int i = 0; i < xs.size() - 1; i++) {\n            if (xs.get(i) < min) {\n                min = xs.get(i);\n            }\n        }\n        double zero = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                zero = xs.get(i);\n            }\n        }\n        return zero;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) != 0) {\n                result = xs.get(i);\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.size() == 0) {\n            return 0;\n        }\n        double min = xs.get(0);\n        double max = xs.get(xs.size() - 1);\n        double mid = (min + max) / 2;\n        while (Math.abs(mid) > 1e-10) {\n            if (poly(xs, mid) == 0) {\n                return mid;\n            }\n            if (poly(xs, mid) < 0) {\n                max = mid;\n            } else {\n                min = mid;\n            }\n            mid = (min + max) / 2;\n        }\n        return mid;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                return result;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double max = xs.get(xs.size() - 1);\n        for (int i = 0; i < xs.size() - 1; i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                return result;\n            }\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = xs.get(i);\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Double> xs = Arrays.asList(1, 2);\n        System.out.println(findZero(xs));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                return result;\n            }\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double max = 0;\n        for (double x : xs) {\n            if (x > max) {\n                max = x;\n            }\n        }\n        double min = 0;\n        for (double x : xs) {\n            if (x < min) {\n                min = x;\n            }\n        }\n        double delta = max - min;\n        double step = delta / 100;\n        double result = min;\n        for (double x = min; x <= max; x += step) {\n            if (poly(xs, x) == 0) {\n                result = x;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Double> xs = Arrays.asList(1, 2);\n        System.out.println(findZero(xs));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        int n = xs.size();\n        if (n % 2 != 0) {\n            return -1;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (xs.get(i) == max) {\n                return xs.get(i);\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double max = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double min = xs.get(0);\n        for (int i = 1; i < xs.size(); i++) {\n            if (xs.get(i) < min) {\n                min = xs.get(i);\n            }\n        }\n        double zero = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                zero = xs.get(i);\n            }\n        }\n        if (zero == 0) {\n            return -1;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(zero, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.findZero(Arrays.asList(1, 2))); // f(x) = 1 + 2x\n        System.out.println(s.findZero(Arrays.asList(-6, 11, -6, 1))); // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double min = xs.get(0);\n        double max = xs.get(xs.size() - 1);\n        double step = (max - min) / 100;\n        double result = min;\n        while (result < max) {\n            if (poly(xs, result) == 0) {\n                return result;\n            }\n            result += step;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double min = xs.get(0);\n        double max = xs.get(xs.size() - 1);\n        double mid;\n        while (min < max) {\n            mid = (min + max) / 2;\n            if (poly(xs, mid) == 0) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        int n = xs.size();\n        if (n % 2 != 0) {\n            return -1;\n        }\n        double[] coeffs = new double[n];\n        for (int i = 0; i < n; i++) {\n            coeffs[i] = xs.get(i);\n        }\n        double x = 0;\n        for (int i = 0; i < n; i++) {\n            x += coeffs[i] * Math.pow(x, i);\n        }\n        return x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Double> xs = Arrays.asList(1, 2);\n        System.out.println(findZero(xs));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        int n = xs.size();\n        if (n % 2 != 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        double[] coeffs = new double[n];\n        for (int i = 0; i < n; i++) {\n            coeffs[i] = xs.get(i);\n        }\n        double[] roots = new double[n];\n        for (int i = 0; i < n; i++) {\n            roots[i] = -coeffs[i] / (2 * coeffs[i]);\n        }\n        double[] diff = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff[i] = roots[i] - xs.get(i);\n        }\n        double[] diff2 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff2[i] = diff[i] * diff[i];\n        }\n        double[] diff3 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff3[i] = diff2[i] * diff[i];\n        }\n        double[] diff4 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff4[i] = diff3[i] * diff[i];\n        }\n        double[] diff5 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff5[i] = diff4[i] * diff[i];\n        }\n        double[] diff6 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff6[i] = diff5[i] * diff[i];\n        }\n        double[] diff7 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff7[i] = diff6[i] * diff[i];\n        }\n        double[] diff8 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff8[i] = diff7[i] * diff[i];\n        }\n        double[] diff9 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff9[i] = diff8[i] * diff[i];\n        }\n        double[] diff10 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff10[i] = diff9[i] * diff[i];\n        }\n        double[] diff11 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff11[i] = diff10[i] * diff[i];\n        }\n        double[] diff12 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff12[i] = diff11[i] * diff[i];\n        }\n        double[] diff13 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff13[i] = diff12[i] * diff[i];\n        }\n        double[] diff14 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff14[i] = diff13[i] * diff[i];\n        }\n        double[] diff15 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff15[i] = diff14[i] * diff[i];\n        }\n        double[] diff16 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff16[i] = diff15[i] * diff[i];\n        }\n        double[] diff17 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff17[i] = diff16[i] * diff[i];\n        }\n        double[] diff18 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff18[i] = diff17[i] * diff[i];\n        }\n        double[] diff19 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff19[i] = diff18[i] * diff[i];\n        }\n        double[] diff20 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff20[i] = diff19[i] * diff[i];\n        }\n        double[] diff21 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff21[i] = diff20[i] * diff[i];\n        }\n        double[] diff22 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff22[i] = diff21[i] * diff[i];\n        }\n        double[] diff23 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff23[i] = diff22[i] * diff[i];\n        }\n        double[] diff24 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff24[i] = diff23[i] * diff[i];\n        }\n        double[] diff25 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff25[i] = diff24[i] * diff[i];\n        }\n        double[] diff26 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff26[i] = diff25[i] * diff[i];\n        }\n        double[] diff27 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff27[i] = diff26[i] * diff[i];\n        }\n        double[] diff28 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff28[i] = diff27[i] * diff[i];\n        }\n        double[] diff29 = new double[n];\n        for (int i = 0; i < n; i++) {\n            diff29[i] = diff28[i] * diff[i];\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        int n = xs.size() / 2;\n        double[] coeffs = new double[n];\n        for (int i = 0; i < n; i++) {\n            coeffs[i] = xs.get(i);\n        }\n        double[] roots = new double[n];\n        for (int i = 0; i < n; i++) {\n            roots[i] = poly(coeffs, -1 * coeffs[i]);\n        }\n        double result = roots[0];\n        for (int i = 1; i < n; i++) {\n            if (roots[i] != 0) {\n                result = roots[i];\n                break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l3);\n        return l3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l3);\n        return l3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        return l1.equals(l2) ? l1 : l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l3);\n        return l3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        return Arrays.asList(l1.get(0), l2.get(0), l3.get(0));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l3);\n        return l3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (Integer i : l) {\n            if (!seen.contains(i)) {\n                seen.add(i);\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> unique = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (unique.indexOf(l.get(i)) == -1) {\n                unique.add(l.get(i));\n            }\n        }\n        return unique;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        List<Integer> res = new ArrayList<Integer>();\n        for (Integer i : l) {\n            if (!s.contains(i)) {\n                s.add(i);\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!seen.contains(l.get(i))) {\n                result.add(l.get(i));\n                seen.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!seen.contains(l.get(i))) {\n                seen.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        for (int i : l) {\n            if (!seen.contains(i)) {\n                result.add(i);\n                seen.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!seen.contains(l.get(i))) {\n                seen.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> unique = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l) {\n            if (!set.contains(i)) {\n                unique.add(i);\n                set.add(i);\n            }\n        }\n        return unique;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (Integer i : l) {\n            if (!seen.contains(i)) {\n                result.add(i);\n                seen.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (Integer i : l) {\n            if (!seen.add(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (Integer i : l) {\n            if (!seen.contains(i)) {\n                result.add(i);\n                seen.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> unique = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                unique.add(i);\n                set.add(i);\n            }\n        }\n        return unique;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!seen.contains(l.get(i))) {\n                result.add(l.get(i));\n                seen.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> seen = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!seen.contains(l.get(i))) {\n                result.add(l.get(i));\n                seen.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        while (n > 0) {\n            if (n % 11 == 7) {\n                count++;\n            }\n            if (n % 13 == 7) {\n                count++;\n            }\n            n = n / 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7) {\n                count++;\n            } else if (i % 11 == 13) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 11 == 13) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> lEven = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                lEven.add(l.get(i));\n            }\n        }\n        return lEven;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        Solution solution = new Solution();\n        System.out.println(solution.encodeCyclic(s));\n        System.out.println(solution.decodeCyclic(solution.encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().encodeCyclic(\"1234567890\"));\n        System.out.println(new Solution().decodeCyclic(\"1234567890\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeCyclic(\"aab\"));\n        System.out.println(s.decodeCyclic(\"aab\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse each group.\n        for (int i = 0; i < groups.size(); i++) {\n            groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n        }\n        // join encoded string back to original string.\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().encodeCyclic(\"aab\"));\n        System.out.println(new Solution().decodeCyclic(\"aab\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeCyclic(\"a\"));\n        System.out.println(s.decodeCyclic(\"a\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabcc\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        Solution sol = new Solution();\n        System.out.println(sol.encodeCyclic(s));\n        System.out.println(sol.decodeCyclic(sol.encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        Solution sol = new Solution();\n        System.out.println(sol.encodeCyclic(s));\n        System.out.println(sol.decodeCyclic(sol.encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabcc\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().encodeCyclic(\"a\"));\n        System.out.println(new Solution().decodeCyclic(\"a\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n + 1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n                for (int j = 2; j <= n; j++) {\n                    if (i % j == 0) {\n                        primes[j] = 0;\n                        break;\n                    }\n                }\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 1;\n        int a = 1;\n        int b = 1;\n        int c = 2;\n        int d = 1;\n        for(int i = 2; i <= n; i++) {\n            a = b;\n            b = c;\n            c = a + b;\n            d = c + d;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1)\n            return 2;\n        if (n == 2)\n            return 3;\n        int a = 1, b = 2, c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        int p = 2;\n        int q = 1;\n        int r = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                q = r;\n                r = n / p;\n            } else {\n                p++;\n            }\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n + 1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n                for (int j = 0; j < i; j++) {\n                    if (primes[j] == 0) {\n                        primes[i] = j + 1;\n                        break;\n                    }\n                }\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        if (n == 3) {\n            return 5;\n        }\n        int a = 1, b = 2, c = 1;\n        for (int i = 4; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if(n == 1 || n == 2)\n            return n;\n        int a = 1, b = 1, c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n + 1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n                for (int j = 0; j < i; j++) {\n                    if (primes[j] == i) {\n                        primes[i] = 1;\n                    }\n                }\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0, b = 1, c = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 1;\n        int b = 2;\n        int c = 1;\n        int d = 2;\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = a + b;\n            a = b;\n            b = c;\n            c = d;\n            d = ans;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 1, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1)\n            return n;\n        int a = 1, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1 || n == 2) {\n            return n;\n        }\n        int a = 1, b = 1, c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 1, d = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                count++;\n            }\n        }\n        if (count == 3) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        if (set.size() == 3) {\n            for (Integer i : set) {\n                if (set.contains(i) && set.contains(-i) && set.contains(i * -1)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        // write your code here\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if(sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for(int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if(diff == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.contains(l.get(i))) {\n                return false;\n            }\n            set.add(l.get(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            set.add(l.get(i));\n        }\n        if (set.size() == 3) {\n            for (int i = 0; i < l.size(); i++) {\n                if (l.get(i) == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        if (set.size() == 3) {\n            for (Integer i : set) {\n                if (set.contains(i) && set.contains(-i) && set.contains(i + i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        Arrays.sort(left);\n        Arrays.sort(right);\n        for (int i = 0; i < n; i++) {\n            if (left[i] < right[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while(left < right) {\n            if(left % 2 == 0 && right % 2 == 1) {\n                count++;\n            }\n            if(left % 2 == 1 && right % 2 == 0) {\n                count++;\n            }\n            left++;\n            right--;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n\n        Arrays.sort(left);\n        Arrays.sort(right);\n\n        for (int i = 0; i < n; i++) {\n            if (left[i] == right[i]) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        Arrays.sort(left);\n        Arrays.sort(right);\n        for (int i = 0; i < n; i++) {\n            if (left[i] < right[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    if (i + j == n - 1) {\n                        count++;\n                    }\n                } else {\n                    if (i + j == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for(int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        Arrays.sort(left);\n        Arrays.sort(right);\n        for(int i = 0; i < n; i++) {\n            if(left[i] > right[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            if (left % 2 == 0) {\n                left++;\n            } else {\n                right--;\n            }\n            if (left % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    if (i < j) {\n                        if (i + j == n - 1) {\n                            count++;\n                        }\n                    } else {\n                        if (i + j == 0) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n\n        Arrays.sort(left);\n        Arrays.sort(right);\n\n        for (int i = 0; i < n; i++) {\n            if (left[i] == right[i]) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = 0;\n        int car = 0;\n        int speed = 0;\n        int direction = 0;\n        int leftSpeed = 0;\n        int rightSpeed = 0;\n        int leftDirection = 0;\n        int rightDirection = 0;\n        int leftCollision = 0;\n        int rightCollision = 0;\n        int leftCollisionCount = 0;\n        int rightCollisionCount = 0;\n        int leftCollisionDirection = 0;\n        int rightCollisionDirection = 0;\n        int leftCollisionSpeed = 0;\n        int rightCollisionSpeed = 0;\n        int leftCollisionSpeedDirection = 0;\n        int rightCollisionSpeedDirection = 0;\n        int leftCollisionSpeedCount = 0;\n        int rightCollisionSpeedCount = 0;\n        int leftCollisionSpeedDirectionCount = 0;\n        int rightCollisionSpeedDirectionCount = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollisionSpeedCountDirection = 0;\n        int leftCollisionSpeedCountDirection = 0;\n        int rightCollision", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    if (i < j) {\n                        if (i + j == n - 1) {\n                            count++;\n                        }\n                    } else {\n                        if (i + j == 0) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        Arrays.sort(left);\n        Arrays.sort(right);\n        for (int i = 0; i < n; i++) {\n            if (left[i] == right[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = 0;\n        for (int i = 0; i < n; i++) {\n            if (left == right) {\n                left++;\n            } else {\n                count++;\n                left = 0;\n                right++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            if (left % 2 == 0) {\n                left++;\n            } else {\n                right--;\n            }\n            if (left % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        return diff == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) == sum) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int n = l.size();\n        if (n < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        int diff = 0;\n        for (int i = 0; i < n; i++) {\n            diff += l.get(i) - sum;\n        }\n        if (diff == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) == sum) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // write your code here\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) == sum) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            if (set.contains(i)) {\n                return false;\n            }\n            set.add(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.contains(l.get(i))) {\n                return false;\n            }\n            set.add(l.get(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == sum) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while (x != 0) {\n            str = (char) (x % base) + str;\n            x /= base;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        int i = 0;\n        while (x > 0) {\n            int rem = x % base;\n            x = x / base;\n            str = rem + str;\n            i++;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while (x != 0) {\n            str = (char) ((x % base) + '0') + str;\n            x /= base;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        int count = 0;\n        while (x != 0) {\n            count++;\n            x = x / base;\n        }\n        for (int i = count - 1; i >= 0; i--) {\n            str = (char) (x % base + '0') + str;\n            x = x / base;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) ((x % base) + '0') + result;\n            x /= base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while(x != 0) {\n            str = (char)(x % base + '0') + str;\n            x /= base;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while (x != 0) {\n            int rem = x % base;\n            x = x / base;\n            str = rem + str;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        int len = str.length();\n        StringBuilder sb = new StringBuilder();\n        for (int i = len - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            result = result * base + sb.charAt(i) - '0';\n        }\n        return Integer.toBinaryString(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        int i = 0;\n        while (x != 0) {\n            int rem = x % base;\n            x = x / base;\n            str = rem + str;\n            i++;\n        }\n        if (i == 0) {\n            return str;\n        }\n        return str.substring(str.length() - i, str.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while (x != 0) {\n            str = (char) (x % base + '0') + str;\n            x = x / base;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while (x != 0) {\n            int rem = x % base;\n            x = x / base;\n            str = rem + str;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while (x != 0) {\n            str = (char) ((x % base) + '0') + str;\n            x = x / base;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        return str.substring(str.length() - 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        int i = 0;\n        while(x != 0) {\n            int rem = x % base;\n            x = x / base;\n            str = rem + str;\n            i++;\n        }\n        if(i == 0) {\n            return str;\n        }\n        return str.substring(str.length() - i);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a * h / 2;\n        return area;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = (a * h) / 2;\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 0) {\n            return 0;\n        }\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            d = b;\n            a = b;\n            b = c;\n            d = c;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 0;\n        }\n        if (n == 5) {\n            return 1;\n        }\n        if (n == 6) {\n            return 0;\n        }\n        if (n == 7) {\n            return 0;\n        }\n        if (n == 8) {\n            return 0;\n        }\n        if (n == 9) {\n            return 0;\n        }\n        if (n == 10) {\n            return 0;\n        }\n        if (n == 11) {\n            return 0;\n        }\n        if (n == 12) {\n            return 0;\n        }\n        if (n == 13) {\n            return 0;\n        }\n        if (n == 14) {\n            return 0;\n        }\n        if (n == 15) {\n            return 0;\n        }\n        if (n == 16) {\n            return 0;\n        }\n        if (n == 17) {\n            return 0;\n        }\n        if (n == 18) {\n            return 0;\n        }\n        if (n == 19) {\n            return 0;\n        }\n        if (n == 20) {\n            return 0;\n        }\n        if (n == 21) {\n            return 0;\n        }\n        if (n == 22) {\n            return 0;\n        }\n        if (n == 23) {\n            return 0;\n        }\n        if (n == 24) {\n            return 0;\n        }\n        if (n == 25) {\n            return 0;\n        }\n        if (n == 26) {\n            return 0;\n        }\n        if (n == 27) {\n            return 0;\n        }\n        if (n == 28) {\n            return 0;\n        }\n        if (n == 29) {\n            return 0;\n        }\n        if (n == 30) {\n            return 0;\n        }\n        if (n == 31) {\n            return 0;\n        }\n        if (n == 32) {\n            return 0;\n        }\n        if (n == 33) {\n            return 0;\n        }\n        if (n == 34) {\n            return 0;\n        }\n        if (n == 35) {\n            return 0;\n        }\n        if (n == 36) {\n            return 0;\n        }\n        if (n == 37) {\n            return 0;\n        }\n        if (n == 38) {\n            return 0;\n        }\n        if (n == 39) {\n            return 0;\n        }\n        if (n == 40) {\n            return 0;\n        }\n        if (n == 41) {\n            return 0;\n        }\n        if (n == 42) {\n            return 0;\n        }\n        if (n == 43) {\n            return 0;\n        }\n        if (n == 44) {\n            return 0;\n        }\n        if (n == 45) {\n            return 0;\n        }\n        if (n == 46) {\n            return 0;\n        }\n        if (n == 47) {\n            return 0;\n        }\n        if (n == 48) {\n            return 0;\n        }\n        if (n == 49) {\n            return 0;\n        }\n        if (n == 50) {\n            return 0;\n        }\n        if (n == 51) {\n            return 0;\n        }\n        if (n == 52) {\n            return 0;\n        }\n        if (n == 53) {\n            return 0;\n        }\n        if (n == 54) {\n            return 0;\n        }\n        if (n == 55) {\n            return 0;\n        }\n        if (n == 56) {\n            return 0;\n        }\n        if (n == 57) {\n            return 0;\n        }\n        if (n == 58) {\n            return 0;\n        }\n        if (n == 59) {\n            return 0;\n        }\n        if (n == 60) {\n            return 0;\n        }\n        if (n == 61) {\n            return 0;\n        }\n        if (n == 62) {\n            return 0;\n        }\n        if (n == 63) {\n            return 0;\n        }\n        if (n == 64) {\n            return 0;\n        }\n        if (n == 65) {\n            return 0;\n        }\n        if (n == 66) {\n            return 0;\n        }\n        if (n == 67) {\n            return 0;\n        }\n        if (n == 68) {\n            return 0;\n        }\n        if (n == 69) {\n            return 0;\n        }\n        if (n == 70) {\n            return 0;\n        }\n        if (n == 71) {\n            return 0;\n        }\n        if (n == 72) {\n            return 0;\n        }\n        if (n == 73) {\n            return 0;\n        }\n        if (n == 74) {\n            return 0;\n        }\n        if (n == 75) {\n            return 0;\n        }\n        if (n == 76) {\n            return 0;\n        }\n        if (n == 77) {\n            return 0;\n        }\n        if (n == 78) {\n            return 0;\n        }\n        if (n == 79) {\n            return 0;\n        }\n        if (n == 80) {\n            return 0;\n        }\n        if (n == 81) {\n            return 0;\n        }\n        if (n == 82) {\n            return 0;\n        }\n        if (n == 83) {\n            return 0;\n        }\n        if (n == 84) {\n            return 0;\n        }\n        if (n == 85) {\n            return 0;\n        }\n        if (n == 86) {\n            return 0;\n        }\n        if (n == 87) {\n            return 0;\n        }\n        if (n == 88) {\n            return 0;\n        }\n        if (n == 89) {\n            return 0;\n        }\n        if (n == 90) {\n            return 0;\n        }\n        if (n == 91) {\n            return 0;\n        }\n        if (n == 92) {\n            return 0;\n        }\n        if (n == 93) {\n            return 0;\n        }\n        if (n == 94) {\n            return 0;\n        }\n        if (n == 95) {\n            return 0;\n        }\n        if (n == 96) {\n            return 0;\n        }\n        if (n == 97) {\n            return 0;\n        }\n        if (n == 98) {\n            return 0;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 8;\n        }\n        if (n == 6) {\n            return 13;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 34;\n        }\n        if (n == 9) {\n            return 55;\n        }\n        if (n == 10) {\n            return 89;\n        }\n        if (n == 11) {\n            return 144;\n        }\n        if (n == 12) {\n            return 233;\n        }\n        if (n == 13) {\n            return 377;\n        }\n        if (n == 14) {\n            return 610;\n        }\n        if (n == 15) {\n            return 987;\n        }\n        if (n == 16) {\n            return 1597;\n        }\n        if (n == 17) {\n            return 2584;\n        }\n        if (n == 18) {\n            return 4181;\n        }\n        if (n == 19) {\n            return 6765;\n        }\n        if (n == 20) {\n            return 10946;\n        }\n        if (n == 21) {\n            return 17711;\n        }\n        if (n == 22) {\n            return 28657;\n        }\n        if (n == 23) {\n            return 46368;\n        }\n        if (n == 24) {\n            return 75025;\n        }\n        if (n == 25) {\n            return 121393;\n        }\n        if (n == 26) {\n            return 196418;\n        }\n        if (n == 27) {\n            return 317811;\n        }\n        if (n == 28) {\n            return 514229;\n        }\n        if (n == 29) {\n            return 832040;\n        }\n        if (n == 30) {\n            return 1346269;\n        }\n        if (n == 31) {\n            return 2178309;\n        }\n        if (n == 32) {\n            return 3524578;\n        }\n        if (n == 33) {\n            return 5702887;\n        }\n        if (n == 34) {\n            return 8905776;\n        }\n        if (n == 35) {\n            return 14229393;\n        }\n        if (n == 36) {\n            return 23090200;\n        }\n        if (n == 37) {\n            return 37701808;\n        }\n        if (n == 38) {\n            return 62044017;\n        }\n        if (n == 39) {\n            return 98737176;\n        }\n        if (n == 40) {\n            return 150000000;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22;\n        }\n        if (n == 23) {\n            return 23;\n        }\n        if (n == 24) {\n            return 24;\n        }\n        if (n == 25) {\n            return 25;\n        }\n        if (n == 26) {\n            return 26;\n        }\n        if (n == 27) {\n            return 27;\n        }\n        if (n == 28) {\n            return 28;\n        }\n        if (n == 29) {\n            return 29;\n        }\n        if (n == 30) {\n            return 30;\n        }\n        if (n == 31) {\n            return 31;\n        }\n        if (n == 32) {\n            return 32;\n        }\n        if (n == 33) {\n            return 33;\n        }\n        if (n == 34) {\n            return 34;\n        }\n        if (n == 35) {\n            return 35;\n        }\n        if (n == 36) {\n            return 36;\n        }\n        if (n == 37) {\n            return 37;\n        }\n        if (n == 38) {\n            return 38;\n        }\n        if (n == 39) {\n            return 39;\n        }\n        if (n == 40) {\n            return 40;\n        }\n        if (n == 41) {\n            return 41;\n        }\n        if (n == 42) {\n            return 42;\n        }\n        if (n == 43) {\n            return 43;\n        }\n        if (n == 44) {\n            return 44;\n        }\n        if (n == 45) {\n            return 45;\n        }\n        if (n == 46) {\n            return 46;\n        }\n        if (n == 47) {\n            return 47;\n        }\n        if (n == 48) {\n            return 48;\n        }\n        if (n == 49) {\n            return 49;\n        }\n        if (n == 50) {\n            return 50;\n        }\n        if (n == 51) {\n            return 51;\n        }\n        if (n == 52) {\n            return 52;\n        }\n        if (n == 53) {\n            return 53;\n        }\n        if (n == 54) {\n            return 54;\n        }\n        if (n == 55) {\n            return 55;\n        }\n        if (n == 56) {\n            return 56;\n        }\n        if (n == 57) {\n            return 57;\n        }\n        if (n == 58) {\n            return 58;\n        }\n        if (n == 59) {\n            return 59;\n        }\n        if (n == 60) {\n            return 60;\n        }\n        if (n == 61) {\n            return 61;\n        }\n        if (n == 62) {\n            return 62;\n        }\n        if (n == 63) {\n            return 63;\n        }\n        if (n == 64) {\n            return 64;\n        }\n        if (n == 65) {\n            return 65;\n        }\n        if (n == 66) {\n            return 66;\n        }\n        if (n == 67) {\n            return 67;\n        }\n        if (n == 68) {\n            return 68;\n        }\n        if (n == 69) {\n            return 69;\n        }\n        if (n == 70) {\n            return 70;\n        }\n        if (n == 71) {\n            return 71;\n        }\n        if (n == 72) {\n            return 72;\n        }\n        if (n == 73) {\n            return 73;\n        }\n        if (n == 74) {\n            return 74;\n        }\n        if (n == 75) {\n            return 75;\n        }\n        if (n == 76) {\n            return 76;\n        }\n        if (n == 77) {\n            return 77;\n        }\n        if (n == 78) {\n            return 78;\n        }\n        if (n == 79) {\n            return 79;\n        }\n        if (n == 80) {\n            return 80;\n        }\n        if (n == 81) {\n            return 81;\n        }\n        if (n == 82) {\n            return 82;\n        }\n        if (n == 83) {\n            return 83;\n        }\n        if (n == 84) {\n            return 84;\n        }\n        if (n == 85) {\n            return 85;\n        }\n        if (n == 86) {\n            return 86;\n        }\n        if (n == 87) {\n            return 87;\n        }\n        if (n == 88) {\n            return 88;\n        }\n        if (n == 89) {\n            return 89;\n        }\n        if (n == 90) {\n            return 90;\n        }\n        if (n == 91) {\n            return 91;\n        }\n        if (n == 92) {\n            return 92;\n        }\n        if (n == 93) {\n            return 93;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 0) {\n            return 0;\n        }\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n            d = c + d;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 1, d = 0;\n        for (int i = 0; i < n - 2; i++) {\n            d = a + b;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 0;\n        }\n        if (n == 5) {\n            return 1;\n        }\n        if (n == 6) {\n            return 0;\n        }\n        if (n == 7) {\n            return 0;\n        }\n        if (n == 8) {\n            return 0;\n        }\n        if (n == 9) {\n            return 0;\n        }\n        if (n == 10) {\n            return 0;\n        }\n        if (n == 11) {\n            return 0;\n        }\n        if (n == 12) {\n            return 0;\n        }\n        if (n == 13) {\n            return 0;\n        }\n        if (n == 14) {\n            return 0;\n        }\n        if (n == 15) {\n            return 0;\n        }\n        if (n == 16) {\n            return 0;\n        }\n        if (n == 17) {\n            return 0;\n        }\n        if (n == 18) {\n            return 0;\n        }\n        if (n == 19) {\n            return 0;\n        }\n        if (n == 20) {\n            return 0;\n        }\n        if (n == 21) {\n            return 0;\n        }\n        if (n == 22) {\n            return 0;\n        }\n        if (n == 23) {\n            return 0;\n        }\n        if (n == 24) {\n            return 0;\n        }\n        if (n == 25) {\n            return 0;\n        }\n        if (n == 26) {\n            return 0;\n        }\n        if (n == 27) {\n            return 0;\n        }\n        if (n == 28) {\n            return 0;\n        }\n        if (n == 29) {\n            return 0;\n        }\n        if (n == 30) {\n            return 0;\n        }\n        if (n == 31) {\n            return 0;\n        }\n        if (n == 32) {\n            return 0;\n        }\n        if (n == 33) {\n            return 0;\n        }\n        if (n == 34) {\n            return 0;\n        }\n        if (n == 35) {\n            return 0;\n        }\n        if (n == 36) {\n            return 0;\n        }\n        if (n == 37) {\n            return 0;\n        }\n        if (n == 38) {\n            return 0;\n        }\n        if (n == 39) {\n            return 0;\n        }\n        if (n == 40) {\n            return 0;\n        }\n        if (n == 41) {\n            return 0;\n        }\n        if (n == 42) {\n            return 0;\n        }\n        if (n == 43) {\n            return 0;\n        }\n        if (n == 44) {\n            return 0;\n        }\n        if (n == 45) {\n            return 0;\n        }\n        if (n == 46) {\n            return 0;\n        }\n        if (n == 47) {\n            return 0;\n        }\n        if (n == 48) {\n            return 0;\n        }\n        if (n == 49) {\n            return 0;\n        }\n        if (n == 50) {\n            return 0;\n        }\n        if (n == 51) {\n            return 0;\n        }\n        if (n == 52) {\n            return 0;\n        }\n        if (n == 53) {\n            return 0;\n        }\n        if (n == 54) {\n            return 0;\n        }\n        if (n == 55) {\n            return 0;\n        }\n        if (n == 56) {\n            return 0;\n        }\n        if (n == 57) {\n            return 0;\n        }\n        if (n == 58) {\n            return 0;\n        }\n        if (n == 59) {\n            return 0;\n        }\n        if (n == 60) {\n            return 0;\n        }\n        if (n == 61) {\n            return 0;\n        }\n        if (n == 62) {\n            return 0;\n        }\n        if (n == 63) {\n            return 0;\n        }\n        if (n == 64) {\n            return 0;\n        }\n        if (n == 65) {\n            return 0;\n        }\n        if (n == 66) {\n            return 0;\n        }\n        if (n == 67) {\n            return 0;\n        }\n        if (n == 68) {\n            return 0;\n        }\n        if (n == 69) {\n            return 0;\n        }\n        if (n == 70) {\n            return 0;\n        }\n        if (n == 71) {\n            return 0;\n        }\n        if (n == 72) {\n            return 0;\n        }\n        if (n == 73) {\n            return 0;\n        }\n        if (n == 74) {\n            return 0;\n        }\n        if (n == 75) {\n            return 0;\n        }\n        if (n == 76) {\n            return 0;\n        }\n        if (n == 77) {\n            return 0;\n        }\n        if (n == 78) {\n            return 0;\n        }\n        if (n == 79) {\n            return 0;\n        }\n        if (n == 80) {\n            return 0;\n        }\n        if (n == 81) {\n            return 0;\n        }\n        if (n == 82) {\n            return 0;\n        }\n        if (n == 83) {\n            return 0;\n        }\n        if (n == 84) {\n            return 0;\n        }\n        if (n == 85) {\n            return 0;\n        }\n        if (n == 86) {\n            return 0;\n        }\n        if (n == 87) {\n            return 0;\n        }\n        if (n == 88) {\n            return 0;\n        }\n        if (n == 89) {\n            return 0;\n        }\n        if (n == 90) {\n            return 0;\n        }\n        if (n == 91) {\n            return 0;\n        }\n        if (n == 92) {\n            return 0;\n        }\n        if (n == 93) {\n            return 0;\n        }\n        if (n == 94) {\n            return 0;\n        }\n        if (n == 95) {\n            return 0;\n        }\n        if (n == 96) {\n            return 0;\n        }\n        if (n == 97) {\n            return 0;\n        }\n        if (n == 98) {\n            return 0;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22;\n        }\n        if (n == 23) {\n            return 23;\n        }\n        if (n == 24) {\n            return 24;\n        }\n        if (n == 25) {\n            return 25;\n        }\n        if (n == 26) {\n            return 26;\n        }\n        if (n == 27) {\n            return 27;\n        }\n        if (n == 28) {\n            return 28;\n        }\n        if (n == 29) {\n            return 29;\n        }\n        if (n == 30) {\n            return 30;\n        }\n        if (n == 31) {\n            return 31;\n        }\n        if (n == 32) {\n            return 32;\n        }\n        if (n == 33) {\n            return 33;\n        }\n        if (n == 34) {\n            return 34;\n        }\n        if (n == 35) {\n            return 35;\n        }\n        if (n == 36) {\n            return 36;\n        }\n        if (n == 37) {\n            return 37;\n        }\n        if (n == 38) {\n            return 38;\n        }\n        if (n == 39) {\n            return 39;\n        }\n        if (n == 40) {\n            return 40;\n        }\n        if (n == 41) {\n            return 41;\n        }\n        if (n == 42) {\n            return 42;\n        }\n        if (n == 43) {\n            return 43;\n        }\n        if (n == 44) {\n            return 44;\n        }\n        if (n == 45) {\n            return 45;\n        }\n        if (n == 46) {\n            return 46;\n        }\n        if (n == 47) {\n            return 47;\n        }\n        if (n == 48) {\n            return 48;\n        }\n        if (n == 49) {\n            return 49;\n        }\n        if (n == 50) {\n            return 50;\n        }\n        if (n == 51) {\n            return 51;\n        }\n        if (n == 52) {\n            return 52;\n        }\n        if (n == 53) {\n            return 53;\n        }\n        if (n == 54) {\n            return 54;\n        }\n        if (n == 55) {\n            return 55;\n        }\n        if (n == 56) {\n            return 56;\n        }\n        if (n == 57) {\n            return 57;\n        }\n        if (n == 58) {\n            return 58;\n        }\n        if (n == 59) {\n            return 59;\n        }\n        if (n == 60) {\n            return 60;\n        }\n        if (n == 61) {\n            return 61;\n        }\n        if (n == 62) {\n            return 62;\n        }\n        if (n == 63) {\n            return 63;\n        }\n        if (n == 64) {\n            return 64;\n        }\n        if (n == 65) {\n            return 65;\n        }\n        if (n == 66) {\n            return 66;\n        }\n        if (n == 67) {\n            return 67;\n        }\n        if (n == 68) {\n            return 68;\n        }\n        if (n == 69) {\n            return 69;\n        }\n        if (n == 70) {\n            return 70;\n        }\n        if (n == 71) {\n            return 71;\n        }\n        if (n == 72) {\n            return 72;\n        }\n        if (n == 73) {\n            return 73;\n        }\n        if (n == 74) {\n            return 74;\n        }\n        if (n == 75) {\n            return 75;\n        }\n        if (n == 76) {\n            return 76;\n        }\n        if (n == 77) {\n            return 77;\n        }\n        if (n == 78) {\n            return 78;\n        }\n        if (n == 79) {\n            return 79;\n        }\n        if (n == 80) {\n            return 80;\n        }\n        if (n == 81) {\n            return 81;\n        }\n        if (n == 82) {\n            return 82;\n        }\n        if (n == 83) {\n            return 83;\n        }\n        if (n == 84) {\n            return 84;\n        }\n        if (n == 85) {\n            return 85;\n        }\n        if (n == 86) {\n            return 86;\n        }\n        if (n == 87) {\n            return 87;\n        }\n        if (n == 88) {\n            return 88;\n        }\n        if (n == 89) {\n            return 89;\n        }\n        if (n == 90) {\n            return 90;\n        }\n        if (n == 91) {\n            return 91;\n        }\n        if (n == 92) {\n            return 92;\n        }\n        if (n == 93) {\n            return 93;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 8;\n        }\n        if (n == 6) {\n            return 13;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 34;\n        }\n        if (n == 9) {\n            return 55;\n        }\n        if (n == 10) {\n            return 89;\n        }\n        if (n == 11) {\n            return 144;\n        }\n        if (n == 12) {\n            return 233;\n        }\n        if (n == 13) {\n            return 377;\n        }\n        if (n == 14) {\n            return 610;\n        }\n        if (n == 15) {\n            return 987;\n        }\n        if (n == 16) {\n            return 1597;\n        }\n        if (n == 17) {\n            return 2584;\n        }\n        if (n == 18) {\n            return 4181;\n        }\n        if (n == 19) {\n            return 6765;\n        }\n        if (n == 20) {\n            return 10946;\n        }\n        if (n == 21) {\n            return 17711;\n        }\n        if (n == 22) {\n            return 28657;\n        }\n        if (n == 23) {\n            return 46368;\n        }\n        if (n == 24) {\n            return 75025;\n        }\n        if (n == 25) {\n            return 121393;\n        }\n        if (n == 26) {\n            return 196418;\n        }\n        if (n == 27) {\n            return 317811;\n        }\n        if (n == 28) {\n            return 514229;\n        }\n        if (n == 29) {\n            return 832040;\n        }\n        if (n == 30) {\n            return 1346269;\n        }\n        if (n == 31) {\n            return 2178309;\n        }\n        if (n == 32) {\n            return 3524578;\n        }\n        if (n == 33) {\n            return 5702887;\n        }\n        if (n == 34) {\n            return 8922206;\n        }\n        if (n == 35) {\n            return 14473314;\n        }\n        if (n == 36) {\n            return 24707373;\n        }\n        if (n == 37) {\n            return 39042733;\n        }\n        if (n == 38) {\n            return 65537432;\n        }\n        if (n == 39) {\n            return 106490322;\n        }\n        if (n == 40) {\n            return 171673170;\n        }\n        if (n == 41) {\n            return 277776766;\n        }\n        if (n == 42) {\n            return 439420931;\n        }\n        if (n == 43) {\n            return 702585842;\n        }\n        if (n == 44) {\n            return 1138343274;\n        }\n        if (n == 45) {\n            return 1836693965;\n        }\n        if (n == 46) {\n            return 2971484157;\n        }\n        if (n == 47) {\n            return 4800505601;\n        }\n        if (n == 48) {\n            return 7777777777;\n        }\n        if (n == 49) {\n            return 12200000000;\n        }\n        if (n == 50) {\n            return 19600000000;\n        }\n        if (n == 51) {\n            return 31711111111;\n        }\n        if (n == 52) {\n            return 51444444444;\n        }\n        if (n == 53) {\n            return 83288888888;\n        }\n        if (n == 54) {\n            return 134765555555;\n        }\n        if (n == 55) {\n            return 217977777777;\n        }\n        if (n == 56) {\n            return 352555555555;\n        }\n        if (n == 57) {\n            return 570333333333;\n        }\n        if (n == 58) {\n            return 892222222222;\n        }\n        if (n == 59) {\n            return 1447333333333;\n        }\n        if (n == 60) {\n            return 2470733333333;\n        }\n        if (n == 61) {\n            return 3904222222222;\n        }\n        if (n == 62) {\n            return 6553733333333;\n        }\n        if (n == 63) {\n            return 1064902222222;\n        }\n        if (n == 64) {\n            return 1716731111111;\n        }\n        if (n == 65) {\n            return 2777766666666;\n        }\n        if (n == 66) {\n            return 4394208888888;\n        }\n        if (n == 67) {\n            return 7025857777777;\n        }\n        if (n == 68) {\n            return 11383431111111;\n        }\n        if (n == 69) {\n            return 18366929999999;\n        }\n        if (n == 70) {\n            return 29714839999999;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            d = b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22;\n        }\n        if (n == 23) {\n            return 23;\n        }\n        if (n == 24) {\n            return 24;\n        }\n        if (n == 25) {\n            return 25;\n        }\n        if (n == 26) {\n            return 26;\n        }\n        if (n == 27) {\n            return 27;\n        }\n        if (n == 28) {\n            return 28;\n        }\n        if (n == 29) {\n            return 29;\n        }\n        if (n == 30) {\n            return 30;\n        }\n        if (n == 31) {\n            return 31;\n        }\n        if (n == 32) {\n            return 32;\n        }\n        if (n == 33) {\n            return 33;\n        }\n        if (n == 34) {\n            return 34;\n        }\n        if (n == 35) {\n            return 35;\n        }\n        if (n == 36) {\n            return 36;\n        }\n        if (n == 37) {\n            return 37;\n        }\n        if (n == 38) {\n            return 38;\n        }\n        if (n == 39) {\n            return 39;\n        }\n        if (n == 40) {\n            return 40;\n        }\n        if (n == 41) {\n            return 41;\n        }\n        if (n == 42) {\n            return 42;\n        }\n        if (n == 43) {\n            return 43;\n        }\n        if (n == 44) {\n            return 44;\n        }\n        if (n == 45) {\n            return 45;\n        }\n        if (n == 46) {\n            return 46;\n        }\n        if (n == 47) {\n            return 47;\n        }\n        if (n == 48) {\n            return 48;\n        }\n        if (n == 49) {\n            return 49;\n        }\n        if (n == 50) {\n            return 50;\n        }\n        if (n == 51) {\n            return 51;\n        }\n        if (n == 52) {\n            return 52;\n        }\n        if (n == 53) {\n            return 53;\n        }\n        if (n == 54) {\n            return 54;\n        }\n        if (n == 55) {\n            return 55;\n        }\n        if (n == 56) {\n            return 56;\n        }\n        if (n == 57) {\n            return 57;\n        }\n        if (n == 58) {\n            return 58;\n        }\n        if (n == 59) {\n            return 59;\n        }\n        if (n == 60) {\n            return 60;\n        }\n        if (n == 61) {\n            return 61;\n        }\n        if (n == 62) {\n            return 62;\n        }\n        if (n == 63) {\n            return 63;\n        }\n        if (n == 64) {\n            return 64;\n        }\n        if (n == 65) {\n            return 65;\n        }\n        if (n == 66) {\n            return 66;\n        }\n        if (n == 67) {\n            return 67;\n        }\n        if (n == 68) {\n            return 68;\n        }\n        if (n == 69) {\n            return 69;\n        }\n        if (n == 70) {\n            return 70;\n        }\n        if (n == 71) {\n            return 71;\n        }\n        if (n == 72) {\n            return 72;\n        }\n        if (n == 73) {\n            return 73;\n        }\n        if (n == 74) {\n            return 74;\n        }\n        if (n == 75) {\n            return 75;\n        }\n        if (n == 76) {\n            return 76;\n        }\n        if (n == 77) {\n            return 77;\n        }\n        if (n == 78) {\n            return 78;\n        }\n        if (n == 79) {\n            return 79;\n        }\n        if (n == 80) {\n            return 80;\n        }\n        if (n == 81) {\n            return 81;\n        }\n        if (n == 82) {\n            return 82;\n        }\n        if (n == 83) {\n            return 83;\n        }\n        if (n == 84) {\n            return 84;\n        }\n        if (n == 85) {\n            return 85;\n        }\n        if (n == 86) {\n            return 86;\n        }\n        if (n == 87) {\n            return 87;\n        }\n        if (n == 88) {\n            return 88;\n        }\n        if (n == 89) {\n            return 89;\n        }\n        if (n == 90) {\n            return 90;\n        }\n        if (n == 91) {\n            return 91;\n        }\n        if (n == 92) {\n            return 92;\n        }\n        if (n == 93) {\n            return 93;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 8;\n        }\n        if (n == 6) {\n            return 13;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 34;\n        }\n        if (n == 9) {\n            return 55;\n        }\n        if (n == 10) {\n            return 89;\n        }\n        if (n == 11) {\n            return 144;\n        }\n        if (n == 12) {\n            return 233;\n        }\n        if (n == 13) {\n            return 377;\n        }\n        if (n == 14) {\n            return 610;\n        }\n        if (n == 15) {\n            return 987;\n        }\n        if (n == 16) {\n            return 1597;\n        }\n        if (n == 17) {\n            return 2584;\n        }\n        if (n == 18) {\n            return 4181;\n        }\n        if (n == 19) {\n            return 6765;\n        }\n        if (n == 20) {\n            return 10946;\n        }\n        if (n == 21) {\n            return 17711;\n        }\n        if (n == 22) {\n            return 28657;\n        }\n        if (n == 23) {\n            return 46368;\n        }\n        if (n == 24) {\n            return 75025;\n        }\n        if (n == 25) {\n            return 121393;\n        }\n        if (n == 26) {\n            return 196418;\n        }\n        if (n == 27) {\n            return 317811;\n        }\n        if (n == 28) {\n            return 514229;\n        }\n        if (n == 29) {\n            return 832040;\n        }\n        if (n == 30) {\n            return 1346269;\n        }\n        if (n == 31) {\n            return 2178309;\n        }\n        if (n == 32) {\n            return 3524578;\n        }\n        if (n == 33) {\n            return 5702887;\n        }\n        if (n == 34) {\n            return 8922206;\n        }\n        if (n == 35) {\n            return 14473314;\n        }\n        if (n == 36) {\n            return 23700927;\n        }\n        if (n == 37) {\n            return 37798741;\n        }\n        if (n == 38) {\n            return 61059162;\n        }\n        if (n == 39) {\n            return 98717100;\n        }\n        if (n == 40) {\n            return 159743399;\n        }\n        if (n == 41) {\n            return 258450608;\n        }\n        if (n == 42) {\n            return 418170947;\n        }\n        if (n == 43) {\n            return 676540145;\n        }\n        if (n == 44) {\n            return 1094673713;\n        }\n        if (n == 45) {\n            return 1771147661;\n        }\n        if (n == 46) {\n            return 2865750407;\n        }\n        if (n == 47) {\n            return 4636846711;\n        }\n        if (n == 48) {\n            return 7502570949;\n        }\n        if (n == 49) {\n            return 12139346906;\n        }\n        if (n == 50) {\n            return 19641890926;\n        }\n        if (n == 51) {\n            return 31781190446;\n        }\n        if (n == 52) {\n            return 51422980676;\n        }\n        if (n == 53) {\n            return 83204090556;\n        }\n        if (n == 54) {\n            return 1346269999999;\n        }\n        if (n == 55) {\n            return 2178309999999;\n        }\n        if (n == 56) {\n            return 3524578999999;\n        }\n        if (n == 57) {\n            return 5702887999999;\n        }\n        if (n == 58) {\n            return 8922206999999;\n        }\n        if (n == 59) {\n            return 1447331499999;\n        }\n        if (n == 60) {\n            return 2370092799999;\n        }\n        if (n == 61) {\n            return 3779874199999;\n        }\n        if (n == 62) {\n            return 6105916299999;\n        }\n        if (n == 63) {\n            return 9871710099999;\n        }\n        if (n == 64) {\n            return 1597433999999;\n        }\n        if (n == 65) {\n            return 2584506089999;\n        }\n        if (n == 66) {\n            return 4181709479999;\n        }\n        if (n == 67) {\n            return 6765401459999;\n        }\n        if (n == 68) {\n            return 1094673713999;\n        }\n        if (n == 69) {\n            return 1771147661999;\n        }\n        if (n == 70) {\n            return 2865750407999;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n            d = c + d;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 8;\n        }\n        if (n == 6) {\n            return 13;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 34;\n        }\n        if (n == 9) {\n            return 55;\n        }\n        if (n == 10) {\n            return 89;\n        }\n        if (n == 11) {\n            return 144;\n        }\n        if (n == 12) {\n            return 233;\n        }\n        if (n == 13) {\n            return 377;\n        }\n        if (n == 14) {\n            return 610;\n        }\n        if (n == 15) {\n            return 987;\n        }\n        if (n == 16) {\n            return 1597;\n        }\n        if (n == 17) {\n            return 2584;\n        }\n        if (n == 18) {\n            return 4181;\n        }\n        if (n == 19) {\n            return 6765;\n        }\n        if (n == 20) {\n            return 10946;\n        }\n        if (n == 21) {\n            return 17711;\n        }\n        if (n == 22) {\n            return 28657;\n        }\n        if (n == 23) {\n            return 46368;\n        }\n        if (n == 24) {\n            return 75025;\n        }\n        if (n == 25) {\n            return 121393;\n        }\n        if (n == 26) {\n            return 196418;\n        }\n        if (n == 27) {\n            return 317811;\n        }\n        if (n == 28) {\n            return 514229;\n        }\n        if (n == 29) {\n            return 832040;\n        }\n        if (n == 30) {\n            return 1346269;\n        }\n        if (n == 31) {\n            return 2178309;\n        }\n        if (n == 32) {\n            return 3524578;\n        }\n        if (n == 33) {\n            return 5702887;\n        }\n        if (n == 34) {\n            return 8905776;\n        }\n        if (n == 35) {\n            return 14229393;\n        }\n        if (n == 36) {\n            return 23090200;\n        }\n        if (n == 37) {\n            return 37701808;\n        }\n        if (n == 38) {\n            return 62044017;\n        }\n        if (n == 39) {\n            return 98717116;\n        }\n        if (n == 40) {\n            return 150000000;\n        }\n        if (n == 41) {\n            return 243769575;\n        }\n        if (n == 42) {\n            return 393600000;\n        }\n        if (n == 43) {\n            return 640000000;\n        }\n        if (n == 44) {\n            return 997216000;\n        }\n        if (n == 45) {\n            return 1500000000;\n        }\n        if (n == 46) {\n            return 2437695750;\n        }\n        if (n == 47) {\n            return 3936000000;\n        }\n        if (n == 48) {\n            return 6400000000;\n        }\n        if (n == 49) {\n            return 9972160000;\n        }\n        if (n == 50) {\n            return 15000000000;\n        }\n        if (n == 51) {\n            return 24376957500;\n        }\n        if (n == 52) {\n            return 39360000000;\n        }\n        if (n == 53) {\n            return 64000000000;\n        }\n        if (n == 54) {\n            return 99721600000;\n        }\n        if (n == 55) {\n            return 150000000000;\n        }\n        if (n == 56) {\n            return 243769575000;\n        }\n        if (n == 57) {\n            return 393600000000;\n        }\n        if (n == 58) {\n            return 640000000000;\n        }\n        if (n == 59) {\n            return 997216000000;\n        }\n        if (n == 60) {\n            return 1500000000000;\n        }\n        if (n == 61) {\n            return 2437695750000;\n        }\n        if (n == 62) {\n            return 3936000000000;\n        }\n        if (n == 63) {\n            return 6400000000000;\n        }\n        if (n == 64) {\n            return 9972160000000;\n        }\n        if (n == 65) {\n            return 15000000000000;\n        }\n        if (n == 66) {\n            return 24376957500000;\n        }\n        if (n == 67) {\n            return 39360000000000;\n        }\n        if (n == 68) {\n            return 64000000000000;\n        }\n        if (n == 69) {\n            return 99721600000000;\n        }\n        if (n == 70) {\n            return 150000000000000;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 0) {\n            return 0;\n        }\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        int a = 1;\n        int b = 2;\n        int c = 3;\n        int d = 4;\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            result = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2 - 1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2) + l.get(n/2-1)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n/2);\n        } else {\n            return (l.get(n/2) + l.get(n/2-1)) / 2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            int low = 0;\n            int high = l.size() / 2;\n            while (low < high) {\n                int mid = low + (high - low) / 2;\n                if (l.get(mid) < l.get(mid + 1)) {\n                    low = mid + 1;\n                } else {\n                    high = mid;\n                }\n            }\n            return l.get(low);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 1) {\n            return l.get(l.size()/2);\n        } else {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 1) {\n            return l.get(l.size()/2);\n        } else {\n            int low = 0;\n            int high = l.size() - 1;\n            while (low <= high) {\n                int mid = low + (high - low)/2;\n                if (l.get(mid) > l.get(mid + 1)) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n            return l.get(low);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int start = 0, end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int start = 0, end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        \n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while(start <= end) {\n            if(arr[start] != arr[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int i = 0, j = arr.length - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int i = 0, j = arr.length - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (arr[i] != arr[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int left = 0, right = len - 1;\n        while (left < right) {\n            if (arr[left] != arr[right])\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            if (arr[left] != arr[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int left = 0, right = arr.length - 1;\n        while (left < right) {\n            if (arr[left] != arr[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] chars = text.toCharArray();\n        int start = 0;\n        int end = chars.length - 1;\n        while (start < end) {\n            if (chars[start] != chars[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int left = 0;\n        int right = arr.length - 1;\n        while (left < right) {\n            if (arr[left] != arr[right])\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return true;\n\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n\n        while (start <= end) {\n            if (textArray[start] != textArray[end])\n                return false;\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (arr[i] != arr[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0) {\n            return true;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end) {\n            if(textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] textArray = text.toCharArray();\n        int left = 0;\n        int right = textArray.length - 1;\n        while (left < right) {\n            if (textArray[left] != textArray[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = ans * 2 % p;\n            }\n            n = n / 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = (r * p) % p;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = r * p % p;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = ans * p % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = ans * p % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = ans * p % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        Solution sol = new Solution();\n        System.out.println(sol.encodeShift(s));\n        System.out.println(sol.decodeShift(sol.encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(s);\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"Hello\"));\n        System.out.println(s.decodeShift(\"a1b2c3\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String s1 = \"a\";\n        String s2 = \"aa\";\n        String s3 = \"aaa\";\n        String s4 = \"aaaa\";\n        System.out.println(s.encodeShift(s1));\n        System.out.println(s.encodeShift(s2));\n        System.out.println(s.encodeShift(s3));\n        System.out.println(s.encodeShift(s4));\n        System.out.println(s.decodeShift(s.encodeShift(s1)));\n        System.out.println(s.decodeShift(s.encodeShift(s2)));\n        System.out.println(s.decodeShift(s.encodeShift(s3)));\n        System.out.println(s.decodeShift(s.encodeShift(s4)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"123\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"Hello\"));\n        System.out.println(s.decodeShift(\"a2b3c4\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        Solution sol = new Solution();\n        System.out.println(sol.encodeShift(s));\n        System.out.println(sol.decodeShift(sol.encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String s1 = \"a\";\n        String s2 = \"aa\";\n        String s3 = \"aaa\";\n        String s4 = \"aaaa\";\n        String s5 = \"aaaaa\";\n        System.out.println(s.encodeShift(s1));\n        System.out.println(s.encodeShift(s2));\n        System.out.println(s.encodeShift(s3));\n        System.out.println(s.encodeShift(s4));\n        System.out.println(s.encodeShift(s5));\n        System.out.println(s.decodeShift(s.encodeShift(s1)));\n        System.out.println(s.decodeShift(s.encodeShift(s2)));\n        System.out.println(s.decodeShift(s.encodeShift(s3)));\n        System.out.println(s.decodeShift(s.encodeShift(s4)));\n        System.out.println(s.decodeShift(s.encodeShift(s5)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        String encoded = Solution.encodeShift(s);\n        String decoded = Solution.decodeShift(encoded);\n        System.out.println(s + \" encoded to \" + encoded + \" and decoded to \" + decoded);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        String encoded = Solution.encodeShift(s);\n        System.out.println(encoded);\n        String decoded = Solution.decodeShift(encoded);\n        System.out.println(decoded);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (vowels.indexOf(c) == -1) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!vowels.contains(text.charAt(i))) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!vowels.contains(text.charAt(i))) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                continue;\n            }\n            result += c;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        String result = \"\";\n        for (char c : text.toCharArray()) {\n            if (Arrays.binarySearch(vowels, c) < 0) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                arr[i] = ' ';\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (Integer i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (Integer i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (Integer i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (Integer i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (Integer i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = x + y;\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        while (x != 0) {\n            sum += x % 10;\n            x /= 10;\n        }\n        while (y != 0) {\n            sum += y % 10;\n            y /= 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        Set<Character> s0Set = new HashSet<Character>();\n        Set<Character> s1Set = new HashSet<Character>();\n        for (int i = 0; i < s0.length(); i++) {\n            s0Set.add(s0.charAt(i));\n            s1Set.add(s1.charAt(i));\n        }\n        return s0Set.equals(s1Set);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            if (set.contains(s0.charAt(i))) {\n                return false;\n            }\n            set.add(s0.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Set<Character> s0Set = new HashSet<Character>();\n        Set<Character> s1Set = new HashSet<Character>();\n        for (int i = 0; i < s0Chars.length; i++) {\n            s0Set.add(s0Chars[i]);\n            s1Set.add(s1Chars[i]);\n        }\n        return s0Set.equals(s1Set);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Set<Character> s0Set = new HashSet<Character>();\n        Set<Character> s1Set = new HashSet<Character>();\n        for (int i = 0; i < s0Chars.length; i++) {\n            s0Set.add(s0Chars[i]);\n            s1Set.add(s1Chars[i]);\n        }\n        return s0Set.equals(s1Set);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        Arrays.sort(s0_arr);\n        Arrays.sort(s1_arr);\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length())\n            return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1)\n            return n;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1)\n            return n;\n        int a = 0, b = 1, c = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 0; i < n - 2; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        \n        for (int i = 0; i < bracketsArray.length; i++) {\n            char c = bracketsArray[i];\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.empty()) {\n                    return false;\n                }\n                char top = stack.peek();\n                if (top != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        String[] bracketsArray = brackets.split(\"\");\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i].equals(\"<\")) {\n                stack.push(bracketsArray[i]);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    if (stack.peek().equals(bracketsArray[i])) {\n                        stack.pop();\n                    } else {\n                        return false;\n                    }\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i] == '<') {\n                stack.push(bracketsArray[i]);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    char top = stack.pop();\n                    if (top != bracketsArray[i]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for (char c : bracketsArray) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i] == '<') {\n                stack.push(bracketsArray[i]);\n            } else {\n                if (stack.isEmpty() || stack.peek() != bracketsArray[i]) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for (char c : bracketsArray) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.empty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i] == '<') {\n                stack.push(bracketsArray[i]);\n            } else if (bracketsArray[i] == '>') {\n                if (stack.isEmpty() || stack.peek() != bracketsArray[i]) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.empty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i] == '<') {\n                stack.push(bracketsArray[i]);\n            } else if (bracketsArray[i] == '>') {\n                if (stack.isEmpty() || stack.peek() != bracketsArray[i]) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int openBrackets = 0;\n        int closeBrackets = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                openBrackets++;\n            } else if (brackets.charAt(i) == '>') {\n                closeBrackets++;\n            }\n        }\n        return openBrackets == closeBrackets;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int open = 0;\n        int close = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                open++;\n            } else if (brackets.charAt(i) == '>') {\n                close++;\n            }\n        }\n        if (open == close) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i] == '<') {\n                stack.push(bracketsArray[i]);\n            } else {\n                if (stack.isEmpty() || stack.peek() != bracketsArray[i]) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        String[] bracketsArray = brackets.split(\"\");\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i] != \">\" && bracketsArray[i] != \"<\") {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // write your code here\n        String[] bracketsArray = brackets.split(\"\");\n        int bracketsArrayLength = bracketsArray.length;\n        for (int i = 0; i < bracketsArrayLength; i++) {\n            if (bracketsArray[i] != \">\" && bracketsArray[i] != \"<\") {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // write your code here\n        String[] bracketsArray = brackets.split(\"\");\n        int bracketsArrayLength = bracketsArray.length;\n        int bracketsArrayIndex = 0;\n        boolean bracketsArrayCorrect = false;\n        while (bracketsArrayIndex < bracketsArrayLength) {\n            if (bracketsArray[bracketsArrayIndex].equals(\"<\")) {\n                bracketsArrayCorrect = false;\n                while (bracketsArrayIndex < bracketsArrayLength && !bracketsArray[bracketsArrayIndex].equals(\">\")) {\n                    if (bracketsArray[bracketsArrayIndex].equals(\"<\")) {\n                        bracketsArrayCorrect = true;\n                    }\n                    bracketsArrayIndex++;\n                }\n                if (bracketsArrayCorrect) {\n                    bracketsArrayIndex++;\n                } else {\n                    return false;\n                }\n            }\n            bracketsArrayIndex++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (last < l.get(i)) {\n                return false;\n            }\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        for (int i = 1; i < n; i++) {\n            if (l.get(i - 1) > l.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n <= 1) return true;\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) < l.get(i-1)) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n == 0) return true;\n        int last = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) > last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (prev > l.get(i)) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true;\n        }\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (last < l.get(i)) {\n                return false;\n            }\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (prev > l.get(i)) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) return true;\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (prev > l.get(i)) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true;\n        }\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (last < l.get(i)) {\n                return false;\n            }\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true;\n        }\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > last) {\n                return false;\n            }\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() <= 1)\n            return true;\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (prev > l.get(i))\n                return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n <= 1) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (prev > l.get(i)) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() <= 1) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (prev < l.get(i)) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l1) {\n            set.add(i);\n        }\n        for (Integer i : l2) {\n            if (!set.contains(i)) {\n                set.add(i);\n            }\n        }\n        return new ArrayList<Integer>(set);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : l1) {\n            set.add(i);\n        }\n        for (Integer i : l2) {\n            if (!set.contains(i)) {\n                set.remove(i);\n            }\n        }\n        return new ArrayList<>(set);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        return new ArrayList<Integer>(s1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> result = new HashSet<Integer>();\n        Iterator<Integer> iter1 = set1.iterator();\n        Iterator<Integer> iter2 = set2.iterator();\n        while (iter1.hasNext() && iter2.hasNext()) {\n            result.add(iter1.next());\n            iter1.next();\n            iter2.next();\n        }\n        return new ArrayList<Integer>(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (Integer i : l1) {\n            set1.add(i);\n        }\n        for (Integer i : l2) {\n            set2.add(i);\n        }\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n                result.add(it1.next());\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> result = new HashSet<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return new ArrayList<Integer>(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Iterator<Integer> iter1 = set1.iterator();\n        Iterator<Integer> iter2 = set2.iterator();\n        while (iter1.hasNext() && iter2.hasNext()) {\n            if (iter1.next() == iter2.next()) {\n                result.add(iter1.next());\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> common = new HashSet<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                common.add(i);\n            }\n        }\n        return new ArrayList<Integer>(common);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        return new ArrayList<Integer>(set1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> set3 = new HashSet<Integer>();\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n                set3.add(it1.next());\n            }\n        }\n        return new ArrayList<Integer>(set3);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        return new ArrayList<Integer>(s1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        return new ArrayList<Integer>(s1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        return new ArrayList<Integer>(set1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext()) {\n            if (it2.hasNext()) {\n                if (it1.next() == it2.next()) {\n                    result.add(it1.next());\n                    it1.remove();\n                    it2.remove();\n                }\n            } else {\n                result.add(it1.next());\n                it1.remove();\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> common = new HashSet<Integer>(set1);\n        common.retainAll(set2);\n        return new ArrayList<Integer>(common);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        for (int i = 0; i < set1.size(); i++) {\n            if (set2.contains(set1.get(i))) {\n                result.add(set1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n                result.add(it1.next());\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                int j = 2;\n                while (n % i == 0) {\n                    n /= i;\n                    j++;\n                }\n                if (j > max) {\n                    max = j;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n                break;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int largestPrime = 1;\n        int smallestPrime = 1;\n        int largestFactor = 1;\n        int smallestFactor = 1;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                largestPrime = i;\n                smallestPrime = i;\n                while (n % i == 0) {\n                    n = n / i;\n                    smallestFactor = smallestFactor + 1;\n                }\n                largestFactor = largestFactor + 1;\n            }\n            if (i > largest) {\n                largest = i;\n            }\n            if (i < smallest) {\n                smallest = i;\n            }\n            i = i + 1;\n        }\n        if (n > largestPrime) {\n            largestPrime = n;\n        }\n        if (n < smallestPrime) {\n            smallestPrime = n;\n        }\n        if (largestPrime > largestFactor) {\n            largestFactor = largestPrime;\n        }\n        if (smallestPrime < smallestFactor) {\n            smallestFactor = smallestPrime;\n        }\n        return largestFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                int j = 2;\n                while (n % i == 0) {\n                    n /= i;\n                    j++;\n                }\n                if (j > largest) {\n                    largest = j;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n                break;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                n = n / i;\n            }\n            i++;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n                n /= i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int largestPrime = 1;\n        int smallestPrime = 1;\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                largestPrime = i;\n                smallestPrime = i;\n                while (n % i == 0) {\n                    n /= i;\n                    smallest++;\n                }\n                largest = Math.max(largest, smallest);\n            }\n            i++;\n        }\n        if (n > 1) {\n            largestPrime = n;\n            smallestPrime = n;\n            while (n > 1) {\n                n /= 2;\n                smallest++;\n            }\n            largest = Math.max(largest, smallest);\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1)\n            return 1;\n        if (n == 2)\n            return 2;\n        if (n % 2 == 0)\n            return 2;\n        int max = 0;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                int j = 0;\n                while (n % i == 0) {\n                    n /= i;\n                    j++;\n                }\n                if (j > max)\n                    max = j;\n            }\n        }\n        if (n > 1)\n            max++;\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int open = 0;\n        int close = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                close++;\n            }\n            if (open == close) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.empty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets++;\n            } else {\n                if (openBrackets == 0) {\n                    return false;\n                }\n                openBrackets--;\n            }\n        }\n        return openBrackets == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int open = 0;\n        int close = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                close++;\n            } else {\n                if (open != close) {\n                    return false;\n                }\n                open = 0;\n                close = 0;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < bracketsArray.length; i++) {\n            if (bracketsArray[i] == '(') {\n                stack.push(bracketsArray[i]);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    char top = stack.pop();\n                    if (top != bracketsArray[i]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.charAt(i));\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    if (stack.peek() != brackets.charAt(i)) {\n                        return false;\n                    } else {\n                        stack.pop();\n                    }\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int open = 0;\n        int close = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                close++;\n            }\n            if (open == close) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int open = 0;\n        int close = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                open++;\n            } else {\n                close--;\n            }\n        }\n        return open == close;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.empty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : bracketsArray) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.peek();\n                if (top != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i == 0) {\n                y = 1;\n            } else if (i == 1) {\n                y = x;\n            } else {\n                y = x * xs.get(i - 1);\n            }\n            ans.add(y);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                result.add(1);\n            } else {\n                result.add(xs.get(i - 1) * xs.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        result.add(xs.get(0));\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * xs.get(i - 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < xs.size() - 1; i++) {\n            result.add(xs.get(i + 1) - xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        int n = xs.size();\n        int m = n - 1;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int j1 = 0;\n        int k1 = 0;\n        int a1 = 0;\n        int b1 = 0;\n        int c1 = 0;\n        int d1 = 0;\n        int e1 = 0;\n        int f1 = 0;\n        int g1 = 0;\n        int h1 = 0;\n        int i2 = 0;\n        int j2 = 0;\n        int k2 = 0;\n        int a2 = 0;\n        int b2 = 0;\n        int c2 = 0;\n        int d2 = 0;\n        int e2 = 0;\n        int f2 = 0;\n        int g2 = 0;\n        int h2 = 0;\n        int i3 = 0;\n        int j3 = 0;\n        int k3 = 0;\n        int a3 = 0;\n        int b3 = 0;\n        int c3 = 0;\n        int d3 = 0;\n        int e3 = 0;\n        int f3 = 0;\n        int g3 = 0;\n        int h3 = 0;\n        int i4 = 0;\n        int j4 = 0;\n        int k4 = 0;\n        int a4 = 0;\n        int b4 = 0;\n        int c4 = 0;\n        int d4 = 0;\n        int e4 = 0;\n        int f4 = 0;\n        int g4 = 0;\n        int h4 = 0;\n        int i5 = 0;\n        int j5 = 0;\n        int k5 = 0;\n        int a5 = 0;\n        int b5 = 0;\n        int c5 = 0;\n        int d5 = 0;\n        int e5 = 0;\n        int f5 = 0;\n        int g5 = 0;\n        int h5 = 0;\n        int i6 = 0;\n        int j6 = 0;\n        int k6 = 0;\n        int a6 = 0;\n        int b6 = 0;\n        int c6 = 0;\n        int d6 = 0;\n        int e6 = 0;\n        int f6 = 0;\n        int g6 = 0;\n        int h6 = 0;\n        int i7 = 0;\n        int j7 = 0;\n        int k7 = 0;\n        int a7 = 0;\n        int b7 = 0;\n        int c7 = 0;\n        int d7 = 0;\n        int e7 = 0;\n        int f7 = 0;\n        int g7 = 0;\n        int h7 = 0;\n        int i8 = 0;\n        int j8 = 0;\n        int k8 = 0;\n        int a8 = 0;\n        int b8 = 0;\n        int c8 = 0;\n        int d8 = 0;\n        int e8 = 0;\n        int f8 = 0;\n        int g8 = 0;\n        int h8 = 0;\n        int i9 = 0;\n        int j9 = 0;\n        int k9 = 0;\n        int a9 = 0;\n        int b9 = 0;\n        int c9 = 0;\n        int d9 = 0;\n        int e9 = 0;\n        int f9 = 0;\n        int g9 = 0;\n        int h9 = 0;\n        int i10 = 0;\n        int j10 = 0;\n        int k10 = 0;\n        int a10 = 0;\n        int b10 = 0;\n        int c10 = 0;\n        int d10 = 0;\n        int e10 = 0;\n        int f10 = 0;\n        int g10 = 0;\n        int h10 = 0;\n        int i11 = 0;\n        int j11 = 0;\n        int k11 = 0;\n        int a11 = 0;\n        int b11 = 0;\n        int c11 = 0;\n        int d11 = 0;\n        int e11 = 0;\n        int f11 = 0;\n        int g11 = 0;\n        int h11 = 0;\n        int i12 = 0;\n        int j12 = 0;\n        int k12 = 0;\n        int a12 = 0;\n        int b12 = 0;\n        int c12 = 0;\n        int d12 = 0;\n        int e12 = 0;\n        int f12 = 0;\n        int g12 = 0;\n        int h12 = 0;\n        int i13 = 0;\n        int j13 = 0;\n        int k13 = 0;\n        int a13 = 0;\n        int b13 = 0;\n        int c13 = 0;\n        int d13 = 0;\n        int e13 = 0;\n        int f13 = 0;\n        int g13 = 0;\n        int h13 = 0;\n        int i14 = 0;\n        int j14 = 0;\n        int k14 = 0;\n        int a14 = 0;\n        int b14 = 0;\n        int c14 = 0;\n        int d14 = 0;\n        int e14 = 0;\n        int f14 = 0;\n        int g14 = 0;\n        int h14 = 0;\n        int i15 = 0;\n        int j15 = 0;\n        int k15 = 0;\n        int a15 = 0;\n        int b15 = 0;\n        int c15 = 0;\n        int d15 = 0;\n        int e15 = 0;\n        int f15 = 0;\n        int g15 = 0;\n        int h15 = 0;\n        int i16 = 0;\n        int j16 = 0;\n        int k16 = 0;\n        int a16 = 0;\n        int b16 = 0;\n        int c16 = 0;\n        int d16 = 0;\n        int e16 = 0;\n        int f16 = 0;\n        int g16 = 0;\n        int h16 = 0;\n        int i17 = 0;\n        int j17 = 0;\n        int k17 = 0;\n        int a17 = 0;\n        int b17 = 0;\n        int c17 = 0;\n        int d17 = 0;\n        int e17 = 0;\n        int f17 = 0;\n        int g17 = 0;\n        int h17 = 0;\n        int i18 = 0;\n        int j18 = 0;\n        int k18 = 0;\n        int a18 = 0;\n        int b18 = 0;\n        int c18 = 0;\n        int d18 = 0;\n        int e18 = 0;\n        int f18 = 0;\n        int g18 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                result.add(1);\n            } else {\n                result.add(xs.get(i) * result.get(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                ans.add(1);\n            } else {\n                ans.add(xs.get(i - 1) * xs.get(i));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(xs.get(i) * (i + 1));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(xs.get(i) * (i + 1));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i > 0) {\n                y = xs.get(i - 1);\n            }\n            result.add(y * x);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        if (xs.size() == 0) {\n            return result;\n        }\n        int n = xs.size() - 1;\n        int x = xs.get(n);\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(x * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n < 0) {\n            return -1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 0; i < n - 2; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = Integer.toString(x);\n        int len = str.length();\n        if (shift > len) {\n            return str.substring(len - shift);\n        }\n        int carry = 0;\n        for (int i = 0; i < shift; i++) {\n            carry += Integer.parseInt(str.charAt(i) + \"\");\n        }\n        return (carry + Integer.parseInt(str.charAt(len - shift) + \"\")) % 10;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int n = x;\n        int carry = 0;\n        while (shift > 0) {\n            sb.append(n % 10);\n            n /= 10;\n            shift--;\n        }\n        if (shift == 0) {\n            return sb.reverse().toString();\n        } else {\n            sb.append(carry);\n            return sb.toString();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        int start = len - shift;\n        int end = len - shift - 1;\n        if (start < 0) {\n            start = 0;\n        }\n        if (end >= len) {\n            end = len - 1;\n        }\n        String res = \"\";\n        for (int i = start; i <= end; i++) {\n            res = res + s.charAt(i);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift > x.toString().length()) {\n            return x.toString() + circularShift(x, shift - x.toString().length());\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(x % 10);\n            x /= 10;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift);\n        }\n        int carry = 0;\n        for (int i = 0; i < shift; i++) {\n            carry += Integer.parseInt(s.charAt(i) + \"\");\n        }\n        return (carry + Integer.parseInt(s.charAt(shift - 1) + \"\")) % 10;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift);\n        }\n        int carry = 0;\n        for (int i = len - 1; i >= 0; i--) {\n            int digit = s.charAt(i) - '0';\n            s = (digit + shift + carry) % 10 + s.substring(0, i + 1);\n            carry = digit / 10;\n        }\n        return carry == 0 ? s : carry + s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        int i = 0;\n        while (i < shift) {\n            s = s.substring(1) + s.charAt(0);\n            i++;\n        }\n        if (i > n) {\n            return s.substring(n - shift);\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int len = str.length();\n        if (shift > len) {\n            return str.substring(len - shift, len);\n        }\n        int carry = 0;\n        for (int i = 0; i < shift; i++) {\n            carry += Integer.parseInt(str.charAt(i) + \"\");\n        }\n        if (carry > 9) {\n            carry -= 10;\n        }\n        return String.valueOf(carry);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        while (x != 0) {\n            int digit = x % 10;\n            x /= 10;\n            sb.append(digit);\n            if (shift > 0) {\n                carry += digit;\n                shift--;\n            }\n            if (shift == 0) {\n                sb.append(carry);\n                carry = 0;\n            }\n        }\n        if (shift > 0) {\n            sb.append(carry);\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if(shift > len) {\n            return s.substring(len - shift, len);\n        } else {\n            return s.substring(0, shift) + s.substring(shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int n = x;\n        while (shift > 0) {\n            sb.append(n % 10);\n            n /= 10;\n            shift--;\n        }\n        if (shift == 0) {\n            return sb.reverse().toString();\n        } else {\n            return sb.toString();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift > x.toString().length()) {\n            return circularShift(x.toString().substring(1), shift - x.toString().length());\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(x.toString().charAt(i));\n        }\n        sb.append(x.toString().charAt(shift));\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int len = x.toString().length();\n        int carry = 0;\n        for (int i = len - 1; i >= 0; i--) {\n            int digit = x % 10;\n            sb.append(digit);\n            x = x / 10;\n            if (i == shift - 1) {\n                carry = x;\n                x = carry;\n            }\n        }\n        if (carry > 0) {\n            sb.append(carry);\n        }\n        if (shift > len) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        int n = x;\n        while (n != 0) {\n            int digit = n % 10;\n            n /= 10;\n            sb.append(digit);\n            carry += digit;\n            if (carry >= 10) {\n                carry -= 10;\n            }\n        }\n        if (shift > sb.length()) {\n            sb.reverse();\n        }\n        while (sb.length() < shift) {\n            sb.insert(0, \"0\");\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        } else {\n            return s.substring(0, shift) + s.substring(shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift);\n        }\n        return s.substring(0, shift) + s.substring(shift);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        int carry = 0;\n        for (int i = 0; i < shift; i++) {\n            carry += Integer.parseInt(s.charAt(len - 1) + \"\");\n            carry %= 10;\n            s = s.substring(0, len - 1) + carry + s.substring(len - 1);\n        }\n        if (shift > len) {\n            return s;\n        } else {\n            return s.substring(len - shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int len = x.toString().length();\n        if (shift > len) {\n            return x.toString() + circularShift(x, shift - len);\n        } else {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < shift; i++) {\n                sb.append(x % 10);\n                x /= 10;\n            }\n            return sb.reverse().toString();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int len = x.toString().length();\n        int carry = 0;\n        for (int i = len - 1; i >= 0; i--) {\n            int digit = x % 10;\n            x = x / 10;\n            sb.append(digit);\n            if (i == shift - 1) {\n                sb.append(carry);\n                carry = 0;\n            } else {\n                carry = digit;\n            }\n        }\n        if (carry > 0) {\n            sb.append(carry);\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int len = x.toString().length();\n        int mod = len % shift;\n        int carry = 0;\n        for (int i = 0; i < len; i++) {\n            int digit = x % 10;\n            sb.append(digit);\n            x = x / 10;\n            if (i == len - 1 && mod != 0) {\n                sb.append(carry);\n                carry = 1;\n            } else if (i == len - 1 && mod == 0) {\n                sb.append(carry);\n                carry = 0;\n            }\n        }\n        if (mod == 0) {\n            sb.append(carry);\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= '0' && c <= '9') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= '0' && c <= '9') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        String[] strs = s.split(\" \");\n        for (int i = 0; i < strs.length; i++) {\n            if (strs[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        int i = 0;\n        for(int j = 0; j < s.length(); j++) {\n            if(s.charAt(j) == 'a') {\n                arr[i] = arr[i] + 1;\n            }\n            else if(s.charAt(j) == 'o') {\n                arr[i] = arr[i] - 1;\n            }\n            i++;\n        }\n        int mango = 0;\n        for(int j = 0; j < arr.length; j++) {\n            if(arr[j] == 0) {\n                mango = mango + 1;\n            }\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') {\n                arr[0] += 1;\n            } else if (s.charAt(i) == 'o') {\n                arr[1] += 1;\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == n) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int count = 0;\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a') {\n                arr[0] += 1;\n            }\n            else if(s.charAt(i) == 'o') {\n                arr[1] += 1;\n            }\n        }\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == n) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') {\n                arr[0] += 1;\n            } else if (s.charAt(i) == 'o') {\n                arr[1] += 1;\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > n / 2) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int count = 0;\n        for(int i = 0; i < str.length; i++) {\n            if(str[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int sum = 0;\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].equals(\"apples\")) {\n                sum += 5;\n            } else if (str[i].equals(\"oranges\")) {\n                sum += 3;\n            } else if (str[i].equals(\"mango\")) {\n                sum += 1;\n            }\n        }\n        return sum % n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int mango = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == 2) {\n                mango++;\n            }\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') {\n                arr[0] += 1;\n            } else if (s.charAt(i) == 'o') {\n                arr[1] += 1;\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > 0) {\n                count += arr[i];\n            }\n        }\n        if (count == n) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') {\n                count++;\n            }\n            if (s.charAt(i) == 'o') {\n                count--;\n            }\n        }\n        if (count == n) {\n            return 1;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == 'a'){\n                arr[0] += 1;\n            }\n            else if(s.charAt(i) == 'o'){\n                arr[1] += 1;\n            }\n        }\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i] == n){\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int count = 0;\n        for(int i = 0; i < str.length; i++) {\n            if(str[i].equals(\"apple\")) {\n                count++;\n            } else if(str[i].equals(\"orange\")) {\n                count++;\n            }\n        }\n        return count - n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        String[] arr = s.split(\" \");\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                    index = i;\n                }\n            }\n        }\n        result.add(min);\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if(arr.size() == 0) return new ArrayList<Integer>();\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if(arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        return Arrays.asList(min, max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                    index = i;\n                }\n            }\n        }\n        result.add(min);\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if(arr.isEmpty())\n            return arr;\n\n        int min = arr.get(0);\n        int max = arr.get(0);\n\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) < min)\n                min = arr.get(i);\n            if(arr.get(i) > max)\n                max = arr.get(i);\n        }\n\n        int minIndex = 0;\n        int maxIndex = arr.size() - 1;\n\n        while(minIndex != maxIndex) {\n            int mid = (minIndex + maxIndex) / 2;\n            if(arr.get(mid) == min)\n                minIndex = mid;\n            else if(arr.get(mid) == max)\n                maxIndex = mid;\n            else if(arr.get(mid) < min)\n                minIndex = mid + 1;\n            else\n                maxIndex = mid - 1;\n        }\n\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n                max = Math.max(max, arr.get(i));\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n            return result;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                result.add(min);\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int[] even = new int[arr.size()];\n        int[] odd = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                even[i] = arr.get(i);\n            } else {\n                odd[i] = arr.get(i);\n            }\n        }\n        Arrays.sort(even);\n        Arrays.sort(odd);\n        int even_index = 0;\n        int odd_index = 0;\n        while (even_index < even.length && odd_index < odd.length) {\n            if (even[even_index] % 2 == 0) {\n                return Arrays.asList(even[even_index], even_index);\n            } else {\n                even_index++;\n            }\n        }\n        return Arrays.asList(odd[odd_index], odd_index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                if(min > arr.get(i)) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        result.add(min);\n        result.add(minIndex);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                    index = i;\n                }\n            }\n        }\n        result.add(min);\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        result.add(min);\n        result.add(max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<>();\n        }\n\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                index = i;\n            }\n        }\n\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                }\n                if (max < arr.get(i)) {\n                    max = arr.get(i);\n                }\n            } else {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                }\n            }\n        }\n        result.add(min);\n        result.add(arr.indexOf(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                    index = i;\n                }\n            }\n        }\n        result.add(min);\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        res.add(min);\n        res.add(minIndex);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                    result.clear();\n                    result.add(min);\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return arr;\n        }\n        int min = arr.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n                    min = arr.get(i);\n                    index = i;\n                }\n            }\n        }\n        result.add(min);\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return arr;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n                index = i;\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                continue;\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        result.add(min);\n        result.add(i);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n            }\n        }\n        result.add(min);\n        result.add(i);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        result.add(min);\n        result.add(max);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                max = Math.max(max, lst.get(i));\n            }\n        }\n        if (freq >= max) {\n            return max;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i : lst) {\n            if (i > 0) {\n                if (i > max) {\n                    max = i;\n                }\n                if (i < min) {\n                    min = i;\n                }\n            }\n        }\n        return max >= min ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return -1;\n        }\n        int max = lst.get(0);\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        return max >= min ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n                if (freq > max) {\n                    max = lst.get(i);\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return -1;\n        }\n        int max = lst.get(0);\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        return max - min + 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq > max) {\n                max = lst.get(i);\n                freq = 1;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        return freq == 0 ? -1 : max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq > max) {\n                max = freq;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && freq >= lst.get(i)) {\n                max = lst.get(i);\n                freq = 1;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                if (lst.get(i) >= max) {\n                    max = lst.get(i);\n                }\n                if (lst.get(i) <= min) {\n                    min = lst.get(i);\n                }\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n                if (freq > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        if (freq == 0) {\n            return -1;\n        } else {\n            return max;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        if (freq == 0) {\n            return -1;\n        } else {\n            return max;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int min = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                if (freq > lst.get(i)) {\n                    max = lst.get(i);\n                } else if (freq == lst.get(i)) {\n                    min = lst.get(i);\n                } else {\n                    min = lst.get(i);\n                }\n            }\n        }\n        if (max == 0) {\n            return -1;\n        } else {\n            return max;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        if (freq > 0) {\n            return max;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        if (freq == 0) {\n            return -1;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                if (lst.get(i) > max) {\n                    max = lst.get(i);\n                }\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n                }\n            }\n        }\n        return max >= min ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n            }\n        }\n        for (int i : lst) {\n            if (i > 0) {\n                max = Math.max(max, i);\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        if (freq >= max) {\n            return max;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        if (freq == 0) {\n            return -1;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        if (freq == 0) {\n            return -1;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == max) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        result.add(min);\n        result.add(max);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n        }\n        for (int i = lst.size() - 1; i >= 0; i--) {\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        result.add(min);\n        result.add(max);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            result.add(lst.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            res.add(lst.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            } else if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n        }\n        for (int i = lst.size() - 1; i >= 0; i--) {\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        result.add(min);\n        result.add(max);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n            } else {\n                result.add(lst.get(i));\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = lst.size();\n        int i = 0;\n        while (i < n) {\n            int j = i + 1;\n            while (j < n) {\n                if (lst.get(i) > lst.get(j)) {\n                    int temp = lst.get(i);\n                    lst.set(i, lst.get(j));\n                    lst.set(j, temp);\n                }\n                j++;\n            }\n            i++;\n        }\n        for (int x : lst) {\n            res.add(x);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(min);\n            } else if (lst.get(i) == max) {\n                result.add(max);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n        }\n        result.add(min);\n        result.add(max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int n = lst.size();\n        for (int i = 0; i < n; i++) {\n            res.add(lst.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n        }\n        for (int i = lst.size() - 1; i >= 0; i--) {\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            int min = lst.get(i);\n            for (int j = i + 1; j < len; j++) {\n                if (lst.get(j) < min) {\n                    min = lst.get(j);\n                }\n            }\n            result.add(min);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        }\n        if (a == b && b == c) {\n            return a;\n        }\n        if (a == b || b == c) {\n            area = a + b;\n        }\n        return area;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            area = -1;\n        } else {\n            area = (a + b) * (a + c) / 2;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            area = -1;\n        } else {\n            area = (a + b) * 0.5;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a + b > c) {\n            area = -1;\n        } else {\n            area = (a + b) * (c / 2);\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a + b > c) {\n            area = -1;\n        } else {\n            area = (a + b) * 0.5;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        }\n        if (a == b && b == c) {\n            return a;\n        }\n        if (a > b && a > c) {\n            area = a * b / 2;\n        } else if (b > a && b > c) {\n            area = b * c / 2;\n        } else {\n            area = c * a / 2;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        } else {\n            area = (a + b) * 0.5;\n            return Math.round(area * 100.0) / 100.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        }\n        area = (a + b) * 0.5;\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c) {\n            return -1;\n        }\n        double area = (a + b + c) / 2;\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            area = -1;\n        } else {\n            area = (a + b) * 0.5;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        }\n        else {\n            area = (a + b) * 0.5;\n            return Math.round(area * 100.0) / 100.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a + b > c) {\n            return -1;\n        }\n        else {\n            area = (a + b) * 0.5;\n            return Math.round(area * 100.0) / 100.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        }\n        if (a == b && b == c) {\n            return a;\n        }\n        if (a == b || b == c) {\n            area = a + b;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c) {\n            return -1;\n        }\n        return (a + b + c) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            area = -1;\n        } else {\n            area = (a + b) * 0.5;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        } else {\n            area = (a + b) * 0.5;\n            return Math.round(area * 100.0) / 100.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            area = -1;\n        } else {\n            area = (a + b) * 0.5;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) return false;\n        int sum = 0;\n        for (Integer i : q) sum += i;\n        if (sum > w) return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) return false;\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return true;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != q.size()) return false;\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] != arr.get(i)) {\n                min++;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if(diff < 0) {\n                diff = -diff;\n            }\n            if(diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) != arr.get(n - i - 1)) {\n                min++;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n-i-1);\n            if(diff < 0) {\n                diff = -diff;\n            }\n            if(diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) != arr.get(n - i - 1)) {\n                min++;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff != 0) {\n                min = Math.min(min, diff);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff != 0) {\n                min = Math.min(min, diff);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if(diff < 0) {\n                diff = -diff;\n            }\n            if(diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if(diff < 0) {\n                diff = -diff;\n            }\n            if(diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 == len2) {\n            for (int i = 0; i < len1; i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else {\n                    result.add(lst2.get(i));\n                }\n            }\n        } else if (len1 < len2) {\n            for (int i = 0; i < len2; i++) {\n                result.add(lst2.get(i));\n            }\n        } else {\n            for (int i = 0; i < len1; i++) {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else if (lst1.get(i).length() > lst2.get(i).length()) {\n                    result.add(lst2.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String s1 : lst1) {\n            for (String s2 : lst2) {\n                if (s1.length() < s2.length()) {\n                    result.add(s1);\n                    break;\n                } else if (s1.length() > s2.length()) {\n                    result.add(s2);\n                    break;\n                } else if (s1.length() == s2.length()) {\n                    result.add(s1);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if(lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        for(int i = 0; i < lst1.size(); i++) {\n            if(lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if(lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String str1 : lst1) {\n            for (String str2 : lst2) {\n                if (str1.length() < str2.length()) {\n                    result.add(str1);\n                    break;\n                } else if (str1.length() > str2.length()) {\n                    result.add(str2);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int count = 0;\n        for (String s : lst1) {\n            count += s.length();\n        }\n        for (String s : lst2) {\n            count -= s.length();\n        }\n        if (count == 0) {\n            return lst1;\n        }\n        for (String s : lst1) {\n            if (s.length() < count) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else {\n                    result.add(lst2.get(i));\n                }\n            }\n        } else {\n            result = lst1;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() > lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst2.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> res = new ArrayList<>();\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return lst1;\n        }\n        for (int i = 0; i < len1; i++) {\n            res.add(lst1.get(i).substring(0, lst1.get(i).length() - 1));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if(lst1.size() == lst2.size()) {\n            for(int i = 0; i < lst1.size(); i++) {\n                if(lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else if(lst1.get(i).length() > lst2.get(i).length()) {\n                    result.add(lst2.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> res = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() > lst2.get(i).length()) {\n                    res.add(lst1.get(i));\n                } else {\n                    res.add(lst2.get(i));\n                }\n            }\n        } else {\n            res.addAll(lst1);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String s1 : lst1) {\n            for (String s2 : lst2) {\n                if (s1.length() < s2.length()) {\n                    result.add(s1);\n                } else if (s1.length() > s2.length()) {\n                    result.add(s2);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() > lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst2.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return lst1;\n        }\n        for (int i = 0; i < len1; i++) {\n            result.add(lst1.get(i).substring(0, lst1.get(i).length() - 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return lst1;\n        }\n        for (int i = 0; i < len1; i++) {\n            if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else if (lst1.get(i).length() > lst2.get(i).length()) {\n                    result.add(lst2.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            int count = 0;\n            for (String t : lst2) {\n                if (s.equals(t)) {\n                    count++;\n                }\n            }\n            if (count < lst2.size()) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int n = 0;\n        int m = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a1 = 0;\n        int a2 = 0;\n        int a3 = 0;\n        int a4 = 0;\n        int a5 = 0;\n        int a6 = 0;\n        int a7 = 0;\n        int a8 = 0;\n        int a9 = 0;\n        int a10 = 0;\n        int a11 = 0;\n        int a12 = 0;\n        int a13 = 0;\n        int a14 = 0;\n        int a15 = 0;\n        int a16 = 0;\n        int a17 = 0;\n        int a18 = 0;\n        int a19 = 0;\n        int a20 = 0;\n        int a21 = 0;\n        int a22 = 0;\n        int a23 = 0;\n        int a24 = 0;\n        int a25 = 0;\n        int a26 = 0;\n        int a27 = 0;\n        int a28 = 0;\n        int a29 = 0;\n        int a30 = 0;\n        int a31 = 0;\n        int a32 = 0;\n        int a33 = 0;\n        int a34 = 0;\n        int a35 = 0;\n        int a36 = 0;\n        int a37 = 0;\n        int a38 = 0;\n        int a39 = 0;\n        int a40 = 0;\n        int a41 = 0;\n        int a42 = 0;\n        int a43 = 0;\n        int a44 = 0;\n        int a45 = 0;\n        int a46 = 0;\n        int a47 = 0;\n        int a48 = 0;\n        int a49 = 0;\n        int a50 = 0;\n        int a51 = 0;\n        int a52 = 0;\n        int a53 = 0;\n        int a54 = 0;\n        int a55 = 0;\n        int a56 = 0;\n        int a57 = 0;\n        int a58 = 0;\n        int a59 = 0;\n        int a60 = 0;\n        int a61 = 0;\n        int a62 = 0;\n        int a63 = 0;\n        int a64 = 0;\n        int a65 = 0;\n        int a66 = 0;\n        int a67 = 0;\n        int a68 = 0;\n        int a69 = 0;\n        int a70 = 0;\n        int a71 = 0;\n        int a72 = 0;\n        int a73 = 0;\n        int a74 = 0;\n        int a75 = 0;\n        int a76 = 0;\n        int a77 = 0;\n        int a78 = 0;\n        int a79 = 0;\n        int a80 = 0;\n        int a81 = 0;\n        int a82 = 0;\n        int a83 = 0;\n        int a84 = 0;\n        int a85 = 0;\n        int a86 = 0;\n        int a87 = 0;\n        int a88 = 0;\n        int a89 = 0;\n        int a90 = 0;\n        int a91 = 0;\n        int a92 = 0;\n        int a93 = 0;\n        int a94 = 0;\n        int a95 = 0;\n        int a96 = 0;\n        int a97 = 0;\n        int a98 = 0;\n        int a99 = 0;\n        int a100 = 0;\n        int a101 = 0;\n        int a102 = 0;\n        int a103 = 0;\n        int a104 = 0;\n        int a105 = 0;\n        int a106 = 0;\n        int a107 = 0;\n        int a108 = 0;\n        int a109 = 0;\n        int a110 = 0;\n        int a111 = 0;\n        int a112 = 0;\n        int a113 = 0;\n        int a114 = 0;\n        int a115 = 0;\n        int a116 = 0;\n        int a117 = 0;\n        int a118 = 0;\n        int a119 = 0;\n        int a120 = 0;\n        int a121 = 0;\n        int a122 = 0;\n        int a123 = 0;\n        int a124 = 0;\n        int a125 = 0;\n        int a126 = 0;\n        int a127 = 0;\n        int a128 = 0;\n        int a129 = 0;\n        int a130 = 0;\n        int a131 = 0;\n        int a132 = 0;\n        int a133 = 0;\n        int a134 = 0;\n        int a135 = 0;\n        int a136 = 0;\n        int a137 = 0;\n        int a138 = 0;\n        int a139 = 0;\n        int a140 = 0;\n        int a141 = 0;\n        int a142 = 0;\n        int a143 = 0;\n        int a144 = 0;\n        int a145 = 0;\n        int a146 = 0;\n        int a147 = 0;\n        int a148 = 0;\n        int a149 = 0;\n        int a150 = 0;\n        int a151 = 0;\n        int a152 = 0;\n        int a153 = 0;\n        int a154 = 0;\n        int a155 = 0;\n        int a156 = 0;\n        int a157 = 0;\n        int a158 = 0;\n        int a159 = 0;\n        int a160 = 0;\n        int a161 = 0;\n        int a162 = 0;\n        int a163 = 0;\n        int a164 = 0;\n        int a165 = 0;\n        int a166 = 0;\n        int a167 = 0;\n        int a1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a < 100) {\n            for(int i = 2; i <= a/2; i++) {\n                if(a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a < 100) {\n            for(int i = 2; i <= a/2; i++) {\n                if(a % i == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int count = 0;\n        while(n > 1) {\n            if(n % 3 == 0) {\n                count++;\n            }\n            n /= 3;\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i < a) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0)\n            return true;\n        if(n==1)\n            return x==1;\n        if(n==2)\n            return x==2;\n        if(n==3)\n            return x==8;\n        if(n==4)\n            return x==27;\n        if(n==5)\n            return x==125;\n        if(n==6)\n            return x==625;\n        if(n==7)\n            return x==3125;\n        if(n==8)\n            return x==15625;\n        if(n==9)\n            return x==78125;\n        if(n==10)\n            return x==390625;\n        if(n==11)\n            return x==1953125;\n        if(n==12)\n            return x==9765625;\n        if(n==13)\n            return x==48828125;\n        if(n==14)\n            return x==244140625;\n        if(n==15)\n            return x==1220703125;\n        if(n==16)\n            return x==6103515625;\n        if(n==17)\n            return x==30517578125;\n        if(n==18)\n            return x==152587890625;\n        if(n==19)\n            return x==762939453125;\n        if(n==20)\n            return x==3814697265625;\n        if(n==21)\n            return x==19073486328125;\n        if(n==22)\n            return x==95367431640625;\n        if(n==23)\n            return x==476837158203125;\n        if(n==24)\n            return x==2384185791015625;\n        if(n==25)\n            return x==11920928955078125;\n        if(n==26)\n            return x==59604644775390625;\n        if(n==27)\n            return x==298023223876953125;\n        if(n==28)\n            return x==1490116119384765625;\n        if(n==29)\n            return x==7450580596923828125;\n        if(n==30)\n            return x==37252902984619140625;\n        if(n==31)\n            return x==186264514923095703125;\n        if(n==32)\n            return x==931322574615478515625;\n        if(n==33)\n            return x==46566128730763916015625;\n        if(n==34)\n            return x==232830643653819580078125;\n        if(n==35)\n            return x==1164153218269097900390625;\n        if(n==36)\n            return x==5820766091345489501953125;\n        if(n==37)\n            return x==2910383045672744755859375;\n        if(n==38)\n            return x==14551915228363723779296875;\n        if(n==39)\n            return x==72759576141818618896484375;\n        if(n==40)\n            return x==363797880709093094482421875;\n        if(n==41)\n            return x==1818889403545465472412109375;\n        if(n==42)\n            return x==9094447017727327362060546875;\n        if(n==43)\n            return x==45472235088636636810302734375;\n        if(n==44)\n            return x==227361175443183184051513671875;\n        if(n==45)\n            return x==1136805877215915920257568359375;\n        if(n==46)\n            return x==568402938607957960128787841796875;\n        if(n==47)\n            return x==2842014693039789800643939208984375;\n        if(n==48)\n            return x==14210073465198949003219696044921875;\n        if(n==49)\n            return x==710503673305994745016098480224609375;\n        if(n==50)\n            return x==3552518366529973725080492401123046875;\n        if(n==51)\n            return x==17762591832649868625402462005615234375;\n        if(n==52)\n            return x==88812959163244934317012310029296875;\n        if(n==53)\n            return x==444064795816224671585061550146484375;\n        if(n==54)\n            return x==2220323979081123357925307750732421875;\n        if(n==55)\n            return x==11101619895405616789626", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < n) {\n            power *= 2;\n        }\n        return x == power;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        int power = 1;\n        while (power < n) {\n            power *= 2;\n        }\n        return x == power;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 2;\n        if (n == 3)\n            return x == 3;\n        if (n == 4)\n            return x == 4;\n        if (n == 5)\n            return x == 5;\n        if (n == 6)\n            return x == 6;\n        if (n == 7)\n            return x == 7;\n        if (n == 8)\n            return x == 8;\n        if (n == 9)\n            return x == 9;\n        if (n == 10)\n            return x == 10;\n        if (n == 11)\n            return x == 11;\n        if (n == 12)\n            return x == 12;\n        if (n == 13)\n            return x == 13;\n        if (n == 14)\n            return x == 14;\n        if (n == 15)\n            return x == 15;\n        if (n == 16)\n            return x == 16;\n        if (n == 17)\n            return x == 17;\n        if (n == 18)\n            return x == 18;\n        if (n == 19)\n            return x == 19;\n        if (n == 20)\n            return x == 20;\n        if (n == 21)\n            return x == 21;\n        if (n == 22)\n            return x == 22;\n        if (n == 23)\n            return x == 23;\n        if (n == 24)\n            return x == 24;\n        if (n == 25)\n            return x == 25;\n        if (n == 26)\n            return x == 26;\n        if (n == 27)\n            return x == 27;\n        if (n == 28)\n            return x == 28;\n        if (n == 29)\n            return x == 29;\n        if (n == 30)\n            return x == 30;\n        if (n == 31)\n            return x == 31;\n        if (n == 32)\n            return x == 32;\n        if (n == 33)\n            return x == 33;\n        if (n == 34)\n            return x == 34;\n        if (n == 35)\n            return x == 35;\n        if (n == 36)\n            return x == 36;\n        if (n == 37)\n            return x == 37;\n        if (n == 38)\n            return x == 38;\n        if (n == 39)\n            return x == 39;\n        if (n == 40)\n            return x == 40;\n        if (n == 41)\n            return x == 41;\n        if (n == 42)\n            return x == 42;\n        if (n == 43)\n            return x == 43;\n        if (n == 44)\n            return x == 44;\n        if (n == 45)\n            return x == 45;\n        if (n == 46)\n            return x == 46;\n        if (n == 47)\n            return x == 47;\n        if (n == 48)\n            return x == 48;\n        if (n == 49)\n            return x == 49;\n        if (n == 50)\n            return x == 50;\n        if (n == 51)\n            return x == 51;\n        if (n == 52)\n            return x == 52;\n        if (n == 53)\n            return x == 53;\n        if (n == 54)\n            return x == 54;\n        if (n == 55)\n            return x == 55;\n        if (n == 56)\n            return x == 56;\n        if (n == 57)\n            return x == 57;\n        if (n == 58)\n            return x == 58;\n        if (n == 59)\n            return x == 59;\n        if (n == 60)\n            return x == 60;\n        if (n == 61)\n            return x == 61;\n        if (n == 62)\n            return x == 62;\n        if (n == 63)\n            return x == 63;\n        if (n == 64)\n            return x == 64;\n        if (n == 65)\n            return x == 65;\n        if (n == 66)\n            return x == 66;\n        if (n == 67)\n            return x == 67;\n        if (n == 68)\n            return x == 68;\n        if (n == 69)\n            return x == 69;\n        if (n == 70)\n            return x == 70;\n        if (n == 71)\n            return x == 71;\n        if (n == 72)\n            return x == 72;\n        if (n == 73)\n            return x == 73;\n        if (n == 74)\n            return x == 74;\n        if (n == 75)\n            return x == 75;\n        if (n == 76)\n            return x == 76;\n        if (n == 77)\n            return x == 77;\n        if (n == 78)\n            return x == 78;\n        if (n == 79)\n            return x == 79;\n        if (n == 80)\n            return x == 80;\n        if (n == 81)\n            return x == 81;\n        if (n == 82)\n            return x == 82;\n        if (n == 83)\n            return x == 83;\n        if (n == 84)\n            return x == 84;\n        if (n == 85)\n            return x == 85;\n        if (n == 86)\n            return x == 86;\n        if (n == 87)\n            return x == 87;\n        if (n == 88)\n            return x == 88;\n        if (n == 89)\n            return x == 89;\n        if (n == 90)\n            return x == 90;\n        if (n == 91)\n            return x == 91;\n        if (n == 92)\n            return x == 92;\n        if (n == 93)\n            return x == 93;\n        if (n == 94)\n            return x == 94;\n        if (n == 95)\n            return x == 95;\n        if (n == 96)\n            return x == 96;\n        if (n == 97)\n            return x == 97;\n        if (n == 98)\n            return x == 98;\n        if (n == 99)\n            return x == 99;\n        if (n == 100)\n            return x == 100;\n        if (n == 101)\n            return x == 101;\n        if (n == 102)\n            return x == 102;\n        if (n == 103)\n            return x ==", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 2) {\n            return x == 1;\n        }\n        if (n == 3) {\n            return x == 2;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 8;\n        }\n        if (n == 6) {\n            return x == 16;\n        }\n        if (n == 7) {\n            return x == 32;\n        }\n        if (n == 8) {\n            return x == 64;\n        }\n        if (n == 9) {\n            return x == 128;\n        }\n        if (n == 10) {\n            return x == 256;\n        }\n        if (n == 11) {\n            return x == 512;\n        }\n        if (n == 12) {\n            return x == 1024;\n        }\n        if (n == 13) {\n            return x == 2048;\n        }\n        if (n == 14) {\n            return x == 4096;\n        }\n        if (n == 15) {\n            return x == 8192;\n        }\n        if (n == 16) {\n            return x == 16384;\n        }\n        if (n == 17) {\n            return x == 32768;\n        }\n        if (n == 18) {\n            return x == 65536;\n        }\n        if (n == 19) {\n            return x == 131072;\n        }\n        if (n == 20) {\n            return x == 262144;\n        }\n        if (n == 21) {\n            return x == 524288;\n        }\n        if (n == 22) {\n            return x == 1048576;\n        }\n        if (n == 23) {\n            return x == 2097152;\n        }\n        if (n == 24) {\n            return x == 4194304;\n        }\n        if (n == 25) {\n            return x == 8388608;\n        }\n        if (n == 26) {\n            return x == 16777216;\n        }\n        if (n == 27) {\n            return x == 33554432;\n        }\n        if (n == 28) {\n            return x == 67108864;\n        }\n        if (n == 29) {\n            return x == 134217728;\n        }\n        if (n == 30) {\n            return x == 268435456;\n        }\n        if (n == 31) {\n            return x == 536870912;\n        }\n        if (n == 32) {\n            return x == 1073741824;\n        }\n        if (n == 33) {\n            return x == 2147483648;\n        }\n        if (n == 34) {\n            return x == 4294967296;\n        }\n        if (n == 35) {\n            return x == 8589934592;\n        }\n        if (n == 36) {\n            return x == 17179869184;\n        }\n        if (n == 37) {\n            return x == 34359738368;\n        }\n        if (n == 38) {\n            return x == 68719476736;\n        }\n        if (n == 39) {\n            return x == 137438953472;\n        }\n        if (n == 40) {\n            return x == 274877906944;\n        }\n        if (n == 41) {\n            return x == 549755813888;\n        }\n        if (n == 42) {\n            return x == 1099511627776;\n        }\n        if (n == 43) {\n            return x == 2199023255552;\n        }\n        if (n == 44) {\n            return x == 4398046511104;\n        }\n        if (n == 45) {\n            return x == 8796093022208;\n        }\n        if (n == 46) {\n            return x == 17592186044416;\n        }\n        if (n == 47) {\n            return x == 35184372088832;\n        }\n        if (n == 48) {\n            return x == 70368744177664;\n        }\n        if (n == 49) {\n            return x == 140737488355328;\n        }\n        if (n == 50) {\n            return x == 281474976710656;\n        }\n        if (n == 51) {\n            return x == 562949953421312;\n        }\n        if (n == 52) {\n            return x == 1125899906842624;\n        }\n        if (n == 53) {\n            return x == 2251799813685248;\n        }\n        if (n == 54) {\n            return x == 4503599627370496;\n        }\n        if (n == 55) {\n            return x == 8007199254740992;\n        }\n        if (n == 56) {\n            return x == 16014398509481984;\n        }\n        if (n == 57) {\n            return x == 32028797018963968;\n        }\n        if (n == 58) {\n            return x == 64057594037927936;\n        }\n        if (n == 59) {\n            return x == 128115188075855872;\n        }\n        if (n == 60) {\n            return x == 256230376151711744;\n        }\n        if (n == 61) {\n            return x == 512460752303423488;\n        }\n        if (n == 62) {\n            return x == 1024921504606846976;\n        }\n        if (n == 63) {\n            return x == 2049843009213693952;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 2;\n        if (n == 3) return x == 3;\n        if (n == 4) return x == 4;\n        if (n == 5) return x == 5;\n        if (n == 6) return x == 6;\n        if (n == 7) return x == 7;\n        if (n == 8) return x == 8;\n        if (n == 9) return x == 9;\n        if (n == 10) return x == 10;\n        if (n == 11) return x == 11;\n        if (n == 12) return x == 12;\n        if (n == 13) return x == 13;\n        if (n == 14) return x == 14;\n        if (n == 15) return x == 15;\n        if (n == 16) return x == 16;\n        if (n == 17) return x == 17;\n        if (n == 18) return x == 18;\n        if (n == 19) return x == 19;\n        if (n == 20) return x == 20;\n        if (n == 21) return x == 21;\n        if (n == 22) return x == 22;\n        if (n == 23) return x == 23;\n        if (n == 24) return x == 24;\n        if (n == 25) return x == 25;\n        if (n == 26) return x == 26;\n        if (n == 27) return x == 27;\n        if (n == 28) return x == 28;\n        if (n == 29) return x == 29;\n        if (n == 30) return x == 30;\n        if (n == 31) return x == 31;\n        if (n == 32) return x == 32;\n        if (n == 33) return x == 33;\n        if (n == 34) return x == 34;\n        if (n == 35) return x == 35;\n        if (n == 36) return x == 36;\n        if (n == 37) return x == 37;\n        if (n == 38) return x == 38;\n        if (n == 39) return x == 39;\n        if (n == 40) return x == 40;\n        if (n == 41) return x == 41;\n        if (n == 42) return x == 42;\n        if (n == 43) return x == 43;\n        if (n == 44) return x == 44;\n        if (n == 45) return x == 45;\n        if (n == 46) return x == 46;\n        if (n == 47) return x == 47;\n        if (n == 48) return x == 48;\n        if (n == 49) return x == 49;\n        if (n == 50) return x == 50;\n        if (n == 51) return x == 51;\n        if (n == 52) return x == 52;\n        if (n == 53) return x == 53;\n        if (n == 54) return x == 54;\n        if (n == 55) return x == 55;\n        if (n == 56) return x == 56;\n        if (n == 57) return x == 57;\n        if (n == 58) return x == 58;\n        if (n == 59) return x == 59;\n        if (n == 60) return x == 60;\n        if (n == 61) return x == 61;\n        if (n == 62) return x == 62;\n        if (n == 63) return x == 63;\n        if (n == 64) return x == 64;\n        if (n == 65) return x == 65;\n        if (n == 66) return x == 66;\n        if (n == 67) return x == 67;\n        if (n == 68) return x == 68;\n        if (n == 69) return x == 69;\n        if (n == 70) return x == 70;\n        if (n == 71) return x == 71;\n        if (n == 72) return x == 72;\n        if (n == 73) return x == 73;\n        if (n == 74) return x == 74;\n        if (n == 75) return x == 75;\n        if (n == 76) return x == 76;\n        if (n == 77) return x == 77;\n        if (n == 78) return x == 78;\n        if (n == 79) return x == 79;\n        if (n == 80) return x == 80;\n        if (n == 81) return x == 81;\n        if (n == 82) return x == 82;\n        if (n == 83) return x == 83;\n        if (n == 84) return x == 84;\n        if (n == 85) return x == 85;\n        if (n == 86) return x == 86;\n        if (n == 87) return x == 87;\n        if (n == 88) return x == 88;\n        if (n == 89) return x == 89;\n        if (n == 90) return x == 90;\n        if (n == 91) return x == 91;\n        if (n == 92) return x == 92;\n        if (n == 93) return x == 93;\n        if (n == 94) return x == 94;\n        if (n == 95) return x == 95;\n        if (n == 96) return x == 96;\n        if (n == 97) return x == 97;\n        if (n == 98) return x == 98;\n        if (n == 99) return x == 99;\n        if (n == 100) return x == 100;\n        if (n == 101) return x == 101;\n        if (n == 102) return x == 102;\n        if (n == 103) return x == 103;\n        if (n == 104) return x == 104;\n        if (n == 105) return x == 105;\n        if (n == 106) return x == 106;\n        if (n == 107) return x == 107;\n        if (n == 108) return x == 108;\n        if (n == 109", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        int i = 1;\n        while (i < n) {\n            if (x % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0) return true;\n        if(n==1) return x==1;\n        if(n==2) return x==2;\n        if(n==3) return x==8;\n        if(n==4) return x==27;\n        if(n==5) return x==125;\n        if(n==6) return x==729;\n        if(n==7) return x==5043;\n        if(n==8) return x==362880;\n        if(n==9) return x==23145600;\n        if(n==10) return x==110942400;\n        if(n==11) return x==842108800;\n        if(n==12) return x==6207040000;\n        if(n==13) return x==44787360000;\n        if(n==14) return x==317872000000;\n        if(n==15) return x==2239360000000;\n        if(n==16) return x==16944000000000;\n        if(n==17) return x==134720000000000;\n        if(n==18) return x==1125000000000000;\n        if(n==19) return x==92000000000000000;\n        if(n==20) return x==740000000000000000;\n        if(n==21) return x==6000000000000000000;\n        if(n==22) return x==4900000000000000000;\n        if(n==23) return x==40000000000000000000;\n        if(n==24) return x==330000000000000000000;\n        if(n==25) return x==280000000000000000000;\n        if(n==26) return x==2400000000000000000000;\n        if(n==27) return x==210000000000000000000000;\n        if(n==28) return x==190000000000000000000000;\n        if(n==29) return x==1750000000000000000000000;\n        if(n==30) return x==1630000000000000000000000000;\n        if(n==31) return x==15300000000000000000000000000;\n        if(n==32) return x==14500000000000000000000000000;\n        if(n==33) return x==1380000000000000000000000000000;\n        if(n==34) return x==13200000000000000000000000000000;\n        if(n==35) return x==12600000000000000000000000000000;\n        if(n==36) return x==1200000000000000000000000000000000;\n        if(n==37) return x==114000000000000000000000000000000;\n        if(n==38) return x==10800000000000000000000000000000000;\n        if(n==39) return x==102000000000000000000000000000000000;\n        if(n==40) return x==960000000000000000000000000000000000;\n        if(n==41) return x==90000000000000000000000000000000000000;\n        if(n==42) return x==840000000000000000000000000000000000000;\n        if(n==43) return x==780000000000000000000000000000000000000000;\n        if(n==44) return x==720000000000000000000000000000000000000000;\n        if(n==45) return x==6600000000000000000000000000000000000000000000;\n        if(n==46) return x==600000000000000000000000000000000000000000000;\n        if(n==47) return x==5400000000000000000000000000000000000000000000000;\n        if(n==48) return x==48000000000000000000000000000000000000000000000000;\n        if(n==49) return x==42000000000000000000000000000000000000000000000000000;\n        if(n==50) return x==360000000000000000000", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 2;\n        if (n == 3)\n            return x == 3;\n        if (n == 4)\n            return x == 4;\n        if (n == 5)\n            return x == 5;\n        if (n == 6)\n            return x == 6;\n        if (n == 7)\n            return x == 7;\n        if (n == 8)\n            return x == 8;\n        if (n == 9)\n            return x == 9;\n        if (n == 10)\n            return x == 10;\n        if (n == 11)\n            return x == 11;\n        if (n == 12)\n            return x == 12;\n        if (n == 13)\n            return x == 13;\n        if (n == 14)\n            return x == 14;\n        if (n == 15)\n            return x == 15;\n        if (n == 16)\n            return x == 16;\n        if (n == 17)\n            return x == 17;\n        if (n == 18)\n            return x == 18;\n        if (n == 19)\n            return x == 19;\n        if (n == 20)\n            return x == 20;\n        if (n == 21)\n            return x == 21;\n        if (n == 22)\n            return x == 22;\n        if (n == 23)\n            return x == 23;\n        if (n == 24)\n            return x == 24;\n        if (n == 25)\n            return x == 25;\n        if (n == 26)\n            return x == 26;\n        if (n == 27)\n            return x == 27;\n        if (n == 28)\n            return x == 28;\n        if (n == 29)\n            return x == 29;\n        if (n == 30)\n            return x == 30;\n        if (n == 31)\n            return x == 31;\n        if (n == 32)\n            return x == 32;\n        if (n == 33)\n            return x == 33;\n        if (n == 34)\n            return x == 34;\n        if (n == 35)\n            return x == 35;\n        if (n == 36)\n            return x == 36;\n        if (n == 37)\n            return x == 37;\n        if (n == 38)\n            return x == 38;\n        if (n == 39)\n            return x == 39;\n        if (n == 40)\n            return x == 40;\n        if (n == 41)\n            return x == 41;\n        if (n == 42)\n            return x == 42;\n        if (n == 43)\n            return x == 43;\n        if (n == 44)\n            return x == 44;\n        if (n == 45)\n            return x == 45;\n        if (n == 46)\n            return x == 46;\n        if (n == 47)\n            return x == 47;\n        if (n == 48)\n            return x == 48;\n        if (n == 49)\n            return x == 49;\n        if (n == 50)\n            return x == 50;\n        if (n == 51)\n            return x == 51;\n        if (n == 52)\n            return x == 52;\n        if (n == 53)\n            return x == 53;\n        if (n == 54)\n            return x == 54;\n        if (n == 55)\n            return x == 55;\n        if (n == 56)\n            return x == 56;\n        if (n == 57)\n            return x == 57;\n        if (n == 58)\n            return x == 58;\n        if (n == 59)\n            return x == 59;\n        if (n == 60)\n            return x == 60;\n        if (n == 61)\n            return x == 61;\n        if (n == 62)\n            return x == 62;\n        if (n == 63)\n            return x == 63;\n        if (n == 64)\n            return x == 64;\n        if (n == 65)\n            return x == 65;\n        if (n == 66)\n            return x == 66;\n        if (n == 67)\n            return x == 67;\n        if (n == 68)\n            return x == 68;\n        if (n == 69)\n            return x == 69;\n        if (n == 70)\n            return x == 70;\n        if (n == 71)\n            return x == 71;\n        if (n == 72)\n            return x == 72;\n        if (n == 73)\n            return x == 73;\n        if (n == 74)\n            return x == 74;\n        if (n == 75)\n            return x == 75;\n        if (n == 76)\n            return x == 76;\n        if (n == 77)\n            return x == 77;\n        if (n == 78)\n            return x == 78;\n        if (n == 79)\n            return x == 79;\n        if (n == 80)\n            return x == 80;\n        if (n == 81)\n            return x == 81;\n        if (n == 82)\n            return x == 82;\n        if (n == 83)\n            return x == 83;\n        if (n == 84)\n            return x == 84;\n        if (n == 85)\n            return x == 85;\n        if (n == 86)\n            return x == 86;\n        if (n == 87)\n            return x == 87;\n        if (n == 88)\n            return x == 88;\n        if (n == 89)\n            return x == 89;\n        if (n == 90)\n            return x == 90;\n        if (n == 91)\n            return x == 91;\n        if (n == 92)\n            return x == 92;\n        if (n == 93)\n            return x == 93;\n        if (n == 94)\n            return x == 94;\n        if (n == 95)\n            return x == 95;\n        if (n == 96)\n            return x == 96;\n        if (n == 97)\n            return x == 97;\n        if (n == 98)\n            return x == 98;\n        if (n == 99)\n            return x == 99;\n        if (n == 100)\n            return x == 100;\n        if (n == 101)\n            return x == 101;\n        if (n == 102)\n            return x == 102;\n        if (n == 103)\n            return x ==", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0) return true;\n        if(n==1) return x==1;\n        if(n==2) return x==2;\n        if(n==3) return x==3;\n        if(n==4) return x==4;\n        if(n==5) return x==5;\n        if(n==6) return x==6;\n        if(n==7) return x==7;\n        if(n==8) return x==8;\n        if(n==9) return x==9;\n        if(n==10) return x==10;\n        if(n==11) return x==11;\n        if(n==12) return x==12;\n        if(n==13) return x==13;\n        if(n==14) return x==14;\n        if(n==15) return x==15;\n        if(n==16) return x==16;\n        if(n==17) return x==17;\n        if(n==18) return x==18;\n        if(n==19) return x==19;\n        if(n==20) return x==20;\n        if(n==21) return x==21;\n        if(n==22) return x==22;\n        if(n==23) return x==23;\n        if(n==24) return x==24;\n        if(n==25) return x==25;\n        if(n==26) return x==26;\n        if(n==27) return x==27;\n        if(n==28) return x==28;\n        if(n==29) return x==29;\n        if(n==30) return x==30;\n        if(n==31) return x==31;\n        if(n==32) return x==32;\n        if(n==33) return x==33;\n        if(n==34) return x==34;\n        if(n==35) return x==35;\n        if(n==36) return x==36;\n        if(n==37) return x==37;\n        if(n==38) return x==38;\n        if(n==39) return x==39;\n        if(n==40) return x==40;\n        if(n==41) return x==41;\n        if(n==42) return x==42;\n        if(n==43) return x==43;\n        if(n==44) return x==44;\n        if(n==45) return x==45;\n        if(n==46) return x==46;\n        if(n==47) return x==47;\n        if(n==48) return x==48;\n        if(n==49) return x==49;\n        if(n==50) return x==50;\n        if(n==51) return x==51;\n        if(n==52) return x==52;\n        if(n==53) return x==53;\n        if(n==54) return x==54;\n        if(n==55) return x==55;\n        if(n==56) return x==56;\n        if(n==57) return x==57;\n        if(n==58) return x==58;\n        if(n==59) return x==59;\n        if(n==60) return x==60;\n        if(n==61) return x==61;\n        if(n==62) return x==62;\n        if(n==63) return x==63;\n        if(n==64) return x==64;\n        if(n==65) return x==65;\n        if(n==66) return x==66;\n        if(n==67) return x==67;\n        if(n==68) return x==68;\n        if(n==69) return x==69;\n        if(n==70) return x==70;\n        if(n==71) return x==71;\n        if(n==72) return x==72;\n        if(n==73) return x==73;\n        if(n==74) return x==74;\n        if(n==75) return x==75;\n        if(n==76) return x==76;\n        if(n==77) return x==77;\n        if(n==78) return x==78;\n        if(n==79) return x==79;\n        if(n==80) return x==80;\n        if(n==81) return x==81;\n        if(n==82) return x==82;\n        if(n==83) return x==83;\n        if(n==84) return x==84;\n        if(n==85) return x==85;\n        if(n==86) return x==86;\n        if(n==87) return x==87;\n        if(n==88) return x==88;\n        if(n==89) return x==89;\n        if(n==90) return x==90;\n        if(n==91) return x==91;\n        if(n==92) return x==92;\n        if(n==93) return x==93;\n        if(n==94) return x==94;\n        if(n==95) return x==95;\n        if(n==96) return x==96;\n        if(n==97) return x==97;\n        if(n==98) return x==98;\n        if(n==99) return x==99;\n        if(n==100) return x==100;\n        if(n==101) return x==101;\n        if(n==102) return x==102;\n        if(n==103) return x==103;\n        if(n==104) return x==104;\n        if(n==105) return x==105;\n        if(n==106) return x==106;\n        if(n==107) return x==107;\n        if(n==108) return x==108;\n        if(n==109) return x==109;\n        if(n==110) return x==110;\n        if(n==111) return x==111;\n        if(n==112) return x==112;\n        if(n==113) return x==113;\n        if(n==114) return x==114;\n        if(n==115) return x==115;\n        if(n==116) return x==116;\n        if(n==117) return x==117;\n        if(n==118) return x==118;\n        if(n==119) return x==119;\n        if(n==120) return x==120;\n        if(n==121) return x==121;\n        if(n==122) return x==122;\n        if", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        int power = 1;\n        while(power < n) {\n            power *= x;\n        }\n        return power == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        int power = 1;\n        while(power < n){\n            power *= x;\n        }\n        return power == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==1)\n            return true;\n        if(n==0)\n            return false;\n        if(n==2)\n            return x==1;\n        if(n==3)\n            return x==1 || x==2;\n        if(n==4)\n            return x==1 || x==2 || x==3;\n        if(n==5)\n            return x==1 || x==2 || x==3 || x==4;\n        if(n==6)\n            return x==1 || x==2 || x==3 || x==4 || x==5;\n        if(n==7)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6;\n        if(n==8)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7;\n        if(n==9)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8;\n        if(n==10)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9;\n        if(n==11)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10;\n        if(n==12)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11;\n        if(n==13)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12;\n        if(n==14)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13;\n        if(n==15)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14;\n        if(n==16)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15;\n        if(n==17)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16;\n        if(n==18)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17;\n        if(n==19)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18;\n        if(n==20)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19;\n        if(n==21)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20;\n        if(n==22)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21;\n        if(n==23)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22;\n        if(n==24)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22 || x==23;\n        if(n==25)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22 || x==23 || x==24;\n        if(n==26)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22 || x==23 || x==24 || x==25;\n        if(n==27)\n            return x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0)\n            return true;\n        if(n==1)\n            return x==1;\n        if(n==2)\n            return x==2;\n        if(n==3)\n            return x==8;\n        if(n==4)\n            return x==27;\n        if(n==5)\n            return x==125;\n        if(n==6)\n            return x==729;\n        if(n==7)\n            return x==5043;\n        if(n==8)\n            return x==36288;\n        if(n==9)\n            return x==231441;\n        if(n==10)\n            return x==1100801;\n        if(n==11)\n            return x==858993459;\n        if(n==12)\n            return x==637418113;\n        if(n==13)\n            return x==4294967296;\n        if(n==14)\n            return x==2147483648;\n        if(n==15)\n            return x==1073741824;\n        if(n==16)\n            return x==536870912;\n        if(n==17)\n            return x==3145728256;\n        if(n==18)\n            return x==1572864304;\n        if(n==19)\n            return x==7814967296;\n        if(n==20)\n            return x==390625;\n        if(n==21)\n            return x==1953125;\n        if(n==22)\n            return x==9765625;\n        if(n==23)\n            return x==48828125;\n        if(n==24)\n            return x==244140625;\n        if(n==25)\n            return x==1220703125;\n        if(n==26)\n            return x==6103515625;\n        if(n==27)\n            return x==30517578125;\n        if(n==28)\n            return x==152587890625;\n        if(n==29)\n            return x==762939453125;\n        if(n==30)\n            return x==3814697265625;\n        if(n==31)\n            return x==19073486328125;\n        if(n==32)\n            return x==95367431640625;\n        if(n==33)\n            return x==476837158203125;\n        if(n==34)\n            return x==2384185791015625;\n        if(n==35)\n            return x==11920928955078125;\n        if(n==36)\n            return x==59604644775390625;\n        if(n==37)\n            return x==298023223876953125;\n        if(n==38)\n            return x==1490116119384765625;\n        if(n==39)\n            return x==7450580596923828125;\n        if(n==40)\n            return x==37252902984619140625;\n        if(n==41)\n            return x==186264514923095703125;\n        if(n==42)\n            return x==931322574615478515625;\n        if(n==43)\n            return x==465661287307639287109375;\n        if(n==44)\n            return x==2328306436538196484375;\n        if(n==45)\n            return x==11641532182690982421875;\n        if(n==46)\n            return x==58207660913454912115234375;\n        if(n==47)\n            return x==291038304567274560546875;\n        if(n==48)\n            return x==1455191522836372802734375;\n        if(n==49)\n            return x==7275957614181864013671875;\n        if(n==50)\n            return x==36379788070909320068359375;\n        if(n==51)\n            return x==1818989403545466003466796875;\n        if(n==52)\n            return x==9094947017727330017333984375;\n        if(n==53)\n            return x==45474735088636650086669921875;\n        if(n==54)\n            return x==227373675443183250433349609375;\n        if(n==55)\n            return x==1136868377215916252166748046875;\n        if(n==56)\n            return x==56843418860795812606083984375;\n        if(n==57)\n            return x==284217094303979063030419921875;\n        if(n==58)\n            return x==1421055471519895315152099609375;\n        if(n==59)\n            return x==71052773575594775575760498046875;\n        if(n==60)\n            return x==35526386787797387787880244140625;\n        if(n==61)\n            return x==17763193393898693893940", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        int i = 1;\n        while (i < n) {\n            if (x % n == 0) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = a;\n        int sum = 0;\n        while(n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        if(sum == a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a<0)\n            return false;\n        int sum=0;\n        for(int i=1;i<=a;i++)\n            sum+=i;\n        if(sum==a)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return false;\n        }\n        if (a % 2 == 0) {\n            return false;\n        }\n        if (a % 3 == 0) {\n            return false;\n        }\n        if (a % 4 == 0) {\n            return false;\n        }\n        if (a % 5 == 0) {\n            return false;\n        }\n        if (a % 6 == 0) {\n            return false;\n        }\n        if (a % 7 == 0) {\n            return false;\n        }\n        if (a % 8 == 0) {\n            return false;\n        }\n        if (a % 9 == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        int n = (int) Math.sqrt(a);\n        for (int i = 1; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        int sum = 0;\n        for (int i = 1; i <= a; i++) {\n            sum += i;\n        }\n        return sum == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = a;\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = a;\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        int n = (int) Math.sqrt(a);\n        for (int i = 1; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        if(a==1)\n            return true;\n        if(a%2==0)\n            return false;\n        if(a==3)\n            return true;\n        if(a%3==0)\n            return false;\n        if(a==5)\n            return true;\n        if(a%5==0)\n            return false;\n        if(a==7)\n            return true;\n        if(a%7==0)\n            return false;\n        if(a==11)\n            return true;\n        if(a%11==0)\n            return false;\n        if(a==13)\n            return true;\n        if(a%13==0)\n            return false;\n        if(a==17)\n            return true;\n        if(a%17==0)\n            return false;\n        if(a==19)\n            return true;\n        if(a%19==0)\n            return false;\n        if(a==23)\n            return true;\n        if(a%23==0)\n            return false;\n        if(a==29)\n            return true;\n        if(a%29==0)\n            return false;\n        if(a==31)\n            return true;\n        if(a%31==0)\n            return false;\n        if(a==37)\n            return true;\n        if(a%37==0)\n            return false;\n        if(a==41)\n            return true;\n        if(a%41==0)\n            return false;\n        if(a==43)\n            return true;\n        if(a%43==0)\n            return false;\n        if(a==47)\n            return true;\n        if(a%47==0)\n            return false;\n        if(a==53)\n            return true;\n        if(a%53==0)\n            return false;\n        if(a==59)\n            return true;\n        if(a%59==0)\n            return false;\n        if(a==61)\n            return true;\n        if(a%61==0)\n            return false;\n        if(a==67)\n            return true;\n        if(a%67==0)\n            return false;\n        if(a==71)\n            return true;\n        if(a%71==0)\n            return false;\n        if(a==73)\n            return true;\n        if(a%73==0)\n            return false;\n        if(a==79)\n            return true;\n        if(a%79==0)\n            return false;\n        if(a==83)\n            return true;\n        if(a%83==0)\n            return false;\n        if(a==89)\n            return true;\n        if(a%89==0)\n            return false;\n        if(a==97)\n            return true;\n        if(a%97==0)\n            return false;\n        if(a==101)\n            return true;\n        if(a%101==0)\n            return false;\n        if(a==103)\n            return true;\n        if(a%103==0)\n            return false;\n        if(a==107)\n            return true;\n        if(a%107==0)\n            return false;\n        if(a==109)\n            return true;\n        if(a%109==0)\n            return false;\n        if(a==113)\n            return true;\n        if(a%113==0)\n            return false;\n        if(a==127)\n            return true;\n        if(a%127==0)\n            return false;\n        if(a==131)\n            return true;\n        if(a%131==0)\n            return false;\n        if(a==137)\n            return true;\n        if(a%137==0)\n            return false;\n        if(a==139)\n            return true;\n        if(a%139==0)\n            return false;\n        if(a==149)\n            return true;\n        if(a%149==0)\n            return false;\n        if(a==151)\n            return true;\n        if(a%151==0)\n            return false;\n        if(a==157)\n            return true;\n        if(a%157==0)\n            return false;\n        if(a==163)\n            return true;\n        if(a%163==0)\n            return false;\n        if(a==167)\n            return true;\n        if(a%167==0)\n            return false;\n        if(a==173)\n            return true;\n        if(a%173==0)\n            return false;\n        if(a==179)\n            return true;\n        if(a%179==0)\n            return false;\n        if(a==181)\n            return true;\n        if(a%181==0)\n            return false;\n        if(a==191)\n            return true;\n        if(a%191==0)\n            return false;\n        if(a==193)\n            return true;\n        if(a%193==0)\n            return false;\n        if(a==197)\n            return true;\n        if(a%197==0)\n            return false;\n        if(a==199)\n            return true;\n        if(a%199==0)\n            return false;\n        if(a==211)\n            return true;\n        if(a%211==0)\n            return false;\n        if(a==223)\n            return true;\n        if(a%223==0)\n            return false;\n        if(a==227)\n            return true;\n        if(a%227==0)\n            return false;\n        if(a==229)\n            return true;\n        if(a%229==0)\n            return false;\n        if(a==233)\n            return true;\n        if(a%233==0)\n            return false;\n        if(a==239)\n            return true;\n        if(a%239==0)\n            return false;\n        if(a==241)\n            return true;\n        if(a%241==0)\n            return false;\n        if(a==251)\n            return true;\n        if(a%251==0)\n            return false;\n        if(a==257)\n            return true;\n        if(a%257==0)\n            return false;\n        if(a==263)\n            return true;\n        if(a%263==0)\n            return false;\n        if(a==269)\n            return true;\n        if(a%269==0)\n            return false;\n        if(a==271)\n            return true;\n        if(a%271==0)\n            return false;\n        if(a==277)\n            return true;\n        if(a%277==0)\n            return false;\n        if(a==281)\n            return true;\n        if(a%281==0)\n            return false;\n        if(a==283)\n            return true;\n        if(a%283==0)\n            return false;\n        if(a==293)\n            return true;\n        if(a%293==0)\n            return false;\n        if(a==297)\n            return true;\n        if(a%297==0)\n            return false;\n        if(a==307)\n            return true;\n        if(a%307==0)\n            return false;\n        if(a==311)\n            return true;\n        if(a%311==0)\n            return false;\n        if(a==313)\n            return true;\n        if(a%313==0)\n            return false;\n        if(a==31", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = a;\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = a;\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        int n=0;\n        while(a!=0){\n            n++;\n            a=a/10;\n        }\n        if(n==3)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        if(a == 1)\n            return true;\n        if(a == 2)\n            return true;\n        if(a == 3)\n            return true;\n        if(a == 4)\n            return true;\n        if(a == 5)\n            return true;\n        if(a == 6)\n            return true;\n        if(a == 7)\n            return true;\n        if(a == 8)\n            return true;\n        if(a == 9)\n            return true;\n        if(a == 10)\n            return true;\n        if(a == 11)\n            return true;\n        if(a == 12)\n            return true;\n        if(a == 13)\n            return true;\n        if(a == 14)\n            return true;\n        if(a == 15)\n            return true;\n        if(a == 16)\n            return true;\n        if(a == 17)\n            return true;\n        if(a == 18)\n            return true;\n        if(a == 19)\n            return true;\n        if(a == 20)\n            return true;\n        if(a == 21)\n            return true;\n        if(a == 22)\n            return true;\n        if(a == 23)\n            return true;\n        if(a == 24)\n            return true;\n        if(a == 25)\n            return true;\n        if(a == 26)\n            return true;\n        if(a == 27)\n            return true;\n        if(a == 28)\n            return true;\n        if(a == 29)\n            return true;\n        if(a == 30)\n            return true;\n        if(a == 31)\n            return true;\n        if(a == 32)\n            return true;\n        if(a == 33)\n            return true;\n        if(a == 34)\n            return true;\n        if(a == 35)\n            return true;\n        if(a == 36)\n            return true;\n        if(a == 37)\n            return true;\n        if(a == 38)\n            return true;\n        if(a == 39)\n            return true;\n        if(a == 40)\n            return true;\n        if(a == 41)\n            return true;\n        if(a == 42)\n            return true;\n        if(a == 43)\n            return true;\n        if(a == 44)\n            return true;\n        if(a == 45)\n            return true;\n        if(a == 46)\n            return true;\n        if(a == 47)\n            return true;\n        if(a == 48)\n            return true;\n        if(a == 49)\n            return true;\n        if(a == 50)\n            return true;\n        if(a == 51)\n            return true;\n        if(a == 52)\n            return true;\n        if(a == 53)\n            return true;\n        if(a == 54)\n            return true;\n        if(a == 55)\n            return true;\n        if(a == 56)\n            return true;\n        if(a == 57)\n            return true;\n        if(a == 58)\n            return true;\n        if(a == 59)\n            return true;\n        if(a == 60)\n            return true;\n        if(a == 61)\n            return true;\n        if(a == 62)\n            return true;\n        if(a == 63)\n            return true;\n        if(a == 64)\n            return true;\n        if(a == 65)\n            return true;\n        if(a == 66)\n            return true;\n        if(a == 67)\n            return true;\n        if(a == 68)\n            return true;\n        if(a == 69)\n            return true;\n        if(a == 70)\n            return true;\n        if(a == 71)\n            return true;\n        if(a == 72)\n            return true;\n        if(a == 73)\n            return true;\n        if(a == 74)\n            return true;\n        if(a == 75)\n            return true;\n        if(a == 76)\n            return true;\n        if(a == 77)\n            return true;\n        if(a == 78)\n            return true;\n        if(a == 79)\n            return true;\n        if(a == 80)\n            return true;\n        if(a == 81)\n            return true;\n        if(a == 82)\n            return true;\n        if(a == 83)\n            return true;\n        if(a == 84)\n            return true;\n        if(a == 85)\n            return true;\n        if(a == 86)\n            return true;\n        if(a == 87)\n            return true;\n        if(a == 88)\n            return true;\n        if(a == 89)\n            return true;\n        if(a == 90)\n            return true;\n        if(a == 91)\n            return true;\n        if(a == 92)\n            return true;\n        if(a == 93)\n            return true;\n        if(a == 94)\n            return true;\n        if(a == 95)\n            return true;\n        if(a == 96)\n            return true;\n        if(a == 97)\n            return true;\n        if(a == 98)\n            return true;\n        if(a == 99)\n            return true;\n        if(a == 100)\n            return true;\n        if(a == 101)\n            return true;\n        if(a == 102)\n            return true;\n        if(a == 103)\n            return true;\n        if(a == 104)\n            return true;\n        if(a == 105)\n            return true;\n        if(a == 106)\n            return true;\n        if(a == 107)\n            return true;\n        if(a == 108)\n            return true;\n        if(a == 109)\n            return true;\n        if(a == 110)\n            return true;\n        if(a == 111)\n            return true;\n        if(a == 112)\n            return true;\n        if(a == 113)\n            return true;\n        if(a == 114)\n            return true;\n        if(a == 115)\n            return true;\n        if(a == 116)\n            return true;\n        if(a == 117)\n            return true;\n        if(a == 118)\n            return true;\n        if(a == 119)\n            return true;\n        if(a == 120)\n            return true;\n        if(a == 121)\n            return true;\n        if(a == 122)\n            return true;\n        if(a == 123)\n            return true;\n        if(a == 124)\n            return true;\n        if(a == 125)\n            return true;\n        if(a == 126)\n            return true;\n        if(a == 127)\n            return true;\n        if(a == 128)\n            return true;\n        if(a == 129)\n            return true;\n        if(a == 130)\n            return true;\n        if(a == 131)\n            return true;\n        if(a == 132)\n            return true;\n        if(a == 133)\n            return true;\n        if(a == 134)\n            return true;\n        if(a == 135)\n            return true;\n        if(a == 136)\n            return true;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = a;\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        if(a == 1)\n            return false;\n        if(a % 2 == 0)\n            return false;\n        if(a == Math.sqrt(a))\n            return true;\n        if(a == Math.pow(a, 2))\n            return true;\n        if(a == Math.pow(a, 3))\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        int n = (int)Math.sqrt(a);\n        for(int i = 1; i <= n; i++) {\n            if(a % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        if(a == 1)\n            return false;\n        if(a % 2 == 0)\n            return false;\n        if(a % 3 == 0)\n            return false;\n        if(a % 4 == 0)\n            return false;\n        if(a % 5 == 0)\n            return false;\n        if(a % 6 == 0)\n            return false;\n        if(a % 7 == 0)\n            return false;\n        if(a % 8 == 0)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = a;\n        int sum = 0;\n        while(n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        int n = (int) Math.sqrt(a);\n        for (int i = 1; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for (int i = 0; i < len; i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for(int i = 0; i < len; i++){\n            char c = num.charAt(i);\n            if(c >= '0' && c <= '9'){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = num.charAt(i) - '0';\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for (int i = 0; i < len; i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        int[] arr = new int[26];\n        for(int i = 0; i < len; i++) {\n            arr[num.charAt(i) - '0']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(arr[i] > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int numLen = num.length();\n        int[] numArr = new int[numLen];\n        for(int i = 0; i < numLen; i++) {\n            numArr[i] = num.charAt(i) - '0';\n        }\n        for(int i = 0; i < numArr.length; i++) {\n            if(numArr[i] == 2) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        int i = 0;\n        while(i < len){\n            if(num.charAt(i) >= '0' && num.charAt(i) <= '9'){\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for(int i = 0; i < len; i++) {\n            if(num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int count = 0;\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n            count++;\n        }\n        binary = binary.substring(count);\n        binary = binary.concat(\"db\");\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int count = 0;\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n            count++;\n        }\n        binary = binary.substring(count);\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        while (decimal > 0) {\n            sb.append(decimal % 2);\n            decimal = decimal / 2;\n        }\n        sb.reverse();\n        sb.insert(0, 'b');\n        sb.insert(sb.length() - 1, 'd');\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        while (decimal != 0) {\n            binary.append(decimal % 2);\n            decimal /= 2;\n        }\n        binary.reverse();\n        binary.insert(0, \"db\");\n        binary.append(\"db\");\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        int binary = decimal;\n        while (binary != 0) {\n            sb.append(binary % 2);\n            binary /= 2;\n        }\n        sb.reverse();\n        sb.insert(0, 'db');\n        sb.append('db');\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        while (decimal > 0) {\n            sb.append(decimal % 2);\n            decimal = decimal / 2;\n        }\n        sb.reverse();\n        sb.insert(0, 'b');\n        sb.insert(sb.length() - 1, 'd');\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int i = 0;\n        while(decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n            i++;\n        }\n        binary = binary.substring(binary.length() - i);\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.append(decimal % 2);\n            decimal /= 2;\n        }\n        binary.reverse();\n        binary.insert(0, 'b');\n        binary.insert(binary.length(), 'd');\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary.append(remainder % 2);\n            remainder = remainder / 2;\n        }\n        binary.reverse();\n        binary.insert(0, 'b');\n        binary.insert(binary.length(), 'd');\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder > 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.substring(binary.length() - 2, binary.length());\n        binary = binary.substring(0, binary.length() - 2);\n        binary = \"db\" + binary + \"db\";\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.substring(binary.length() - 2, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        int remainder = decimal;\n        while (remainder != 0) {\n            int digit = remainder % 2;\n            remainder = remainder / 2;\n            binary.append(digit);\n        }\n        binary.reverse();\n        binary.insert(0, 'db');\n        binary.append('db');\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.substring(binary.length() - 2, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3) return false;\n        char[] arr = s.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for(int i = 0; i < arr.length; i++) {\n            if(set.contains(arr[i])) return false;\n            set.add(arr[i]);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] != arr[i+1])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3) return false;\n        char[] arr = s.toCharArray();\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == arr[i+1] && arr[i] == arr[i+2]) {\n                count++;\n                if(count > 2) return false;\n            } else {\n                count = 0;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (set.contains(s.charAt(i))) {\n                return false;\n            }\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int len = s.length();\n        if(len < 3) return false;\n        char[] arr = s.toCharArray();\n        int[] count = new int[26];\n        for(int i = 0; i < len; i++) {\n            int cur = arr[i] - 'a';\n            count[cur]++;\n            if(count[cur] > 1) return false;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] != 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        if (n < 3) {\n            return true;\n        }\n        char[] arr = s.toCharArray();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            int c = arr[i] - 'a';\n            count[c]++;\n            if (count[c] > 1) {\n                return false;\n            }\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (set.contains(s.charAt(i))) {\n                return false;\n            }\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        if(n < 3)\n            return true;\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            int index = c - 'a';\n            if(count[index] == 0)\n                count[index] = 1;\n            else\n                count[index]++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int count = 0;\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == arr[i+1] && arr[i] == arr[i+2]) {\n                count++;\n                i++;\n            }\n        }\n        return count >= 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        int count = 0;\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == arr[i+1]) {\n                count++;\n            }\n        }\n        if(count >= 3) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n            if (count[c] > 1) {\n                return false;\n            }\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int len = s.length();\n        if(len < 3) return false;\n        int[] count = new int[26];\n        for(int i = 0; i < len; i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n            if(count[c - 'a'] > 1) return false;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        HashSet<Character> set = new HashSet<>();\n        for(int i = 0; i < s.length(); i++) {\n            if(set.contains(s.charAt(i))) {\n                return false;\n            }\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        if (n < 3) {\n            return true;\n        }\n        char[] arr = s.toCharArray();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            int c = arr[i] - 'a';\n            count[c]++;\n            if (count[c] > 1) {\n                return false;\n            }\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        HashSet<Character> set = new HashSet<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            if (set.contains(s.charAt(i))) {\n                return false;\n            }\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(count[c-'a'] == 0)\n                count[c-'a'] = 1;\n            else\n                count[c-'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] != 1)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        if(n < 3)\n            return false;\n        char[] arr = s.toCharArray();\n        HashMap<Character, Integer> map = new HashMap<>();\n        for(int i = 0; i < n; i++) {\n            if(map.containsKey(arr[i]))\n                map.put(arr[i], map.get(arr[i]) + 1);\n            else\n                map.put(arr[i], 1);\n        }\n        for(int i = 0; i < n; i++) {\n            if(map.get(arr[i]) != 1)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        if (n < 3) {\n            return false;\n        }\n        char[] arr = s.toCharArray();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            int c = arr[i] - 'a';\n            count[c]++;\n            if (count[c] > 1) {\n                return false;\n            }\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        Set<Character> set = new HashSet<>();\n        for(int i = 0; i < s.length(); i++) {\n            if(set.contains(s.charAt(i)))\n                return false;\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gra : grades) {\n            if (gra >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gra >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gra >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gra >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gra >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gra >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gra >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gra >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gra >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gra >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gra >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gra >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4) {\n                result.add(\"A+\");\n            } else if (grade >= 3 && grade < 4) {\n                result.add(\"A\");\n            } else if (grade >= 2 && grade < 3) {\n                result.add(\"A-\");\n            } else if (grade >= 1 && grade < 2) {\n                result.add(\"B+\");\n            } else if (grade >= 0 && grade < 1) {\n                result.add(\"B\");\n            } else if (grade >= -1 && grade < 0) {\n                result.add(\"B-\");\n            } else if (grade >= -2 && grade < -1) {\n                result.add(\"C+\");\n            } else if (grade >= -3 && grade < -2) {\n                result.add(\"C\");\n            } else if (grade >= -4 && grade < -3) {\n                result.add(\"C-\");\n            } else if (grade >= -5 && grade < -4) {\n                result.add(\"D+\");\n            } else if (grade >= -6 && grade < -5) {\n                result.add(\"D\");\n            } else if (grade >= -7 && grade < -6) {\n                result.add(\"D-\");\n            } else if (grade >= -8 && grade < -7) {\n                result.add(\"E\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (int i = 0; i < grades.size(); i++) {\n            if (grades.get(i) >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grades.get(i) >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grades.get(i) >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grades.get(i) >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grades.get(i) >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grades.get(i) >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grades.get(i) >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grades.get(i) >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grades.get(i) >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grades.get(i) >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grades.get(i) >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grades.get(i) >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gra : grades) {\n            if (gra >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gra >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gra >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gra >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gra >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gra >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gra >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gra >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gra >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gra >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gra >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gra >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"D-\");\n            }\n        }\n        return letterGrades;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) return false;\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(0)) {\n                i++;\n                continue;\n            }\n            if (i == 1) return false;\n            for (int j = 1; j < i; j++) {\n                if (string.charAt(i) == string.charAt(j)) {\n                    i++;\n                    continue;\n                }\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        if (len == 1) {\n            return true;\n        }\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(0)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if(len == 0) return false;\n        int sum = 0;\n        for(int i = 0; i < len; i++) {\n            sum += string.charAt(i);\n        }\n        if(sum % 2 == 0) return false;\n        if(sum % 3 == 0) return false;\n        if(sum % 5 == 0) return false;\n        if(sum % 7 == 0) return false;\n        if(sum % 11 == 0) return false;\n        if(sum % 13 == 0) return false;\n        if(sum % 17 == 0) return false;\n        if(sum % 19 == 0) return false;\n        if(sum % 23 == 0) return false;\n        if(sum % 29 == 0) return false;\n        if(sum % 31 == 0) return false;\n        if(sum % 37 == 0) return false;\n        if(sum % 41 == 0) return false;\n        if(sum % 43 == 0) return false;\n        if(sum % 47 == 0) return false;\n        if(sum % 53 == 0) return false;\n        if(sum % 59 == 0) return false;\n        if(sum % 61 == 0) return false;\n        if(sum % 67 == 0) return false;\n        if(sum % 71 == 0) return false;\n        if(sum % 73 == 0) return false;\n        if(sum % 79 == 0) return false;\n        if(sum % 83 == 0) return false;\n        if(sum % 89 == 0) return false;\n        if(sum % 97 == 0) return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        for (int i = 2; i <= len / 2; i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len < 2) {\n            return false;\n        }\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(i - 1)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += string.charAt(i);\n        }\n        if (sum % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(0)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0)\n            return false;\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(0)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len - 1)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 2)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 3)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 4)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 5)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 6)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 7)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 8)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 9)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 10)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 11)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 12)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 13)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 14)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 15)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 16)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 17)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 18)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 19)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 20)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 21)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 22)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 23)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 24)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 25)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 26)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 27)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 28)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 29)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 30)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 31)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 32)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 33)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 34)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 35)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 36)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 37)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 38)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 39)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 40)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 41)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 42)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 43)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 44)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 45)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 46)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 47)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 48)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 49)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 50)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 51)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 52)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 53)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 54)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 55)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 56)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 57)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 58)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 59)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 60)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 61)) {\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == string.charAt(len / 62)) {\n                i++;\n                continue;\n            }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int count = 0;\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == '0') {\n                count++;\n            }\n            if (count > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        int i = 2;\n        while(i <= len){\n            if(len % i == 0){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        for (int i = 2; i <= len; i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += string.charAt(i);\n        }\n        if (sum % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(0)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return true;\n        }\n        int i = 2;\n        while (i < length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == '0') {\n                count++;\n            }\n        }\n        if (count == length) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        for (int i = 2; i <= len; i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(0)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0) {\n            return false;\n        }\n        int i = 2;\n        while (i < length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == '0') {\n                count++;\n            }\n        }\n        if (count == length) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += string.charAt(i);\n        }\n        if (sum % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                continue;\n            }\n            if (i % 10 == 1 || i % 10 == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1 || i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1 || i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1 || i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n            if (i % 10 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1 || i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1 || i % 10 == 9) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int i = 0;\n        while(N != 0){\n            binary = (N % 2) + binary;\n            N = N / 2;\n            i++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N /= 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N /= 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int i = 0;\n        while(N > 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n            i++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        int sum = 0;\n        while (N != 0) {\n            sum = sum + N % 2;\n            N = N / 2;\n        }\n        sb.append(sum);\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        while (N != 0) {\n            count++;\n            N /= 2;\n        }\n        for (int i = count - 1; i >= 0; i--) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int count = 0;\n        while(N != 0) {\n            binary = String.valueOf(N % 2) + binary;\n            N = N / 2;\n            count++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while (N > 0) {\n            binary = String.valueOf(N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String str = \"\";\n        while(N != 0) {\n            str = (N % 2) + str;\n            N = N / 2;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while(N != 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int count = 0;\n        while(N != 0){\n            binary = String.valueOf(N%2) + binary;\n            N = N/2;\n            count++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int i = 0;\n        while(N != 0) {\n            binary = String.valueOf(N % 2) + binary;\n            N = N / 2;\n            i++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while (N != 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int count = 0;\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            count++;\n            N /= 2;\n        }\n        return binary.substring(count - binary.length(), count);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 2 == 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int evenSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                evenSum += lst.get(i);\n            }\n        }\n        return evenSum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int ans = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                ans += lst.get(i);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even++;\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even++;\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int evenSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                evenSum += lst.get(i);\n            }\n        }\n        return evenSum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            newWords[i] = new String(chars);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i];\n        }\n        Arrays.sort(newWords);\n        String result = \"\";\n        for (int i = 0; i < newWords.length; i++) {\n            result += newWords[i];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        Arrays.sort(words);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            sb.append(words[i]);\n            if (i != words.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] ch = s.toCharArray();\n        Arrays.sort(ch);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        Arrays.sort(newWords);\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            newWords[i] = new String(chars);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        String result = \"\";\n        for (int i = 0; i < newWords.length; i++) {\n            result += newWords[i];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].charAt(0) + \"\";\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        Arrays.sort(words);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            sb.append(words[i]);\n            if (i != words.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        int i = 1;\n        while (i < lst.size()) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                temp.add(lst.get(i).get(j));\n            }\n            Collections.sort(temp);\n            res.add(temp);\n            i++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        int rowSize = lst.size();\n        int colSize = lst.get(0).size();\n        int rowStart = 0;\n        int colStart = 0;\n        int rowEnd = rowSize - 1;\n        int colEnd = colSize - 1;\n        while (rowStart <= rowEnd && colStart <= colEnd) {\n            if (lst.get(rowStart).get(colStart) == x) {\n                row.add(lst.get(rowStart).get(colStart));\n                rowStart++;\n            } else if (lst.get(rowStart).get(colStart) < x) {\n                rowStart++;\n            } else {\n                colStart++;\n            }\n        }\n        if (rowStart > rowEnd) {\n            rowStart = 0;\n            rowEnd = rowSize - 1;\n        }\n        if (colStart > colEnd) {\n            colStart = 0;\n            colEnd = colSize - 1;\n        }\n        while (rowStart <= rowEnd && colStart <= colEnd) {\n            if (lst.get(rowStart).get(colStart) == x) {\n                row.add(lst.get(rowStart).get(colStart));\n                rowStart++;\n            } else if (lst.get(rowStart).get(colStart) < x) {\n                rowStart++;\n            } else {\n                colStart++;\n            }\n        }\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                temp.add(lst.get(i).get(j));\n            }\n            Collections.sort(temp);\n            row.add(temp.get(0));\n            res.add(temp);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            row.set(i, row.get(i) - 1);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        int i = 0;\n        while (i < lst.size()) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                temp.add(lst.get(i).get(j));\n            }\n            Collections.sort(temp);\n            result.add(temp);\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        Collections.sort(row);\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row2 = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    row2.add(j);\n                }\n            }\n            row.add(row2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row1 = new ArrayList<>();\n            row1.add(i);\n            row.add(row1);\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row1.add(lst.get(i).get(j));\n            }\n            Collections.sort(row1);\n            res.add(row1);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                temp.add(lst.get(i).get(j));\n            }\n            Collections.sort(temp);\n            row.add(temp.get(0));\n            res.add(row);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    temp.add(i);\n                    break;\n                }\n            }\n            if (temp.size() == 0) {\n                row.add(x);\n            } else {\n                Collections.sort(temp);\n                row.addAll(temp);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> rowCopy = new ArrayList<>();\n            rowCopy.add(x);\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                rowCopy.add(lst.get(i).get(j));\n            }\n            result.add(rowCopy);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    temp.add(j);\n                }\n            }\n            Collections.sort(temp);\n            row.add(temp.get(0));\n            row.add(temp.get(1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row2 = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row2.add(lst.get(i).get(j));\n            }\n            Collections.sort(row2);\n            row.add(row2.get(0));\n            res.add(row2);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j).equals(x)) {\n                    temp.add(j);\n                }\n            }\n            Collections.sort(temp);\n            row.addAll(temp);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        int i = 0;\n        while (i < lst.size()) {\n            List<Integer> row2 = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row2.add(lst.get(i).get(j));\n            }\n            Collections.sort(row2);\n            res.add(row2);\n            i++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    temp.add(j);\n                }\n            }\n            Collections.sort(temp);\n            row.addAll(temp);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        int i = 0;\n        while (i < lst.size()) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                temp.add(lst.get(i).get(j));\n            }\n            Collections.sort(temp);\n            row.add(temp.get(0));\n            res.add(row);\n            i++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> rowCopy = new ArrayList<>();\n            rowCopy.add(x);\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                rowCopy.add(lst.get(i).get(j));\n            }\n            result.add(rowCopy);\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(i);\n            result.add(lst.get(i));\n        }\n        Collections.sort(row);\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            result.add(row);\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            result.add(array.get(i));\n        }\n\n        if (sum % 2 == 0) {\n            return result;\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        int len = array.size();\n        List<Integer> result = new ArrayList<Integer>(len);\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += array.get(i);\n            result.add(array.get(i));\n        }\n        if (sum % 2 == 0) {\n            return result;\n        }\n        int index = 0;\n        for (int i = 0; i < len; i++) {\n            result.set(index, array.get(i));\n            index++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n\n        Collections.sort(result);\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int len = array.size();\n        if (len == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < len; i++) {\n            result.add(array.get(i));\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n\n        Collections.sort(result);\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            result.add(array.get(i));\n        }\n\n        if (sum % 2 == 0) {\n            return result;\n        }\n\n        for (int i = 0; i < array.size(); i++) {\n            result.set(i, array.get(array.size() - 1 - i));\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            return array;\n        } else {\n            List<Integer> result = new ArrayList<>();\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int len = array.size();\n        for (int i = 0; i < len; i++) {\n            sum += array.get(i);\n            if (sum % 2 == 1) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            result.add(array.get(i));\n        }\n\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.set(i, array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.set(i, array.get(i));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int n = array.size();\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < n; i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = n - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        int len = array.size();\n        int[] sums = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums[i] = array.get(i);\n        }\n\n        int[] sums2 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums2[i] = sums[i];\n        }\n\n        for (int i = 0; i < len; i++) {\n            sums2[i] += sums[i];\n        }\n\n        int[] sums3 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums3[i] = sums2[i];\n        }\n\n        int[] sums4 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums4[i] = sums3[i];\n        }\n\n        int[] sums5 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums5[i] = sums4[i];\n        }\n\n        int[] sums6 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums6[i] = sums5[i];\n        }\n\n        int[] sums7 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums7[i] = sums6[i];\n        }\n\n        int[] sums8 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums8[i] = sums7[i];\n        }\n\n        int[] sums9 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums9[i] = sums8[i];\n        }\n\n        int[] sums10 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums10[i] = sums9[i];\n        }\n\n        int[] sums11 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums11[i] = sums10[i];\n        }\n\n        int[] sums12 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums12[i] = sums11[i];\n        }\n\n        int[] sums13 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums13[i] = sums12[i];\n        }\n\n        int[] sums14 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums14[i] = sums13[i];\n        }\n\n        int[] sums15 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums15[i] = sums14[i];\n        }\n\n        int[] sums16 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums16[i] = sums15[i];\n        }\n\n        int[] sums17 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums17[i] = sums16[i];\n        }\n\n        int[] sums18 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums18[i] = sums17[i];\n        }\n\n        int[] sums19 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums19[i] = sums18[i];\n        }\n\n        int[] sums20 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums20[i] = sums19[i];\n        }\n\n        int[] sums21 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums21[i] = sums20[i];\n        }\n\n        int[] sums22 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums22[i] = sums21[i];\n        }\n\n        int[] sums23 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums23[i] = sums22[i];\n        }\n\n        int[] sums24 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums24[i] = sums23[i];\n        }\n\n        int[] sums25 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums25[i] = sums24[i];\n        }\n\n        int[] sums26 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums26[i] = sums25[i];\n        }\n\n        int[] sums27 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums27[i] = sums26[i];\n        }\n\n        int[] sums28 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums28[i] = sums27[i];\n        }\n\n        int[] sums29 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums29[i] = sums28[i];\n        }\n\n        int[] sums30 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums30[i] = sums29[i];\n        }\n\n        int[] sums31 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums31[i] = sums30[i];\n        }\n\n        int[] sums32 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums32[i] = sums31[i];\n        }\n\n        int[] sums33 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums33[i] = sums32[i];\n        }\n\n        int[] sums34 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums34[i] = sums33[i];\n        }\n\n        int[] sums35 = new int[len];\n        for (int i = 0; i < len; i++) {\n            sums35[i] = sums34[i];\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotatedArr = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotatedArr[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotatedArr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] ch = s.toCharArray();\n        char[] newCh = new char[ch.length];\n        for (int i = 0; i < ch.length; i++) {\n            newCh[i] = ch[(i + 2) % ch.length];\n        }\n        return new String(newCh);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String result = \"\";\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n            if (i % 2 == 0) {\n                c = (char) (c + 2);\n            } else {\n                c = (char) (c - 2);\n            }\n            result += c;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int k = 2;\n        int i = 0;\n        while (i < n) {\n            arr[i] = (char) (arr[i] + k);\n            i++;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int k = 2;\n        for (int i = 0; i < n; i++) {\n            arr[i] = (char) (arr[i] + k);\n            k = k * 2;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String result = \"\";\n        int shift = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a') {\n                c = 'b';\n            } else if (c == 'e') {\n                c = 'f';\n            } else if (c == 'i') {\n                c = 'j';\n            } else if (c == 'o') {\n                c = 'p';\n            } else if (c == 'u') {\n                c = 'v';\n            }\n            result += c;\n            shift += 2;\n            if (shift >= 26) {\n                shift = 0;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String result = \"\";\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            result += (char) (chars[i] + 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] ch = s.toCharArray();\n        int n = ch.length;\n        int[] shift = new int[n];\n        shift[0] = 1;\n        shift[1] = 2;\n        for (int i = 2; i < n; i++) {\n            shift[i] = shift[i - 1] + shift[i - 2];\n        }\n        for (int i = 0; i < n; i++) {\n            ch[i] = (char) (ch[i] + shift[i]);\n        }\n        return new String(ch);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String encrypted = \"\";\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            encrypted += s.charAt(i) + (i % 2 == 0 ? 1 : 0);\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] ch = s.toCharArray();\n        char[] newCh = new char[ch.length];\n        int i = 0;\n        int j = 0;\n        for (int k = 0; k < ch.length; k++) {\n            if (k % 2 == 0) {\n                newCh[i] = ch[k];\n                i++;\n            } else {\n                newCh[j] = ch[k];\n                j++;\n            }\n        }\n        return new String(newCh);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotatedArr = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotatedArr[i] = arr[(i + 1) % arr.length];\n        }\n        return new String(rotatedArr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int shift = 2;\n        int i = 0;\n        while(i < len) {\n            arr[i] = (char) (arr[i] + shift);\n            i++;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int shift = 2;\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = (char) (arr[i] + shift);\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] ch = s.toCharArray();\n        char[] new_ch = new char[ch.length];\n        int shift = 0;\n        for (int i = 0; i < ch.length; i++) {\n            if (i % 2 == 0) {\n                shift++;\n            }\n            new_ch[i] = ch[i] + shift;\n        }\n        return new String(new_ch);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int k = 2;\n        for (int i = 0; i < n; i++) {\n            arr[i] = (char) (arr[i] + k);\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String result = \"\";\n        char[] ch = s.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (i % 2 == 0) {\n                result += ch[i];\n            } else {\n                result += ch[i] + ch[i + 1];\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] res = new char[s.length()];\n        int shift = 0;\n        for (int i = 0; i < s.length(); i++) {\n            res[i] = arr[(i + shift) % arr.length];\n            shift += 2;\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        String[] words = S.split(\" \");\n        int count = 0;\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        String[] words = S.split(\" \");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return ((Integer) x + (Integer) y) == (Integer) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (a == sum && b == sum && c == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a || sum == b || sum == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (Integer) x;\n            int yInt = (Integer) y;\n            int zInt = (Integer) z;\n            if (xInt + yInt == zInt) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (xInt == sum && yInt == sum && zInt == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y + (int) z;\n            if (sum == x || sum == y || sum == z) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (Integer) x;\n            int yInt = (Integer) y;\n            int zInt = (Integer) z;\n            return xInt + yInt == zInt;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a || sum == b || sum == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a || sum == b || sum == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (int) x;\n            int yInt = (int) y;\n            int zInt = (int) z;\n            return xInt + yInt == zInt;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return ((Integer) x + (Integer) y) == ((Integer) x + (Integer) z);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (Integer) x;\n            int yInt = (Integer) y;\n            int zInt = (Integer) z;\n            return xInt + yInt == zInt;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y + (int) z;\n            if (sum == x || sum == y || sum == z) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        return sum == a || sum == b || sum == c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a || sum == b || sum == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (int) x;\n            int yInt = (int) y;\n            int zInt = (int) z;\n            return (xInt + yInt) == zInt;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y + (int) z;\n            return sum == x || sum == y || sum == z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c == 'a' || c == 'A') {\n                encoded += 'A';\n            } else if (c == 'e' || c == 'E') {\n                encoded += 'E';\n            } else if (c == 'i' || c == 'I') {\n                encoded += 'I';\n            } else if (c == 'o' || c == 'O') {\n                encoded += 'O';\n            } else if (c == 'u' || c == 'U') {\n                encoded += 'U';\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            char c = messageChars[i];\n            if (c >= 'A' && c <= 'Z') {\n                encoded += c;\n            } else if (c >= 'a' && c <= 'z') {\n                encoded += c;\n            } else if (c == ' ') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int i = 0;\n        int j = 0;\n        char temp;\n        while (i < messageArray.length) {\n            if (messageArray[i] == 'a' || messageArray[i] == 'A') {\n                encodedArray[j] = 'A';\n                j++;\n            } else if (messageArray[i] == 'e' || messageArray[i] == 'E') {\n                encodedArray[j] = 'E';\n                j++;\n            } else if (messageArray[i] == 'i' || messageArray[i] == 'I') {\n                encodedArray[j] = 'I';\n                j++;\n            } else if (messageArray[i] == 'o' || messageArray[i] == 'O') {\n                encodedArray[j] = 'O';\n                j++;\n            } else if (messageArray[i] == 'u' || messageArray[i] == 'U') {\n                encodedArray[j] = 'U';\n                j++;\n            } else {\n                encodedArray[j] = messageArray[i];\n                j++;\n            }\n            i++;\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'A') {\n                result += 'A';\n            } else if (currentChar == 'e' || currentChar == 'E') {\n                result += 'E';\n            } else if (currentChar == 'i' || currentChar == 'I') {\n                result += 'I';\n            } else if (currentChar == 'o' || currentChar == 'O') {\n                result += 'O';\n            } else if (currentChar == 'u' || currentChar == 'U') {\n                result += 'U';\n            } else if (currentChar == 'A' || currentChar == 'a') {\n                result += 'a';\n            } else if (currentChar == 'E' || currentChar == 'e') {\n                result += 'e';\n            } else if (currentChar == 'I' || currentChar == 'i') {\n                result += 'i';\n            } else if (currentChar == 'O' || currentChar == 'o') {\n                result += 'o';\n            } else if (currentChar == 'U' || currentChar == 'u') {\n                result += 'u';\n            } else {\n                result += currentChar;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i] == 'a' || messageArray[i] == 'A') {\n                encodedArray[i] = 'A';\n            } else if (messageArray[i] == 'e' || messageArray[i] == 'E') {\n                encodedArray[i] = 'E';\n            } else if (messageArray[i] == 'i' || messageArray[i] == 'I') {\n                encodedArray[i] = 'I';\n            } else if (messageArray[i] == 'o' || messageArray[i] == 'O') {\n                encodedArray[i] = 'O';\n            } else if (messageArray[i] == 'u' || messageArray[i] == 'U') {\n                encodedArray[i] = 'U';\n            } else {\n                encodedArray[i] = messageArray[i];\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            char c = messageChars[i];\n            if (c >= 'a' && c <= 'z') {\n                encoded += c;\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += c;\n            } else if (c == ' ') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == '\"') {\n                encoded += c;\n            } else if (c == '\\'') {\n                encoded += c;\n            } else if (c == '(') {\n                encoded += c;\n            } else if (c == ')') {\n                encoded += c;\n            } else if (c == '[') {\n                encoded += c;\n            } else if (c == ']') {\n                encoded += c;\n            } else if (c == '{') {\n                encoded += c;\n            } else if (c == '}') {\n                encoded += c;\n            } else if (c == '\\\\') {\n                encoded += c;\n            } else if (c == '/') {\n                encoded += c;\n            } else if (c == '*') {\n                encoded += c;\n            } else if (c == '+') {\n                encoded += c;\n            } else if (c == '-') {\n                encoded += c;\n            } else if (c == '=') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == ' ') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                encoded += Character.toLowerCase(c);\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            char nextChar = messageArray[i + 1];\n            if (currentChar == 'a' || currentChar == 'A') {\n                encodedArray[i] = 'A';\n            } else if (currentChar == 'e' || currentChar == 'E') {\n                encodedArray[i] = 'E';\n            } else if (currentChar == 'i' || currentChar == 'I') {\n                encodedArray[i] = 'I';\n            } else if (currentChar == 'o' || currentChar == 'O') {\n                encodedArray[i] = 'O';\n            } else if (currentChar == 'u' || currentChar == 'U') {\n                encodedArray[i] = 'U';\n            } else if (currentChar == 'A' && nextChar == 'E') {\n                encodedArray[i] = 'a';\n            } else if (currentChar == 'A' && nextChar == 'I') {\n                encodedArray[i] = 'a';\n            } else if (currentChar == 'A' && nextChar == 'O') {\n                encodedArray[i] = 'a';\n            } else if (currentChar == 'A' && nextChar == 'U') {\n                encodedArray[i] = 'a';\n            } else if (currentChar == 'E' && nextChar == 'I') {\n                encodedArray[i] = 'e';\n            } else if (currentChar == 'E' && nextChar == 'O') {\n                encodedArray[i] = 'e';\n            } else if (currentChar == 'E' && nextChar == 'U') {\n                encodedArray[i] = 'e';\n            } else if (currentChar == 'I' && nextChar == 'E') {\n                encodedArray[i] = 'i';\n            } else if (currentChar == 'I' && nextChar == 'O') {\n                encodedArray[i] = 'i';\n            } else if (currentChar == 'I' && nextChar == 'U') {\n                encodedArray[i] = 'i';\n            } else if (currentChar == 'O' && nextChar == 'E') {\n                encodedArray[i] = 'o';\n            } else if (currentChar == 'O' && nextChar == 'I') {\n                encodedArray[i] = 'o';\n            } else if (currentChar == 'O' && nextChar == 'U') {\n                encodedArray[i] = 'o';\n            } else if (currentChar == 'U' && nextChar == 'E') {\n                encodedArray[i] = 'u';\n            } else if (currentChar == 'U' && nextChar == 'I') {\n                encodedArray[i] = 'u';\n            } else if (currentChar == 'U' && nextChar == 'O') {\n                encodedArray[i] = 'u';\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            char c = messageArray[i];\n            if (c == 'a' || c == 'A') {\n                encodedArray[i] = 'A';\n            } else if (c == 'e' || c == 'E') {\n                encodedArray[i] = 'E';\n            } else if (c == 'i' || c == 'I') {\n                encodedArray[i] = 'I';\n            } else if (c == 'o' || c == 'O') {\n                encodedArray[i] = 'O';\n            } else if (c == 'u' || c == 'U') {\n                encodedArray[i] = 'U';\n            } else if (c == 'A' || c == 'a') {\n                encodedArray[i] = 'a';\n            } else if (c == 'E' || c == 'e') {\n                encodedArray[i] = 'e';\n            } else if (c == 'I' || c == 'i') {\n                encodedArray[i] = 'i';\n            } else if (c == 'O' || c == 'o') {\n                encodedArray[i] = 'o';\n            } else if (c == 'U' || c == 'u') {\n                encodedArray[i] = 'u';\n            } else {\n                encodedArray[i] = c;\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                encoded += Character.toUpperCase(c);\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int i = 0;\n        int j = 0;\n        char temp;\n        while (i < messageArray.length) {\n            if (Character.isLetter(messageArray[i])) {\n                temp = messageArray[i];\n                messageArray[i] = messageArray[j];\n                messageArray[j] = temp;\n                j++;\n            }\n            i++;\n        }\n        return new String(messageArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            char currentChar = messageChars[i];\n            char nextChar = messageChars[i + 1];\n            if (nextChar == 'a' || nextChar == 'A') {\n                encoded += currentChar;\n            } else {\n                encoded += Character.toLowerCase(currentChar);\n            }\n            i++;\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            char c = messageChars[i];\n            if (c >= 'a' && c <= 'z') {\n                encoded += c;\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += c;\n            } else if (c == ' ') {\n                encoded += c;\n            } else if (c == '!') {\n                encoded += c;\n            } else if (c == '\"') {\n                encoded += c;\n            } else if (c == '\\'') {\n                encoded += c;\n            } else if (c == '(') {\n                encoded += c;\n            } else if (c == ')') {\n                encoded += c;\n            } else if (c == '*') {\n                encoded += c;\n            } else if (c == '+') {\n                encoded += c;\n            } else if (c == ',') {\n                encoded += c;\n            } else if (c == '-') {\n                encoded += c;\n            } else if (c == '.') {\n                encoded += c;\n            } else if (c == '/') {\n                encoded += c;\n            } else if (c == ':') {\n                encoded += c;\n            } else if (c == ';') {\n                encoded += c;\n            } else if (c == '?') {\n                encoded += c;\n            } else if (c == '@') {\n                encoded += c;\n            } else if (c == '[') {\n                encoded += c;\n            } else if (c == ']') {\n                encoded += c;\n            } else if (c == '{') {\n                encoded += c;\n            } else if (c == '}') {\n                encoded += c;\n            } else if (c == '~') {\n                encoded += c;\n            } else if (c == '`') {\n                encoded += c;\n            } else if (c == '\u00b4') {\n                encoded += c;\n            } else if (c == '\u00a8') {\n                encoded += c;\n            } else if (c == '\u00a3') {\n                encoded += c;\n            } else if (c == '\u00a5') {\n                encoded += c;\n            } else if (c == '\u00a9') {\n                encoded += c;\n            } else if (c == '\u00aa') {\n                encoded += c;\n            } else if (c == '\u00ab') {\n                encoded += c;\n            } else if (c == '\u00ac') {\n                encoded += c;\n            } else if (c == '\u00ae') {\n                encoded += c;\n            } else if (c == '\u00af') {\n                encoded += c;\n            } else if (c == '\u00b0') {\n                encoded += c;\n            } else if (c == '\u00b1') {\n                encoded += c;\n            } else if (c == '\u00b2') {\n                encoded += c;\n            } else if (c == '\u00b3') {\n                encoded += c;\n            } else if (c == '\u00b4') {\n                encoded += c;\n            } else if (c == '\u00a7') {\n                encoded += c;\n            } else if (c == '\u00b6') {\n                encoded += c;\n            } else if (c == '\u00b7') {\n                encoded += c;\n            } else if (c == '\u00b8') {\n                encoded += c;\n            } else if (c == '\u00b9') {\n                encoded += c;\n            } else if (c == '\u00ba') {\n                encoded += c;\n            } else if (c == '\u00bb') {\n                encoded += c;\n            } else if (c == '\u00bc') {\n                encoded += c;\n            } else if (c == '\u00bd') {\n                encoded += c;\n            } else if (c == '\u00be') {\n                encoded += c;\n            } else if (c == '\u00bf') {\n                encoded += c;\n            } else if (c == '\u00c0') {\n                encoded += c;\n            } else if (c == '\u00c1') {\n                encoded += c;\n            } else if (c == '\u00c2') {\n                encoded += c;\n            } else if (c == '\u00c3') {\n                encoded += c;\n            } else if (c == '\u00c4') {\n                encoded += c;\n            } else if (c == '\u00c5') {\n                encoded += c;\n            } else if (c == '\u00c6') {\n                encoded += c;\n            } else if (c == '\u00c7') {\n                encoded += c;\n            } else if (c == '\u00c8') {\n                encoded += c;\n            } else if (c == '\u00c9') {\n                encoded += c;\n            } else if (c == '\u00ca') {\n                encoded += c;\n            } else if (c == '\u00cb') {\n                encoded += c;\n            } else if (c == '\u00cc') {\n                encoded += c;\n            } else if (c == '\u00cd') {\n                encoded += c;\n            } else if (c == '\u00ce') {\n                encoded += c;\n            } else if (c == '\u00cf') {\n                encoded += c;\n            } else if (c == '\u00d0') {\n                encoded += c;\n            } else if (c == '\u00d1') {\n                encoded += c;\n            } else if (c == '\u00d2') {\n                encoded += c;\n            } else if (c == '\u00d3') {\n                encoded += c;\n            } else if (c == '\u00d4') {\n                encoded += c;\n            } else if (c == '\u00d5') {\n                encoded += c;\n            } else if (c == '\u00d6') {\n                encoded += c;\n            } else if (c == '\u00d7') {\n                encoded += c;\n            } else if (c == '\u00d8') {\n                encoded += c;\n            } else if (c == '\u00d9') {\n                encoded += c;\n            } else if (c == '\u00da') {\n                encoded += c;\n            } else if (c == '\u00db') {\n                encoded += c;\n            } else if (c == '\u00dc') {\n                encoded += c;\n            } else if (c == '\u00dd') {\n                encoded += c;\n            } else if (c == '\u00de') {\n                encoded += c;\n            } else if (c == '\u00df') {\n                encoded += c;\n            } else if (c == '\u00e0') {\n                encoded += c;\n            } else if (c == '\u00e1') {\n                encoded += c;\n            } else if (c == '\u00e2') {\n                encoded += c;\n            } else if (c == '\u00e3') {\n                encoded += c;\n            } else if (c == '\u00e4') {\n                encoded += c;\n            } else if (c == '\u00e5') {\n                encoded += c;\n            } else if (c == '\u00e6') {\n                encoded += c;\n            } else if (c == '\u00e7') {\n                encoded += c;\n            } else if (c == '\u00e8') {\n                encoded += c;\n            } else if (c == '\u00e9') {\n                encoded += c;\n            } else if (c == '\u00ea') {\n                encoded += c;\n            } else if (c == '\u00eb') {\n                encoded += c;\n            } else if (c == '\u00ec') {\n                encoded += c;\n            } else if (c == '\u00ed') {\n                encoded += c;\n            } else if (c == '\u00ee') {\n                encoded += c;\n            } else if (c == '\u00ef') {\n                encoded += c;\n            } else if (c == '\u00f0') {\n                encoded += c;\n            } else if (c == '\u00f1') {\n                encoded += c;\n            } else if (c == '\u00f2') {\n                encoded += c;\n            } else if (c == '\u00f3') {\n                encoded += c;\n            } else if (c == '\u00f4') {\n                encoded += c;\n            } else if (c == '\u00f5') {\n                encoded += c;\n            } else if (c == '\u00f6') {\n                encoded += c;\n            } else if (c == '\u00f7') {\n                encoded += c;\n            } else if (c == '\u00f8') {\n                encoded += c;\n            } else if (c == '\u00f9') {\n                encoded += c;\n            }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            char c = messageArray[i];\n            if (Character.isLetter(c)) {\n                encodedArray[i] = Character.toLowerCase(c);\n            } else {\n                encodedArray[i] = c;\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int index = 0;\n        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i] >= 'a' && messageArray[i] <= 'z') {\n                encodedArray[index] = (char) (messageArray[i] - 32);\n                index++;\n            } else {\n                encodedArray[index] = messageArray[i];\n                index++;\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            char currentChar = messageChars[i];\n            if (currentChar >= 'a' && currentChar <= 'z') {\n                encoded += currentChar;\n            } else if (currentChar >= 'A' && currentChar <= 'Z') {\n                encoded += (char) (currentChar - 32);\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            char nextChar = messageArray[i + 1];\n\n            if (currentChar == 'a' || currentChar == 'A') {\n                encodedArray[i] = 'A';\n            } else if (currentChar == 'e' || currentChar == 'E') {\n                encodedArray[i] = 'E';\n            } else if (currentChar == 'i' || currentChar == 'I') {\n                encodedArray[i] = 'I';\n            } else if (currentChar == 'o' || currentChar == 'O') {\n                encodedArray[i] = 'O';\n            } else if (currentChar == 'u' || currentChar == 'U') {\n                encodedArray[i] = 'U';\n            } else if (currentChar == 'A' || currentChar == 'a') {\n                encodedArray[i] = 'a';\n            } else if (currentChar == 'E' || currentChar == 'e') {\n                encodedArray[i] = 'e';\n            } else if (currentChar == 'I' || currentChar == 'i') {\n                encodedArray[i] = 'i';\n            } else if (currentChar == 'O' || currentChar == 'o') {\n                encodedArray[i] = 'o';\n            } else if (currentChar == 'U' || currentChar == 'u') {\n                encodedArray[i] = 'u';\n            } else {\n                encodedArray[i] = currentChar;\n            }\n        }\n\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int i = 0;\n        int j = 0;\n        while (i < messageArray.length) {\n            if (messageArray[i] == 'a' || messageArray[i] == 'A') {\n                encodedArray[j] = 'A';\n                j++;\n            } else if (messageArray[i] == 'e' || messageArray[i] == 'E') {\n                encodedArray[j] = 'E';\n                j++;\n            } else if (messageArray[i] == 'i' || messageArray[i] == 'I') {\n                encodedArray[j] = 'I';\n                j++;\n            } else if (messageArray[i] == 'o' || messageArray[i] == 'O') {\n                encodedArray[j] = 'O';\n                j++;\n            } else if (messageArray[i] == 'u' || messageArray[i] == 'U') {\n                encodedArray[j] = 'U';\n                j++;\n            } else if (messageArray[i] == 'A' || messageArray[i] == 'a') {\n                encodedArray[j] = 'a';\n                j++;\n            } else if (messageArray[i] == 'E' || messageArray[i] == 'e') {\n                encodedArray[j] = 'e';\n                j++;\n            } else if (messageArray[i] == 'I' || messageArray[i] == 'i') {\n                encodedArray[j] = 'i';\n                j++;\n            } else if (messageArray[i] == 'O' || messageArray[i] == 'o') {\n                encodedArray[j] = 'o';\n                j++;\n            } else if (messageArray[i] == 'U' || messageArray[i] == 'u') {\n                encodedArray[j] = 'u';\n                j++;\n            }\n            i++;\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            char nextChar = messageArray[i + 1];\n            if (currentChar == 'a' && nextChar == 'e') {\n                encodedArray[i] = 'A';\n            } else if (currentChar == 'A' && nextChar == 'E') {\n                encodedArray[i] = 'a';\n            } else if (currentChar == 'o' && nextChar == 'u') {\n                encodedArray[i] = 'O';\n            } else if (currentChar == 'O' && nextChar == 'U') {\n                encodedArray[i] = 'o';\n            } else {\n                encodedArray[i] = currentChar;\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n\n        for (int i = 0; i < messageArray.length; i++) {\n            char c = messageArray[i];\n            if (Character.isLetter(c)) {\n                int index = i + 1;\n                while (index < messageArray.length && Character.isLetter(messageArray[index])) {\n                    index++;\n                }\n                encodedArray[i] = messageArray[i];\n                encodedArray[index] = messageArray[index];\n            } else {\n                encodedArray[i] = c;\n            }\n        }\n        return new String(encodedArray);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if(num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = key.toString();\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String)key).toLowerCase().equals(key)) {\n                return false;\n            }\n            if (((String)key).toUpperCase().equals(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String) key).toLowerCase().equals(key.toString())) {\n                return false;\n            }\n            if (((String) key).toUpperCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = key.toString();\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            String key = entry.getKey().toString();\n            String value = entry.getValue().toString();\n            if (key.toLowerCase().equals(key) && value.toUpperCase().equals(value)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String)key).toLowerCase().equals(((String)key).toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getValue() instanceof String) {\n                if (!((String)entry.getValue()).toLowerCase().equals(entry.getKey().toString())) {\n                    return false;\n                }\n            } else {\n                if (!((Integer)entry.getValue()).toString().toLowerCase().equals(entry.getKey().toString())) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyString = key.toString();\n            if (keyString.toLowerCase().equals(keyString) ||\n                    keyString.toUpperCase().equals(keyString)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String)key).toLowerCase().equals(key) || ((String)key).toUpperCase().equals(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String)key).toLowerCase().equals(key.toString())) {\n                return false;\n            }\n            if (((String)key).toUpperCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getValue() instanceof String) {\n                if (!((String) entry.getValue()).toLowerCase().equals(entry.getKey().toString())) {\n                    return false;\n                }\n            } else if (entry.getValue() instanceof Integer) {\n                if (!((Integer) entry.getValue()).toString().toLowerCase().equals(entry.getKey().toString())) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String)key).toLowerCase().equals(key.toString())) {\n                return false;\n            }\n            if (((String)key).toUpperCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        Iterator<Object> keys = dict.keySet().iterator();\n        while (keys.hasNext()) {\n            Object key = keys.next();\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String)key).toLowerCase().equals(key.toString())) {\n                return false;\n            }\n            if (((String)key).toUpperCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n            if (key.toString().toUpperCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String) key).toLowerCase().equals(key) || ((String) key).toUpperCase().equals(key)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getValue() instanceof String) {\n                if (((String)entry.getValue()).toLowerCase().equals(entry.getKey().toString())) {\n                    continue;\n                }\n            }\n            if (entry.getValue() instanceof Integer) {\n                if (((Integer)entry.getValue()).toString().toLowerCase().equals(entry.getKey().toString())) {\n                    continue;\n                }\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String) key).toLowerCase().equals(key.toString())) {\n                return false;\n            }\n            if (((String) key).toUpperCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 2; i <= n; i++) {\n            if(isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    public boolean isPrime(int n) {\n        if(n == 1) {\n            return false;\n        }\n        if(n % 2 == 0) {\n            return false;\n        }\n        for(int i = 3; i <= Math.sqrt(n); i += 2) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        int aLength = aString.length();\n        int bLength = bString.length();\n        int result = 0;\n        int carry = 0;\n        for (int i = aLength - 1; i >= 0; i--) {\n            int aDigit = Integer.parseInt(aString.substring(i, i + 1));\n            int bDigit = Integer.parseInt(bString.substring(i, i + 1));\n            int product = aDigit * bDigit;\n            result += product + carry;\n            carry = product / 10;\n        }\n        if (carry != 0) {\n            result += carry;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int product = 0;\n        int a_digits = 0;\n        int b_digits = 0;\n        int a_sign = 1;\n        int b_sign = 1;\n        int a_digits_count = 0;\n        int b_digits_count = 0;\n        int a_digits_sum = 0;\n        int b_digits_sum = 0;\n        int a_digits_product = 0;\n        int b_digits_product = 0;\n        int a_digits_product_sum = 0;\n        int b_digits_product_sum = 0;\n        int a_digits_product_count = 0;\n        int b_digits_product_count = 0;\n        int a_digits_product_count_sum = 0;\n        int b_digits_product_count_sum = 0;\n        int a_digits_product_count_product = 0;\n        int b_digits_product_count_product = 0;\n        int a_digits_product_count_product_sum = 0;\n        int b_digits_product_count_product_sum = 0;\n        int a_digits_product_count_product_count = 0;\n        int b_digits_product_count_product_count = 0;\n        int a_digits_product_count_product_count_sum = 0;\n        int b_digits_product_count_product_count_sum = 0;\n        int a_digits_product_count_product_count_count = 0;\n        int b_digits_product_count_product_count_count = 0;\n        int a_digits_product_count_product_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count = 0;\n        int b_digits_product_count_product_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int b_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;\n        int a_digits_product_count_product_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        int aLength = aString.length();\n        int bLength = bString.length();\n        int aIndex = aLength - 1;\n        int bIndex = bLength - 1;\n        int product = 0;\n        while (aIndex >= 0 && bIndex >= 0) {\n            int aDigit = Integer.parseInt(aString.substring(aIndex, aIndex + 1));\n            int bDigit = Integer.parseInt(bString.substring(bIndex, bIndex + 1));\n            product = product + aDigit * bDigit;\n            aIndex--;\n            bIndex--;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_digits = 0;\n        int b_digits = 0;\n        int a_sign = 1;\n        int b_sign = 1;\n        int a_digits_sum = 0;\n        int b_digits_sum = 0;\n        int a_digits_product = 1;\n        int b_digits_product = 1;\n        int a_digits_product_sum = 0;\n        int b_digits_product_sum = 0;\n        int a_digits_product_sign = 1;\n        int b_digits_product_sign = 1;\n        int a_digits_product_sign_sum = 0;\n        int b_digits_product_sign_sum = 0;\n        int a_digits_product_sign_sign = 1;\n        int b_digits_product_sign_sign = 1;\n        int a_digits_product_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign = 1;\n        int b_digits_product_sign_sign_sign = 1;\n        int a_digits_product_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign = 1;\n        int b_digits_product_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int a_digits_product_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sum = 0;\n        int b_digits_product_sign_sign_sign_sign_sign_sign_sign_sign", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_unit_digits = a_abs % 10;\n        int b_unit_digits = b_abs % 10;\n        int a_unit_digits_index = a_unit_digits - 1;\n        int b_unit_digits_index = b_unit_digits - 1;\n        int a_unit_digits_multiplier = 1;\n        int b_unit_digits_multiplier = 1;\n        for (int i = 0; i < a_unit_digits_index; i++) {\n            a_unit_digits_multiplier *= 10;\n        }\n        for (int i = 0; i < b_unit_digits_index; i++) {\n            b_unit_digits_multiplier *= 10;\n        }\n        for (int i = 0; i < a_unit_digits_index; i++) {\n            result += a_unit_digits_multiplier * a_sign * b_unit_digits_multiplier * b_sign;\n            a_unit_digits_multiplier *= a_sign;\n            b_unit_digits_multiplier *= b_sign;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int product = 1;\n        int remainder = 0;\n        int power = 1;\n        while(a != 0) {\n            remainder = a % 10;\n            a = a / 10;\n            product = product * remainder;\n            power = power * 10;\n        }\n        product = product * b;\n        product = product / power;\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int carry = 0;\n        while (a != 0) {\n            int digit = a % 10;\n            a /= 10;\n            int digit2 = b % 10;\n            b /= 10;\n            result += digit * digit2 + carry;\n            carry = digit2 * digit + carry;\n        }\n        if (carry != 0) {\n            result += carry;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int carry = 0;\n        while (a_abs != 0) {\n            int a_digit = a_abs % 10;\n            int b_digit = b_abs % 10;\n            int sum = a_digit * b_digit + carry;\n            result = sum % 10;\n            carry = sum / 10;\n            a_abs = a_digit;\n            b_abs = b_digit;\n        }\n        if (carry != 0) {\n            result = result + carry;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_unit_digits = a_abs % 10;\n        int b_unit_digits = b_abs % 10;\n        int a_unit_digits_sum = 0;\n        int b_unit_digits_sum = 0;\n        int a_unit_digits_product = 1;\n        int b_unit_digits_product = 1;\n        int a_unit_digits_product_sum = 0;\n        int b_unit_digits_product_sum = 0;\n        int a_unit_digits_product_product = 1;\n        int b_unit_digits_product_product = 1;\n        int a_unit_digits_product_product_sum = 0;\n        int b_unit_digits_product_product_sum = 0;\n        int a_unit_digits_product_product_product = 1;\n        int b_unit_digits_product_product_product = 1;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        int a_abs = a;\n        int b_abs = b;\n        while(a_abs != 0) {\n            int temp = a_abs % 10;\n            a_abs /= 10;\n            sum += temp * b;\n            carry += temp * b_abs;\n            b_abs *= 10;\n        }\n        if(carry != 0) {\n            sum += carry;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_digits = 0;\n        int b_digits = 0;\n        int a_index = 0;\n        int b_index = 0;\n        int a_digit = 0;\n        int b_digit = 0;\n        int a_multiplier = 1;\n        int b_multiplier = 1;\n        int a_remainder = 0;\n        int b_remainder = 0;\n        int a_digit_multiplier = 1;\n        int b_digit_multiplier = 1;\n        int a_digit_remainder = 0;\n        int b_digit_remainder = 0;\n        int a_digit_multiplier_remainder = 0;\n        int b_digit_multiplier_remainder = 0;\n        int a_digit_multiplier_remainder_sum = 0;\n        int b_digit_multiplier_remainder_sum = 0;\n        int a_digit_remainder_sum = 0;\n        int b_digit_remainder_sum = 0;\n        int a_digit_multiplier_remainder_sum = 0;\n        int b_digit_multiplier_remainder_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int a_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n        int b_digit_multiplier_remainder_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_unit_digits = a_abs % 10;\n        int b_unit_digits = b_abs % 10;\n        int a_unit_digits_sum = 0;\n        int b_unit_digits_sum = 0;\n        int a_unit_digits_product = 1;\n        int b_unit_digits_product = 1;\n        int a_unit_digits_product_sum = 0;\n        int b_unit_digits_product_sum = 0;\n        int a_unit_digits_product_product = 1;\n        int b_unit_digits_product_product = 1;\n        int a_unit_digits_product_product_sum = 0;\n        int b_unit_digits_product_product_sum = 0;\n        int a_unit_digits_product_product_product = 1;\n        int b_unit_digits_product_product_product = 1;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product_product_sum = 0;\n        int a_unit_digits_product_product_product_sum = 0;\n        int b_unit_digits_product_product", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_unit = a_abs % 10;\n        int b_unit = b_abs % 10;\n        int a_digit = a_abs / 10;\n        int b_digit = b_abs / 10;\n        int a_digit_sign = a_sign * a_digit;\n        int b_digit_sign = b_sign * b_digit;\n        int a_digit_unit = a_digit_sign * a_unit;\n        int b_digit_unit = b_digit_sign * b_unit;\n        int a_digit_digit = a_digit_unit / 10;\n        int b_digit_digit = b_digit_unit / 10;\n        int a_digit_digit_sign = a_digit_sign * a_digit_digit;\n        int b_digit_digit_sign = b_digit_sign * b_digit_digit;\n        int a_digit_digit_unit = a_digit_digit_sign * a_digit_unit;\n        int b_digit_digit_unit = b_digit_digit_sign * b_digit_unit;\n        int a_digit_digit_digit = a_digit_digit_unit / 10;\n        int b_digit_digit_digit = b_digit_digit_unit / 10;\n        int a_digit_digit_digit_sign = a_digit_digit_sign * a_digit_digit_digit;\n        int b_digit_digit_digit_sign = b_digit_digit_sign * b_digit_digit_digit;\n        int a_digit_digit_digit_unit = a_digit_digit_digit_sign * a_digit_digit_unit;\n        int b_digit_digit_digit_unit = b_digit_digit_digit_sign * b_digit_digit_unit;\n        int a_digit_digit_digit_digit = a_digit_digit_digit_unit / 10;\n        int b_digit_digit_digit_digit = b_digit_digit_digit_unit / 10;\n        int a_digit_digit_digit_digit_sign = a_digit_digit_digit_sign * a_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_sign = b_digit_digit_digit_sign * b_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_sign = a_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_sign = b_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_sign = a_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_unit;\n        int a_digit_digit_digit_digit_digit_digit_unit = a_digit_digit_digit_digit_digit_digit_sign * a_digit_digit_digit_digit_digit_unit;\n        int b_digit_digit_digit_digit_digit_digit_unit = b_digit_digit_digit_digit_digit_digit_sign * b_digit_digit_digit_digit_digit_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int carry = 0;\n        while (a_abs > 0) {\n            int digit = a_abs % 10;\n            a_abs /= 10;\n            int digit_b = b % 10;\n            b /= 10;\n            int digit_a = a % 10;\n            a /= 10;\n            int sum = digit * digit_b + carry;\n            carry = sum / 10;\n            result = sum % 10 + result * 10;\n        }\n        if (b_abs > 0) {\n            result = result * b_abs;\n        }\n        if (carry > 0) {\n            result += carry;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_unit = a_abs % 10;\n        int b_unit = b_abs % 10;\n        int a_unit_index = a_unit - 1;\n        int b_unit_index = b_unit - 1;\n        while(a_unit_index >= 0 || b_unit_index >= 0) {\n            int a_unit_digit = a_unit_index >= 0 ? a_unit_index + 1 : 0;\n            int b_unit_digit = b_unit_index >= 0 ? b_unit_index + 1 : 0;\n            int a_unit_digit_value = a_unit_digit >= 10 ? a_unit_digit - 10 : a_unit_digit;\n            int b_unit_digit_value = b_unit_digit >= 10 ? b_unit_digit - 10 : b_unit_digit;\n            int a_unit_digit_sum = a_unit_digit_value * a_sign;\n            int b_unit_digit_sum = b_unit_digit_value * b_sign;\n            int a_unit_digit_carry = a_unit_digit_sum + carry;\n            int b_unit_digit_carry = b_unit_digit_sum + carry;\n            sum = a_unit_digit_carry + b_unit_digit_carry;\n            carry = a_unit_digit_carry - b_unit_digit_carry;\n            a_unit_index -= a_unit_digit_value;\n            b_unit_index -= b_unit_digit_value;\n        }\n        if(carry != 0) {\n            sum += carry;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_unit_digits = a_abs % 10;\n        int b_unit_digits = b_abs % 10;\n        int a_unit_digits_sum = 0;\n        int b_unit_digits_sum = 0;\n        int a_unit_digits_product = 1;\n        int b_unit_digits_product = 1;\n        while (a_unit_digits_sum < a_unit_digits) {\n            a_unit_digits_sum += a_unit_digits;\n            a_unit_digits_product *= a_unit_digits;\n        }\n        while (b_unit_digits_sum < b_unit_digits) {\n            b_unit_digits_sum += b_unit_digits;\n            b_unit_digits_product *= b_unit_digits;\n        }\n        result = a_sign * b_sign * a_unit_digits_product * b_unit_digits_product;\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int product = 1;\n        int a_digits = 0;\n        int b_digits = 0;\n        while(a_digits < a){\n            a_digits++;\n            product *= 10;\n        }\n        while(b_digits < b){\n            b_digits++;\n            product *= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int temp = 0;\n        int temp1 = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_unit_digits = a_abs % 10;\n        int b_unit_digits = b_abs % 10;\n        int a_unit_digits_count = 0;\n        int b_unit_digits_count = 0;\n        while (a_unit_digits_count < a_unit_digits) {\n            a_unit_digits_count++;\n            a_unit_digits = a_unit_digits * 10 + a_unit_digits % 10;\n        }\n        while (b_unit_digits_count < b_unit_digits) {\n            b_unit_digits_count++;\n            b_unit_digits = b_unit_digits * 10 + b_unit_digits % 10;\n        }\n        while (a_unit_digits_count > 0) {\n            result = result + a_unit_digits * b_unit_digits / (a_unit_digits_count * b_unit_digits_count);\n            a_unit_digits_count--;\n            b_unit_digits_count--;\n        }\n        result = result * a_sign * b_sign;\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        int length = aString.length();\n        int result = 0;\n        for (int i = 0; i < length; i++) {\n            int aDigit = aString.charAt(i) - '0';\n            int bDigit = bString.charAt(i) - '0';\n            result += aDigit * bDigit;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && (i % 2 == 0)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || i % 2 == 1 && s.charAt(i) == 'E' || i % 2 == 0 && s.charAt(i) == 'D' || i % 2 == 1 && s.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || i % 2 == 1 && s.charAt(i) == 'E' || i % 2 == 0 && s.charAt(i) == 'D' || i % 2 == 1 && s.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || i % 2 == 1 && s.charAt(i) == 'E' || i % 2 == 0 && s.charAt(i) == 'D' || i % 2 == 1 && s.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) >= 'A' && s.charAt(i) <= 'E') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int index = 0;\n        int length = value.length();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int len = value.length();\n        for (int i = 0; i < len; i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                upper++;\n            } else if (value.charAt(i) >= 'a' && value.charAt(i) <= 'z') {\n                lower++;\n            }\n        }\n        if (upper > lower) {\n            upper = upper - lower;\n        }\n        if (upper == 0) {\n            upper = 1;\n        }\n        return upper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        String[] split = value.split(\"\\\\.\");\n        if (split.length == 1) {\n            return Integer.parseInt(value);\n        }\n        if (split.length == 2) {\n            upper = Integer.parseInt(split[0]);\n            lower = Integer.parseInt(split[1]);\n            count = upper - lower;\n        } else {\n            count = Integer.parseInt(split[0]);\n        }\n        if (count % 10 == 0) {\n            return count / 10;\n        } else {\n            return count / 10 + 1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int valueInt = Integer.parseInt(value);\n        int closestInt = 0;\n        int diff = 0;\n        int diff2 = 0;\n        int diff3 = 0;\n        int diff4 = 0;\n        int diff5 = 0;\n        int diff6 = 0;\n        int diff7 = 0;\n        int diff8 = 0;\n        int diff9 = 0;\n        int diff10 = 0;\n        int diff11 = 0;\n        int diff12 = 0;\n        int diff13 = 0;\n        int diff14 = 0;\n        int diff15 = 0;\n        int diff16 = 0;\n        int diff17 = 0;\n        int diff18 = 0;\n        int diff19 = 0;\n        int diff20 = 0;\n        int diff21 = 0;\n        int diff22 = 0;\n        int diff23 = 0;\n        int diff24 = 0;\n        int diff25 = 0;\n        int diff26 = 0;\n        int diff27 = 0;\n        int diff28 = 0;\n        int diff29 = 0;\n        int diff30 = 0;\n        int diff31 = 0;\n        int diff32 = 0;\n        int diff33 = 0;\n        int diff34 = 0;\n        int diff35 = 0;\n        int diff36 = 0;\n        int diff37 = 0;\n        int diff38 = 0;\n        int diff39 = 0;\n        int diff40 = 0;\n        int diff41 = 0;\n        int diff42 = 0;\n        int diff43 = 0;\n        int diff44 = 0;\n        int diff45 = 0;\n        int diff46 = 0;\n        int diff47 = 0;\n        int diff48 = 0;\n        int diff49 = 0;\n        int diff50 = 0;\n        int diff51 = 0;\n        int diff52 = 0;\n        int diff53 = 0;\n        int diff54 = 0;\n        int diff55 = 0;\n        int diff56 = 0;\n        int diff57 = 0;\n        int diff58 = 0;\n        int diff59 = 0;\n        int diff60 = 0;\n        int diff61 = 0;\n        int diff62 = 0;\n        int diff63 = 0;\n        int diff64 = 0;\n        int diff65 = 0;\n        int diff66 = 0;\n        int diff67 = 0;\n        int diff68 = 0;\n        int diff69 = 0;\n        int diff70 = 0;\n        int diff71 = 0;\n        int diff72 = 0;\n        int diff73 = 0;\n        int diff74 = 0;\n        int diff75 = 0;\n        int diff76 = 0;\n        int diff77 = 0;\n        int diff78 = 0;\n        int diff79 = 0;\n        int diff80 = 0;\n        int diff81 = 0;\n        int diff82 = 0;\n        int diff83 = 0;\n        int diff84 = 0;\n        int diff85 = 0;\n        int diff86 = 0;\n        int diff87 = 0;\n        int diff88 = 0;\n        int diff89 = 0;\n        int diff90 = 0;\n        int diff91 = 0;\n        int diff92 = 0;\n        int diff93 = 0;\n        int diff94 = 0;\n        int diff95 = 0;\n        int diff96 = 0;\n        int diff97 = 0;\n        int diff98 = 0;\n        int diff99 = 0;\n        int diff100 = 0;\n        int diff101 = 0;\n        int diff102 = 0;\n        int diff103 = 0;\n        int diff104 = 0;\n        int diff105 = 0;\n        int diff106 = 0;\n        int diff107 = 0;\n        int diff108 = 0;\n        int diff109 = 0;\n        int diff110 = 0;\n        int diff111 = 0;\n        int diff112 = 0;\n        int diff113 = 0;\n        int diff114 = 0;\n        int diff115 = 0;\n        int diff116 = 0;\n        int diff117 = 0;\n        int diff118 = 0;\n        int diff119 = 0;\n        int diff120 = 0;\n        int diff121 = 0;\n        int diff122 = 0;\n        int diff123 = 0;\n        int diff124 = 0;\n        int diff125 = 0;\n        int diff126 = 0;\n        int diff127 = 0;\n        int diff128 = 0;\n        int diff129 = 0;\n        int diff130 = 0;\n        int diff131 = 0;\n        int diff132 = 0;\n        int diff133 = 0;\n        int diff134 = 0;\n        int diff135 = 0;\n        int diff136 = 0;\n        int diff137 = 0;\n        int diff138 = 0;\n        int diff139 = 0;\n        int diff140 = 0;\n        int diff141 = 0;\n        int diff142 = 0;\n        int diff143 = 0;\n        int diff144 = 0;\n        int diff145 = 0;\n        int diff146 = 0;\n        int diff147 = 0;\n        int diff148 = 0;\n        int diff149 = 0;\n        int diff150 = 0;\n        int diff151 = 0;\n        int diff152 = 0;\n        int diff153 = 0;\n        int diff154 = 0;\n        int diff155 = 0;\n        int diff156 = 0;\n        int diff157 = 0;\n        int diff158 = 0;\n        int diff159 = 0;\n        int diff160 = 0;\n        int diff161 = 0;\n        int diff162 = 0;\n        int diff163 = 0;\n        int diff164 = 0;\n        int diff165 = 0;\n        int diff166 = 0;\n        int diff167 = 0;\n        int diff168 = 0;\n        int diff169 = 0;\n        int diff170 = 0;\n        int diff171 = 0;\n        int diff172 = 0;\n        int diff173 = 0;\n        int diff174 = 0;\n        int diff175 = 0;\n        int diff176 = 0;\n        int diff177 = 0;\n        int diff178 = 0;\n        int diff179 = 0;\n        int diff1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int index = 0;\n        int length = value.length();\n        int i = 0;\n        for (i = 0; i < length; i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                upper = upper + 1;\n            } else if (value.charAt(i) >= 'a' && value.charAt(i) <= 'z') {\n                lower = lower + 1;\n            } else if (value.charAt(i) >= '0' && value.charAt(i) <= '9') {\n                count = count + 1;\n            }\n        }\n        if (upper == 0) {\n            return 0;\n        } else if (lower == 0) {\n            return upper;\n        } else if (count == 0) {\n            return upper;\n        } else {\n            return (upper + lower) / 2;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        int value_int = Integer.parseInt(value);\n        int value_int_2 = value_int + 1;\n        int value_int_3 = value_int - 1;\n        int value_int_4 = value_int + 2;\n        int value_int_5 = value_int - 2;\n        int value_int_6 = value_int + 3;\n        int value_int_7 = value_int - 3;\n        int value_int_8 = value_int + 4;\n        int value_int_9 = value_int - 4;\n        int value_int_10 = value_int + 5;\n        int value_int_11 = value_int - 5;\n        int value_int_12 = value_int + 6;\n        int value_int_13 = value_int - 6;\n        int value_int_14 = value_int + 7;\n        int value_int_15 = value_int - 7;\n        int value_int_16 = value_int + 8;\n        int value_int_17 = value_int - 8;\n        int value_int_18 = value_int + 9;\n        int value_int_19 = value_int - 9;\n        int value_int_20 = value_int + 10;\n        int value_int_21 = value_int - 10;\n        int value_int_22 = value_int + 11;\n        int value_int_23 = value_int - 11;\n        int value_int_24 = value_int + 12;\n        int value_int_25 = value_int - 12;\n        int value_int_26 = value_int + 13;\n        int value_int_27 = value_int - 13;\n        int value_int_28 = value_int + 14;\n        int value_int_29 = value_int - 14;\n        int value_int_30 = value_int + 15;\n        int value_int_31 = value_int - 15;\n        int value_int_32 = value_int + 16;\n        int value_int_33 = value_int - 16;\n        int value_int_34 = value_int + 17;\n        int value_int_35 = value_int - 17;\n        int value_int_36 = value_int + 18;\n        int value_int_37 = value_int - 18;\n        int value_int_38 = value_int + 19;\n        int value_int_39 = value_int - 19;\n        int value_int_40 = value_int + 20;\n        int value_int_41 = value_int - 20;\n        int value_int_42 = value_int + 21;\n        int value_int_43 = value_int - 21;\n        int value_int_44 = value_int + 22;\n        int value_int_45 = value_int - 22;\n        int value_int_46 = value_int + 23;\n        int value_int_47 = value_int - 23;\n        int value_int_48 = value_int + 24;\n        int value_int_49 = value_int - 24;\n        int value_int_50 = value_int + 25;\n        int value_int_51 = value_int - 25;\n        int value_int_52 = value_int + 26;\n        int value_int_53 = value_int - 26;\n        int value_int_54 = value_int + 27;\n        int value_int_55 = value_int - 27;\n        int value_int_56 = value_int + 28;\n        int value_int_57 = value_int - 28;\n        int value_int_58 = value_int + 29;\n        int value_int_59 = value_int - 29;\n        int value_int_60 = value_int + 30;\n        int value_int_61 = value_int - 30;\n        int value_int_62 = value_int + 31;\n        int value_int_63 = value_int - 31;\n        int value_int_64 = value_int + 32;\n        int value_int_65 = value_int - 32;\n        int value_int_66 = value_int + 33;\n        int value_int_67 = value_int - 33;\n        int value_int_68 = value_int + 34;\n        int value_int_69 = value_int - 34;\n        int value_int_70 = value_int + 35;\n        int value_int_71 = value_int - 35;\n        int value_int_72 = value_int + 36;\n        int value_int_73 = value_int - 36;\n        int value_int_74 = value_int + 37;\n        int value_int_75 = value_int - 37;\n        int value_int_76 = value_int + 38;\n        int value_int_77 = value_int - 38;\n        int value_int_78 = value_int + 39;\n        int value_int_79 = value_int - 39;\n        int value_int_80 = value_int + 40;\n        int value_int_81 = value_int - 40;\n        int value_int_82 = value_int + 41;\n        int value_int_83 = value_int - 41;\n        int value_int_84 = value_int + 42;\n        int value_int_85 = value_int - 42;\n        int value_int_86 = value_int + 43;\n        int value_int_87 = value_int - 43;\n        int value_int_88 = value_int + 44;\n        int value_int_89 = value_int - 44;\n        int value_int_90 = value_int + 45;\n        int value_int_91 = value_int - 45;\n        int value_int_92 = value_int + 46;\n        int value_int_93 = value_int - 46;\n        int value_int_94 = value_int + 47;\n        int value_int_95 = value_int - 47;\n        int value_int_96 = value_int + 48;\n        int value_int_97 = value_int - 48;\n        int value_int_98 = value_int + 49;\n        int value_int_99 = value_int - 49;\n        int value_int_100 = value_int + 50;\n        int value_int_101 = value_int - 50;\n        int value_int_102", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int value_int = Integer.parseInt(value);\n        int value_int_rounded = (value_int + 1) / 2;\n        if (value_int_rounded == value_int) {\n            return value_int_rounded;\n        } else {\n            return value_int_rounded - 1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] split = value.split(\"\\\\.\");\n        int num = Integer.parseInt(split[0]);\n        int dot = Integer.parseInt(split[1]);\n        if (dot == 0) {\n            return num;\n        }\n        int diff = dot - 1;\n        if (diff < 0) {\n            diff = 0;\n        }\n        return num + diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] split = value.split(\"\\\\.\");\n        int count = 0;\n        for (int i = 0; i < split.length; i++) {\n            if (split[i].equals(\"0\")) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] split = value.split(\"\\\\.\");\n        int count = 0;\n        for (int i = 0; i < split.length; i++) {\n            if (split[i].length() > 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int diff = 0;\n        int count = 0;\n        int index = 0;\n        int len = value.length();\n        int i = 0;\n        while (i < len) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                upper++;\n            } else if (value.charAt(i) >= 'a' && value.charAt(i) <= 'z') {\n                lower++;\n            } else {\n                diff++;\n            }\n            i++;\n        }\n        if (diff == 0) {\n            return upper;\n        } else if (diff == 1) {\n            return upper + 1;\n        } else {\n            return upper + 2;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int diff = 0;\n        int count = 0;\n\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                upper++;\n            } else if (value.charAt(i) >= 'a' && value.charAt(i) <= 'z') {\n                lower++;\n            } else if (value.charAt(i) >= '0' && value.charAt(i) <= '9') {\n                diff++;\n            } else {\n                count++;\n            }\n        }\n\n        if (upper == 0) {\n            return 0;\n        } else if (lower == 0) {\n            return 0;\n        } else if (diff == 0) {\n            return 0;\n        } else {\n            return (upper + lower) / 2;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int diff = 0;\n        int index = 0;\n        int count = 0;\n        int count_upper = 0;\n        int count_lower = 0;\n        int count_diff = 0;\n        int count_index = 0;\n        int count_count = 0;\n        int count_count_upper = 0;\n        int count_count_lower = 0;\n        int count_count_diff = 0;\n        int count_count_index = 0;\n        int count_count_count = 0;\n        int count_count_count_upper = 0;\n        int count_count_count_lower = 0;\n        int count_count_count_diff = 0;\n        int count_count_count_index = 0;\n        int count_count_count_count = 0;\n        int count_count_count_count_upper = 0;\n        int count_count_count_count_lower = 0;\n        int count_count_count_count_diff = 0;\n        int count_count_count_count_index = 0;\n        int count_count_count_count_count_count = 0;\n        int count_count_count_count_count_upper = 0;\n        int count_count_count_count_count_lower = 0;\n        int count_count_count_count_count_diff = 0;\n        int count_count_count_count_count_index = 0;\n        int count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_upper = 0;\n        int count_count_count_count_count_count_lower = 0;\n        int count_count_count_count_count_count_diff = 0;\n        int count_count_count_count_count_count_index = 0;\n        int count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_upper = 0;\n        int count_count_count_count_count_count_count_count_lower = 0;\n        int count_count_count_count_count_count_count_count_diff = 0;\n        int count_count_count_count_count_count_count_count_index = 0;\n        int count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int temp = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] split = value.split(\"\\\\.\");\n        int[] ints = new int[split.length];\n        for (int i = 0; i < ints.length; i++) {\n            ints[i] = Integer.parseInt(split[i]);\n        }\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < ints.length; i++) {\n            if (ints[i] > max) {\n                max = ints[i];\n            }\n            if (ints[i] < min) {\n                min = ints[i];\n            }\n        }\n        return (max - min) + min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // TODO: Write your code here\n        int count = 0;\n        int value_int = Integer.parseInt(value);\n        int value_int_2 = value_int + 1;\n        int value_int_3 = value_int - 1;\n        int value_int_4 = value_int + 2;\n        int value_int_5 = value_int - 2;\n        int value_int_6 = value_int + 3;\n        int value_int_7 = value_int - 3;\n        int value_int_8 = value_int + 4;\n        int value_int_9 = value_int - 4;\n        int value_int_10 = value_int + 5;\n        int value_int_11 = value_int - 5;\n        int value_int_12 = value_int + 6;\n        int value_int_13 = value_int - 6;\n        int value_int_14 = value_int + 7;\n        int value_int_15 = value_int - 7;\n        int value_int_16 = value_int + 8;\n        int value_int_17 = value_int - 8;\n        int value_int_18 = value_int + 9;\n        int value_int_19 = value_int - 9;\n        int value_int_20 = value_int + 10;\n        int value_int_21 = value_int - 10;\n        int value_int_22 = value_int + 11;\n        int value_int_23 = value_int - 11;\n        int value_int_24 = value_int + 12;\n        int value_int_25 = value_int - 12;\n        int value_int_26 = value_int + 13;\n        int value_int_27 = value_int - 13;\n        int value_int_28 = value_int + 14;\n        int value_int_29 = value_int - 14;\n        int value_int_30 = value_int + 15;\n        int value_int_31 = value_int - 15;\n        int value_int_32 = value_int + 16;\n        int value_int_33 = value_int - 16;\n        int value_int_34 = value_int + 17;\n        int value_int_35 = value_int - 17;\n        int value_int_36 = value_int + 18;\n        int value_int_37 = value_int - 18;\n        int value_int_38 = value_int + 19;\n        int value_int_39 = value_int - 19;\n        int value_int_40 = value_int + 20;\n        int value_int_41 = value_int - 20;\n        int value_int_42 = value_int + 21;\n        int value_int_43 = value_int - 21;\n        int value_int_44 = value_int + 22;\n        int value_int_45 = value_int - 22;\n        int value_int_46 = value_int + 23;\n        int value_int_47 = value_int - 23;\n        int value_int_48 = value_int + 24;\n        int value_int_49 = value_int - 24;\n        int value_int_50 = value_int + 25;\n        int value_int_51 = value_int - 25;\n        int value_int_52 = value_int + 26;\n        int value_int_53 = value_int - 26;\n        int value_int_54 = value_int + 27;\n        int value_int_55 = value_int - 27;\n        int value_int_56 = value_int + 28;\n        int value_int_57 = value_int - 28;\n        int value_int_58 = value_int + 29;\n        int value_int_59 = value_int - 29;\n        int value_int_60 = value_int + 30;\n        int value_int_61 = value_int - 30;\n        int value_int_62 = value_int + 31;\n        int value_int_63 = value_int - 31;\n        int value_int_64 = value_int + 32;\n        int value_int_65 = value_int - 32;\n        int value_int_66 = value_int + 33;\n        int value_int_67 = value_int - 33;\n        int value_int_68 = value_int + 34;\n        int value_int_69 = value_int - 34;\n        int value_int_70 = value_int + 35;\n        int value_int_71 = value_int - 35;\n        int value_int_72 = value_int + 36;\n        int value_int_73 = value_int - 36;\n        int value_int_74 = value_int + 37;\n        int value_int_75 = value_int - 37;\n        int value_int_76 = value_int + 38;\n        int value_int_77 = value_int - 38;\n        int value_int_78 = value_int + 39;\n        int value_int_79 = value_int - 39;\n        int value_int_80 = value_int + 40;\n        int value_int_81 = value_int - 40;\n        int value_int_82 = value_int + 41;\n        int value_int_83 = value_int - 41;\n        int value_int_84 = value_int + 42;\n        int value_int_85 = value_int - 42;\n        int value_int_86 = value_int + 43;\n        int value_int_87 = value_int - 43;\n        int value_int_88 = value_int + 44;\n        int value_int_89 = value_int - 44;\n        int value_int_90 = value_int + 45;\n        int value_int_91 = value_int - 45;\n        int value_int_92 = value_int + 46;\n        int value_int_93 = value_int - 46;\n        int value_int_94 = value_int + 47;\n        int value_int_95 = value_int - 47;\n        int value_int_96 = value_int + 48;\n        int value_int_97 = value_int - 48;\n        int value_int_98 = value_int + 49;\n        int value_int_99 = value_int - 49;\n        int value_int_100 = value_int + 50;\n        int value_int_101 = value_int - 50;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] split = value.split(\"\\\\.\");\n        int num = Integer.parseInt(split[0]);\n        int num2 = Integer.parseInt(split[1]);\n        int diff = num2 - num;\n        if (diff == 0) {\n            return num;\n        }\n        if (diff > 0) {\n            return num + 1;\n        }\n        return num - 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int diff = 0;\n        int count = 0;\n        int value_int = Integer.parseInt(value);\n        int value_int_abs = Math.abs(value_int);\n        int value_int_abs_lower = value_int_abs - lower;\n        int value_int_abs_upper = value_int_abs - upper;\n        if (value_int_abs_lower == 0) {\n            upper = value_int;\n        } else if (value_int_abs_upper == 0) {\n            lower = value_int;\n        } else {\n            diff = value_int_abs_lower - value_int_abs_upper;\n            if (diff < 0) {\n                upper = value_int;\n                lower = value_int_abs_lower;\n            } else {\n                lower = value_int;\n                upper = value_int_abs_upper;\n            }\n        }\n        return upper;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        for (int i = 1; i <= n; i++) {\n            pile.set(i, pile.get(i) + pile.get(i - 1));\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i : i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        for (int i = 2; i <= n; i++) {\n            pile.set(i, pile.get(i - 1) + pile.get(i - 2));\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        for (int i = 1; i <= n; i++) {\n            pile.set(i, pile.get(i) + (i % 2 == 0 ? 1 : 0));\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i : i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i : i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n /= 2;\n            i++;\n        }\n        Collections.reverse(pile);\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int i = 1;\n        while (n > 0) {\n            pile.add(n % 2);\n            n /= 2;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        pile.add(odd);\n        pile.add(even);\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i : i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        for (int i = 1; i <= n; i++) {\n            pile.set(i, pile.get(i) + (i % 2 == 0 ? 0 : 1));\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        // Write your code here\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<>();\n        String[] wordsArray = s.split(\",\");\n        for (String word : wordsArray) {\n            words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<String>();\n        String[] words_array = s.split(\",\");\n        for (String word : words_array) {\n            words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> wordsList = new ArrayList<String>();\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        return wordsList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<String>();\n        String[] words_array = s.split(\",\");\n        for (int i = 0; i < words_array.length; i++) {\n            words.add(words_array[i]);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<String>();\n        String[] words_array = s.split(\",\");\n        for (String word : words_array) {\n            words.add(word);\n        }\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) {\n            return x;\n        }\n        int ans = 0;\n        for (int i = x; i <= y; i++) {\n            ans = (ans + i) % 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        int num = x;\n        int count = 0;\n        while (num <= y) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num++;\n        }\n        if (count == 0) {\n            return -1;\n        }\n        return num;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int temp = x;\n        while (temp > 0) {\n            ans = ans + temp % y;\n            temp = temp / y;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int num = 0;\n        int max = 0;\n        int min = 0;\n        int sum = 0;\n        int count = 0;\n        int num2 = 0;\n        int num3 = 0;\n        int num4 = 0;\n        int num5 = 0;\n        int num6 = 0;\n        int num7 = 0;\n        int num8 = 0;\n        int num9 = 0;\n        int num10 = 0;\n        int num11 = 0;\n        int num12 = 0;\n        int num13 = 0;\n        int num14 = 0;\n        int num15 = 0;\n        int num16 = 0;\n        int num17 = 0;\n        int num18 = 0;\n        int num19 = 0;\n        int num20 = 0;\n        int num21 = 0;\n        int num22 = 0;\n        int num23 = 0;\n        int num24 = 0;\n        int num25 = 0;\n        int num26 = 0;\n        int num27 = 0;\n        int num28 = 0;\n        int num29 = 0;\n        int num30 = 0;\n        int num31 = 0;\n        int num32 = 0;\n        int num33 = 0;\n        int num34 = 0;\n        int num35 = 0;\n        int num36 = 0;\n        int num37 = 0;\n        int num38 = 0;\n        int num39 = 0;\n        int num40 = 0;\n        int num41 = 0;\n        int num42 = 0;\n        int num43 = 0;\n        int num44 = 0;\n        int num45 = 0;\n        int num46 = 0;\n        int num47 = 0;\n        int num48 = 0;\n        int num49 = 0;\n        int num50 = 0;\n        int num51 = 0;\n        int num52 = 0;\n        int num53 = 0;\n        int num54 = 0;\n        int num55 = 0;\n        int num56 = 0;\n        int num57 = 0;\n        int num58 = 0;\n        int num59 = 0;\n        int num60 = 0;\n        int num61 = 0;\n        int num62 = 0;\n        int num63 = 0;\n        int num64 = 0;\n        int num65 = 0;\n        int num66 = 0;\n        int num67 = 0;\n        int num68 = 0;\n        int num69 = 0;\n        int num70 = 0;\n        int num71 = 0;\n        int num72 = 0;\n        int num73 = 0;\n        int num74 = 0;\n        int num75 = 0;\n        int num76 = 0;\n        int num77 = 0;\n        int num78 = 0;\n        int num79 = 0;\n        int num80 = 0;\n        int num81 = 0;\n        int num82 = 0;\n        int num83 = 0;\n        int num84 = 0;\n        int num85 = 0;\n        int num86 = 0;\n        int num87 = 0;\n        int num88 = 0;\n        int num89 = 0;\n        int num90 = 0;\n        int num91 = 0;\n        int num92 = 0;\n        int num93 = 0;\n        int num94 = 0;\n        int num95 = 0;\n        int num96 = 0;\n        int num97 = 0;\n        int num98 = 0;\n        int num99 = 0;\n        int num100 = 0;\n        int num101 = 0;\n        int num102 = 0;\n        int num103 = 0;\n        int num104 = 0;\n        int num105 = 0;\n        int num106 = 0;\n        int num107 = 0;\n        int num108 = 0;\n        int num109 = 0;\n        int num110 = 0;\n        int num111 = 0;\n        int num112 = 0;\n        int num113 = 0;\n        int num114 = 0;\n        int num115 = 0;\n        int num116 = 0;\n        int num117 = 0;\n        int num118 = 0;\n        int num119 = 0;\n        int num120 = 0;\n        int num121 = 0;\n        int num122 = 0;\n        int num123 = 0;\n        int num124 = 0;\n        int num125 = 0;\n        int num126 = 0;\n        int num127 = 0;\n        int num128 = 0;\n        int num129 = 0;\n        int num130 = 0;\n        int num131 = 0;\n        int num132 = 0;\n        int num133 = 0;\n        int num134 = 0;\n        int num135 = 0;\n        int num136 = 0;\n        int num137 = 0;\n        int num138 = 0;\n        int num139 = 0;\n        int num140 = 0;\n        int num141 = 0;\n        int num142 = 0;\n        int num143 = 0;\n        int num144 = 0;\n        int num145 = 0;\n        int num146 = 0;\n        int num147 = 0;\n        int num148 = 0;\n        int num149 = 0;\n        int num150 = 0;\n        int num151 = 0;\n        int num152 = 0;\n        int num153 = 0;\n        int num154 = 0;\n        int num155 = 0;\n        int num156 = 0;\n        int num157 = 0;\n        int num158 = 0;\n        int num159 = 0;\n        int num160 = 0;\n        int num161 = 0;\n        int num162 = 0;\n        int num163 = 0;\n        int num164 = 0;\n        int num165 = 0;\n        int num166 = 0;\n        int num167 = 0;\n        int num168 = 0;\n        int num169 = 0;\n        int num170 = 0;\n        int num171 = 0;\n        int num172 = 0;\n        int num173 = 0;\n        int num174 = 0;\n        int num175 = 0;\n        int num176 = 0;\n        int num177 = 0;\n        int num178 = 0;\n        int num179 = 0;\n        int num180 = 0;\n        int num181 = 0;\n        int num182 = 0;\n        int num183 = 0;\n        int num184 = 0;\n        int num185 = 0;\n        int num186 = 0;\n        int num187 = 0;\n        int num188 = 0;\n        int num189 = 0;\n        int num190 = 0;\n        int num191 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        int ans = 0;\n        while (x > 0) {\n            ans += x % y;\n            x /= y;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int num = 0;\n        int temp = 0;\n        int count = 0;\n        int temp1 = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int result = 0;\n        int temp = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 = 0;\n        int temp192 = 0;\n        int temp193 = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int temp = x;\n        while (temp > 0) {\n            temp = temp / 2;\n            ans = ans + temp;\n        }\n        if (ans < x || ans > y) {\n            return -1;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int result = 0;\n        int temp = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 = 0;\n        int temp192 = 0;\n        int temp193 = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int temp = 0;\n        int count = 0;\n        int temp1 = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 = 0;\n        int temp1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int n = x;\n        while (n >= y) {\n            ans = n;\n            n = n / 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int num = 0;\n        int max = 0;\n        int min = 0;\n        int sum = 0;\n        int count = 0;\n        int num1 = 0;\n        int num2 = 0;\n        int num3 = 0;\n        int num4 = 0;\n        int num5 = 0;\n        int num6 = 0;\n        int num7 = 0;\n        int num8 = 0;\n        int num9 = 0;\n        int num10 = 0;\n        int num11 = 0;\n        int num12 = 0;\n        int num13 = 0;\n        int num14 = 0;\n        int num15 = 0;\n        int num16 = 0;\n        int num17 = 0;\n        int num18 = 0;\n        int num19 = 0;\n        int num20 = 0;\n        int num21 = 0;\n        int num22 = 0;\n        int num23 = 0;\n        int num24 = 0;\n        int num25 = 0;\n        int num26 = 0;\n        int num27 = 0;\n        int num28 = 0;\n        int num29 = 0;\n        int num30 = 0;\n        int num31 = 0;\n        int num32 = 0;\n        int num33 = 0;\n        int num34 = 0;\n        int num35 = 0;\n        int num36 = 0;\n        int num37 = 0;\n        int num38 = 0;\n        int num39 = 0;\n        int num40 = 0;\n        int num41 = 0;\n        int num42 = 0;\n        int num43 = 0;\n        int num44 = 0;\n        int num45 = 0;\n        int num46 = 0;\n        int num47 = 0;\n        int num48 = 0;\n        int num49 = 0;\n        int num50 = 0;\n        int num51 = 0;\n        int num52 = 0;\n        int num53 = 0;\n        int num54 = 0;\n        int num55 = 0;\n        int num56 = 0;\n        int num57 = 0;\n        int num58 = 0;\n        int num59 = 0;\n        int num60 = 0;\n        int num61 = 0;\n        int num62 = 0;\n        int num63 = 0;\n        int num64 = 0;\n        int num65 = 0;\n        int num66 = 0;\n        int num67 = 0;\n        int num68 = 0;\n        int num69 = 0;\n        int num70 = 0;\n        int num71 = 0;\n        int num72 = 0;\n        int num73 = 0;\n        int num74 = 0;\n        int num75 = 0;\n        int num76 = 0;\n        int num77 = 0;\n        int num78 = 0;\n        int num79 = 0;\n        int num80 = 0;\n        int num81 = 0;\n        int num82 = 0;\n        int num83 = 0;\n        int num84 = 0;\n        int num85 = 0;\n        int num86 = 0;\n        int num87 = 0;\n        int num88 = 0;\n        int num89 = 0;\n        int num90 = 0;\n        int num91 = 0;\n        int num92 = 0;\n        int num93 = 0;\n        int num94 = 0;\n        int num95 = 0;\n        int num96 = 0;\n        int num97 = 0;\n        int num98 = 0;\n        int num99 = 0;\n        int num100 = 0;\n        int num101 = 0;\n        int num102 = 0;\n        int num103 = 0;\n        int num104 = 0;\n        int num105 = 0;\n        int num106 = 0;\n        int num107 = 0;\n        int num108 = 0;\n        int num109 = 0;\n        int num110 = 0;\n        int num111 = 0;\n        int num112 = 0;\n        int num113 = 0;\n        int num114 = 0;\n        int num115 = 0;\n        int num116 = 0;\n        int num117 = 0;\n        int num118 = 0;\n        int num119 = 0;\n        int num120 = 0;\n        int num121 = 0;\n        int num122 = 0;\n        int num123 = 0;\n        int num124 = 0;\n        int num125 = 0;\n        int num126 = 0;\n        int num127 = 0;\n        int num128 = 0;\n        int num129 = 0;\n        int num130 = 0;\n        int num131 = 0;\n        int num132 = 0;\n        int num133 = 0;\n        int num134 = 0;\n        int num135 = 0;\n        int num136 = 0;\n        int num137 = 0;\n        int num138 = 0;\n        int num139 = 0;\n        int num140 = 0;\n        int num141 = 0;\n        int num142 = 0;\n        int num143 = 0;\n        int num144 = 0;\n        int num145 = 0;\n        int num146 = 0;\n        int num147 = 0;\n        int num148 = 0;\n        int num149 = 0;\n        int num150 = 0;\n        int num151 = 0;\n        int num152 = 0;\n        int num153 = 0;\n        int num154 = 0;\n        int num155 = 0;\n        int num156 = 0;\n        int num157 = 0;\n        int num158 = 0;\n        int num159 = 0;\n        int num160 = 0;\n        int num161 = 0;\n        int num162 = 0;\n        int num163 = 0;\n        int num164 = 0;\n        int num165 = 0;\n        int num166 = 0;\n        int num167 = 0;\n        int num168 = 0;\n        int num169 = 0;\n        int num170 = 0;\n        int num171 = 0;\n        int num172 = 0;\n        int num173 = 0;\n        int num174 = 0;\n        int num175 = 0;\n        int num176 = 0;\n        int num177 = 0;\n        int num178 = 0;\n        int num179 = 0;\n        int num180 = 0;\n        int num181 = 0;\n        int num182 = 0;\n        int num183 = 0;\n        int num184 = 0;\n        int num185 = 0;\n        int num186 = 0;\n        int num187 = 0;\n        int num188 = 0;\n        int num189 = 0;\n        int num190 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int temp = x;\n        while (temp <= y) {\n            ans = temp;\n            temp = temp + 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int temp = 0;\n        int temp1 = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 = 0;\n        int temp192 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if(x == y) return x;\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int sum = 0;\n        for(int i = min; i <= max; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int max = 0;\n        int num = 0;\n        for (int i = x; i <= y; i++) {\n            num = i;\n            if (num % 2 == 0) {\n                max = Math.max(max, num);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int temp = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 = 0;\n        int temp192 = 0;\n        int temp193 = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int temp = x;\n        while (temp <= y) {\n            if (temp % 2 == 0) {\n                ans = temp;\n            }\n            temp++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int n_rounded = (int) Math.round(n);\n        int m_rounded = (int) Math.round(m);\n        if (n_rounded > m_rounded) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        for (int i = n_rounded; i <= m_rounded; i++) {\n            sum += i;\n            count++;\n        }\n        return (double) sum / count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int n_bin = Integer.toBinaryString(n);\n        int m_bin = Integer.toBinaryString(m);\n        int n_bin_len = n_bin.length();\n        int m_bin_len = m_bin.length();\n        int n_bin_len_1 = n_bin_len - m_bin_len;\n        int n_bin_len_2 = m_bin_len - n_bin_len;\n        int n_bin_len_3 = n_bin_len_1 + n_bin_len_2;\n        int n_bin_len_4 = n_bin_len_3 + 1;\n        int n_bin_len_5 = n_bin_len_4 + 1;\n        int n_bin_len_6 = n_bin_len_5 + 1;\n        int n_bin_len_7 = n_bin_len_6 + 1;\n        int n_bin_len_8 = n_bin_len_7 + 1;\n        int n_bin_len_9 = n_bin_len_8 + 1;\n        int n_bin_len_10 = n_bin_len_9 + 1;\n        int n_bin_len_11 = n_bin_len_10 + 1;\n        int n_bin_len_12 = n_bin_len_11 + 1;\n        int n_bin_len_13 = n_bin_len_12 + 1;\n        int n_bin_len_14 = n_bin_len_13 + 1;\n        int n_bin_len_15 = n_bin_len_14 + 1;\n        int n_bin_len_16 = n_bin_len_15 + 1;\n        int n_bin_len_17 = n_bin_len_16 + 1;\n        int n_bin_len_18 = n_bin_len_17 + 1;\n        int n_bin_len_19 = n_bin_len_18 + 1;\n        int n_bin_len_20 = n_bin_len_19 + 1;\n        int n_bin_len_21 = n_bin_len_20 + 1;\n        int n_bin_len_22 = n_bin_len_21 + 1;\n        int n_bin_len_23 = n_bin_len_22 + 1;\n        int n_bin_len_24 = n_bin_len_23 + 1;\n        int n_bin_len_25 = n_bin_len_24 + 1;\n        int n_bin_len_26 = n_bin_len_25 + 1;\n        int n_bin_len_27 = n_bin_len_26 + 1;\n        int n_bin_len_28 = n_bin_len_27 + 1;\n        int n_bin_len_29 = n_bin_len_28 + 1;\n        int n_bin_len_30 = n_bin_len_29 + 1;\n        int n_bin_len_31 = n_bin_len_30 + 1;\n        int n_bin_len_32 = n_bin_len_31 + 1;\n        int n_bin_len_33 = n_bin_len_32 + 1;\n        int n_bin_len_34 = n_bin_len_33 + 1;\n        int n_bin_len_35 = n_bin_len_34 + 1;\n        int n_bin_len_36 = n_bin_len_35 + 1;\n        int n_bin_len_37 = n_bin_len_36 + 1;\n        int n_bin_len_38 = n_bin_len_37 + 1;\n        int n_bin_len_39 = n_bin_len_38 + 1;\n        int n_bin_len_40 = n_bin_len_39 + 1;\n        int n_bin_len_41 = n_bin_len_40 + 1;\n        int n_bin_len_42 = n_bin_len_41 + 1;\n        int n_bin_len_43 = n_bin_len_42 + 1;\n        int n_bin_len_44 = n_bin_len_43 + 1;\n        int n_bin_len_45 = n_bin_len_44 + 1;\n        int n_bin_len_46 = n_bin_len_45 + 1;\n        int n_bin_len_47 = n_bin_len_46 + 1;\n        int n_bin_len_48 = n_bin_len_47 + 1;\n        int n_bin_len_49 = n_bin_len_48 + 1;\n        int n_bin_len_50 = n_bin_len_49 + 1;\n        int n_bin_len_51 = n_bin_len_50 + 1;\n        int n_bin_len_52 = n_bin_len_51 + 1;\n        int n_bin_len_53 = n_bin_len_52 + 1;\n        int n_bin_len_54 = n_bin_len_53 + 1;\n        int n_bin_len_55 = n_bin_len_54 + 1;\n        int n_bin_len_56 = n_bin_len_55 + 1;\n        int n_bin_len_57 = n_bin_len_56 + 1;\n        int n_bin_len_58 = n_bin_len_57 + 1;\n        int n_bin_len_59 = n_bin_len_58 + 1;\n        int n_bin_len_60 = n_bin_len_59 + 1;\n        int n_bin_len_61 = n_bin_len_60 + 1;\n        int n_bin_len_62 = n_bin_len_61 + 1;\n        int n_bin_len_63 = n_bin_len_62 + 1;\n        int n_bin_len_64 = n_bin_len_63 + 1;\n        int n_bin_len_65 = n_bin_len_64 + 1;\n        int n_bin_len_66 = n_bin_len_65 + 1;\n        int n_bin_len_67 = n_bin_len_66 + 1;\n        int n_bin_len_68 = n_bin_len_67 + 1;\n        int n_bin_len_69 = n_bin_len_68 + 1;\n        int n_bin_len_70 = n_bin_len_69 + 1;\n        int n_bin_len_71 = n_bin_len_70 + 1;\n        int n_bin_len_72 = n_bin_len_71 + 1;\n        int n_bin_len_73 = n_bin_len_72 + 1;\n        int n_bin_len_74 = n_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n > 0) {\n            sum += n % 2;\n            count++;\n            n = n / 2;\n        }\n        int result = sum / count;\n        return String.valueOf(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int max = 0;\n        int min = 0;\n        int mid = 0;\n        int diff = 0;\n        int temp = 0;\n        int result = 0;\n        int count1 = 0;\n        int count2 = 0;\n        int count3 = 0;\n        int count4 = 0;\n        int count5 = 0;\n        int count6 = 0;\n        int count7 = 0;\n        int count8 = 0;\n        int count9 = 0;\n        int count10 = 0;\n        int count11 = 0;\n        int count12 = 0;\n        int count13 = 0;\n        int count14 = 0;\n        int count15 = 0;\n        int count16 = 0;\n        int count17 = 0;\n        int count18 = 0;\n        int count19 = 0;\n        int count20 = 0;\n        int count21 = 0;\n        int count22 = 0;\n        int count23 = 0;\n        int count24 = 0;\n        int count25 = 0;\n        int count26 = 0;\n        int count27 = 0;\n        int count28 = 0;\n        int count29 = 0;\n        int count30 = 0;\n        int count31 = 0;\n        int count32 = 0;\n        int count33 = 0;\n        int count34 = 0;\n        int count35 = 0;\n        int count36 = 0;\n        int count37 = 0;\n        int count38 = 0;\n        int count39 = 0;\n        int count40 = 0;\n        int count41 = 0;\n        int count42 = 0;\n        int count43 = 0;\n        int count44 = 0;\n        int count45 = 0;\n        int count46 = 0;\n        int count47 = 0;\n        int count48 = 0;\n        int count49 = 0;\n        int count50 = 0;\n        int count51 = 0;\n        int count52 = 0;\n        int count53 = 0;\n        int count54 = 0;\n        int count55 = 0;\n        int count56 = 0;\n        int count57 = 0;\n        int count58 = 0;\n        int count59 = 0;\n        int count60 = 0;\n        int count61 = 0;\n        int count62 = 0;\n        int count63 = 0;\n        int count64 = 0;\n        int count65 = 0;\n        int count66 = 0;\n        int count67 = 0;\n        int count68 = 0;\n        int count69 = 0;\n        int count70 = 0;\n        int count71 = 0;\n        int count72 = 0;\n        int count73 = 0;\n        int count74 = 0;\n        int count75 = 0;\n        int count76 = 0;\n        int count77 = 0;\n        int count78 = 0;\n        int count79 = 0;\n        int count80 = 0;\n        int count81 = 0;\n        int count82 = 0;\n        int count83 = 0;\n        int count84 = 0;\n        int count85 = 0;\n        int count86 = 0;\n        int count87 = 0;\n        int count88 = 0;\n        int count89 = 0;\n        int count90 = 0;\n        int count91 = 0;\n        int count92 = 0;\n        int count93 = 0;\n        int count94 = 0;\n        int count95 = 0;\n        int count96 = 0;\n        int count97 = 0;\n        int count98 = 0;\n        int count99 = 0;\n        int count100 = 0;\n        int count101 = 0;\n        int count102 = 0;\n        int count103 = 0;\n        int count104 = 0;\n        int count105 = 0;\n        int count106 = 0;\n        int count107 = 0;\n        int count108 = 0;\n        int count109 = 0;\n        int count110 = 0;\n        int count111 = 0;\n        int count112 = 0;\n        int count113 = 0;\n        int count114 = 0;\n        int count115 = 0;\n        int count116 = 0;\n        int count117 = 0;\n        int count118 = 0;\n        int count119 = 0;\n        int count120 = 0;\n        int count121 = 0;\n        int count122 = 0;\n        int count123 = 0;\n        int count124 = 0;\n        int count125 = 0;\n        int count126 = 0;\n        int count127 = 0;\n        int count128 = 0;\n        int count129 = 0;\n        int count130 = 0;\n        int count131 = 0;\n        int count132 = 0;\n        int count133 = 0;\n        int count134 = 0;\n        int count135 = 0;\n        int count136 = 0;\n        int count137 = 0;\n        int count138 = 0;\n        int count139 = 0;\n        int count140 = 0;\n        int count141 = 0;\n        int count142 = 0;\n        int count143 = 0;\n        int count144 = 0;\n        int count145 = 0;\n        int count146 = 0;\n        int count147 = 0;\n        int count148 = 0;\n        int count149 = 0;\n        int count150 = 0;\n        int count151 = 0;\n        int count152 = 0;\n        int count153 = 0;\n        int count154 = 0;\n        int count155 = 0;\n        int count156 = 0;\n        int count157 = 0;\n        int count158 = 0;\n        int count159 = 0;\n        int count160 = 0;\n        int count161 = 0;\n        int count162 = 0;\n        int count163 = 0;\n        int count164 = 0;\n        int count165 = 0;\n        int count166 = 0;\n        int count167 = 0;\n        int count168 = 0;\n        int count169 = 0;\n        int count170 = 0;\n        int count171 = 0;\n        int count172 = 0;\n        int count173 = 0;\n        int count174 = 0;\n        int count175 = 0;\n        int count176 = 0;\n        int count177 = 0;\n        int count178 = 0;\n        int count179 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n >= m) {\n            sum += n;\n            count++;\n            n--;\n        }\n        sum += m;\n        count++;\n        return String.valueOf(sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int roundedN = (int) Math.round(n);\n        int roundedM = (int) Math.round(m);\n        if (roundedN > roundedM) {\n            return -1;\n        }\n        return Integer.toBinaryString(roundedN + roundedM);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n >= m) {\n            sum += n;\n            count++;\n            n = n / 2;\n        }\n        if (count == 0) {\n            return -1;\n        }\n        return (sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int count2 = 0;\n        int count3 = 0;\n        int count4 = 0;\n        int count5 = 0;\n        int count6 = 0;\n        int count7 = 0;\n        int count8 = 0;\n        int count9 = 0;\n        int count10 = 0;\n        int count11 = 0;\n        int count12 = 0;\n        int count13 = 0;\n        int count14 = 0;\n        int count15 = 0;\n        int count16 = 0;\n        int count17 = 0;\n        int count18 = 0;\n        int count19 = 0;\n        int count20 = 0;\n        int count21 = 0;\n        int count22 = 0;\n        int count23 = 0;\n        int count24 = 0;\n        int count25 = 0;\n        int count26 = 0;\n        int count27 = 0;\n        int count28 = 0;\n        int count29 = 0;\n        int count30 = 0;\n        int count31 = 0;\n        int count32 = 0;\n        int count33 = 0;\n        int count34 = 0;\n        int count35 = 0;\n        int count36 = 0;\n        int count37 = 0;\n        int count38 = 0;\n        int count39 = 0;\n        int count40 = 0;\n        int count41 = 0;\n        int count42 = 0;\n        int count43 = 0;\n        int count44 = 0;\n        int count45 = 0;\n        int count46 = 0;\n        int count47 = 0;\n        int count48 = 0;\n        int count49 = 0;\n        int count50 = 0;\n        int count51 = 0;\n        int count52 = 0;\n        int count53 = 0;\n        int count54 = 0;\n        int count55 = 0;\n        int count56 = 0;\n        int count57 = 0;\n        int count58 = 0;\n        int count59 = 0;\n        int count60 = 0;\n        int count61 = 0;\n        int count62 = 0;\n        int count63 = 0;\n        int count64 = 0;\n        int count65 = 0;\n        int count66 = 0;\n        int count67 = 0;\n        int count68 = 0;\n        int count69 = 0;\n        int count70 = 0;\n        int count71 = 0;\n        int count72 = 0;\n        int count73 = 0;\n        int count74 = 0;\n        int count75 = 0;\n        int count76 = 0;\n        int count77 = 0;\n        int count78 = 0;\n        int count79 = 0;\n        int count80 = 0;\n        int count81 = 0;\n        int count82 = 0;\n        int count83 = 0;\n        int count84 = 0;\n        int count85 = 0;\n        int count86 = 0;\n        int count87 = 0;\n        int count88 = 0;\n        int count89 = 0;\n        int count90 = 0;\n        int count91 = 0;\n        int count92 = 0;\n        int count93 = 0;\n        int count94 = 0;\n        int count95 = 0;\n        int count96 = 0;\n        int count97 = 0;\n        int count98 = 0;\n        int count99 = 0;\n        int count100 = 0;\n        int count101 = 0;\n        int count102 = 0;\n        int count103 = 0;\n        int count104 = 0;\n        int count105 = 0;\n        int count106 = 0;\n        int count107 = 0;\n        int count108 = 0;\n        int count109 = 0;\n        int count110 = 0;\n        int count111 = 0;\n        int count112 = 0;\n        int count113 = 0;\n        int count114 = 0;\n        int count115 = 0;\n        int count116 = 0;\n        int count117 = 0;\n        int count118 = 0;\n        int count119 = 0;\n        int count120 = 0;\n        int count121 = 0;\n        int count122 = 0;\n        int count123 = 0;\n        int count124 = 0;\n        int count125 = 0;\n        int count126 = 0;\n        int count127 = 0;\n        int count128 = 0;\n        int count129 = 0;\n        int count130 = 0;\n        int count131 = 0;\n        int count132 = 0;\n        int count133 = 0;\n        int count134 = 0;\n        int count135 = 0;\n        int count136 = 0;\n        int count137 = 0;\n        int count138 = 0;\n        int count139 = 0;\n        int count140 = 0;\n        int count141 = 0;\n        int count142 = 0;\n        int count143 = 0;\n        int count144 = 0;\n        int count145 = 0;\n        int count146 = 0;\n        int count147 = 0;\n        int count148 = 0;\n        int count149 = 0;\n        int count150 = 0;\n        int count151 = 0;\n        int count152 = 0;\n        int count153 = 0;\n        int count154 = 0;\n        int count155 = 0;\n        int count156 = 0;\n        int count157 = 0;\n        int count158 = 0;\n        int count159 = 0;\n        int count160 = 0;\n        int count161 = 0;\n        int count162 = 0;\n        int count163 = 0;\n        int count164 = 0;\n        int count165 = 0;\n        int count166 = 0;\n        int count167 = 0;\n        int count168 = 0;\n        int count169 = 0;\n        int count170 = 0;\n        int count171 = 0;\n        int count172 = 0;\n        int count173 = 0;\n        int count174 = 0;\n        int count175 = 0;\n        int count176 = 0;\n        int count177 = 0;\n        int count178 = 0;\n        int count179 = 0;\n        int count180 = 0;\n        int count181 = 0;\n        int count182 = 0;\n        int count183 = 0;\n        int count184 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int result = 0;\n        while (n > 0) {\n            sum = sum + n % 2;\n            count = count + 1;\n            n = n / 2;\n        }\n        result = sum / count;\n        if (result > m) {\n            return -1;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int temp = 0;\n        int result = 0;\n        int max = 0;\n        int min = 0;\n        int mid = 0;\n        int mid_sum = 0;\n        int mid_count = 0;\n        int mid_temp = 0;\n        int mid_result = 0;\n        int mid_max = 0;\n        int mid_min = 0;\n        int mid_mid = 0;\n        int mid_mid_sum = 0;\n        int mid_mid_count = 0;\n        int mid_mid_temp = 0;\n        int mid_mid_result = 0;\n        int mid_mid_max = 0;\n        int mid_mid_min = 0;\n        int mid_mid_mid = 0;\n        int mid_mid_mid_sum = 0;\n        int mid_mid_mid_count = 0;\n        int mid_mid_mid_temp = 0;\n        int mid_mid_mid_result = 0;\n        int mid_mid_mid_max = 0;\n        int mid_mid_mid_min = 0;\n        int mid_mid_mid_mid = 0;\n        int mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_count = 0;\n        int mid_mid_mid_mid_temp = 0;\n        int mid_mid_mid_mid_result = 0;\n        int mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_count = 0;\n        int mid_mid_mid_mid_mid_temp = 0;\n        int mid_mid_mid_mid_mid_result = 0;\n        int mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_count = 0;\n        int mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_count = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_count = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_sum = 0;\n        int mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_mid_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int result = 0;\n        while(n >= m){\n            sum += n;\n            count++;\n            n /= 2;\n        }\n        result = sum/count;\n        if(result > m)\n            return -1;\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) {\n            return -1;\n        }\n        int roundedN = (int) Math.round(n);\n        int roundedM = (int) Math.round(m);\n        int roundedSum = roundedN + roundedM;\n        int roundedAvg = roundedSum / 2;\n        String roundedAvgString = Integer.toBinaryString(roundedAvg);\n        String roundedAvgStringReverse = new StringBuilder(roundedAvgString).reverse().toString();\n        int roundedAvgInt = Integer.parseInt(roundedAvgStringReverse, 2);\n        return roundedAvgInt;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int roundedN = Math.round(n);\n        int roundedM = Math.round(m);\n        if (roundedN > roundedM) {\n            return -1;\n        }\n        return Integer.toBinaryString(roundedN + roundedM);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int max = Math.max(n, m);\n        int min = Math.min(n, m);\n        int mid = (max + min) / 2;\n        while (mid >= min && mid <= max) {\n            sum += mid;\n            count++;\n            mid = (max + min) / 2;\n        }\n        if (count == 0) {\n            return -1;\n        }\n        return sum / count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) return -1;\n        int sum = 0;\n        int count = 0;\n        while(n >= m) {\n            sum += n;\n            count++;\n            n--;\n        }\n        sum += n;\n        count++;\n        return String.valueOf(sum/count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n >= m) {\n            sum += n;\n            count++;\n            n = n / 2;\n        }\n        if (count == 0) {\n            return -1;\n        }\n        return (sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while(n >= m) {\n            sum += n;\n            count++;\n            n--;\n        }\n        if(count == 0) {\n            return -1;\n        }\n        return (sum/count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        int sum = 0;\n        int count = 0;\n        while(n > 0) {\n            sum += n % 2;\n            count++;\n            n /= 2;\n        }\n        if(count == 0)\n            return -1;\n        return (sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int n1 = n;\n        int m1 = m;\n        int n2 = n1;\n        int m2 = m1;\n        int n3 = n2;\n        int m3 = m2;\n        int n4 = n3;\n        int m4 = m3;\n        int n5 = n4;\n        int m5 = m4;\n        int n6 = n5;\n        int m6 = m5;\n        int n7 = n6;\n        int m7 = m6;\n        int n8 = n7;\n        int m8 = m7;\n        int n9 = n8;\n        int m9 = m8;\n        int n10 = n9;\n        int m10 = m9;\n        int n11 = n10;\n        int m11 = m10;\n        int n12 = n11;\n        int m12 = m11;\n        int n13 = n12;\n        int m13 = m12;\n        int n14 = n13;\n        int m14 = m13;\n        int n15 = n14;\n        int m15 = m14;\n        int n16 = n15;\n        int m16 = m15;\n        int n17 = n16;\n        int m17 = m16;\n        int n18 = n17;\n        int m18 = m17;\n        int n19 = n18;\n        int m19 = m18;\n        int n20 = n19;\n        int m20 = m19;\n        int n21 = n20;\n        int m21 = m20;\n        int n22 = n21;\n        int m22 = m21;\n        int n23 = n22;\n        int m23 = m22;\n        int n24 = n23;\n        int m24 = m23;\n        int n25 = n24;\n        int m25 = m24;\n        int n26 = n25;\n        int m26 = m25;\n        int n27 = n26;\n        int m27 = m26;\n        int n28 = n27;\n        int m28 = m27;\n        int n29 = n28;\n        int m29 = m28;\n        int n30 = n29;\n        int m30 = m29;\n        int n31 = n30;\n        int m31 = m30;\n        int n32 = n31;\n        int m32 = m31;\n        int n33 = n32;\n        int m33 = m32;\n        int n34 = n33;\n        int m34 = m33;\n        int n35 = n34;\n        int m35 = m34;\n        int n36 = n35;\n        int m36 = m35;\n        int n37 = n36;\n        int m37 = m36;\n        int n38 = n37;\n        int m38 = m37;\n        int n39 = n38;\n        int m39 = m38;\n        int n40 = n39;\n        int m40 = m39;\n        int n41 = n40;\n        int m41 = m40;\n        int n42 = n41;\n        int m42 = m41;\n        int n43 = n42;\n        int m43 = m42;\n        int n44 = n43;\n        int m44 = m43;\n        int n45 = n44;\n        int m45 = m44;\n        int n46 = n45;\n        int m46 = m45;\n        int n47 = n46;\n        int m47 = m46;\n        int n48 = n47;\n        int m48 = m47;\n        int n49 = n48;\n        int m49 = m48;\n        int n50 = n49;\n        int m50 = m49;\n        int n51 = n50;\n        int m51 = m50;\n        int n52 = n51;\n        int m52 = m51;\n        int n53 = n52;\n        int m53 = m52;\n        int n54 = n53;\n        int m54 = m53;\n        int n55 = n54;\n        int m55 = m54;\n        int n56 = n55;\n        int m56 = m55;\n        int n57 = n56;\n        int m57 = m56;\n        int n58 = n57;\n        int m58 = m57;\n        int n59 = n58;\n        int m59 = m58;\n        int n60 = n59;\n        int m60 = m59;\n        int n61 = n60;\n        int m61 = m60;\n        int n62 = n61;\n        int m62 = m61;\n        int n63 = n62;\n        int m63 = m62;\n        int n64 = n63;\n        int m64 = m63;\n        int n65 = n64;\n        int m65 = m64;\n        int n66 = n65;\n        int m66 = m65;\n        int n67 = n66;\n        int m67 = m66;\n        int n68 = n67;\n        int m68 = m67;\n        int n69 = n68;\n        int m69 = m68;\n        int n70 = n69;\n        int m70 = m69;\n        int n71 = n70;\n        int m71 = m70;\n        int n72 = n71;\n        int m72 = m71;\n        int n73 = n72;\n        int m73 = m72;\n        int n74 = n73;\n        int m74 = m73;\n        int n75 = n74;\n        int m75 = m74;\n        int n76 = n75;\n        int m76 = m75;\n        int n77 = n76;\n        int m77 = m76;\n        int n78 = n77;\n        int m78 = m77;\n        int n79 = n78;\n        int m79 = m78;\n        int n80 = n79;\n        int m80 = m79;\n        int n81 = n80;\n        int m81 = m80;\n        int n82 = n81;\n        int m82 = m81;\n        int n83 = n82;\n        int m83 = m82;\n        int n84 = n83;\n        int m84 = m83;\n        int n85 = n84;\n        int m85 = m84;\n        int n86 = n85;\n        int m86 = m85;\n        int n87 = n86;\n        int m87 = m86;\n        int n88 = n87;\n        int m88 = m87;\n        int n89 = n88;\n        int m89 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        while (n >= m) {\n            sum += n;\n            count++;\n            n /= 2;\n        }\n        sum += n;\n        count++;\n        int result = sum / count;\n        if (result > m) {\n            return -1;\n        }\n        return Integer.toBinaryString(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i : x) {\n            if (i % 2 == 0) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr == null || arr.isEmpty()) {\n            return result;\n        }\n        int max = 9;\n        int min = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num > max) {\n                max = num;\n            }\n            if (num < min) {\n                min = num;\n            }\n        }\n        for (int i = max; i >= min; i--) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) == i) {\n                    result.add(String.valueOf(i));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            String name = \"\";\n            if (num == 1) {\n                name = \"One\";\n            } else if (num == 2) {\n                name = \"Two\";\n            } else if (num == 3) {\n                name = \"Three\";\n            } else if (num == 4) {\n                name = \"Four\";\n            } else if (num == 5) {\n                name = \"Five\";\n            } else if (num == 6) {\n                name = \"Six\";\n            } else if (num == 7) {\n                name = \"Seven\";\n            } else if (num == 8) {\n                name = \"Eight\";\n            } else if (num == 9) {\n                name = \"Nine\";\n            }\n            result.add(name);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= 1 && num <= 9) {\n                result.add(String.valueOf(num));\n            }\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= 1 && num <= 9) {\n                result.set(i, result.get(i).charAt(0) + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 1; i <= 9; i++) {\n            for (int j = 0; j < len; j++) {\n                if (arr.get(j) == i) {\n                    res.add(String.valueOf(i));\n                    arr.set(j, 0);\n                    len--;\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        int[] digits = new int[10];\n        for (int i = 0; i < len; i++) {\n            digits[arr.get(i) % 10]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > 0) {\n                result.add(String.valueOf(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            String name = \"\";\n            switch (num) {\n                case 1:\n                    name = \"One\";\n                    break;\n                case 2:\n                    name = \"Two\";\n                    break;\n                case 3:\n                    name = \"Three\";\n                    break;\n                case 4:\n                    name = \"Four\";\n                    break;\n                case 5:\n                    name = \"Five\";\n                    break;\n                case 6:\n                    name = \"Six\";\n                    break;\n                case 7:\n                    name = \"Seven\";\n                    break;\n                case 8:\n                    name = \"Eight\";\n                    break;\n                case 9:\n                    name = \"Nine\";\n                    break;\n            }\n            result.add(name);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            int len = num.toString().length();\n            String s = \"\";\n            for (int j = 0; j < len; j++) {\n                s += num.toString().charAt(j);\n            }\n            result.add(s);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= 1 && num <= 9) {\n                res.add(String.valueOf(num));\n            } else {\n                res.add(\"Ignore\");\n            }\n        }\n        Collections.reverse(res);\n        for (int i = 0; i < res.size(); i++) {\n            if (res.get(i).equals(\"Ignore\")) {\n                res.remove(i);\n                i--;\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        for (int i = 1; i <= 9; i++) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) == i) {\n                    result.add(String.valueOf(i));\n                    arr.remove(j);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= 1 && num <= 9) {\n                result.add(String.valueOf(num));\n            }\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= 1 && num <= 9) {\n                result.set(i, String.valueOf(num));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            String s = String.valueOf(num);\n            res.add(s);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        int[] nums = new int[len];\n        for (int i = 0; i < len; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < len; i++) {\n            result.add(nums[i] + \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int[] arrInt = new int[10];\n        for (int i = 0; i < arr.size(); i++) {\n            arrInt[arr.get(i)]++;\n        }\n        for (int i = 1; i < 10; i++) {\n            arrInt[i] += arrInt[i - 1];\n        }\n        for (int i = 9; i >= 0; i--) {\n            result.add(String.valueOf(i));\n            arrInt[i]--;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= 1 && num <= 9) {\n                result.add(String.valueOf(num));\n            }\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= 1 && num <= 9) {\n                result.set(i, result.get(i).substring(0, 1) + result.get(i).substring(1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            int len2 = result.size();\n            for (int j = 0; j < len2; j++) {\n                int num2 = result.get(j).charAt(0) - '0';\n                if (num2 == num) {\n                    result.set(j, result.get(j) + num);\n                    break;\n                }\n            }\n            if (len2 == 0) {\n                result.add(num + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            String name = \"\";\n            switch (num) {\n                case 1:\n                    name = \"One\";\n                    break;\n                case 2:\n                    name = \"Two\";\n                    break;\n                case 3:\n                    name = \"Three\";\n                    break;\n                case 4:\n                    name = \"Four\";\n                    break;\n                case 5:\n                    name = \"Five\";\n                    break;\n                case 6:\n                    name = \"Six\";\n                    break;\n                case 7:\n                    name = \"Seven\";\n                    break;\n                case 8:\n                    name = \"Eight\";\n                    break;\n                case 9:\n                    name = \"Nine\";\n                    break;\n            }\n            result.add(name);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            String name = \"\";\n            switch (num) {\n                case 1:\n                    name = \"One\";\n                    break;\n                case 2:\n                    name = \"Two\";\n                    break;\n                case 3:\n                    name = \"Three\";\n                    break;\n                case 4:\n                    name = \"Four\";\n                    break;\n                case 5:\n                    name = \"Five\";\n                    break;\n                case 6:\n                    name = \"Six\";\n                    break;\n                case 7:\n                    name = \"Seven\";\n                    break;\n                case 8:\n                    name = \"Eight\";\n                    break;\n                case 9:\n                    name = \"Nine\";\n                    break;\n            }\n            result.add(name);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int max = 0;\n        for (Integer i : arr) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        for (int i = max; i >= 1; i--) {\n            result.add(String.valueOf(i));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            if (result.get(i).equals(\"0\")) {\n                result.remove(i);\n                i--;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num < 1 || num > 9) {\n                continue;\n            }\n            String name = \"\";\n            switch (num) {\n                case 1:\n                    name = \"One\";\n                    break;\n                case 2:\n                    name = \"Two\";\n                    break;\n                case 3:\n                    name = \"Three\";\n                    break;\n                case 4:\n                    name = \"Four\";\n                    break;\n                case 5:\n                    name = \"Five\";\n                    break;\n                case 6:\n                    name = \"Six\";\n                    break;\n                case 7:\n                    name = \"Seven\";\n                    break;\n                case 8:\n                    name = \"Eight\";\n                    break;\n                case 9:\n                    name = \"Nine\";\n                    break;\n            }\n            result.add(name);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i + 1);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            for (int i = 1; i <= n / 2; i++) {\n                result.add(i);\n            }\n        } else {\n            for (int i = 1; i <= n; i++) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i);\n                result.add(i - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            } else {\n                list.add(i + 1);\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i);\n                result.add(i - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (isPalindrome(mid)) {\n                result.add(mid);\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        return s.equals(s.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n            if (sum % 2 == 0) {\n                ans.add(start);\n            }\n            start++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = Integer.toString(n);\n        return str.equals(str.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int mid = start + (end - start)/2;\n            if(isPalindrome(mid)){\n                result.add(mid);\n                end = mid - 1;\n            }else{\n                start = mid + 1;\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n){\n        String str = Integer.toString(n);\n        return str.equals(str.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int mid = (start + end) / 2;\n            if (isPalindrome(mid)) {\n                result.add(mid);\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        return s.equals(s.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.add(i);\n                } else {\n                    odd.add(i);\n                }\n            }\n        }\n        return Arrays.asList(even.size(), odd.size());\n    }\n\n    public boolean isPalindrome(int n) {\n        if (n < 0) {\n            return false;\n        }\n        int reverse = 0;\n        while (n > 0) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return reverse == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n            if (sum % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int odd = 0;\n        int even = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        result.add(odd);\n        result.add(even);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int odd = 0;\n        int even = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            if (odd == even) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int temp = start;\n            while (temp != 0) {\n                temp = temp / 10;\n                count++;\n            }\n            if (count % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n            if (sum % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            int count = 0;\n            while (start <= end) {\n                sum += start;\n                count++;\n                start++;\n            }\n            if (sum % 2 == 0) {\n                result.add(count);\n            }\n            end--;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            int temp = start;\n            while (temp > 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n            if (sum % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            if (n % start == 0) {\n                end = n / start;\n            } else {\n                start++;\n            }\n        }\n        return start == end;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n            if (sum % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.add(i);\n                } else {\n                    odd.add(i);\n                }\n            }\n        }\n        return new ArrayList<>(even.size() + odd.size());\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        if (s.length() == 0) {\n            return true;\n        }\n        int start = 0;\n        int end = s.length() - 1;\n        while (start < end) {\n            if (s.charAt(start) != s.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (isPalindrome(mid)) {\n                result.add(mid);\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = String.valueOf(n);\n        return s.equals(s.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n            if (sum % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n            if (sum % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (isPalindrome(mid)) {\n                result.add(mid);\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        int len = String.valueOf(n).length();\n        if (len == 0) {\n            return true;\n        }\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            if (String.valueOf(n).charAt(left) != String.valueOf(n).charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            if (num < 0) {\n                count += 1;\n            } else {\n                count += 0;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (Integer i : arr) {\n            if (i < 0) {\n                count += 1;\n            } else {\n                count += 0;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i : arr) {\n            if (i < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            if (num < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            if (num < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i : arr) {\n            if (i < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // write your code here\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i = 0; i < n; i++)\n            if(arr1[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i = 0; i < n; i++)\n            arr.set(i, arr1[i]);\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n\n        int[] arrCopySorted = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopySorted[i] = arrCopy[i];\n\n        Arrays.sort(arrCopySorted);\n\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arrCopySorted[i])\n                return false;\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i=0; i<n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i=0; i<n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0)\n            return true;\n\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n\n        Arrays.sort(arrCopy);\n\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] != arr[i])\n                return false;\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] != arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0)\n            return true;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++)\n            if (arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int[] arr1 = new int[n];\n        for(int i=0; i<n; i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i=0; i<n; i++)\n            if(arr1[i] != arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for (int i = 0; i < n; i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] != arr[i])\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if (n1 == 0 || n2 == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n1];\n        int[] arr4 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr3[i] = arr1[i];\n            } else {\n                arr3[i] = arr2[i];\n            }\n        }\n        for (int i = 0; i < n2; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr4[i] = arr2[i];\n            } else {\n                arr4[i] = arr3[i];\n            }\n        }\n        if (Arrays.equals(arr3, arr4)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size())\n            return \"NO\";\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for(int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for(int i = 0; i < arr1.length; i++) {\n            if(arr1[i] % 2 != arr2[i] % 2)\n                return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if (n1 != n2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < n1; i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int size1 = lst1.size();\n        int size2 = lst2.size();\n        if (size1 == 0 || size2 == 0) {\n            return \"YES\";\n        }\n        if (size1 == size2) {\n            for (int i = 0; i < size1; i++) {\n                if (lst1.get(i) % 2 != 0) {\n                    return \"NO\";\n                }\n            }\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < len1; i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // write your code here\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        for (int i = 0; i < len1; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr1[i] = arr1[i] / 2;\n            }\n        }\n        for (int i = 0; i < len2; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr2[i] = arr2[i] / 2;\n            }\n        }\n        for (int i = 0; i < len1; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if (n1 == 0 || n2 == 0) {\n            return \"YES\";\n        }\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < n1; i++) {\n            if (arr1[i] % 2 != 0) {\n                return \"NO\";\n            }\n        }\n        for (int i = 0; i < n2; i++) {\n            if (arr2[i] % 2 != 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for(int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for(int i = 0; i < lst1.size(); i++) {\n            if(arr1[i] % 2 != arr2[i] % 2) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            int count = 0;\n            for (char c : chars) {\n                if (histogram.containsKey(c)) {\n                    count++;\n                }\n            }\n            histogram.put(word, count);\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        char[] letters = test.toLowerCase().toCharArray();\n        Arrays.sort(letters);\n        for (char c : letters) {\n            if (result.containsKey(String.valueOf(c))) {\n                result.put(String.valueOf(c), result.get(String.valueOf(c)) + 1);\n            } else {\n                result.put(String.valueOf(c), 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        char[] chars = test.toCharArray();\n        Arrays.sort(chars);\n        for (char c : chars) {\n            if (result.containsKey(c)) {\n                result.put(c, result.get(c) + 1);\n            } else {\n                result.put(c, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            histogram.put(word, histogram.getOrDefault(word, 0) + 1);\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int sLength = sArray.length;\n        int cLength = cArray.length;\n        for (int i = 0; i < sLength; i++) {\n            if (sArray[i] == cArray[i]) {\n                result.add(sArray[i]);\n            }\n        }\n        if (result.size() == sLength) {\n            result.add(sArray[sLength - 1]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < sArr.length && j < cArr.length){\n            if(sArr[i] == cArr[j]){\n                i++;\n                j++;\n            }else{\n                result.add(sArr[i]);\n                i++;\n            }\n        }\n        result.addAll(Arrays.asList(Arrays.copyOfRange(sArr, i, sArr.length)));\n        result.addAll(Arrays.asList(Arrays.copyOfRange(cArr, j, cArr.length)));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || s.length() == 0 || c == null || c.length() == 0) {\n            result.add(s);\n            result.add(false);\n            return result;\n        }\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        char[] resultArray = new char[sArray.length];\n        int resultIndex = 0;\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i] == cArray[i]) {\n                resultArray[resultIndex] = sArray[i];\n                resultIndex++;\n            }\n        }\n        resultArray[resultIndex] = '\\0';\n        String resultString = new String(resultArray);\n        if (resultString.equals(s)) {\n            result.add(resultString);\n            result.add(true);\n        } else {\n            result.add(resultString);\n            result.add(false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while(i < s.length()){\n            if(s.charAt(i) == c.charAt(j)){\n                i++;\n                j++;\n            }else{\n                result.add(s.charAt(i));\n                i++;\n                j = 0;\n            }\n        }\n        result.add(s.charAt(i));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        char[] resultArray = new char[sArray.length];\n        int i = 0;\n        int j = 0;\n        while (i < sArray.length) {\n            if (sArray[i] == cArray[j]) {\n                resultArray[i] = sArray[i];\n                i++;\n                j++;\n            } else {\n                resultArray[i] = sArray[i];\n                i++;\n            }\n        }\n        result.add(new String(resultArray));\n        result.add(sArray.length == resultArray.length);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i] == cArray[i]) {\n                sArray[i] = ' ';\n            }\n        }\n        result.add(new String(sArray));\n        result.add(sArray.equals(cArray));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i] == cArray[i]) {\n                sArray[i] = ' ';\n            }\n        }\n        result.add(new String(sArray));\n        result.add(sArray.equals(cArray));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int len = sArray.length;\n        for (int i = 0; i < len; i++) {\n            if (sArray[i] == cArray[i]) {\n                result.add(sArray[i]);\n            }\n        }\n        result.add(sArray[len - 1]);\n        boolean isPalindrome = true;\n        for (int i = 0; i < len - 1; i++) {\n            if (sArray[i] != sArray[len - 1 - i]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        result.add(isPalindrome);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c.charAt(i)) {\n                result.add(s.charAt(i));\n                s = s.substring(0, i) + s.substring(i + 1);\n            }\n        }\n        result.add(s);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        char[] resultArray = new char[sArray.length];\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i] == cArray[i]) {\n                resultArray[i] = sArray[i];\n            } else {\n                resultArray[i] = cArray[i];\n            }\n        }\n        result.add(new String(resultArray));\n        result.add(s.equals(new String(resultArray)));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s.length() == 0 || c.length() == 0) {\n            result.add(s);\n            result.add(false);\n            return result;\n        }\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = sArray.length - 1;\n        while (i < sArray.length && j >= 0) {\n            if (sArray[i] == cArray[j]) {\n                sArray[i] = '\\0';\n                j--;\n            }\n            i++;\n        }\n        if (i == sArray.length) {\n            result.add(new String(sArray));\n            result.add(true);\n        } else {\n            result.add(new String(sArray));\n            result.add(false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        char[] resultArray = new char[sArray.length];\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i] == cArray[i]) {\n                resultArray[i] = sArray[i];\n            } else {\n                resultArray[i] = cArray[i];\n            }\n        }\n        result.add(new String(resultArray));\n        result.add(s.equals(new String(resultArray)));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        char[] resArr = new char[sArr.length];\n        for (int i = 0; i < sArr.length; i++) {\n            if (sArr[i] == cArr[i]) {\n                resArr[i] = sArr[i];\n            } else {\n                resArr[i] = cArr[i];\n            }\n        }\n        result.add(new String(resArr));\n        result.add(s.equals(new String(resArr)));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i] == cArray[i]) {\n                sArray[i] = ' ';\n            }\n        }\n        result.add(s);\n        result.add(s.equals(c));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == c.charAt(i)) {\n                result.add(s.substring(0, i) + s.substring(i + 1));\n            }\n        }\n        result.add(s.substring(0, s.length() - result.get(1).length()) + s.substring(s.length() - result.get(1).length()));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        char[] resultArray = new char[sArray.length];\n        int i = 0;\n        int j = 0;\n        while(i < sArray.length){\n            if(sArray[i] == cArray[j]){\n                resultArray[j] = sArray[i];\n                j++;\n            }\n            i++;\n        }\n        result.add(new String(resultArray));\n        result.add(sArray.length == j);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        char[] tempArray = new char[sArray.length];\n        for(int i = 0; i < sArray.length; i++){\n            if(sArray[i] == cArray[i]){\n                tempArray[i] = sArray[i];\n            }\n        }\n        result.add(new String(tempArray));\n        result.add(s.equals(new String(tempArray)));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        char[] resArr = new char[sArr.length];\n        for (int i = 0; i < sArr.length; i++) {\n            if (sArr[i] == cArr[i]) {\n                resArr[i] = sArr[i];\n            } else {\n                resArr[i] = cArr[i];\n            }\n        }\n        result.add(String.valueOf(resArr));\n        result.add(sArr.length == resArr.length);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = sArray.length - 1;\n        while (i < j) {\n            if (sArray[i] == cArray[j]) {\n                sArray[i] = sArray[j];\n                sArray[j] = ' ';\n                j--;\n            }\n            i++;\n        }\n        result.add(new String(sArray));\n        result.add(sArray.length == 0);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        char[] resultArray = new char[sArray.length];\n        int i = 0;\n        int j = 0;\n        while (i < sArray.length) {\n            if (sArray[i] == cArray[j]) {\n                resultArray[j] = sArray[i];\n                j++;\n            }\n            i++;\n        }\n        result.add(new String(resultArray));\n        result.add(sArray.length == j);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + str + \" of the \" + count + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(str + \" the number of odd elements \" + count + \" of the string \" + i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (String s : lst) {\n            int odd = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    odd++;\n                }\n            }\n            if (odd % 2 == 1) {\n                res.add(\"the number of odd elements \" + odd + \"n the str\" + s + \" of the \" + s + \"nput.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                oddCount.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(s + \" the number of odd elements \" + count);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(s + \" the number of odd elements \" + count);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \" the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int n = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    n++;\n                }\n            }\n            if (n % 2 == 1) {\n                res.add(\"the number of odd elements \" + n + \" the str\" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) % 2 != 0) {\n                    count++;\n                }\n            }\n            res.add(String.valueOf(count));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int odd = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) % 2 != 0) {\n                    odd++;\n                }\n            }\n            oddCount.add(\"the number of odd elements \" + odd + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int min = sum;\n        for (int num : nums) {\n            if (sum - num >= 0) {\n                sum -= num;\n            } else {\n                min = Math.min(min, sum);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = sum;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < 0) {\n                continue;\n            }\n            sum -= nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int min = sum;\n        for (int i = 0; i < nums.size(); i++) {\n            sum -= nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            int temp = sum - nums.get(i);\n            if (temp < 0) {\n                temp = 0;\n            }\n            min = Math.min(min, temp);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < 0) {\n                continue;\n            }\n            sum -= nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            min = Math.min(min, sum);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = sum;\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums.get(i) > 0) {\n                sum -= nums.get(i);\n                min = Math.min(min, sum);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = sum;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < 0) {\n                continue;\n            }\n            int temp = sum - nums.get(i);\n            if (temp < min) {\n                min = temp;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = sum;\n        for (int i = 0; i < nums.size(); i++) {\n            sum -= nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            min = Math.min(min, sum - num);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = sum;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) >= 0) {\n                sum -= nums.get(i);\n                min = Math.min(min, sum);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for(int num : nums) {\n            sum += num;\n        }\n        int min = Integer.MAX_VALUE;\n        for(int num : nums) {\n            min = Math.min(min, sum - num);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = sum;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 0) {\n                sum -= nums.get(i);\n                min = Math.min(min, sum);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                    for (int k = 0; k < n; k++) {\n                        if (dp[k][j] == 1) {\n                            dp[i][j] = 0;\n                            dp[k][j] = 0;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < m; k++) {\n                        if (dp[i][k] == 1) {\n                            dp[i][j] = 0;\n                            dp[i][k] = 0;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    int bucket = 0;\n                    for (int k = j; k < m; k++) {\n                        if (dp[i][k] == 1) {\n                            bucket++;\n                        }\n                    }\n                    if (bucket < capacity) {\n                        dp[i][j] = 1;\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < m; k++) {\n                        if (dp[i][k] == 1) {\n                            dp[i][j] = 0;\n                            dp[i][k] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < m; k++) {\n                        if (dp[i][k] == 1) {\n                            dp[i][j] = 0;\n                            dp[i][k] = 0;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int[][] dp_1 = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp_1[i][j] = 1;\n                } else {\n                    dp_1[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = dp_1[i][j];\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    res++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < m; k++) {\n                        if (dp[i][k] == 1 && dp[i][j] + 1 <= capacity) {\n                            dp[i][j] = dp[i][j] + 1;\n                            res++;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < n; k++) {\n                        if (dp[i][j] == 1 && dp[k][j] == 1) {\n                            dp[i][j] = 0;\n                            dp[k][j] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < n; k++) {\n                        if (dp[i][j] == 1 && dp[k][j] == 1) {\n                            dp[i][j] = 0;\n                            dp[k][j] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 0;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] count = new int[10];\n        for (int i = 0; i < n; i++) {\n            int num = arr.get(i);\n            int countNum = 0;\n            while (num != 0) {\n                countNum++;\n                num = num >> 1;\n            }\n            count[countNum]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            result.add(count[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 0;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            int digit = 0;\n            while (i < n && arr.get(i) != 0) {\n                digit = arr.get(i) % 2;\n                count++;\n                i++;\n            }\n            result.add(digit);\n            result.add(count);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int ones = 0;\n            for (int j = 0; j < n; j++) {\n                if (arr.get(j) == 1) {\n                    ones++;\n                }\n            }\n            result.add(ones);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                ones++;\n                arr.set(i, arr.get(i) & (arr.get(i) - 1));\n            }\n            res.add(ones);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int[] arrInt = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arrInt[i] = arr.get(i);\n        }\n        Arrays.sort(arrInt);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < arrInt.length; i++) {\n            res.add(arrInt[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            int temp = arr.get(i);\n            while (temp != 0) {\n                count++;\n                temp = temp >> 1;\n            }\n            sortedArr.add(count);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        int[] count = new int[10];\n        for (int i = 0; i < n; i++) {\n            int num = arr.get(i);\n            count[num] += 1;\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > 0) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int[] arrInt = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arrInt[i] = arr.get(i);\n        }\n        Arrays.sort(arrInt);\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < arrInt.length; i++) {\n            res.add(arrInt[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 0;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 0;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] >= 'a' && chars[i] <= 'z') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    result.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] >= 'a' && chars[i] <= 'z') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        String[] wordsArray = s.split(\" \");\n        for (int i = 0; i < wordsArray.length; i++) {\n            if (wordsArray[i].length() == n) {\n                words.add(wordsArray[i]);\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                if (i + n >= chars.length) {\n                    words.add(s.substring(i));\n                } else {\n                    for (int j = i; j < i + n; j++) {\n                        if (!Character.isLetter(chars[j])) {\n                            words.add(s.substring(i, j));\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n                if (count == n) {\n                    result.add(s.substring(i, i + n));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n                if (count == n) {\n                    words.add(s.substring(i, i + n));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] >= 'a' && chars[i] <= 'z') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i])) {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i]) && count == n) {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                vowel = c;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] chars = word.toCharArray();\n        char[] vowels = {'a','e','i','o','u'};\n        int start = 0;\n        int end = 0;\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                start = i;\n            }\n            if(chars[i] == 'A' || chars[i] == 'E' || chars[i] == 'I' || chars[i] == 'O' || chars[i] == 'U') {\n                end = i;\n            }\n        }\n        for(int i = 0; i < vowels.length; i++) {\n            if(start + i >= end) {\n                continue;\n            }\n            if(chars[start + i] == vowels[i]) {\n                min = Math.min(min, i);\n                max = Math.max(max, i);\n            }\n        }\n        if(min == Integer.MAX_VALUE || max == Integer.MIN_VALUE) {\n            return \"\";\n        }\n        return String.valueOf(vowels[min]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // Write your code here\n        char[] wordArr = word.toCharArray();\n        char[] vowels = {'a','e','i','o','u'};\n        int len = wordArr.length;\n        int start = 0;\n        int end = len - 1;\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < len; i++) {\n            if (wordArr[i] == 'a' || wordArr[i] == 'e' || wordArr[i] == 'i' || wordArr[i] == 'o' || wordArr[i] == 'u') {\n                start = i;\n            }\n            if (wordArr[i] == 'A' || wordArr[i] == 'E' || wordArr[i] == 'I' || wordArr[i] == 'O' || wordArr[i] == 'U') {\n                end = i;\n            }\n        }\n        for (int i = 0; i < vowels.length; i++) {\n            if (wordArr[start] == vowels[i]) {\n                min = Math.min(min, start);\n            }\n            if (wordArr[end] == vowels[i]) {\n                max = Math.max(max, end);\n            }\n        }\n        if (min == Integer.MAX_VALUE || max == Integer.MIN_VALUE) {\n            return \"\";\n        }\n        return wordArr[min] + wordArr[max];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isLetter(word.charAt(i))) {\n                vowel += word.charAt(i);\n            }\n        }\n        if (vowel.length() == 0) {\n            return \"\";\n        }\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        int vowelIndex = 0;\n        for (int i = 0; i < vowels.length; i++) {\n            if (vowel.charAt(i) == vowels[i]) {\n                vowelIndex = i;\n                break;\n            }\n        }\n        if (vowelIndex == 0) {\n            vowelIndex = 2;\n        }\n        if (vowelIndex == 2) {\n            vowelIndex = 0;\n        }\n        return vowels[vowelIndex];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] chars = word.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left <= right) {\n            char leftChar = chars[left];\n            char rightChar = chars[right];\n            if (leftChar == 'a' && rightChar == 'e') {\n                return \"a\";\n            } else if (leftChar == 'e' && rightChar == 'i') {\n                return \"e\";\n            } else if (leftChar == 'i' && rightChar == 'o') {\n                return \"i\";\n            } else if (leftChar == 'o' && rightChar == 'u') {\n                return \"o\";\n            } else if (leftChar == 'u' && rightChar == 'a') {\n                return \"u\";\n            } else if (leftChar == 'A' && rightChar == 'E') {\n                return \"a\";\n            } else if (leftChar == 'E' && rightChar == 'I') {\n                return \"e\";\n            } else if (leftChar == 'I' && rightChar == 'O') {\n                return \"i\";\n            } else if (leftChar == 'O' && rightChar == 'U') {\n                return \"o\";\n            } else if (leftChar == 'U' && rightChar == 'A') {\n                return \"u\";\n            }\n            left++;\n            right--;\n        }\n        return \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isLetter(word.charAt(i))) {\n                vowel += word.charAt(i);\n            }\n        }\n        if (vowel.length() == 0) {\n            return \"\";\n        }\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        int index = 0;\n        for (int i = 0; i < vowels.length; i++) {\n            if (vowel.charAt(i) == vowels[i]) {\n                index = i;\n                break;\n            }\n        }\n        for (int i = 0; i < consonants.length; i++) {\n            if (consonants[i] == vowel.charAt(index + 1)) {\n                index = i;\n                break;\n            }\n        }\n        if (index == 0) {\n            return \"\";\n        }\n        return vowels[index];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordChars = word.toCharArray();\n        char[] vowelChars = {'a','e','i','o','u'};\n        int vowelCount = 0;\n        for (int i = 0; i < wordChars.length; i++) {\n            if (vowelChars[0] == wordChars[i]) {\n                vowelCount++;\n            }\n            if (vowelChars[1] == wordChars[i]) {\n                vowelCount++;\n            }\n        }\n        if (vowelCount == 1) {\n            return \"u\";\n        } else if (vowelCount == 2) {\n            return \"U\";\n        } else {\n            return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordArr = word.toCharArray();\n        int len = wordArr.length;\n        char[] leftArr = new char[len];\n        char[] rightArr = new char[len];\n        int left = 0;\n        int right = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isLetter(wordArr[i])) {\n                leftArr[left] = wordArr[i];\n                left++;\n            } else {\n                rightArr[right] = wordArr[i];\n                right++;\n            }\n        }\n        if (left == 0) {\n            return \"\";\n        }\n        if (right == 0) {\n            return \"\";\n        }\n        if (leftArr[left - 1] == 'a' && rightArr[right - 1] == 'a') {\n            return \"a\";\n        } else if (leftArr[left - 1] == 'e' && rightArr[right - 1] == 'e') {\n            return \"e\";\n        } else if (leftArr[left - 1] == 'i' && rightArr[right - 1] == 'i') {\n            return \"i\";\n        } else if (leftArr[left - 1] == 'o' && rightArr[right - 1] == 'o') {\n            return \"o\";\n        } else if (leftArr[left - 1] == 'u' && rightArr[right - 1] == 'u') {\n            return \"u\";\n        } else {\n            return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordChars = word.toCharArray();\n        char[] vowelChars = {'a','e','i','o','u'};\n        int vowelCount = 0;\n        for (char c : wordChars) {\n            if (vowelChars.contains(c)) {\n                vowelCount++;\n            }\n        }\n        if (vowelCount == 0) {\n            return \"\";\n        }\n        int index = 0;\n        for (int i = 0; i < wordChars.length; i++) {\n            if (wordChars[i] == vowelChars[index]) {\n                index++;\n            } else {\n                index = 0;\n            }\n        }\n        if (index == 0) {\n            return \"\";\n        }\n        return vowelChars[index];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                vowel = c;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] chars = word.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                vowel = chars[i] + \"\";\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.charAt(i) + vowel;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordArr = word.toCharArray();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        int len = wordArr.length;\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (wordArr[mid] == vowels[mid]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return wordArr[left];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String result = \"\";\n        char[] wordArray = word.toCharArray();\n        for (int i = 0; i < wordArray.length; i++) {\n            if (wordArray[i] == 'a' || wordArray[i] == 'e' || wordArray[i] == 'i' || wordArray[i] == 'o' || wordArray[i] == 'u') {\n                result = wordArray[i];\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // Write your code here\n        char[] wordChars = word.toCharArray();\n        char[] vowelChars = {'a','e','i','o','u'};\n        int vowelCount = 0;\n        for(int i = 0; i < wordChars.length; i++) {\n            if(vowelChars[i] == wordChars[i]) {\n                vowelCount++;\n            }\n        }\n        if(vowelCount == 0) {\n            return \"\";\n        }\n        int vowelIndex = 0;\n        for(int i = 0; i < wordChars.length; i++) {\n            if(vowelChars[i] == wordChars[i]) {\n                vowelIndex = i;\n            }\n        }\n        if(vowelIndex == 0) {\n            vowelIndex = wordChars.length - 1;\n        }\n        if(vowelIndex == wordChars.length - 1) {\n            vowelIndex = 0;\n        }\n        char vowel = vowelChars[vowelIndex];\n        char[] vowelChars2 = {'a','e','i','o','u'};\n        int vowelCount2 = 0;\n        for(int i = 0; i < wordChars.length; i++) {\n            if(vowelChars2[i] == vowel) {\n                vowelCount2++;\n            }\n        }\n        if(vowelCount2 == 0) {\n            return \"\";\n        }\n        int vowelIndex2 = 0;\n        for(int i = 0; i < wordChars.length; i++) {\n            if(vowelChars2[i] == vowel) {\n                vowelIndex2 = i;\n            }\n        }\n        if(vowelIndex2 == 0) {\n            vowelIndex2 = wordChars.length - 1;\n        }\n        if(vowelIndex2 == wordChars.length - 1) {\n            vowelIndex2 = 0;\n        }\n        char vowel2 = vowelChars2[vowelIndex2];\n        if(vowel == vowel2) {\n            return \"\";\n        }\n        return vowel2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordArr = word.toCharArray();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        int len = wordArr.length;\n        int left = 0, right = len - 1;\n        while (left < right) {\n            char leftChar = wordArr[left];\n            char rightChar = wordArr[right];\n            if (vowels[leftChar - 'a'] <= vowels[rightChar - 'a']) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        if (left == right) {\n            return \"\";\n        }\n        return String.valueOf(vowels[left]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] chars = word.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                vowel = chars[i] + \"\";\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                vowel = c + \"\";\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordArray = word.toCharArray();\n        char[] vowels = {'a','e','i','o','u'};\n        int vowelCount = 0;\n        for(int i = 0; i < wordArray.length; i++) {\n            if(wordArray[i] == vowels[0]) {\n                vowelCount++;\n            }\n            if(wordArray[i] == vowels[1]) {\n                vowelCount++;\n            }\n        }\n        if(vowelCount == 0) {\n            return \"\";\n        }\n        if(vowelCount == 1) {\n            return wordArray[0] + \"\";\n        }\n        if(vowelCount == 2) {\n            return wordArray[0] + wordArray[1] + \"\";\n        }\n        return \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isLetter(word.charAt(i))) {\n                vowel = word.charAt(i) + vowel;\n            }\n        }\n        if (vowel.length() == 0) {\n            return \"\";\n        }\n        return vowel.substring(1, vowel.length());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0) return \"No\";\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if(s1.equals(\"(\") && s2.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\")) return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\")) return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\")) return \"Yes\";\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0) {\n            return \"Yes\";\n        }\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            lst.remove(0);\n            lst.remove(0);\n            return \"Yes\";\n        }\n        if (s1.equals(\")\") && s2.equals(\"(\")) {\n            lst.remove(0);\n            lst.remove(0);\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if (s1.equals(\"(\") && s2.equals(\"(\")) {\n            return \"Yes\";\n        } else if (s1.equals(\")\") && s2.equals(\")\")) {\n            return \"Yes\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\")) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\")) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\")) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\")) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\")) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\")) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\")\"))) {\n            return \"No\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\"))) {\n            return \"No\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\"))) {\n            return \"No\";\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = lst.get(0);\n        String str2 = lst.get(1);\n        if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str2.equals(\"(\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\"(\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else {\n                    if (stack.isEmpty()) {\n                        return \"No\";\n                    }\n                    char top = stack.pop();\n                    if (top != '(') {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0)\n            return \"No\";\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        if(str1.equals(\"(\") && str2.equals(\")\"))\n            return \"Yes\";\n        if(str1.equals(\")\") && str2.equals(\"(\"))\n            return \"Yes\";\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        if (str1.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0)\n            return \"No\";\n        if(lst.size() == 1)\n            return lst.get(0).equals(\"(\") ? \"Yes\" : \"No\";\n        if(lst.get(0).equals(\"(\") && lst.get(1).equals(\")\"))\n            return \"Yes\";\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return lst.get(0);\n        }\n        String str = lst.get(0);\n        String str1 = lst.get(1);\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\")\") && str1.equals(\"(\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\")\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        String str = lst.get(0);\n        String str2 = lst.get(1);\n        int count = 0;\n        int count2 = 0;\n        int count3 = 0;\n        int count4 = 0;\n        int count5 = 0;\n        int count6 = 0;\n        int count7 = 0;\n        int count8 = 0;\n        int count9 = 0;\n        int count10 = 0;\n        int count11 = 0;\n        int count12 = 0;\n        int count13 = 0;\n        int count14 = 0;\n        int count15 = 0;\n        int count16 = 0;\n        int count17 = 0;\n        int count18 = 0;\n        int count19 = 0;\n        int count20 = 0;\n        int count21 = 0;\n        int count22 = 0;\n        int count23 = 0;\n        int count24 = 0;\n        int count25 = 0;\n        int count26 = 0;\n        int count27 = 0;\n        int count28 = 0;\n        int count29 = 0;\n        int count30 = 0;\n        int count31 = 0;\n        int count32 = 0;\n        int count33 = 0;\n        int count34 = 0;\n        int count35 = 0;\n        int count36 = 0;\n        int count37 = 0;\n        int count38 = 0;\n        int count39 = 0;\n        int count40 = 0;\n        int count41 = 0;\n        int count42 = 0;\n        int count43 = 0;\n        int count44 = 0;\n        int count45 = 0;\n        int count46 = 0;\n        int count47 = 0;\n        int count48 = 0;\n        int count49 = 0;\n        int count50 = 0;\n        int count51 = 0;\n        int count52 = 0;\n        int count53 = 0;\n        int count54 = 0;\n        int count55 = 0;\n        int count56 = 0;\n        int count57 = 0;\n        int count58 = 0;\n        int count59 = 0;\n        int count60 = 0;\n        int count61 = 0;\n        int count62 = 0;\n        int count63 = 0;\n        int count64 = 0;\n        int count65 = 0;\n        int count66 = 0;\n        int count67 = 0;\n        int count68 = 0;\n        int count69 = 0;\n        int count70 = 0;\n        int count71 = 0;\n        int count72 = 0;\n        int count73 = 0;\n        int count74 = 0;\n        int count75 = 0;\n        int count76 = 0;\n        int count77 = 0;\n        int count78 = 0;\n        int count79 = 0;\n        int count80 = 0;\n        int count81 = 0;\n        int count82 = 0;\n        int count83 = 0;\n        int count84 = 0;\n        int count85 = 0;\n        int count86 = 0;\n        int count87 = 0;\n        int count88 = 0;\n        int count89 = 0;\n        int count90 = 0;\n        int count91 = 0;\n        int count92 = 0;\n        int count93 = 0;\n        int count94 = 0;\n        int count95 = 0;\n        int count96 = 0;\n        int count97 = 0;\n        int count98 = 0;\n        int count99 = 0;\n        int count100 = 0;\n        int count101 = 0;\n        int count102 = 0;\n        int count103 = 0;\n        int count104 = 0;\n        int count105 = 0;\n        int count106 = 0;\n        int count107 = 0;\n        int count108 = 0;\n        int count109 = 0;\n        int count110 = 0;\n        int count111 = 0;\n        int count112 = 0;\n        int count113 = 0;\n        int count114 = 0;\n        int count115 = 0;\n        int count116 = 0;\n        int count117 = 0;\n        int count118 = 0;\n        int count119 = 0;\n        int count120 = 0;\n        int count121 = 0;\n        int count122 = 0;\n        int count123 = 0;\n        int count124 = 0;\n        int count125 = 0;\n        int count126 = 0;\n        int count127 = 0;\n        int count128 = 0;\n        int count129 = 0;\n        int count130 = 0;\n        int count131 = 0;\n        int count132 = 0;\n        int count133 = 0;\n        int count134 = 0;\n        int count135 = 0;\n        int count136 = 0;\n        int count137 = 0;\n        int count138 = 0;\n        int count139 = 0;\n        int count140 = 0;\n        int count141 = 0;\n        int count142 = 0;\n        int count143 = 0;\n        int count144 = 0;\n        int count145 = 0;\n        int count146 = 0;\n        int count147 = 0;\n        int count148 = 0;\n        int count149 = 0;\n        int count150 = 0;\n        int count151 = 0;\n        int count152 = 0;\n        int count153 = 0;\n        int count154 = 0;\n        int count155 = 0;\n        int count156 = 0;\n        int count157 = 0;\n        int count158 = 0;\n        int count159 = 0;\n        int count160 = 0;\n        int count161 = 0;\n        int count162 = 0;\n        int count163 = 0;\n        int count164 = 0;\n        int count165 = 0;\n        int count166 = 0;\n        int count167 = 0;\n        int count168 = 0;\n        int count169 = 0;\n        int count170 = 0;\n        int count171 = 0;\n        int count172 = 0;\n        int count173 = 0;\n        int count174 = 0;\n        int count175 = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1) {\n            return \"Yes\";\n        }\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if(s1.equals(\"(\") && s2.equals(\")\")) {\n            lst.remove(0);\n            lst.remove(0);\n            return \"Yes\";\n        }\n        if(s1.equals(\")\") && s2.equals(\"(\")) {\n            lst.remove(0);\n            lst.remove(0);\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        } else if (s1.equals(\")\") && s2.equals(\"(\")) {\n            return \"Yes\";\n        } else if (s1.equals(\")\") && s2.equals(\")\")) {\n            return \"Yes\";\n        } else if (s1.equals(\"(\") && s2.equals(\"(\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else {\n                    if (stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String result = \"\";\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            if (s.equals(\"(\")) {\n                count++;\n            } else if (s.equals(\")\")) {\n                count--;\n            }\n            if (count == 0) {\n                result = lst.get(i);\n            }\n        }\n        if (result.equals(\"\")) {\n            return \"No\";\n        } else {\n            return \"Yes\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1) {\n            return lst.get(0);\n        }\n        Stack<Character> stack = new Stack<>();\n        for(String s : lst) {\n            for(char c : s.toCharArray()) {\n                if(c == '(') {\n                    stack.push(c);\n                } else {\n                    if(stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0) {\n            return \"No\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else {\n                    if (stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = lst.get(0);\n        String str1 = lst.get(1);\n        if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str1.equals(\"(\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str1.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str1.equals(\"(\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str1.equals(\"(\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str1.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str1.equals(\")\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // write your code here\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        if (str1.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str1.equals(\")\") && str2.equals(\"(\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // write your code here\n        String str = lst.get(0);\n        int count = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = lst.get(0);\n        String str2 = lst.get(1);\n        if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str2.equals(\"(\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\"(\")) {\n            return \"Yes\";\n        } else if (str.equals(\")\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < k; i++) {\n            result.add(nums[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int len = arr.size();\n        int start = 0;\n        int end = len - 1;\n        int mid;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (arr.get(mid) > arr.get(end)) {\n                result.add(arr.get(mid));\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (start == len) {\n            result.add(arr.get(start));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < k; i++) {\n            result.add(nums[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < k; i++) {\n            res.add(nums[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (num > max) {\n                max = num;\n            }\n            result.add(num);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        if (n < k) {\n            return res;\n        }\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<Integer>();\n        int n = arr.size();\n        if (n < k) {\n            return result;\n        }\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            result.add(arr_copy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < k; i++) {\n            res.add(nums[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        if (n < k) {\n            return result;\n        }\n        int[] nums = new int[k];\n        for (int i = 0; i < k; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < k; i++) {\n            result.add(nums[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int len = arr.size();\n        if(len < k) {\n            return result;\n        }\n        int max = arr.get(0);\n        for(int i = 1; i < len; i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        for(int i = 0; i < k; i++) {\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int len = arr.size();\n        if(len < k) {\n            return res;\n        }\n        int max = arr.get(0);\n        for(int i = 1; i < len; i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        for(int i = 0; i < k; i++) {\n            res.add(max);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < k; i++) {\n            result.add(nums[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<Integer>();\n        int n = arr.size();\n        if (n < k) {\n            return result;\n        }\n\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) % 2 == 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) % 2 == 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int n = arr.size();\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        for (int i = k; i < n; i++) {\n            int num = arr.get(i);\n            int num1 = num / 10;\n            int num2 = num % 10;\n            sum += num1 * 10 + num2;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int len = arr.size();\n        int i = 0;\n        while (i < len && k > 0) {\n            int num = arr.get(i);\n            sum += num;\n            i++;\n            k--;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int n = arr.size();\n        int i = 0;\n        while(i < n && k > 0){\n            sum += arr.get(i);\n            i++;\n            k--;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int len = arr.size();\n        int i = 0;\n        while(i < k && i < len){\n            sum = sum + arr.get(i);\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int len = arr.size();\n        int i = 0;\n        while (i < len && sum < k) {\n            sum += arr.get(i);\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i);\n            i++;\n        }\n        oddCollatz.add(1);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int start = n;\n        while (start != 1) {\n            if (start % 2 == 0) {\n                start = start / 2;\n            } else {\n                start = 3 * start + 1;\n            }\n            oddCollatz.add(start);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i + 1);\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i);\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int start = n;\n        while (start != 1) {\n            if (start % 2 == 0) {\n                start = start / 2;\n            } else {\n                start = 3 * start + 1;\n            }\n            oddCollatz.add(start);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = n;\n        while (start != 1) {\n            if (start % 2 == 0) {\n                start = start / 2;\n            } else {\n                start = 3 * start + 1;\n            }\n            result.add(start);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                oddCollatz.add(i);\n            }\n            i = i + 1;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i);\n            i++;\n        }\n        oddCollatz.add(1);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                i = i / 2;\n            } else {\n                i = 3 * i + 1;\n            }\n            oddCollatz.add(i);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = n;\n        int end = 1;\n        while (start != 1) {\n            if (start % 2 == 0) {\n                end = start / 2;\n            } else {\n                end = 3 * start + 1;\n            }\n            result.add(end);\n            start = end;\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int start = n;\n        while (start != 1) {\n            if (start % 2 == 0) {\n                start = start / 2;\n            } else {\n                start = 3 * start + 1;\n            }\n            oddCollatz.add(start);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n            }\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i);\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 1) {\n                oddCollatz.add(i);\n            }\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n            }\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int current = n;\n        while (current != 1) {\n            if (current % 2 == 0) {\n                current = current / 2;\n            } else {\n                current = 3 * current + 1;\n            }\n            oddCollatz.add(current);\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n            }\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = n;\n        while (start != 1) {\n            if (start % 2 == 0) {\n                start = start / 2;\n            } else {\n                start = 3 * start + 1;\n            }\n            result.add(start);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i <= n) {\n            if(i % 2 == 0) {\n                i = i / 2;\n            } else {\n                i = 3 * i + 1;\n            }\n            oddCollatz.add(i);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.equals(\"\")) {\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2050) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        int daysInMonth = 0;\n        int daysInYear = 0;\n        int daysInMonth1 = 0;\n        int daysInMonth3 = 0;\n        int daysInMonth5 = 0;\n        int daysInMonth7 = 0;\n        int daysInMonth8 = 0;\n        int daysInMonth10 = 0;\n        int daysInMonth12 = 0;\n        int daysInYear1 = 0;\n        int daysInYear3 = 0;\n        int daysInYear5 = 0;\n        int daysInYear7 = 0;\n        int daysInYear8 = 0;\n        int daysInYear10 = 0;\n        int daysInYear12 = 0;\n        if (dateArray.length == 3) {\n            daysInMonth1 = 31;\n            daysInYear1 = 365;\n        } else if (dateArray.length == 4) {\n            daysInMonth3 = 30;\n            daysInYear3 = 365;\n        } else if (dateArray.length == 5) {\n            daysInMonth5 = 31;\n            daysInYear5 = 365;\n        } else if (dateArray.length == 6) {\n            daysInMonth7 = 30;\n            daysInYear7 = 365;\n        } else if (dateArray.length == 7) {\n            daysInMonth8 = 31;\n            daysInYear8 = 365;\n        } else if (dateArray.length == 8) {\n            daysInMonth10 = 31;\n            daysInYear10 = 365;\n        } else if (dateArray.length == 9) {\n            daysInMonth12 = 30;\n            daysInYear12 = 365;\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth1 = 31;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            daysInMonth1 = 30;\n        } else if (month == 2) {\n            daysInMonth1 = 29;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            daysInMonth3 = 30;\n        } else if (month == 2) {\n            daysInMonth3 = 29;\n        }\n        if (month == 6 || month == 9 || month == 11) {\n            daysInMonth5 = 31;\n        } else if (month == 2) {\n            daysInMonth5 = 29;\n        }\n        if (month == 8 || month == 10 || month == 12) {\n            daysInMonth7 = 31;\n        } else if (month == 2) {\n            daysInMonth7 = 29;\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth8 = 31;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            daysInMonth8 = 30;\n        } else if (month == 2) {\n            daysInMonth8 = 29;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            daysInMonth10 = 31;\n        } else if (month == 2) {\n            daysInMonth10 = 29;\n        }\n        if (month == 6 || month == 9 || month == 11) {\n            daysInMonth12 = 30;\n        } else if (month == 2) {\n            daysInMonth12 = 29;\n        }\n        if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n            daysInYear1 = 366;\n        } else {\n            daysInYear1 = 365;\n        }\n        if (year % 4 == 0 && year % 100 != 0) {\n            daysInYear3 = 365;\n        } else {\n            daysInYear3 = 364;\n        }\n        if (year % 4 == 0 && year % 100 != 0) {\n            daysInYear5 = 365;\n        } else {\n            daysInYear5 = 364;\n        }\n        if (year % 4 == 0 && year % 100 != 0) {\n            daysInYear7 = 365;\n        } else {\n            daysInYear7 = 364;\n        }\n        if (year % 4 == 0 && year % 100 != 0) {\n            daysInYear8 = 365;\n        } else {\n            daysInYear8 = 364;\n        }\n        if (year % 4 == 0 && year % 100 != 0) {\n            daysInYear10 = 365;\n        } else {\n            daysInYear10 = 364;\n        }\n        if (year % 4 == 0 && year % 100 != 0) {\n            daysInYear12 = 365;\n        } else {\n            daysInYear12 = 364;\n        }\n        if (day <= daysInMonth1) {\n            return true;\n        } else if (day <= daysInMonth3) {\n            return true;\n        } else if (day <= daysInMonth5) {\n            return true;\n        } else if (day <= daysInMonth7) {\n            return true;\n        } else if (day <= daysInMonth8) {\n            return true;\n        } else if (day <= daysInMonth10) {\n            return true;\n        } else if (day <= daysInMonth12) {\n            return true;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n        String[] splitDate = date.split(\"-\");\n        int day = Integer.parseInt(splitDate[2]);\n        int month = Integer.parseInt(splitDate[1]);\n        int year = Integer.parseInt(splitDate[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (year < 1900 || year > 2050) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n        String[] split = date.split(\"-\");\n        int month = Integer.parseInt(split[1]);\n        int day = Integer.parseInt(split[2]);\n        int year = Integer.parseInt(split[0]);\n        int daysInMonth = 31;\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth = 30;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            daysInMonth = 31;\n        }\n        if (day > daysInMonth) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (date.isEmpty()) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 1 && day == 31) {\n            return false;\n        }\n        if (month == 2 && day == 28) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 2 && day == 30) {\n            return false;\n        }\n        if (month == 2 && day == 31) {\n            return false;\n        }\n        if (month == 3 && day == 28) {\n            return false;\n        }\n        if (month == 3 && day == 29) {\n            return false;\n        }\n        if (month == 3 && day == 30) {\n            return false;\n        }\n        if (month == 3 && day == 31) {\n            return false;\n        }\n        if (month == 4 && day == 30) {\n            return false;\n        }\n        if (month == 4 && day == 31) {\n            return false;\n        }\n        if (month == 5 && day == 31) {\n            return false;\n        }\n        if (month == 5 && day == 30) {\n            return false;\n        }\n        if (month == 5 && day == 31) {\n            return false;\n        }\n        if (month == 6 && day == 30) {\n            return false;\n        }\n        if (month == 6 && day == 31) {\n            return false;\n        }\n        if (month == 7 && day == 31) {\n            return false;\n        }\n        if (month == 7 && day == 30) {\n            return false;\n        }\n        if (month == 7 && day == 31) {\n            return false;\n        }\n        if (month == 8 && day == 31) {\n            return false;\n        }\n        if (month == 8 && day == 30) {\n            return false;\n        }\n        if (month == 8 && day == 31) {\n            return false;\n        }\n        if (month == 9 && day == 30) {\n            return false;\n        }\n        if (month == 9 && day == 31) {\n            return false;\n        }\n        if (month == 10 && day == 31) {\n            return false;\n        }\n        if (month == 10 && day == 30) {\n            return false;\n        }\n        if (month == 10 && day == 31) {\n            return false;\n        }\n        if (month == 11 && day == 30) {\n            return false;\n        }\n        if (month == 11 && day == 31) {\n            return false;\n        }\n        if (month == 12 && day == 31) {\n            return false;\n        }\n        if (month == 12 && day == 30) {\n            return false;\n        }\n        if (month == 12 && day == 31) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2050) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return true;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day == 30) {\n                return true;\n            }\n        }\n        if (month == 2) {\n            if (day == 28) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 9999) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return true;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day == 30) {\n                return true;\n            }\n            if (day == 29) {\n                return true;\n            }\n        }\n        if (month == 2) {\n            if (day == 29) {\n                return true;\n            }\n            if (day == 28) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        int day = Integer.parseInt(dateArray[2]);\n        int month = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateSplit = date.split(\"-\");\n        String[] monthSplit = dateSplit[1].split(\"-\");\n        String[] daySplit = dateSplit[2].split(\"-\");\n        int month = Integer.parseInt(monthSplit[0]);\n        int day = Integer.parseInt(daySplit[0]);\n        int year = Integer.parseInt(dateSplit[0]);\n        if (dateSplit.length != 3 || monthSplit.length != 2 || daySplit.length != 2) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day > 28) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2050) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.equals(\"\")) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2050) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year % 4 == 0) {\n            return false;\n        }\n        if (month == 2 && day == 28 && year % 400 == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (day == 31 && month == 4 || day == 30 && month == 6 || day == 31 && month == 9 || day == 30 && month == 11) {\n            return false;\n        }\n        if (day == 29 && month == 2) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        int daysInMonth = 0;\n        int daysInYear = 0;\n        int daysInMonth1 = 0;\n        int daysInMonth3 = 0;\n        int daysInMonth5 = 0;\n        int daysInMonth7 = 0;\n        int daysInMonth8 = 0;\n        int daysInMonth10 = 0;\n        int daysInMonth12 = 0;\n        int daysInMonth4 = 0;\n        int daysInMonth6 = 0;\n        int daysInMonth9 = 0;\n        int daysInMonth2 = 0;\n        int daysInMonth4 = 0;\n        int daysInMonth6 = 0;\n        int daysInMonth9 = 0;\n        int daysInMonth2 = 0;\n        if (dateArray.length == 3) {\n            daysInMonth2 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 4) {\n            daysInMonth4 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 5) {\n            daysInMonth6 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 6) {\n            daysInMonth9 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 7) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 8) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 9) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 10) {\n            daysInMonth10 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 11) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 12) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 13) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 14) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 15) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 16) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 17) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 18) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 19) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 20) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 21) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 22) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 23) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 24) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 25) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 26) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 27) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        } else if (dateArray.length == 28) {\n            daysInMonth12 = 30;\n            daysInYear = 365;\n        } else if (dateArray.length == 29) {\n            daysInMonth12 = 31;\n            daysInYear = 366;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > daysInMonth2) {\n            return false;\n        }\n        if (year < 1 || year > daysInYear) {\n            return false;\n        }\n        if (day > 31) {\n            daysInMonth1 = 31;\n            daysInMonth3 = 28;\n            daysInMonth5 = 31;\n            daysInMonth7 = 30;\n            daysInMonth8 = 31;\n            daysInMonth10 = 30;\n            daysInMonth12 = 31;\n            daysInMonth4 = 30;\n            daysInMonth6 = 31;\n            daysInMonth9 = 30;\n            daysInMonth2 = 29;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] split = date.split(\"-\");\n        if(split.length != 3){\n            return false;\n        }\n        int month = Integer.parseInt(split[1]);\n        int day = Integer.parseInt(split[2]);\n        int year = Integer.parseInt(split[0]);\n        if(month < 1 || month > 12){\n            return false;\n        }\n        if(day < 1 || day > 31){\n            return false;\n        }\n        if(year < 1 || year > 9999){\n            return false;\n        }\n        int days = 0;\n        for(int i = 0; i < month; i++){\n            if(i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 || i == 12){\n                days += 31;\n            }else{\n                days += 30;\n            }\n        }\n        if(day > days){\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        int daysInMonth = 0;\n        int daysInYear = 0;\n        switch (month) {\n            case 1:\n                daysInMonth = 31;\n                break;\n            case 3:\n                daysInMonth = 31;\n                break;\n            case 5:\n                daysInMonth = 30;\n                break;\n            case 7:\n                daysInMonth = 31;\n                break;\n            case 8:\n                daysInMonth = 31;\n                break;\n            case 10:\n                daysInMonth = 30;\n                break;\n            case 12:\n                daysInMonth = 31;\n                break;\n            case 4:\n                daysInMonth = 30;\n                break;\n            case 6:\n                daysInMonth = 31;\n                break;\n            case 9:\n                daysInMonth = 30;\n                break;\n            case 11:\n                daysInMonth = 31;\n                break;\n            case 2:\n                daysInMonth = 29;\n                break;\n            default:\n                daysInMonth = 31;\n                break;\n        }\n        switch (month) {\n            case 1:\n            case 3:\n            case 5:\n            case 7:\n            case 8:\n            case 10:\n            case 12:\n                daysInYear = 31;\n                break;\n            case 4:\n                daysInYear = 30;\n                break;\n            case 6:\n                daysInYear = 31;\n                break;\n            case 9:\n                daysInYear = 30;\n                break;\n            case 11:\n                daysInYear = 31;\n                break;\n            case 2:\n                daysInYear = 29;\n                break;\n            default:\n                daysInYear = 31;\n                break;\n        }\n        if (day < 1 || day > daysInMonth) {\n            return false;\n        }\n        if (day < 1 || day > daysInYear) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        int daysInMonth = 0;\n        switch (month) {\n            case 1:\n                daysInMonth = 31;\n                break;\n            case 3:\n                daysInMonth = 31;\n                break;\n            case 5:\n                daysInMonth = 30;\n                break;\n            case 7:\n                daysInMonth = 31;\n                break;\n            case 8:\n                daysInMonth = 31;\n                break;\n            case 10:\n                daysInMonth = 30;\n                break;\n            case 12:\n                daysInMonth = 31;\n                break;\n            case 2:\n                if (year % 4 == 0) {\n                    daysInMonth = 29;\n                } else {\n                    daysInMonth = 28;\n                }\n                break;\n            case 4:\n                daysInMonth = 30;\n                break;\n            case 6:\n                daysInMonth = 31;\n                break;\n            case 9:\n                daysInMonth = 30;\n                break;\n            case 11:\n                daysInMonth = 31;\n                break;\n            case 2:\n                if (year % 4 == 0) {\n                    daysInMonth = 28;\n                } else {\n                    daysInMonth = 29;\n                }\n                break;\n            case 4:\n                daysInMonth = 31;\n                break;\n            case 6:\n                daysInMonth = 30;\n                break;\n            case 9:\n                daysInMonth = 31;\n                break;\n            case 11:\n                daysInMonth = 30;\n                break;\n            case 2:\n                if (year % 4 == 0) {\n                    daysInMonth = 29;\n                } else {\n                    daysInMonth = 28;\n                }\n                break;\n            case 4:\n                daysInMonth = 31;\n                break;\n            case 6:\n                daysInMonth = 30;\n                break;\n            case 9:\n                daysInMonth = 31;\n                break;\n            case 11:\n                daysInMonth = 30;\n                break;\n            default:\n                return false;\n        }\n        if (day < 1 || day > daysInMonth) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if(date == null || date.equals(\"\")) {\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        if(dateArray.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if(month < 1 || month > 12) {\n            return false;\n        }\n        if(day < 1 || day > 31) {\n            return false;\n        }\n        if(year < 1900 || year > 2050) {\n            return false;\n        }\n        if(month == 2 && day == 29) {\n            return false;\n        }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n            if(day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if(month == 2) {\n            if(day < 1 || day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        return odd + even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        return odd + \" \" + even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        return odd + \",\" + even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n                if (words[i].toLowerCase().charAt(0) == 'a') {\n                    odd++;\n                }\n            }\n        }\n        return count + \" \" + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n                odd++;\n            }\n        }\n        return count + \" \" + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == odd) {\n            return count;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int oddCount = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                oddCount++;\n            }\n        }\n        return count + oddCount;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) return true;\n        int len = lst.size();\n        int i = 0;\n        while (i < len - 1) {\n            if (lst.get(i) > lst.get(i + 1)) return false;\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n            last = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int n = lst.size();\n        int i = 0;\n        while (i < n) {\n            if (lst.get(i) != lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() < 2) return true;\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last) return false;\n            last = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last + 1) {\n                return false;\n            }\n            last = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int n = lst.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n\n        Arrays.sort(arr);\n\n        for (int i = 0; i < n - 1; i++) {\n            if (arr[i] == arr[i + 1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (last > lst.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int last = lst.get(lst.size() - 1);\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > last) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (last != lst.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer i : lst) {\n            if (map.containsKey(i)) {\n                return false;\n            }\n            map.put(i, 1);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) return false;\n            if (lst.get(i) == lst.get(j)) i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n            last = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (last != lst.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n            last = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (map.containsKey(lst.get(i))) {\n                return false;\n            }\n            map.put(lst.get(i), i);\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last + 1) {\n                return false;\n            }\n            last = lst.get(i);\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        for (int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for (int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int len = 0;\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] <= arr2[i]) {\n                len++;\n            }\n        }\n        if (len == arr1.length) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n\n        for (int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n\n        for (int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n\n        int i = 0;\n        int j = 0;\n        int count = 0;\n\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] <= arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n\n        if (i == arr1.length) {\n            count++;\n        }\n\n        if (j == arr2.length) {\n            count++;\n        }\n\n        if (count == 2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        for (int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for (int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int len = 0;\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] <= arr2[i]) {\n                len++;\n            }\n        }\n        if (len == arr1.length) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        if (len1 == 0 || len2 == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int len = len1 + len2 - len1 * len2 / 2;\n        int[] arr = new int[len];\n        int i = 0;\n        int j = 0;\n        while (i < len1 && j < len2) {\n            if (arr1[i] <= arr2[j]) {\n                arr[i] = arr1[i];\n                i++;\n            } else {\n                arr[j] = arr2[j];\n                j++;\n            }\n        }\n        if (i == len1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        for (int j = 0; j < len1; j++) {\n            arr[i] = interval1.get(j);\n            i++;\n        }\n        for (int j = 0; j < len2; j++) {\n            arr[i] = interval2.get(j);\n            i++;\n        }\n        Arrays.sort(arr);\n        int j = 0;\n        int k = 0;\n        while (j < len1 && k < len2) {\n            if (arr[j] == arr[k]) {\n                j++;\n                k++;\n            } else {\n                k++;\n            }\n        }\n        if (j == len1 && k == len2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        if(len1 > len2) {\n            int temp = len1;\n            len1 = len2;\n            len2 = temp;\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for(int i = 0; i < len1; i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for(int i = 0; i < len2; i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int len = len1 + len2;\n        int i = 0;\n        int j = 0;\n        while(i < len && j < len) {\n            if(arr1[i] <= arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if(i == len) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        for(int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for(int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int len = 0;\n        for(int i = 0; i < arr1.length; i++) {\n            if(arr1[i] <= arr2[i]) {\n                len++;\n            }\n        }\n        if(len == arr1.length) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Write your code here\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        for (int j = 0; j < len1; j++) {\n            arr[i] = interval1.get(j);\n            i++;\n        }\n        i = 0;\n        for (int j = 0; j < len2; j++) {\n            arr[i] = interval2.get(j);\n            i++;\n        }\n        Arrays.sort(arr);\n        int start = arr[0];\n        int end = arr[len - 1];\n        int len_intersection = end - start + 1;\n        if (len_intersection % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        for (int i = 0; i < len1; i++) {\n            arr[i] = interval1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr[len1 + i] = interval2.get(i);\n        }\n        Arrays.sort(arr);\n        int start = arr[0];\n        int end = arr[len - 1];\n        int len1_1 = 0;\n        int len2_1 = 0;\n        for (int i = 0; i < len1; i++) {\n            if (arr[i] <= end) {\n                len1_1++;\n            }\n        }\n        for (int i = 0; i < len2; i++) {\n            if (arr[len1 + i] <= end) {\n                len2_1++;\n            }\n        }\n        if (len1_1 == len2_1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Write your code here\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        for(int j = 0; j < len1; j++) {\n            arr[i] = interval1.get(j);\n            i++;\n        }\n        i = 0;\n        for(int j = 0; j < len2; j++) {\n            arr[i] = interval2.get(j);\n            i++;\n        }\n        Arrays.sort(arr);\n        int j = 0;\n        int k = 0;\n        int count = 0;\n        while(j < len && k < len) {\n            if(arr[j] == arr[k]) {\n                count++;\n                j++;\n                k++;\n            } else if(arr[j] < arr[k]) {\n                j++;\n            } else {\n                k++;\n            }\n        }\n        if(count == len) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        for(int k = 0; k < len; k++) {\n            if(k < len1) {\n                arr[k] = interval1.get(i);\n                i++;\n            }\n            if(k < len2) {\n                arr[k + len1] = interval2.get(j);\n                j++;\n            }\n        }\n        int count = 0;\n        for(int k = 0; k < len; k++) {\n            if(arr[k] == arr[k + len1]) {\n                count++;\n            }\n        }\n        if(count == len) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        if (len == 0) {\n            return \"NO\";\n        }\n        int[] arr = new int[len];\n        int i = 0;\n        for (int j = 0; j < len1; j++) {\n            arr[i++] = interval1.get(j);\n        }\n        for (int j = 0; j < len2; j++) {\n            arr[i++] = interval2.get(j);\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() != interval2.size()) {\n            return \"NO\";\n        }\n        int[] arr = new int[interval1.size()];\n        for (int i = 0; i < interval1.size(); i++) {\n            arr[i] = interval1.get(i) + interval2.get(i);\n        }\n        int len = arr.length;\n        for (int i = 0; i < len; i++) {\n            if (arr[i] % 2 == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int n = interval1.size();\n        int m = interval2.size();\n        int count = 0;\n        int max = 0;\n        int min = 0;\n        int sum = 0;\n        int diff = 0;\n        int count1 = 0;\n        int count2 = 0;\n        int count3 = 0;\n        int count4 = 0;\n        int count5 = 0;\n        int count6 = 0;\n        int count7 = 0;\n        int count8 = 0;\n        int count9 = 0;\n        int count10 = 0;\n        int count11 = 0;\n        int count12 = 0;\n        int count13 = 0;\n        int count14 = 0;\n        int count15 = 0;\n        int count16 = 0;\n        int count17 = 0;\n        int count18 = 0;\n        int count19 = 0;\n        int count20 = 0;\n        int count21 = 0;\n        int count22 = 0;\n        int count23 = 0;\n        int count24 = 0;\n        int count25 = 0;\n        int count26 = 0;\n        int count27 = 0;\n        int count28 = 0;\n        int count29 = 0;\n        int count30 = 0;\n        int count31 = 0;\n        int count32 = 0;\n        int count33 = 0;\n        int count34 = 0;\n        int count35 = 0;\n        int count36 = 0;\n        int count37 = 0;\n        int count38 = 0;\n        int count39 = 0;\n        int count40 = 0;\n        int count41 = 0;\n        int count42 = 0;\n        int count43 = 0;\n        int count44 = 0;\n        int count45 = 0;\n        int count46 = 0;\n        int count47 = 0;\n        int count48 = 0;\n        int count49 = 0;\n        int count50 = 0;\n        int count51 = 0;\n        int count52 = 0;\n        int count53 = 0;\n        int count54 = 0;\n        int count55 = 0;\n        int count56 = 0;\n        int count57 = 0;\n        int count58 = 0;\n        int count59 = 0;\n        int count60 = 0;\n        int count61 = 0;\n        int count62 = 0;\n        int count63 = 0;\n        int count64 = 0;\n        int count65 = 0;\n        int count66 = 0;\n        int count67 = 0;\n        int count68 = 0;\n        int count69 = 0;\n        int count70 = 0;\n        int count71 = 0;\n        int count72 = 0;\n        int count73 = 0;\n        int count74 = 0;\n        int count75 = 0;\n        int count76 = 0;\n        int count77 = 0;\n        int count78 = 0;\n        int count79 = 0;\n        int count80 = 0;\n        int count81 = 0;\n        int count82 = 0;\n        int count83 = 0;\n        int count84 = 0;\n        int count85 = 0;\n        int count86 = 0;\n        int count87 = 0;\n        int count88 = 0;\n        int count89 = 0;\n        int count90 = 0;\n        int count91 = 0;\n        int count92 = 0;\n        int count93 = 0;\n        int count94 = 0;\n        int count95 = 0;\n        int count96 = 0;\n        int count97 = 0;\n        int count98 = 0;\n        int count99 = 0;\n        int count100 = 0;\n        int count101 = 0;\n        int count102 = 0;\n        int count103 = 0;\n        int count104 = 0;\n        int count105 = 0;\n        int count106 = 0;\n        int count107 = 0;\n        int count108 = 0;\n        int count109 = 0;\n        int count110 = 0;\n        int count111 = 0;\n        int count112 = 0;\n        int count113 = 0;\n        int count114 = 0;\n        int count115 = 0;\n        int count116 = 0;\n        int count117 = 0;\n        int count118 = 0;\n        int count119 = 0;\n        int count120 = 0;\n        int count121 = 0;\n        int count122 = 0;\n        int count123 = 0;\n        int count124 = 0;\n        int count125 = 0;\n        int count126 = 0;\n        int count127 = 0;\n        int count128 = 0;\n        int count129 = 0;\n        int count130 = 0;\n        int count131 = 0;\n        int count132 = 0;\n        int count133 = 0;\n        int count134 = 0;\n        int count135 = 0;\n        int count136 = 0;\n        int count137 = 0;\n        int count138 = 0;\n        int count139 = 0;\n        int count140 = 0;\n        int count141 = 0;\n        int count142 = 0;\n        int count143 = 0;\n        int count144 = 0;\n        int count145 = 0;\n        int count146 = 0;\n        int count147 = 0;\n        int count148 = 0;\n        int count149 = 0;\n        int count150 = 0;\n        int count151 = 0;\n        int count152 = 0;\n        int count153 = 0;\n        int count154 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        if (len1 == 0 || len2 == 0) {\n            return \"NO\";\n        }\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        for (int j = 0; j < len1; j++) {\n            arr[i] = interval1.get(j);\n            i++;\n        }\n        i = 0;\n        for (int j = 0; j < len2; j++) {\n            arr[i] = interval2.get(j);\n            i++;\n        }\n        Arrays.sort(arr);\n        int j = 0;\n        int k = 0;\n        while (j < len1 && k < len2) {\n            if (arr[j] == arr[k]) {\n                j++;\n                k++;\n            } else if (arr[j] < arr[k]) {\n                j++;\n            } else {\n                k++;\n            }\n        }\n        if (j == len1 && k == len2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        if (len1 == 0 || len2 == 0) {\n            return \"NO\";\n        }\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        for (int j = 0; j < len1; j++) {\n            arr[i] = interval1.get(j);\n            i++;\n        }\n        i = 0;\n        for (int j = 0; j < len2; j++) {\n            arr[i] = interval2.get(j);\n            i++;\n        }\n        Arrays.sort(arr);\n        int start = arr[0];\n        int end = arr[len - 1];\n        int len1_2 = 0;\n        int len2_2 = 0;\n        for (int j = 0; j < len; j++) {\n            if (arr[j] == start) {\n                len1_2++;\n            }\n            if (arr[j] == end) {\n                len2_2++;\n            }\n        }\n        if (len1_2 == len2_2) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        for (int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for (int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int len = 0;\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] <= arr2[i]) {\n                len++;\n            }\n        }\n        if (len % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        if(len == 0)\n            return \"NO\";\n        int[] arr = new int[len];\n        int i = 0;\n        for(int j = 0; j < len1; j++)\n            arr[i++] = interval1.get(j);\n        for(int j = 0; j < len2; j++)\n            arr[i++] = interval2.get(j);\n        Arrays.sort(arr);\n        int len_arr = arr.length;\n        int len_arr_1 = len_arr/2;\n        int len_arr_2 = len_arr - len_arr_1;\n        int len_arr_3 = len_arr - len_arr_1 - len_arr_2;\n        if(len_arr_1 == 0)\n            return \"YES\";\n        if(len_arr_2 == 0)\n            return \"YES\";\n        if(len_arr_3 == 0)\n            return \"YES\";\n        int len_arr_4 = len_arr - len_arr_1 - len_arr_2 - len_arr_3;\n        if(len_arr_4 == 0)\n            return \"YES\";\n        return \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            prod *= i;\n            sum += i * i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            prod *= i;\n            sum += i * i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        for (int i : arr) {\n            sum += i;\n        }\n        int prod = 1;\n        for (int i : arr) {\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        for (int i : arr) {\n            sum += i;\n        }\n        int prod = 1;\n        for (int i : arr) {\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        for (int i : arr) {\n            sum += i;\n        }\n        int prod = 1;\n        for (int i : arr) {\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            prod *= i;\n            sum += i * i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            prod *= i;\n            sum += i * i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        if (grid == null || grid.size() == 0) {\n            return res;\n        }\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        return Arrays.asList(dp[n - 1][m - 1]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || k <= 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] = dp[i][j] + dp[i][j - 1];\n                }\n                if (j == 0) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j];\n                }\n                if (i == n - 1 && j == m - 1) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j];\n                }\n                if (i == n - 1) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j - 1];\n                }\n                if (j == m - 1) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                result.add(dp[i][j]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        if (grid == null || grid.size() == 0) {\n            return res;\n        }\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] = dp[i][j] + dp[i][j - 1];\n                }\n                if (j == 0) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] = dp[i][j] + dp[i][j - 1];\n                }\n                if (j == 0) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] = dp[i][j] + dp[i][j - 1];\n                }\n                if (j == 0) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] = dp[i][j] + dp[i][j - 1];\n                }\n                if (j == 0) {\n                    dp[i][j] = dp[i][j] + dp[i - 1][j];\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                ans.add(dp[i][j]);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        List<Integer> res = new ArrayList<>();\n        int[][] directions = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] dirs = new int[][]{{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] dirs2 = new int[][]{{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] dirs3 = new int[][]{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}};\n        int[][] dirs4 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs5 = new int[][]{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}};\n        int[][] dirs6 = new int[][]{{-1, 1}, {-1, -1}, {1, -1}, {1, 1}};\n        int[][] dirs7 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs8 = new int[][]{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}};\n        int[][] dirs9 = new int[][]{{-1, 1}, {-1, -1}, {-1, 1}, {1, 1}};\n        int[][] dirs10 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs11 = new int[][]{{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] dirs12 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs13 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs14 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs15 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs16 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs17 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs18 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs19 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs20 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs21 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs22 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs23 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs24 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs25 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs26 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs27 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs28 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs29 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs30 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs31 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs32 = new int[][]{{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] dirs33 = new int[][]{{-1, 1}, {1, 1}, {1, -1}\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n                }\n            }\n        }\n        return Arrays.stream(dp[n - 1]).boxed().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        List<Integer> res = new ArrayList<>();\n        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        int[][] dirs2 = new int[][]{{1, 0}, {0, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs3 = new int[][]{{-1, 0}, {0, -1}, {1, 1}, {-1, -1}};\n        int[][] dirs4 = new int[][]{{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] dirs5 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs6 = new int[][]{{1, -1}, {-1, 1}, {1, 1}, {-1, -1}};\n        int[][] dirs7 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs8 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs9 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs10 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs11 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs12 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs13 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs14 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs15 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs16 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs17 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs18 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs19 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs20 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs21 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs22 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs23 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs24 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs25 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs26 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs27 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs28 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs29 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs30 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs31 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs32 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}, {1, 1}};\n        int[][] dirs33 = new int[][]{{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};\n        int[][] dirs34 = new int[][]{{-1, 1}, {1, -1}, {-1, -1}\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid[i][j];\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < k; j++) {\n                dp[i][j] = Math.min(dp[i][j], dp[i + 1][j] + dp[i][j + 1]);\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                ans.add(dp[i][j]);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] directions = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        int[][] directions2 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions3 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions4 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions5 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions6 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions7 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions8 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions9 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions10 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions11 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions12 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions13 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions14 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions15 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions16 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions17 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions18 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions19 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions20 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions21 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions22 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions23 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions24 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions25 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions26 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions27 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions28 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions29 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions30 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions31 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions32 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions33 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions34 = new int[][] {{-1, -1}, {1, 1}, {1, -1}\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] directions = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        int[][] directions2 = new int[][] {{-1, -1}, {1, -1}, {1, 1}, {-1, 1}};\n        int[][] directions3 = new int[][] {{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] directions4 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions5 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions6 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions7 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions8 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions9 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions10 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions11 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions12 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions13 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions14 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions15 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions16 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions17 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions18 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions19 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions20 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions21 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions22 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions23 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions24 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions25 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions26 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions27 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions28 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions29 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions30 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions31 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions32 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}});\n        int[][] directions33 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}});\n        int[][] directions34 = new int[][] {{-1, -1}, {1, 1}\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        int[][] directions2 = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions3 = {{-1, -1}, {0, 1}, {1, 1}, {1, -1}};\n        int[][] directions4 = {{-1, 1}, {0, -1}, {1, -1}, {1, 1}};\n        int[][] directions5 = {{-1, -1}, {1, 1}, {1, -1}, {0, 1}};\n        int[][] directions6 = {{-1, 1}, {1, -1}, {0, 1}, {-1, 1}};\n        int[][] directions7 = {{-1, -1}, {1, 1}, {0, -1}, {1, -1}};\n        int[][] directions8 = {{-1, 1}, {1, -1}, {-1, 1}, {1, 1}};\n        int[][] directions9 = {{-1, -1}, {0, 1}, {1, 1}, {-1, -1}};\n        int[][] directions10 = {{-1, 1}, {1, -1}, {-1, -1}, {0, -1}};\n        int[][] directions11 = {{-1, -1}, {1, 1}, {0, 1}, {1, -1}};\n        int[][] directions12 = {{-1, 1}, {1, -1}, {1, 1}, {0, -1}};\n        int[][] directions13 = {{-1, -1}, {0, 1}, {1, -1}, {-1, 1}};\n        int[][] directions14 = {{-1, 1}, {1, -1}, {0, -1}, {1, 1}};\n        int[][] directions15 = {{-1, -1}, {1, 1}, {1, -1}, {0, 1}};\n        int[][] directions16 = {{-1, 1}, {1, -1}, {-1, 1}, {1, 1}};\n        int[][] directions17 = {{-1, -1}, {1, 1}, {0, -1}, {-1, -1}};\n        int[][] directions18 = {{-1, 1}, {1, -1}, {1, 1}, {0, -1}};\n        int[][] directions19 = {{-1, -1}, {0, 1}, {1, -1}, {-1, 1}};\n        int[][] directions20 = {{-1, 1}, {1, -1}, {0, 1}, {1, 1}};\n        int[][] directions21 = {{-1, -1}, {1, 1}, {1, -1}, {0, -1}};\n        int[][] directions22 = {{-1, 1}, {1, -1}, {0, -1}, {1, 1}};\n        int[][] directions23 = {{-1, -1}, {0, 1}, {1, 1}, {-1, -1}};\n        int[][] directions24 = {{-1, 1}, {1, -1}, {0, -1}, {1, 1}};\n        int[][] directions25 = {{-1, -1}, {1, 1}, {1, -1}, {0, 1}};\n        int[][] directions26 = {{-1, 1}, {1, -1}, {0, 1}, {1, -1}};\n        int[][] directions27 = {{-1, -1}, {0, 1}, {1, -1}, {-1, 1}};\n        int[][] directions28 = {{-1, 1}, {1, -1}, {0, -1}, {1, -1}};\n        int[][] directions29 = {{-1, -1}, {1, 1}, {1, -1}, {0, 1}};\n        int[][] directions30 = {{-1, 1}, {1, -1}, {0, 1}, {1, 1}};\n        int[][] directions31 = {{-1, -1}, {0, 1}, {1, -1}, {-1, -1}};\n        int[][] directions32 = {{-1, 1}, {1, -1}, {0, -1}, {1, 1}};\n        int[][] directions33 = {{-1, -1}, {1, 1}, {1, -1}, {0, -1}};\n        int[][] directions34 = {{-1, 1}, {1, -1}, {0, 1}, {1, -1}};\n        int[][] directions35 = {{-1, -1}, {0, 1}, {1, 1}, {-1, -1}};\n        int[][] directions36 = {{-1, 1}, {1, -1}, {0, -1}, {1, 1}};\n        int[][] directions37 = {{-1, -1}, {1, 1}, {1, -1}\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        List<Integer> res = new ArrayList<>();\n        int[][] directions = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        int[][] directions2 = new int[][] {{-1, -1}, {1, -1}, {1, 1}, {-1, 1}};\n        int[][] directions3 = new int[][] {{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};\n        int[][] directions4 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions5 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions6 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions7 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions8 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions9 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions10 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions11 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions12 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions13 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions14 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions15 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions16 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions17 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions18 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions19 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions20 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions21 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions22 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions23 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions24 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions25 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions26 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions27 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions28 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions29 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions30 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions31 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions32 = new int[][] {{-1, -1}, {1, 1}, {1, -1}, {-1, 1}};\n        int[][] directions33 = new int[][] {{-1, 1}, {1, -1}, {1, 1}, {-1, -1}};\n        int[][] directions34 = new int[][] {{-1, -1}, {1, 1}, {1, -1}\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> res = new ArrayList<>();\n        if (n == 0 || m == 0) return res;\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) continue;\n                for (int d = 1; d <= k; d++) {\n                    int x = i + d * (j - d);\n                    int y = j + d * (i - d);\n                    if (x >= 0 && x < n && y >= 0 && y < m) {\n                        if (dp[x][y] == 0) {\n                            dp[x][y] = dp[i][j] + 1;\n                            res.add(dp[x][y]);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dp[0][0] = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                if (grid[i][j] == 0) {\n                    continue;\n                }\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                if (dp[i][j] == Integer.MAX_VALUE) {\n                    continue;\n                }\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = grid[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        return Arrays.asList(dp[n - 1][m - 1]);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(1);\n            return result;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 1;\n        for (int i = 0; i < n - 1; i++) {\n            result.add(a);\n            a = b;\n            b = c;\n            c = a + b;\n        }\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if (n <= 0) {\n            return list;\n        }\n        if (n == 1 || n == 2) {\n            list.add(1);\n            return list;\n        }\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        for (int i = 3; i <= n; i++) {\n            list.add(list.get(i - 1) + list.get(i - 2) + list.get(i - 3));\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if (n <= 1) {\n            return list;\n        }\n        list.add(1);\n        list.add(1);\n        list.add(1);\n        for (int i = 2; i <= n; i++) {\n            list.add(list.get(i - 1) + list.get(i - 2) + list.get(i - 3));\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if (n <= 0) {\n            return list;\n        }\n        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n        for (int i = 0; i < n; i++) {\n            list.add(list.get(i) + list.get(i + 1) + list.get(i + 2));\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        if (n <= 0) {\n            return list;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        int i = 0;\n        while (i < n) {\n            list.add(i + 1);\n            if (i % 2 == 0) {\n                a = b;\n                b = c;\n                c = a + b;\n            } else {\n                a = b;\n                b = c;\n                c = a + b;\n            }\n            i++;\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 18) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 19) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0 || n == 1) {\n            result.add(0);\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(1);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(3);\n            result.add(1);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(4);\n            result.add(6);\n            result.add(4);\n            result.add(1);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(5);\n            result.add(10);\n            result.add(10);\n            result.add(5);\n            result.add(1);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(6);\n            result.add(15);\n            result.add(21);\n            result.add(15);\n            result.add(6);\n            result.add(1);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(7);\n            result.add(21);\n            result.add(35);\n            result.add(35);\n            result.add(21);\n            result.add(7);\n            result.add(1);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(8);\n            result.add(35);\n            result.add(70);\n            result.add(70);\n            result.add(35);\n            result.add(8);\n            result.add(1);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(9);\n            result.add(45);\n            result.add(102);\n            result.add(102);\n            result.add(45);\n            result.add(9);\n            result.add(1);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(10);\n            result.add(55);\n            result.add(155);\n            result.add(155);\n            result.add(55);\n            result.add(10);\n            result.add(1);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(11);\n            result.add(66);\n            result.add(233);\n            result.add(233);\n            result.add(66);\n            result.add(11);\n            result.add(1);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(12);\n            result.add(77);\n            result.add(333);\n            result.add(333);\n            result.add(77);\n            result.add(12);\n            result.add(1);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(13);\n            result.add(88);\n            result.add(444);\n            result.add(444);\n            result.add(88);\n            result.add(13);\n            result.add(1);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(14);\n            result.add(99);\n            result.add(555);\n            result.add(555);\n            result.add(99);\n            result.add(14);\n            result.add(1);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(15);\n            result.add(100);\n            result.add(666);\n            result.add(666);\n            result.add(100);\n            result.add(15);\n            result.add(1);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(16);\n            result.add(111);\n            result.add(777);\n            result.add(777);\n            result.add(111);\n            result.add(16);\n            result.add(1);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(17);\n            result.add(122);\n            result.add(888);\n            result.add(888);\n            result.add(122);\n            result.add(17);\n            result.add(1);\n            return result;\n        }\n        if (n == 18) {\n            result.add(1);\n            result.add(18);\n            result.add(133);\n            result.add(999);\n            result.add(999);\n            result.add(133);\n            result.add(18);\n            result.add(1);\n            return result;\n        }\n        if (n == 19) {\n            result.add(1);\n            result.add(19);\n            result.add(144);\n            result.add(1000);\n            result.add(1000);\n            result.add(144);\n            result.add(19);\n            result.add(1);\n            return result;\n        }\n        if (n == 20) {\n            result.add(1);\n            result.add(20);\n            result.add(155);\n            result.add(1111);\n            result.add(1111);\n            result.add(155);\n            result.add(20);\n            result.add(1);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if (n <= 0) {\n            return list;\n        }\n        list.add(1);\n        list.add(1);\n        list.add(1);\n        for (int i = 2; i <= n; i++) {\n            list.add(list.get(i - 1) + list.get(i - 2) + list.get(i - 3));\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 1;\n        for (int i = 3; i <= n; i++) {\n            result.add(a);\n            a = b;\n            b = c;\n            c = a + b;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if (n <= 0) {\n            return list;\n        }\n        list.add(1);\n        list.add(1);\n        list.add(1);\n        for (int i = 2; i <= n; i++) {\n            list.add(list.get(i - 1) + list.get(i - 2) + list.get(i - 3));\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(1);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 2) + result.get(i - 1) + result.get(i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if (n == 0) {\n            return list;\n        }\n        if (n == 1) {\n            list.add(1);\n            return list;\n        }\n        if (n == 2) {\n            list.add(1);\n            list.add(1);\n            return list;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 1;\n        for (int i = 3; i <= n; i++) {\n            list.add(a);\n            a = b;\n            b = c;\n            c = a + b;\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            return result;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        if (product % 2 == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while(n != 0) {\n            int digit = n % 10;\n            product *= digit;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        if (sum % 2 == 0) {\n            return 0;\n        } else {\n            return sum;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        if (product % 2 == 0) {\n            return 0;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while(n != 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        if(product % 2 == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int sum = 0;\n        while (n != 0) {\n            int digit = n % 10;\n            sum += digit * (digit % 2);\n            n /= 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            count += n % 10;\n            n /= 10;\n        }\n        if (count % 2 == 0) {\n            return 0;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int sum = 0;\n        while(n != 0) {\n            int digit = n % 10;\n            sum += digit * digit;\n            n /= 10;\n        }\n        if(sum % 2 == 0) {\n            return 0;\n        } else {\n            return sum;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        if (sum % 2 == 0) {\n            return 0;\n        } else {\n            return sum;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int prod = 1;\n        while (n > 0) {\n            int rem = n % 10;\n            if (rem % 2 == 1) {\n                prod *= rem;\n            }\n            n /= 10;\n        }\n        return prod;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            product *= digit;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int sum = 0;\n        while(n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        if(sum % 2 == 0) {\n            return 0;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int sum = 0;\n        while(n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        if(sum % 2 == 0) {\n            return 0;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while (n != 0) {\n            int rem = n % 10;\n            if (rem % 2 == 1) {\n                ans *= rem;\n            }\n            n /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int prod = 1;\n        while (n > 0) {\n            prod *= n % 10;\n            n /= 10;\n        }\n        if (prod % 2 == 0) {\n            return 0;\n        } else {\n            return prod;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() < 2) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() < 2) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() < 2) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.empty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(d * d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double num : lst) {\n            sum += (int) Math.pow(num, 2);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double num : lst){\n            sum += num * num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] chars = txt.toCharArray();\n        if (chars.length == 0) {\n            return false;\n        }\n        char lastChar = chars[chars.length - 1];\n        if (Character.isLetter(lastChar) && !Character.isLetterOrDigit(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (lastChar >= 'A' && lastChar <= 'Z') {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0) return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(lastChar >= 'a' && lastChar <= 'z') return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isDigit(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(lastChar >= 'a' && lastChar <= 'z') {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] chars = txt.toCharArray();\n        if (chars.length == 0) {\n            return false;\n        }\n        char lastChar = chars[chars.length - 1];\n        if (lastChar >= 'a' && lastChar <= 'z') {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !txt.contains(\" \")) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] chars = txt.toCharArray();\n        char lastChar = chars[chars.length - 1];\n        for (int i = 0; i < chars.length - 1; i++) {\n            if (Character.isLetter(lastChar) && !Character.isLetter(chars[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] txtArr = txt.toCharArray();\n        char lastChar = txtArr[txtArr.length - 1];\n        boolean isLastCharALetter = false;\n        for (int i = txtArr.length - 2; i >= 0; i--) {\n            if (Character.isLetter(txtArr[i])) {\n                isLastCharALetter = true;\n                break;\n            }\n        }\n        return !isLastCharALetter;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] chars = txt.toCharArray();\n        char lastChar = chars[chars.length - 1];\n        for (int i = 0; i < chars.length - 1; i++) {\n            if (Character.isLetter(lastChar) && !Character.isLetter(chars[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (lastChar >= 'a' && lastChar <= 'z') {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(Character.isLetter(lastChar) && !txt.contains(\" \"))\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] txtArr = txt.toCharArray();\n        char lastChar = txtArr[txtArr.length - 1];\n        for (int i = txtArr.length - 2; i >= 0; i--) {\n            if (Character.isLetter(lastChar) && !Character.isLetter(txtArr[i])) {\n                return false;\n            }\n            lastChar = txtArr[i];\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetterOrDigit(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !txt.contains(\" \")) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(Character.isLetter(lastChar) && !txt.contains(\" \"))\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !txt.contains(\" \")) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(Character.isLetter(lastChar) && !txt.contains(\" \"))\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(lastChar >= 'A' && lastChar <= 'Z')\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(lastChar >= 'a' && lastChar <= 'z') {\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return -1;\n        }\n\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n\n        Arrays.sort(arrCopy);\n\n        int i = 0;\n        int j = 0;\n        while (i < n && j < n) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n\n        if (i == n) {\n            return j;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0)\n            return -1;\n        int[] arrCopy = new int[n];\n        arr.toArray(arrCopy);\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i+1])\n                return i;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return -1;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return -1;\n        }\n        int[] arrCopy = arr.stream().mapToInt(i -> i).toArray();\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = 1;\n        while(i < n && j < n) {\n            if(arrCopy[i] >= arrCopy[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if(i == n) {\n            return j;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return -1;\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr2[i] = arr.get(i);\n        Arrays.sort(arr2);\n        for(int i = 0; i < n; i++)\n            if(arr2[i] >= arr2[i+1])\n                return i;\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        if(arr.size() == 0)\n            return -1;\n        int max = 0;\n        int min = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > max)\n                max = arr.get(i);\n            if(arr.get(i) < min)\n                min = arr.get(i);\n        }\n        if(max == min)\n            return -1;\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return -1;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int prev = arrCopy[0];\n        for (int i = 1; i < n; i++) {\n            if (arrCopy[i] >= prev) {\n                return -1;\n            }\n            prev = arrCopy[i];\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while(i < j) {\n            if(arr.get(i) >= arr.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        if(i == j) {\n            return i;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int max = -1;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0) return -1;\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        int i = 0;\n        while(i < n && arr1[i] >= arr1[i+1]) {\n            i++;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i+1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] >= arrCopy[i+1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        arr.toArray(arrCopy);\n        Arrays.sort(arrCopy);\n        int max = -1;\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0)\n            return -1;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < n) {\n            if (arrCopy[i] >= arrCopy[j])\n                i++;\n            else\n                j++;\n        }\n        if (i == n)\n            return j;\n        else\n            return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return -1;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int max = arrCopy[0];\n        for (int i = 1; i < n; i++) {\n            if (arrCopy[i] >= max) {\n                return i;\n            }\n            max = arrCopy[i];\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int max = -1;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int max = -1;\n        int min = -1;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (max == min) {\n            return -1;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0)\n            return -1;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1])\n                return i;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0) return -1;\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = 0;\n        while(i < n && j < n) {\n            if(arrCopy[i] >= arrCopy[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if(i == n) return j;\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i: lst){\n            if(i < 0){\n                result.add(Optional.of(i));\n            }\n            else if(i > max){\n                max = i;\n            }\n            else if(i < min){\n                min = i;\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        if(result.size() == 0){\n            result.add(Optional.empty());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0)\n                max = Math.max(max, i);\n            else\n                min = Math.min(min, i);\n        }\n        res.add(Optional.of(max));\n        res.add(Optional.of(min));\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0){\n                result.add(Optional.of(i));\n            }\n            else if(i > max){\n                max = i;\n            }\n            else if(i < min){\n                min = i;\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0){\n                max = Math.max(max, i);\n            }\n            else{\n                min = Math.min(min, i);\n            }\n        }\n        if(max == min){\n            result.add(Optional.empty());\n        }\n        else{\n            result.add(Optional.of(max));\n            result.add(Optional.of(min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        if(result.size() == 0){\n            result.add(Optional.empty());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        if(result.size() == 0){\n            result.add(Optional.empty());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        if(lst.isEmpty()){\n            return result;\n        }\n        int max = lst.get(0);\n        int min = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n            if(lst.get(i) < min){\n                min = lst.get(i);\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        if(result.size() == 0){\n            result.add(Optional.empty());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        if(result.size() == 0){\n            result.add(Optional.empty());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        if(res.size() == 0){\n            res.add(Optional.empty());\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < 0) {\n                max = Math.max(max, lst.get(i));\n            } else {\n                min = Math.min(min, lst.get(i));\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0){\n                max = Math.max(max, i);\n            }\n            else{\n                min = Math.min(min, i);\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i: lst){\n            if(i > max){\n                max = i;\n            }\n            if(i < min){\n                min = i;\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i : lst) {\n            if (i < 0) {\n                result.add(Optional.of(i));\n            } else if (i > max) {\n                max = i;\n            } else if (i < min) {\n                min = i;\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (Integer i : lst) {\n            if (i < 0) {\n                result.add(Optional.of(i));\n            } else {\n                if (i > max) {\n                    max = i;\n                }\n                if (i < min) {\n                    min = i;\n                }\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        if(lst.isEmpty()){\n            return res;\n        }\n        int max = lst.get(0);\n        int min = lst.get(0);\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n            if(lst.get(i) < min){\n                min = lst.get(i);\n            }\n        }\n        res.add(Optional.of(max));\n        res.add(Optional.of(min));\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        if(lst.isEmpty()){\n            result.add(Optional.empty());\n            result.add(Optional.empty());\n            return result;\n        }\n        int max = lst.get(0);\n        int min = lst.get(0);\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n            if(lst.get(i) < min){\n                min = lst.get(i);\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i : lst) {\n            if (i > max) {\n                max = i;\n            }\n            if (i < min) {\n                min = i;\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n            else if(lst.get(i) > 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n            else{\n                result.add(Optional.empty());\n            }\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n            if(lst.get(i) < min){\n                min = lst.get(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a).compareTo((String) b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a).compareTo((String) b);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((String) a).compareTo((String) b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a).compareTo((String) b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a).compareTo((String) b);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((String) a).compareTo((String) b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of(((Integer) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Integer) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Integer) a).compareTo((String) b));\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of(((Float) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Float) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Float) a).compareTo((String) b));\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of(((String) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((String) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((String) a).compareTo((String) b));\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a).compareTo((String) b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a).compareTo((String) b);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a).compareTo((Integer) b);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a).compareTo((Float) b);\n            } else if (b instanceof String) {\n                return Optional.of((String) a).compareTo((String) b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of(((Integer) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Integer) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Integer) a).compareTo((String) b));\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of(((Float) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Float) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Float) a).compareTo((String) b));\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of(((String) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((String) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((String) a).compareTo((String) b));\n            }\n        }\n        return Optional.empty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum % 4 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0 && i % 4 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 16;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum % 4 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n                count++;\n            }\n        }\n        if (count == 4 && sum % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        if (sum % 4 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum % 4 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if(n < 0)\n            return false;\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum % 4 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        if(sum % 4 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum % 4 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n                count++;\n            }\n        }\n        return sum == 4 && count == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n <= 1)\n            return 1;\n        long result = 1;\n        for (int i = 2; i <= n; i++)\n            result *= i;\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n <= 0) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 1) {\n                for (int j = 0; j < words[i].length() - 1; j++) {\n                    sb.append(\" \");\n                }\n            }\n            sb.append(words[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                word = word.replace(\" \", \"_\");\n            }\n            sb.append(word).append(\" \");\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                String[] subWords = word.split(\" \");\n                for (int j = 0; j < subWords.length; j++) {\n                    String subWord = subWords[j];\n                    if (subWord.length() > 1) {\n                        subWords[j] = subWord.substring(0, 1).toUpperCase() + subWord.substring(1);\n                    }\n                }\n                result = result.replace(word, subWords[0]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        int spaces = 0;\n        for (int i = 0; i < fixedText.length(); i++) {\n            if (fixedText.charAt(i) == ' ') {\n                spaces++;\n            }\n        }\n        if (spaces > 2) {\n            fixedText = fixedText.replaceAll(\" \", \"-\");\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (fixedText.length() > 2) {\n            String[] words = fixedText.split(\" \");\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < words.length; i++) {\n                if (i == 0) {\n                    sb.append(words[i]);\n                } else {\n                    sb.append(\" \").append(words[i]);\n                }\n            }\n            return sb.toString();\n        } else {\n            return fixedText;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (fixedText.length() > 2) {\n            String[] words = fixedText.split(\" \");\n            for (int i = 0; i < words.length; i++) {\n                if (words[i].length() > 2) {\n                    words[i] = words[i].substring(0, 2);\n                }\n            }\n            fixedText = String.join(\" \", words);\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 1) {\n                String[] subWords = word.split(\" \");\n                for (int j = 0; j < subWords.length; j++) {\n                    String subWord = subWords[j];\n                    if (subWord.length() > 1) {\n                        subWord = subWord.replace(\" \", \"_\");\n                    }\n                    sb.append(subWord);\n                }\n            } else {\n                sb.append(word.replace(\" \", \"_\"));\n            }\n            if (i < words.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (fixedText.length() > 2) {\n            fixedText = fixedText.replaceAll(\"\\\\s+\", \"-\");\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\" \", \"_\");\n        String[] words = fixedText.split(\" \");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 1) {\n                words[i] = words[i].substring(0, words[i].length() - 1);\n                count++;\n            }\n        }\n        if (count > 1) {\n            for (int i = 0; i < words.length; i++) {\n                words[i] = words[i].substring(0, words[i].length() - 1);\n            }\n        }\n        return String.join(\" \", words);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = text.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                String[] subwords = word.split(\" \");\n                for (int j = 0; j < subwords.length; j++) {\n                    String subword = subwords[j];\n                    if (subword.length() > 2) {\n                        subwords[j] = subword.replace(\" \", \"_\");\n                    }\n                }\n                result = result.replace(word, subwords[0]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                word = word.substring(0, 1).toUpperCase() + word.substring(1);\n            }\n            words[i] = word;\n        }\n        result = String.join(\" \", words);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixed = text;\n        int count = 0;\n        while (count < text.length()) {\n            int spaceCount = 0;\n            for (int i = 0; i < text.length(); i++) {\n                if (text.charAt(i) == ' ') {\n                    spaceCount++;\n                }\n            }\n            if (spaceCount > 1) {\n                fixed = fixed.replace(\" \" + text.charAt(count), \"_\" + text.charAt(count));\n            }\n            count++;\n        }\n        return fixed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        String fixedText = \"\";\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                word = word.substring(0, 1).toUpperCase() + word.substring(1);\n            }\n            fixedText += word + \" \";\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text;\n        String[] words = text.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                words[i] = words[i].substring(0, 1) + words[i].substring(1, words[i].length());\n            }\n        }\n        fixedText = String.join(\" \", words);\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (fixedText.length() > 2) {\n            fixedText = fixedText.replaceAll(\"\\\\s+\", \"-\");\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                result += words[i].substring(0, 2);\n            } else {\n                result += words[i];\n            }\n            if (i < words.length - 1) {\n                result += \" \";\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                words[i] = words[i].replace(\" \", \"_\");\n            }\n            sb.append(words[i]);\n            if (i < words.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (fixedText.length() > 2) {\n            fixedText = fixedText.replaceAll(\" +\", \"-\");\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (word.length() > 2) {\n                word = word.replaceAll(\" \", \"_\");\n            }\n            sb.append(word).append(\" \");\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        String[] words = text.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                String[] subWords = word.split(\" \");\n                for (int j = 0; j < subWords.length; j++) {\n                    String subWord = subWords[j];\n                    if (subWord.length() > 1) {\n                        result += subWord.substring(0, 1).toUpperCase() + subWord.substring(1);\n                    } else {\n                        result += subWord;\n                    }\n                    if (j < subWords.length - 1) {\n                        result += \" \";\n                    }\n                }\n            } else {\n                result += word.substring(0, 1).toUpperCase() + word.substring(1);\n            }\n            if (i < words.length - 1) {\n                result += \" \";\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        int file_name_split_length_minus_1 = file_name_split_length - 1;\n        String file_name_split_last_element = file_name_split[file_name_split_length_minus_1];\n        String file_name_split_last_element_lower_case = file_name_split_last_element.toLowerCase();\n        if (file_name_split_length == 3 && file_name_split_last_element_lower_case.equals(\"txt\") && file_name_split_last_element_lower_case.equals(\"exe\") && file_name_split_last_element_lower_case.equals(\"dll\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        int file_name_split_length_minus_1 = file_name_split_length - 1;\n        int file_name_split_length_minus_2 = file_name_split_length - 2;\n        int file_name_split_length_minus_3 = file_name_split_length - 3;\n        int file_name_split_length_minus_4 = file_name_split_length - 4;\n        int file_name_split_length_minus_5 = file_name_split_length - 5;\n        int file_name_split_length_minus_6 = file_name_split_length - 6;\n        int file_name_split_length_minus_7 = file_name_split_length - 7;\n        int file_name_split_length_minus_8 = file_name_split_length - 8;\n        int file_name_split_length_minus_9 = file_name_split_length - 9;\n        int file_name_split_length_minus_10 = file_name_split_length - 10;\n        int file_name_split_length_minus_11 = file_name_split_length - 11;\n        int file_name_split_length_minus_12 = file_name_split_length - 12;\n        int file_name_split_length_minus_13 = file_name_split_length - 13;\n        int file_name_split_length_minus_14 = file_name_split_length - 14;\n        int file_name_split_length_minus_15 = file_name_split_length - 15;\n        int file_name_split_length_minus_16 = file_name_split_length - 16;\n        int file_name_split_length_minus_17 = file_name_split_length - 17;\n        int file_name_split_length_minus_18 = file_name_split_length - 18;\n        int file_name_split_length_minus_19 = file_name_split_length - 19;\n        int file_name_split_length_minus_20 = file_name_split_length - 20;\n        int file_name_split_length_minus_21 = file_name_split_length - 21;\n        int file_name_split_length_minus_22 = file_name_split_length - 22;\n        int file_name_split_length_minus_23 = file_name_split_length - 23;\n        int file_name_split_length_minus_24 = file_name_split_length - 24;\n        int file_name_split_length_minus_25 = file_name_split_length - 25;\n        int file_name_split_length_minus_26 = file_name_split_length - 26;\n        int file_name_split_length_minus_27 = file_name_split_length - 27;\n        int file_name_split_length_minus_28 = file_name_split_length - 28;\n        int file_name_split_length_minus_29 = file_name_split_length - 29;\n        int file_name_split_length_minus_30 = file_name_split_length - 30;\n        int file_name_split_length_minus_31 = file_name_split_length - 31;\n        int file_name_split_length_minus_32 = file_name_split_length - 32;\n        int file_name_split_length_minus_33 = file_name_split_length - 33;\n        int file_name_split_length_minus_34 = file_name_split_length - 34;\n        int file_name_split_length_minus_35 = file_name_split_length - 35;\n        int file_name_split_length_minus_36 = file_name_split_length - 36;\n        int file_name_split_length_minus_37 = file_name_split_length - 37;\n        int file_name_split_length_minus_38 = file_name_split_length - 38;\n        int file_name_split_length_minus_39 = file_name_split_length - 39;\n        int file_name_split_length_minus_40 = file_name_split_length - 40;\n        int file_name_split_length_minus_41 = file_name_split_length - 41;\n        int file_name_split_length_minus_42 = file_name_split_length - 42;\n        int file_name_split_length_minus_43 = file_name_split_length - 43;\n        int file_name_split_length_minus_44 = file_name_split_length - 44;\n        int file_name_split_length_minus_45 = file_name_split_length - 45;\n        int file_name_split_length_minus_46 = file_name_split_length - 46;\n        int file_name_split_length_minus_47 = file_name_split_length - 47;\n        int file_name_split_length_minus_48 = file_name_split_length - 48;\n        int file_name_split_length_minus_49 = file_name_split_length - 49;\n        int file_name_split_length_minus_50 = file_name_split_length - 50;\n        int file_name_split_length_minus_51 = file_name_split_length - 51;\n        int file_name_split_length_minus_52 = file_name_split_length - 52;\n        int file_name_split_length_minus_53 = file_name_split_length - 53;\n        int file_name_split_length_minus_54 = file_name_split_length - 54;\n        int file_name_split_length_minus_55 = file_name_split_length - 55;\n        int file_name_split_length_minus_56 = file_name_split_length - 56;\n        int file_name_split_length_minus_57 = file_name_split_length - 57;\n        int file_name_split_length_minus_58 = file_name_split_length - 58;\n        int", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        String file_name_split_first_letter = file_name_split[0];\n        if (file_name_split_first_letter.length() > 1) {\n            return \"No\";\n        }\n        String file_name_split_second_letter = file_name_split[1];\n        if (file_name_split_second_letter.length() > 1) {\n            return \"No\";\n        }\n        String file_name_split_third_letter = file_name_split[2];\n        if (file_name_split_third_letter.length() > 1) {\n            return \"No\";\n        }\n        String file_name_split_fourth_letter = file_name_split[3];\n        if (file_name_split_fourth_letter.length() > 1) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        if (file_name.length() > 3 || file_name.contains(\".\") || file_name.charAt(0) != file_name.charAt(0).toLowerCase()) {\n            return \"No\";\n        }\n        String[] extensions = {\"txt\", \"exe\", \"dll\"};\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        for (int i = 0; i < extensions.length; i++) {\n            if (file_name_split[file_name_split.length - 1].equals(extensions[i])) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // TODO: Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[file_name_split_length - 1].equals(\".\")) {\n                return \"No\";\n            }\n            if (file_name_split[file_name_split_length - 1].equals(\"txt\") || file_name_split[file_name_split_length - 1].equals(\"exe\") || file_name_split[file_name_split_length - 1].equals(\"dll\")) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split_file_name = file_name.split(\"\\\\.\");\n        int split_file_name_length = split_file_name.length;\n        if (split_file_name_length > 3) {\n            return \"No\";\n        }\n        if (split_file_name_length == 0) {\n            return \"No\";\n        }\n        if (split_file_name[0].length() > 1) {\n            return \"No\";\n        }\n        if (split_file_name[split_file_name_length - 1].length() > 1) {\n            return \"No\";\n        }\n        if (split_file_name[0].charAt(0) < 'a' || split_file_name[0].charAt(0) > 'z') {\n            return \"No\";\n        }\n        if (split_file_name[split_file_name_length - 1].charAt(0) < 'a' || split_file_name[split_file_name_length - 1].charAt(0) > 'z') {\n            return \"No\";\n        }\n        if (split_file_name[split_file_name_length - 1].charAt(0) == '.') {\n            return \"No\";\n        }\n        if (split_file_name[split_file_name_length - 1].charAt(0) != '.') {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        if (file_name.length() > 3 || file_name.contains(\".\") || file_name.charAt(0) != file_name.charAt(0).toLowerCase()) {\n            return \"No\";\n        }\n        String[] split_file_name = file_name.split(\"\\\\.\");\n        for (int i = 0; i < split_file_name.length; i++) {\n            if (split_file_name[i].length() > 1 || !split_file_name[i].startsWith(split_file_name[i].substring(0, 1).toLowerCase())) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        String file_name_split_last = file_name_split[file_name_split.length - 1];\n        String file_name_split_first = file_name_split[0];\n        String file_name_split_first_letter = file_name_split_first.substring(0, 1);\n        String file_name_split_last_letter = file_name_split_last.substring(0, 1);\n        if (file_name_split_last.length() > 3 || file_name_split_first.length() < 1 || file_name_split_first_letter.length() < 1 || file_name_split_last_letter.length() < 1) {\n            return \"No\";\n        }\n        if (file_name_split_first_letter.equals(\"a\") || file_name_split_first_letter.equals(\"A\") || file_name_split_first_letter.equals(\"b\") || file_name_split_first_letter.equals(\"B\") || file_name_split_first_letter.equals(\"c\") || file_name_split_first_letter.equals(\"C\") || file_name_split_first_letter.equals(\"d\") || file_name_split_first_letter.equals(\"D\") || file_name_split_first_letter.equals(\"e\") || file_name_split_first_letter.equals(\"E\") || file_name_split_first_letter.equals(\"f\") || file_name_split_first_letter.equals(\"F\") || file_name_split_first_letter.equals(\"g\") || file_name_split_first_letter.equals(\"G\") || file_name_split_first_letter.equals(\"h\") || file_name_split_first_letter.equals(\"H\") || file_name_split_first_letter.equals(\"i\") || file_name_split_first_letter.equals(\"I\") || file_name_split_first_letter.equals(\"j\") || file_name_split_first_letter.equals(\"J\") || file_name_split_first_letter.equals(\"k\") || file_name_split_first_letter.equals(\"K\") || file_name_split_first_letter.equals(\"l\") || file_name_split_first_letter.equals(\"L\") || file_name_split_first_letter.equals(\"m\") || file_name_split_first_letter.equals(\"M\") || file_name_split_first_letter.equals(\"n\") || file_name_split_first_letter.equals(\"N\") || file_name_split_first_letter.equals(\"o\") || file_name_split_first_letter.equals(\"O\") || file_name_split_first_letter.equals(\"p\") || file_name_split_first_letter.equals(\"P\") || file_name_split_first_letter.equals(\"q\") || file_name_split_first_letter.equals(\"Q\") || file_name_split_first_letter.equals(\"r\") || file_name_split_first_letter.equals(\"R\") || file_name_split_first_letter.equals(\"s\") || file_name_split_first_letter.equals(\"S\") || file_name_split_first_letter.equals(\"t\") || file_name_split_first_letter.equals(\"T\") || file_name_split_first_letter.equals(\"u\") || file_name_split_first_letter.equals(\"U\") || file_name_split_first_letter.equals(\"v\") || file_name_split_first_letter.equals(\"V\") || file_name_split_first_letter.equals(\"w\") || file_name_split_first_letter.equals(\"W\") || file_name_split_first_letter.equals(\"x\") || file_name_split_first_letter.equals(\"X\") || file_name_split_first_letter.equals(\"y\") || file_name_split_first_letter.equals(\"Y\") || file_name_split_first_letter.equals(\"z\") || file_name_split_first_letter.equals(\"Z\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String valid_file_name = \"^[a-zA-Z0-9]{1,3}(\\\\.txt|\\\\.exe|\\\\.dll)?$\";\n        if (file_name.matches(valid_file_name)) {\n            String[] file_name_split = file_name.split(\"\\\\.\");\n            if (file_name_split.length > 3) {\n                return \"No\";\n            }\n            String[] file_name_split_2 = file_name_split[0].split(\"\");\n            for (int i = 0; i < file_name_split_2.length; i++) {\n                if (!(file_name_split_2[i].matches(\"[a-zA-Z0-9]\"))) {\n                    return \"No\";\n                }\n            }\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            String file_name_split_first_letter = file_name_split[0];\n            if (!file_name_split_first_letter.matches(\"[a-zA-Z]\")) {\n                return \"No\";\n            }\n        }\n        if (file_name_split_length == 2) {\n            String file_name_split_second_letter = file_name_split[1];\n            if (!file_name_split_second_letter.matches(\"[a-zA-Z0-9]\")) {\n                return \"No\";\n            }\n        }\n        if (file_name_split_length == 1) {\n            String file_name_split_third_letter = file_name_split[2];\n            if (!file_name_split_third_letter.matches(\"[a-zA-Z0-9]\")) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        for (int i = 0; i < file_name_split_length; i++) {\n            if (file_name_split[i].length() > 1) {\n                return \"No\";\n            }\n            if (file_name_split[i].charAt(0) < 'a' || file_name_split[i].charAt(0) > 'z') {\n                return \"No\";\n            }\n            if (file_name_split[i].charAt(0) == '.' && file_name_split[i].charAt(1) != '.') {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        int file_name_split_length_minus_one = file_name_split_length - 1;\n        int file_name_split_length_minus_two = file_name_split_length - 2;\n        String file_name_split_last_element = file_name_split[file_name_split_length_minus_one];\n        String file_name_split_last_element_first_letter = file_name_split_last_element.substring(0, 1);\n        String file_name_split_last_element_second_letter = file_name_split_last_element.substring(1, 2);\n        String file_name_split_last_element_third_letter = file_name_split_last_element.substring(2, 3);\n        String file_name_split_last_element_fourth_letter = file_name_split_last_element.substring(3, 4);\n        String file_name_split_last_element_last_letter = file_name_split_last_element.substring(4, file_name_split_last_element.length());\n        String file_name_split_last_element_last_letter_first_letter = file_name_split_last_element_last_letter.substring(0, 1);\n        String file_name_split_last_element_last_letter_second_letter = file_name_split_last_element_last_letter.substring(1, 2);\n        String file_name_split_last_element_last_letter_third_letter = file_name_split_last_element_last_letter.substring(2, 3);\n        String file_name_split_last_element_last_letter_fourth_letter = file_name_split_last_element_last_letter.substring(3, 4);\n        String file_name_split_last_element_last_letter_last_letter = file_name_split_last_element_last_letter.substring(4, file_name_split_last_element_last_letter.length());\n        String file_name_split_last_element_last_letter_last_letter_first_letter = file_name_split_last_element_last_letter_last_letter.substring(0, 1);\n        String file_name_split_last_element_last_letter_last_letter_second_letter = file_name_split_last_element_last_letter_last_letter.substring(1, 2);\n        String file_name_split_last_element_last_letter_last_letter_third_letter = file_name_split_last_element_last_letter_last_letter.substring(2, 3);\n        String file_name_split_last_element_last_letter_last_letter_fourth_letter = file_name_split_last_element_last_letter_last_letter.substring(3, 4);\n        String file_name_split_last_element_last_letter_last_letter_last_letter_last_letter = file_name_split_last_element_last_letter_last_letter_last_letter.substring(4, file_name_split_last_element_last_letter_last_letter_last_letter.length());\n        String file_name_split_last_element_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter = file_name_split_last_element_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter.substring(0, 1);\n        String file_name_split_last_element_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter = file_name_split_last_element_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[file_name_split_length - 1].matches(\"[a-zA-Z]\")) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            String file_name_split_first_letter = file_name_split[0];\n            if (file_name_split_first_letter.length() != 1) {\n                return \"No\";\n            }\n            if (file_name_split_first_letter.charAt(0) < 'a' || file_name_split_first_letter.charAt(0) > 'z') {\n                return \"No\";\n            }\n            String file_name_split_second_letter = file_name_split[1];\n            if (file_name_split_second_letter.length() != 1) {\n                return \"No\";\n            }\n            if (file_name_split_second_letter.charAt(0) < 'a' || file_name_split_second_letter.charAt(0) > 'z') {\n                return \"No\";\n            }\n            String file_name_split_third_letter = file_name_split[2];\n            if (file_name_split_third_letter.length() != 1) {\n                return \"No\";\n            }\n            if (file_name_split_third_letter.charAt(0) < 'a' || file_name_split_third_letter.charAt(0) > 'z') {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            String file_name_split_first_letter = file_name_split[0];\n            if (file_name_split_first_letter.length() != 1) {\n                return \"No\";\n            }\n            if (file_name_split_first_letter.compareTo(\"a\") < 0 || file_name_split_first_letter.compareTo(\"z\") > 0) {\n                return \"No\";\n            }\n        }\n        if (file_name_split_length == 2) {\n            String file_name_split_second_letter = file_name_split[1];\n            if (file_name_split_second_letter.length() != 1) {\n                return \"No\";\n            }\n            if (file_name_split_second_letter.compareTo(\".\") != 0) {\n                return \"No\";\n            }\n            if (file_name_split_second_letter.compareTo(\"txt\") != 0 && file_name_split_second_letter.compareTo(\"exe\") != 0 && file_name_split_second_letter.compareTo(\"dll\") != 0) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        int file_name_split_length_minus_one = file_name_split_length - 1;\n        int file_name_split_length_minus_two = file_name_split_length - 2;\n        int file_name_split_length_minus_three = file_name_split_length - 3;\n        int file_name_split_length_minus_four = file_name_split_length - 4;\n\n        if (file_name_split_length_minus_one > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length_minus_two > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length_minus_three > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length_minus_four > 3) {\n            return \"No\";\n        }\n        if (file_name_split[file_name_split_length_minus_one].equals(\".\") || file_name_split[file_name_split_length_minus_one].equals(\"..\")) {\n            return \"No\";\n        }\n        if (file_name_split[file_name_split_length_minus_two].equals(\".\") || file_name_split[file_name_split_length_minus_two].equals(\"..\")) {\n            return \"No\";\n        }\n        if (file_name_split[file_name_split_length_minus_three].equals(\".\") || file_name_split[file_name_split_length_minus_three].equals(\"..\")) {\n            return \"No\";\n        }\n        if (file_name_split[file_name_split_length_minus_four].equals(\".\") || file_name_split[file_name_split_length_minus_four].equals(\"..\")) {\n            return \"No\";\n        }\n        if (file_name_split[file_name_split_length_minus_one].matches(\"[a-zA-Z]\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        String file_name_first_letter = file_name_split[0].substring(0, 1);\n        if (!file_name_first_letter.matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        String file_name_last_letter = file_name_split[file_name_split_length - 1];\n        if (!file_name_last_letter.matches(\"[a-zA-Z0-9]\")) {\n            return \"No\";\n        }\n        String file_name_substring_before_dot = file_name_split[0].substring(1);\n        if (!file_name_substring_before_dot.matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        String file_name_substring_after_dot = file_name_split[file_name_split_length - 2];\n        if (!file_name_substring_after_dot.matches(\"[a-zA-Z0-9]\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String filename = file_name.toLowerCase();\n        String[] split = filename.split(\"\\\\.\");\n        int count = split.length;\n        if (count > 3) {\n            return \"No\";\n        }\n        for (int i = 0; i < count; i++) {\n            if (split[i].length() > 1) {\n                return \"No\";\n            }\n            if (!Character.isLetter(split[i].charAt(0))) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        for (int i = 0; i < file_name_split_length; i++) {\n            if (file_name_split[i].length() > 1) {\n                return \"No\";\n            }\n            if (file_name_split[i].charAt(0) < 'a' || file_name_split[i].charAt(0) > 'z') {\n                return \"No\";\n            }\n            if (file_name_split[i].charAt(0) == '.' && file_name_split[i].charAt(1) != '.') {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].charAt(0) < 'a' || file_name_split[0].charAt(0) > 'z') {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].charAt(0) < 'a' || file_name_split[1].charAt(0) > 'z') {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].charAt(0) < 'a' || file_name_split[2].charAt(0) > 'z') {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i%3 == 0 && i%4 != 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i%3 != 0 && i%4 == 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 3 == 0 && i % 4 != 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if(i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if(i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        String[] primeWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i])) {\n                primeWords[i] = words[i];\n            }\n        }\n        String result = \"\";\n        for (int i = 0; i < primeWords.length; i++) {\n            result += primeWords[i] + \" \";\n        }\n        return result;\n    }\n\n    private boolean isPrime(String word) {\n        int n = Integer.parseInt(word);\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == lengths[i + 1]) {\n                sb.append(words[i]);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i])) {\n                newWords[i] = words[i];\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n\n    private boolean isPrime(String word) {\n        int n = Integer.parseInt(word);\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == lengths[i + 1]) {\n                sb.append(words[i]);\n                i++;\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String[] primeWords = new String[words.length];\n        int primeWordCount = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i])) {\n                primeWords[primeWordCount] = words[i];\n                primeWordCount++;\n            }\n        }\n        String result = \"\";\n        for (int i = 0; i < primeWordCount; i++) {\n            result += primeWords[i] + \" \";\n        }\n        return result;\n    }\n\n    private boolean isPrime(String word) {\n        int n = Integer.parseInt(word);\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] nums = x.split(\"/\");\n        String[] nums2 = n.split(\"/\");\n        int len = nums.length;\n        int len2 = nums2.length;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;\n        int n162 = 0;\n        int n163 = 0;\n        int n164 = 0;\n        int n165 = 0;\n        int n166 = 0;\n        int n167 = 0;\n        int n168 = 0;\n        int n169 = 0;\n        int n170 = 0;\n        int n171 = 0;\n        int n172 = 0;\n        int n173 = 0;\n        int n174 = 0;\n        int n175 = 0;\n        int n", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        if (x_n_length != n_x_length) {\n            return false;\n        }\n        int i = 0;\n        while (i < x_n_length) {\n            if (x_n[i].equals(\"0\")) {\n                i++;\n                continue;\n            }\n            if (x_n[i].equals(\"1\")) {\n                i++;\n                continue;\n            }\n            int j = 0;\n            while (j < n_x_length) {\n                if (n_x[j].equals(\"0\")) {\n                    j++;\n                    continue;\n                }\n                if (n_x[j].equals(\"1\")) {\n                    j++;\n                    continue;\n                }\n                if (x_n[i].equals(n_x[j])) {\n                    i++;\n                    j++;\n                    continue;\n                }\n                break;\n            }\n            if (j == n_x_length) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        if (x_n_length != n_x_length) {\n            return false;\n        }\n        for (int i = 0; i < x_n_length; i++) {\n            if (x_n[i].equals(\"0\")) {\n                continue;\n            }\n            int x_n_i = Integer.parseInt(x_n[i]);\n            int n_x_i = Integer.parseInt(n_x[i]);\n            if (x_n_i != n_x_i) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int x_n_sum = 0;\n        int n_x_sum = 0;\n        int n_x_length = n_x.length;\n        int x_n_length = x_n.length;\n        int n_x_sum_length = n_x_sum.length();\n        int x_n_sum_length = x_n_sum.length();\n        int n_x_sum_sum = 0;\n        int x_n_sum_sum = 0;\n        int n_x_sum_sum_length = n_x_sum_sum.length();\n        int x_n_sum_sum_length = x_n_sum_sum.length();\n        int n_x_sum_sum_sum = 0;\n        int x_n_sum_sum_sum = 0;\n        int n_x_sum_sum_sum_length = n_x_sum_sum_sum.length();\n        int x_n_sum_sum_sum_sum_length = x_n_sum_sum_sum.length();\n        int n_x_sum_sum_sum_sum_sum_length = n_x_sum_sum_sum_sum.length();\n        int x_n_sum_sum_sum_sum_sum_sum_length = x_n_sum_sum_sum_sum_sum.length();\n        int n_x_sum_sum_sum_sum_sum_sum_sum_sum_length = n_x_sum_sum_sum_sum_sum_sum_sum.length();\n        int x_n_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = x_n_sum_sum_sum_sum_sum_sum_sum_sum.length();\n        int n_x_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = n_x_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.length();\n        int x_n_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = x_n_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length;\n        int n_x_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = n_x_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length;\n        int x_n_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length = x_n_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_length;\n        int n_x_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        if (x_n_length == 1 && n_x_length == 1) {\n            return true;\n        }\n        if (x_n_length == 1 && n_x_length == 2) {\n            return false;\n        }\n        if (x_n_length == 2 && n_x_length == 1) {\n            return false;\n        }\n        if (x_n_length == 2 && n_x_length == 2) {\n            if (x_n[0].equals(n_x[0]) && x_n[1].equals(n_x[1])) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] denoms = n.split(\"/\");\n        int num = Integer.parseInt(nums[0]);\n        int den = Integer.parseInt(denoms[0]);\n        if(num == den) return true;\n        if(num < den) return false;\n        int i = 1;\n        while(i < nums.length && i < denoms.length) {\n            int n1 = Integer.parseInt(nums[i]);\n            int n2 = Integer.parseInt(denoms[i]);\n            if(n1 == n2) {\n                i++;\n                continue;\n            }\n            if(n1 < n2) {\n                return false;\n            }\n            num *= n2;\n            den *= n1;\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0)\n            return false;\n        if(n_x_den == 0)\n            return false;\n        if(x_n_num == 0)\n            return false;\n        if(n_x_num == 0)\n            return false;\n        if(x_n_den == n_x_num)\n            return true;\n        if(x_n_den == n_x_num + 1)\n            return true;\n        if(x_n_den == n_x_num - 1)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] denoms = n.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(denoms[1]);\n        if(denominator == 0) return false;\n        if(numerator == 0) return false;\n        if(numerator == denominator) return true;\n        if(numerator > denominator) {\n            int temp = numerator;\n            numerator = denominator;\n            denominator = temp;\n        }\n        int temp = numerator;\n        numerator = denominator;\n        denominator = temp;\n        int sum = numerator * denominator;\n        if(sum == numerator) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n\n        if (x_n_den == 0) {\n            return false;\n        }\n\n        if (x_n_num == n_x_num) {\n            return true;\n        }\n\n        if (x_n_num == n_x_den) {\n            return true;\n        }\n\n        if (x_n_den == n_x_num) {\n            return true;\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n\n        if(x_n_num == n_x_num && x_n_den == n_x_den) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        if (x_n_length != n_x_length) {\n            return false;\n        }\n        int i = 0;\n        while (i < x_n_length) {\n            if (x_n[i].equals(\"0\")) {\n                i++;\n                continue;\n            }\n            if (x_n[i].equals(\"1\")) {\n                i++;\n                continue;\n            }\n            int x_n_index = Integer.parseInt(x_n[i]);\n            int n_x_index = Integer.parseInt(n_x[i]);\n            if (x_n_index == n_x_index) {\n                i++;\n                continue;\n            }\n            if (x_n_index > n_x_index) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n\n        if(x_n_num == n_x_num && x_n_den == n_x_den) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_num = Integer.parseInt(x_n[0]);\n        int x_den = Integer.parseInt(x_n[1]);\n        int n_num = Integer.parseInt(n_x[0]);\n        int n_den = Integer.parseInt(n_x[1]);\n        if(x_den == 0)\n            return false;\n        if(n_den == 0)\n            return false;\n        if(x_num == 0)\n            return false;\n        if(n_num == 0)\n            return false;\n        if(x_num * n_num == x_den * n_den)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] nums2 = n.split(\"/\");\n        int num1 = Integer.parseInt(nums[0]);\n        int num2 = Integer.parseInt(nums2[0]);\n        int den1 = Integer.parseInt(nums[1]);\n        int den2 = Integer.parseInt(nums2[1]);\n        if(den1 == 0 || den2 == 0)\n            return false;\n        if(den1 == 1 && den2 == 1)\n            return true;\n        if(den1 == 1 && den2 != 1)\n            return false;\n        if(den1 != 1 && den2 == 1)\n            return false;\n        if(num1 == num2)\n            return true;\n        if(num1 != num2)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] nums = x.split(\"/\");\n        String[] nums2 = n.split(\"/\");\n        int num1 = Integer.parseInt(nums[0]);\n        int num2 = Integer.parseInt(nums2[0]);\n        int den1 = Integer.parseInt(nums[1]);\n        int den2 = Integer.parseInt(nums2[1]);\n        if(num1 == 0 && den1 == 0)\n            return false;\n        if(num2 == 0 && den2 == 0)\n            return false;\n        if(num1 == 0)\n            return false;\n        if(num2 == 0)\n            return false;\n        if(den1 == 0)\n            return false;\n        if(den2 == 0)\n            return false;\n        if(den1 == 1 && den2 == 1)\n            return true;\n        if(den1 == num2 && den2 == num1)\n            return true;\n        if(den1 == num1 && den2 == num2)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n\n        if (x_n_den == 0) {\n            return false;\n        }\n\n        if (x_n_num == 0) {\n            return false;\n        }\n\n        if (n_x_den == 0) {\n            return false;\n        }\n\n        if (x_n_num == n_x_num) {\n            return true;\n        }\n\n        if (x_n_num == n_x_den) {\n            return true;\n        }\n\n        if (x_n_num == n_x_num && x_n_den == n_x_den) {\n            return true;\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        if (x_n_length != n_x_length) {\n            return false;\n        }\n        for (int i = 0; i < x_n_length; i++) {\n            if (!x_n[i].equals(n_x[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] nums2 = n.split(\"/\");\n        int num1 = Integer.parseInt(nums[0]);\n        int num2 = Integer.parseInt(nums2[0]);\n        int den1 = Integer.parseInt(nums[1]);\n        int den2 = Integer.parseInt(nums2[1]);\n        if (den1 == 0) {\n            return false;\n        }\n        if (den2 == 0) {\n            return false;\n        }\n        if (den1 == den2) {\n            return true;\n        }\n        if (num1 * den2 == num2 * den1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int x_n_sum = 0;\n        int n_x_sum = 0;\n        while (i < x_n_length && j < n_x_length) {\n            if (x_n[i].equals(\"0\")) {\n                i++;\n                continue;\n            }\n            if (n_x[j].equals(\"0\")) {\n                j++;\n                continue;\n            }\n            x_n_sum += Integer.parseInt(x_n[i]);\n            n_x_sum += Integer.parseInt(n_x[j]);\n            i++;\n            j++;\n        }\n        if (i == x_n_length) {\n            return true;\n        }\n        if (j == n_x_length) {\n            return true;\n        }\n        if (x_n_sum == n_x_sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n\n        if (x_n_den == 0) {\n            return false;\n        }\n\n        if (n_x_den == 0) {\n            return false;\n        }\n\n        if (x_n_num == n_x_num) {\n            return true;\n        }\n\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n            res.add(sum);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            map.put(sum, i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(nums.get(i));\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            if (map.containsKey(sum)) {\n                res.add(nums.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            while (nums.get(i) > 0) {\n                sum += nums.get(i) % 10;\n                nums.set(i, nums.get(i) / 10);\n            }\n            if (map.containsKey(sum)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            if (map.containsKey(sum)) {\n                result.add(i);\n            }\n            map.put(sum, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            res.add(sum);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            if (map.containsKey(sum)) {\n                result.add(i);\n            }\n            map.put(sum, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n            result.add(sum);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            while (nums.get(i) != 0) {\n                sum = sum * 10 + nums.get(i) % 10;\n                nums.remove(i);\n            }\n            map.put(sum, i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(map.get(nums.get(i)))));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            res.add(sum);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            map.put(sum, i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(nums.get(i));\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            if (map.containsKey(sum)) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        int[] sums = new int[10];\n        for (int i = 0; i < n; i++) {\n            sums[nums.get(i) % 10]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            res.add(i, sums[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            result.add(entry.getKey());\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            if (map.containsKey(sum)) {\n                result.add(map.get(sum));\n            }\n            map.put(sum, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n            }\n            res.add(sum);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                if (sum == nums.get(i)) {\n                    res.add(i);\n                    res.add(j);\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            if (num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && num % 10 == 1 && num % 100 != 11) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            if (num > 10 && num % 10 == 1 && num % 100 != 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && num % 10 == 1 && num % 100 != 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) / 10 % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) % 100 != 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) / 10 % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) / 10 % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n                    if(a[i] == a[j] && a[i] == a[k] && a[i] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n                    if(a[i] == a[j] && a[i] == a[k]) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n                    if(a[i] == a[j] && a[i] == a[k]) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++){\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = i + 1; j < n; j++){\n                for(int k = j + 1; k < n; k++){\n                    if(a[i] + a[j] + a[k] % 3 == 0){\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n                    if(a[i] == a[j] && a[i] == a[k]) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k]) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (a[i] == a[j] && a[j] == a[k] && a[i] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n        }\n        else {\n            String[] planets = planet1.split(\" \");\n            String[] planets2 = planet2.split(\" \");\n            for (int i = 0; i < planets.length; i++) {\n                for (int j = 0; j < planets2.length; j++) {\n                    if (planets[i].equals(planets2[j])) {\n                        result.add(planets[i]);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            bf.add(planet1);\n        }\n        else {\n            int i = 0;\n            while (i < 8) {\n                if (planet1.equals(Planet.getPlanet(i))) {\n                    bf.add(Planet.getPlanet(i));\n                }\n                i++;\n            }\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        if (planet1.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        if (planet1.equals(\"Neptune\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        String[] planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 < 0 || index2 < 0) {\n            return result;\n        }\n        int diff = index2 - index1;\n        for (int i = 0; i < diff; i++) {\n            result.add(planets[index1 + i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if(planet1.equals(planet2)) {\n            bf.add(planet1);\n        }\n        else {\n            bf.add(planet1);\n            bf.add(planet2);\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n        }\n        else {\n            String[] planets = {planet1, planet2};\n            Arrays.sort(planets, new OrbitComparator());\n            for (int i = 0; i < planets.length; i++) {\n                if (planets[i].equals(planet1)) {\n                    result.add(planet2);\n                }\n                else if (planets[i].equals(planet2)) {\n                    result.add(planet1);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            bf.add(planet1);\n        }\n        else {\n            bf.add(planet1);\n            bf.add(planet2);\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planets = planet1.split(\" \");\n        String[] planets2 = planet2.split(\" \");\n        for (int i = 0; i < planets.length; i++) {\n            for (int j = 0; j < planets2.length; j++) {\n                if (planets[i].equals(planets2[j])) {\n                    result.add(planets[i]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        Map<String, String> map = new HashMap<>();\n        map.put(planet1, \"Sun\");\n        map.put(planet2, \"Sun\");\n        Queue<String> queue = new LinkedList<>();\n        queue.offer(planet1);\n        while (!queue.isEmpty()) {\n            String currentPlanet = queue.poll();\n            for (String neighbor : map.get(currentPlanet).split(\" \")) {\n                if (!map.containsKey(neighbor)) {\n                    map.put(neighbor, currentPlanet);\n                    queue.offer(neighbor);\n                }\n            }\n        }\n        if (map.containsKey(planet1)) {\n            result.add(map.get(planet1));\n        }\n        if (map.containsKey(planet2)) {\n            result.add(map.get(planet2));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<String>();\n        bf.add(planet1);\n        bf.add(planet2);\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            bf.add(planet1);\n        }\n        else {\n            bf.add(planet1);\n            bf.add(planet2);\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            bf.add(planet1);\n        }\n        else {\n            int i = 0;\n            while (i < 8) {\n                if (planet1.equals(planet2 + \" \" + i)) {\n                    bf.add(planet1 + \" \" + i);\n                }\n                i++;\n            }\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            return bf;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        String[] planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int[] distances = { 3959999999999999, 2519999999999999, 1959999999999999, 1439999999999999, 10000000000000000, 6666666666666666, 4444444444444444 };\n        for (int i = 0; i < planets.length; i++) {\n            if (planet1.equals(planets[i]) && planet2.equals(planets[(i + 1) % planets.length])) {\n                bf.add(planets[i]);\n            }\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int[] distances = {0, 149597870, 149597870, 149597870, 149597870, 149597870, 149597870, 149597870};\n        for (int i = 0; i < planets.length; i++) {\n            if (planet1.equals(planets[i]) || planet2.equals(planets[i])) {\n                continue;\n            }\n            int distance = distances[i];\n            if (distance > 0 && distance < 1000000000) {\n                result.add(planets[i]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planets = {planet1, planet2};\n        Arrays.sort(planets);\n        for (int i = 0; i < planets.length; i++) {\n            String planet = planets[i];\n            if (planet.equals(\"Sun\")) {\n                continue;\n            }\n            String[] orbit = orbit(planet);\n            for (int j = 0; j < orbit.length; j++) {\n                String orbitPlanet = orbit[j];\n                if (orbitPlanet.equals(planet)) {\n                    continue;\n                }\n                if (isBetween(planet, orbitPlanet)) {\n                    result.add(orbitPlanet);\n                }\n            }\n        }\n        return result;\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        if (planet2.equals(\"Sun\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        if (planet1.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if (planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        if (planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        if (planet1.equals(\"Neptune\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        if (planet2.equals(\"Neptune\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            bf.add(planet1);\n        }\n        else {\n            bf.add(planet1);\n            bf.add(planet2);\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n        }\n        else {\n            String[] planets = {planet1, planet2};\n            Arrays.sort(planets);\n            for (int i = 0; i < planets.length; i++) {\n                if (planets[i].equals(planet1)) {\n                    result.add(planets[i]);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word.substring(0, word.length() - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 0) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word.substring(0, word.length() - 1));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word.substring(0, word.length() - 1));\n            } else {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word.substring(0, word.length() - 1));\n            } else {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word.substring(0, word.length() / 2));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                return x;\n            }\n            i++;\n        }\n        return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return x;\n        }\n        if (n % 7 == 0) {\n            return y;\n        }\n        if (n % 11 == 0) {\n            return x;\n        }\n        if (n % 13 == 0) {\n            return y;\n        }\n        if (n % 17 == 0) {\n            return x;\n        }\n        if (n % 19 == 0) {\n            return y;\n        }\n        if (n % 23 == 0) {\n            return x;\n        }\n        if (n % 29 == 0) {\n            return y;\n        }\n        if (n % 31 == 0) {\n            return x;\n        }\n        if (n % 37 == 0) {\n            return y;\n        }\n        if (n % 41 == 0) {\n            return x;\n        }\n        if (n % 43 == 0) {\n            return y;\n        }\n        if (n % 47 == 0) {\n            return x;\n        }\n        if (n % 53 == 0) {\n            return y;\n        }\n        if (n % 59 == 0) {\n            return x;\n        }\n        if (n % 61 == 0) {\n            return y;\n        }\n        if (n % 67 == 0) {\n            return x;\n        }\n        if (n % 71 == 0) {\n            return y;\n        }\n        if (n % 73 == 0) {\n            return x;\n        }\n        if (n % 79 == 0) {\n            return y;\n        }\n        if (n % 83 == 0) {\n            return x;\n        }\n        if (n % 89 == 0) {\n            return y;\n        }\n        if (n % 97 == 0) {\n            return x;\n        }\n        if (n % 101 == 0) {\n            return y;\n        }\n        if (n % 103 == 0) {\n            return x;\n        }\n        if (n % 107 == 0) {\n            return y;\n        }\n        if (n % 109 == 0) {\n            return x;\n        }\n        if (n % 113 == 0) {\n            return y;\n        }\n        if (n % 127 == 0) {\n            return x;\n        }\n        if (n % 131 == 0) {\n            return y;\n        }\n        if (n % 137 == 0) {\n            return x;\n        }\n        if (n % 139 == 0) {\n            return y;\n        }\n        if (n % 149 == 0) {\n            return x;\n        }\n        if (n % 151 == 0) {\n            return y;\n        }\n        if (n % 157 == 0) {\n            return x;\n        }\n        if (n % 163 == 0) {\n            return y;\n        }\n        if (n % 167 == 0) {\n            return x;\n        }\n        if (n % 173 == 0) {\n            return y;\n        }\n        if (n % 179 == 0) {\n            return x;\n        }\n        if (n % 181 == 0) {\n            return y;\n        }\n        if (n % 191 == 0) {\n            return x;\n        }\n        if (n % 193 == 0) {\n            return y;\n        }\n        if (n % 197 == 0) {\n            return x;\n        }\n        if (n % 199 == 0) {\n            return y;\n        }\n        if (n % 211 == 0) {\n            return x;\n        }\n        if (n % 223 == 0) {\n            return y;\n        }\n        if (n % 227 == 0) {\n            return x;\n        }\n        if (n % 229 == 0) {\n            return y;\n        }\n        if (n % 233 == 0) {\n            return x;\n        }\n        if (n % 239 == 0) {\n            return y;\n        }\n        if (n % 241 == 0) {\n            return x;\n        }\n        if (n % 251 == 0) {\n            return y;\n        }\n        if (n % 257 == 0) {\n            return x;\n        }\n        if (n % 263 == 0) {\n            return y;\n        }\n        if (n % 269 == 0) {\n            return x;\n        }\n        if (n % 271 == 0) {\n            return y;\n        }\n        if (n % 277 == 0) {\n            return x;\n        }\n        if (n % 281 == 0) {\n            return y;\n        }\n        if (n % 283 == 0) {\n            return x;\n        }\n        if (n % 293 == 0) {\n            return y;\n        }\n        if (n % 307 == 0) {\n            return x;\n        }\n        if (n % 311 == 0) {\n            return y;\n        }\n        if (n % 313 == 0) {\n            return x;\n        }\n        if (n % 317 == 0) {\n            return y;\n        }\n        if (n % 331 == 0) {\n            return x;\n        }\n        if (n % 337 == 0) {\n            return y;\n        }\n        if (n % 347 == 0) {\n            return x;\n        }\n        if (n % 349 == 0) {\n            return y;\n        }\n        if (n % 353 == 0) {\n            return x;\n        }\n        if (n % 359 == 0) {\n            return y;\n        }\n        if (n % 367 == 0) {\n            return x;\n        }\n        if (n % 373 == 0) {\n            return y;\n        }\n        if (n % 379 == 0) {\n            return x;\n        }\n        if (n % 383 == 0) {\n            return y;\n        }\n        if (n % 389 == 0) {\n            return x;\n        }\n        if (n % 397 == 0) {\n            return y;\n        }\n        if (n % 401 == 0) {\n            return x;\n        }\n        if (n % 409 == 0) {\n            return y;\n        }\n        if (n % 419 == 0) {\n            return x;\n        }\n        if (n % 421 == 0) {\n            return y;\n        }\n        if (n % 431 == 0) {\n            return x;\n        }\n        if (n % 433 == 0) {\n            return y;\n        }\n        if (n % 439 == 0) {\n            return x;\n        }\n        if (n % 443 == 0) {\n            return y;\n        }\n        if (n % 449 == 0) {\n            return x;\n        }\n        if (n % 457 == 0) {\n            return y;\n        }\n        if (n % 461 == 0) {\n            return x;\n        }\n        if (n % 463 == 0) {\n            return y;\n        }\n        if (n % 467 == 0) {\n            return x;\n        }\n        if (n % 479 == 0) {\n            return y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return x;\n        }\n        if (n % 7 == 0) {\n            return y;\n        }\n        if (n % 11 == 0) {\n            return x;\n        }\n        if (n % 13 == 0) {\n            return y;\n        }\n        if (n % 17 == 0) {\n            return x;\n        }\n        if (n % 19 == 0) {\n            return y;\n        }\n        if (n % 23 == 0) {\n            return x;\n        }\n        if (n % 29 == 0) {\n            return y;\n        }\n        if (n % 31 == 0) {\n            return x;\n        }\n        if (n % 37 == 0) {\n            return y;\n        }\n        if (n % 41 == 0) {\n            return x;\n        }\n        if (n % 43 == 0) {\n            return y;\n        }\n        if (n % 47 == 0) {\n            return x;\n        }\n        if (n % 53 == 0) {\n            return y;\n        }\n        if (n % 59 == 0) {\n            return x;\n        }\n        if (n % 61 == 0) {\n            return y;\n        }\n        if (n % 67 == 0) {\n            return x;\n        }\n        if (n % 71 == 0) {\n            return y;\n        }\n        if (n % 73 == 0) {\n            return x;\n        }\n        if (n % 79 == 0) {\n            return y;\n        }\n        if (n % 83 == 0) {\n            return x;\n        }\n        if (n % 89 == 0) {\n            return y;\n        }\n        if (n % 97 == 0) {\n            return x;\n        }\n        if (n % 101 == 0) {\n            return y;\n        }\n        if (n % 103 == 0) {\n            return x;\n        }\n        if (n % 107 == 0) {\n            return y;\n        }\n        if (n % 109 == 0) {\n            return x;\n        }\n        if (n % 113 == 0) {\n            return y;\n        }\n        if (n % 127 == 0) {\n            return x;\n        }\n        if (n % 131 == 0) {\n            return y;\n        }\n        if (n % 137 == 0) {\n            return x;\n        }\n        if (n % 139 == 0) {\n            return y;\n        }\n        if (n % 149 == 0) {\n            return x;\n        }\n        if (n % 151 == 0) {\n            return y;\n        }\n        if (n % 157 == 0) {\n            return x;\n        }\n        if (n % 163 == 0) {\n            return y;\n        }\n        if (n % 167 == 0) {\n            return x;\n        }\n        if (n % 173 == 0) {\n            return y;\n        }\n        if (n % 179 == 0) {\n            return x;\n        }\n        if (n % 181 == 0) {\n            return y;\n        }\n        if (n % 191 == 0) {\n            return x;\n        }\n        if (n % 193 == 0) {\n            return y;\n        }\n        if (n % 197 == 0) {\n            return x;\n        }\n        if (n % 199 == 0) {\n            return y;\n        }\n        if (n % 211 == 0) {\n            return x;\n        }\n        if (n % 223 == 0) {\n            return y;\n        }\n        if (n % 227 == 0) {\n            return x;\n        }\n        if (n % 229 == 0) {\n            return y;\n        }\n        if (n % 233 == 0) {\n            return x;\n        }\n        if (n % 239 == 0) {\n            return y;\n        }\n        if (n % 241 == 0) {\n            return x;\n        }\n        if (n % 251 == 0) {\n            return y;\n        }\n        if (n % 257 == 0) {\n            return x;\n        }\n        if (n % 263 == 0) {\n            return y;\n        }\n        if (n % 269 == 0) {\n            return x;\n        }\n        if (n % 271 == 0) {\n            return y;\n        }\n        if (n % 277 == 0) {\n            return x;\n        }\n        if (n % 281 == 0) {\n            return y;\n        }\n        if (n % 283 == 0) {\n            return x;\n        }\n        if (n % 293 == 0) {\n            return y;\n        }\n        if (n % 307 == 0) {\n            return x;\n        }\n        if (n % 311 == 0) {\n            return y;\n        }\n        if (n % 313 == 0) {\n            return x;\n        }\n        if (n % 317 == 0) {\n            return y;\n        }\n        if (n % 331 == 0) {\n            return x;\n        }\n        if (n % 337 == 0) {\n            return y;\n        }\n        if (n % 347 == 0) {\n            return x;\n        }\n        if (n % 349 == 0) {\n            return y;\n        }\n        if (n % 353 == 0) {\n            return x;\n        }\n        if (n % 359 == 0) {\n            return y;\n        }\n        if (n % 367 == 0) {\n            return x;\n        }\n        if (n % 373 == 0) {\n            return y;\n        }\n        if (n % 379 == 0) {\n            return x;\n        }\n        if (n % 383 == 0) {\n            return y;\n        }\n        if (n % 389 == 0) {\n            return x;\n        }\n        if (n % 397 == 0) {\n            return y;\n        }\n        if (n % 401 == 0) {\n            return x;\n        }\n        if (n % 409 == 0) {\n            return y;\n        }\n        if (n % 419 == 0) {\n            return x;\n        }\n        if (n % 421 == 0) {\n            return y;\n        }\n        if (n % 431 == 0) {\n            return x;\n        }\n        if (n % 433 == 0) {\n            return y;\n        }\n        if (n % 439 == 0) {\n            return x;\n        }\n        if (n % 443 == 0) {\n            return y;\n        }\n        if (n % 449 == 0) {\n            return x;\n        }\n        if (n % 457 == 0) {\n            return y;\n        }\n        if (n % 461 == 0) {\n            return x;\n        }\n        if (n % 463 == 0) {\n            return y;\n        }\n        if (n % 467 == 0) {\n            return x;\n        }\n        if (n % 479 == 0) {\n            return y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        int sum = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        if (sum == n) {\n            return x;\n        }\n        return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n == 5) {\n            return x;\n        } else if (n == 7) {\n            return y;\n        } else if (n == 11) {\n            return x;\n        } else if (n == 13) {\n            return y;\n        } else if (n == 17) {\n            return x;\n        } else if (n == 19) {\n            return y;\n        } else if (n == 23) {\n            return x;\n        } else if (n == 29) {\n            return y;\n        } else if (n == 31) {\n            return x;\n        } else if (n == 37) {\n            return y;\n        } else if (n == 41) {\n            return x;\n        } else if (n == 43) {\n            return y;\n        } else if (n == 47) {\n            return x;\n        } else if (n == 53) {\n            return y;\n        } else if (n == 59) {\n            return x;\n        } else if (n == 61) {\n            return y;\n        } else if (n == 67) {\n            return x;\n        } else if (n == 71) {\n            return y;\n        } else if (n == 73) {\n            return x;\n        } else if (n == 79) {\n            return y;\n        } else if (n == 83) {\n            return x;\n        } else if (n == 89) {\n            return y;\n        } else if (n == 97) {\n            return x;\n        } else if (n == 101) {\n            return y;\n        } else if (n == 103) {\n            return x;\n        } else if (n == 107) {\n            return y;\n        } else if (n == 109) {\n            return x;\n        } else if (n == 113) {\n            return y;\n        } else if (n == 127) {\n            return x;\n        } else if (n == 131) {\n            return y;\n        } else if (n == 137) {\n            return x;\n        } else if (n == 139) {\n            return y;\n        } else if (n == 149) {\n            return x;\n        } else if (n == 151) {\n            return y;\n        } else if (n == 157) {\n            return x;\n        } else if (n == 163) {\n            return y;\n        } else if (n == 167) {\n            return x;\n        } else if (n == 173) {\n            return y;\n        } else if (n == 179) {\n            return x;\n        } else if (n == 181) {\n            return y;\n        } else if (n == 191) {\n            return x;\n        } else if (n == 193) {\n            return y;\n        } else if (n == 197) {\n            return x;\n        } else if (n == 199) {\n            return y;\n        } else if (n == 211) {\n            return x;\n        } else if (n == 223) {\n            return y;\n        } else if (n == 227) {\n            return x;\n        } else if (n == 229) {\n            return y;\n        } else if (n == 233) {\n            return x;\n        } else if (n == 239) {\n            return y;\n        } else if (n == 241) {\n            return x;\n        } else if (n == 251) {\n            return y;\n        } else if (n == 257) {\n            return x;\n        } else if (n == 263) {\n            return y;\n        } else if (n == 269) {\n            return x;\n        } else if (n == 271) {\n            return y;\n        } else if (n == 277) {\n            return x;\n        } else if (n == 281) {\n            return y;\n        } else if (n == 283) {\n            return x;\n        } else if (n == 293) {\n            return y;\n        } else if (n == 307) {\n            return x;\n        } else if (n == 311) {\n            return y;\n        } else if (n == 313) {\n            return x;\n        } else if (n == 317) {\n            return y;\n        } else if (n == 331) {\n            return x;\n        } else if (n == 337) {\n            return y;\n        } else if (n == 347) {\n            return x;\n        } else if (n == 349) {\n            return y;\n        } else if (n == 353) {\n            return x;\n        } else if (n == 359) {\n            return y;\n        } else if (n == 367) {\n            return x;\n        } else if (n == 373) {\n            return y;\n        } else if (n == 379) {\n            return x;\n        } else if (n == 383) {\n            return y;\n        } else if (n == 389) {\n            return x;\n        } else if (n == 397) {\n            return y;\n        } else if (n == 401) {\n            return x;\n        } else if (n == 409) {\n            return y;\n        } else if (n == 419) {\n            return x;\n        } else if (n == 421) {\n            return y;\n        } else if (n == 431) {\n            return x;\n        } else if (n == 433) {\n            return y;\n        } else if (n == 439) {\n            return x;\n        } else if (n == 443) {\n            return y;\n        } else if (n == 449) {\n            return x;\n        } else if (n == 457) {\n            return y;\n        } else if (n == 461) {\n            return x;\n        } else if (n == 463) {\n            return y;\n        } else if (n == 467) {\n            return x;\n        } else if (n == 471) {\n            return y;\n        } else if (n == 473) {\n            return x;\n        } else if (n == 477) {\n            return y;\n        } else if (n == 479) {\n            return x;\n        } else if (n == 487) {\n            return y;\n        } else if (n == 491) {\n            return x;\n        } else if (n == 499) {\n            return y;\n        } else if (n == 503) {\n            return x;\n        } else if (n == 509) {\n            return y;\n        } else if (n == 521) {\n            return x;\n        } else if (n == 523) {\n            return y;\n        } else if (n == 541) {\n            return x;\n        } else if (n == 547) {\n            return y;\n        } else if (n == 557) {\n            return x;\n        } else if (n == 563) {\n            return y;\n        } else if (n == 569) {\n            return x;\n        } else if (n == 571) {\n            return y;\n        } else if (n == 577) {\n            return x;\n        } else if (n == 587) {\n            return y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        int i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n                return x;\n            }\n            i++;\n        }\n        return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        return xOrY(n / 2, x, y);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                return x;\n            }\n            i++;\n        }\n        return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        return xOrY(n / 2, x, y);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n == 3) {\n            return y;\n        }\n        if (n == 5) {\n            return x;\n        }\n        if (n == 7) {\n            return y;\n        }\n        if (n == 11) {\n            return x;\n        }\n        if (n == 13) {\n            return y;\n        }\n        if (n == 17) {\n            return x;\n        }\n        if (n == 19) {\n            return y;\n        }\n        if (n == 23) {\n            return x;\n        }\n        if (n == 29) {\n            return y;\n        }\n        if (n == 31) {\n            return x;\n        }\n        if (n == 37) {\n            return y;\n        }\n        if (n == 41) {\n            return x;\n        }\n        if (n == 43) {\n            return y;\n        }\n        if (n == 47) {\n            return x;\n        }\n        if (n == 53) {\n            return y;\n        }\n        if (n == 59) {\n            return x;\n        }\n        if (n == 61) {\n            return y;\n        }\n        if (n == 67) {\n            return x;\n        }\n        if (n == 71) {\n            return y;\n        }\n        if (n == 73) {\n            return x;\n        }\n        if (n == 79) {\n            return y;\n        }\n        if (n == 83) {\n            return x;\n        }\n        if (n == 89) {\n            return y;\n        }\n        if (n == 97) {\n            return x;\n        }\n        if (n == 101) {\n            return y;\n        }\n        if (n == 103) {\n            return x;\n        }\n        if (n == 107) {\n            return y;\n        }\n        if (n == 109) {\n            return x;\n        }\n        if (n == 113) {\n            return y;\n        }\n        if (n == 127) {\n            return x;\n        }\n        if (n == 131) {\n            return y;\n        }\n        if (n == 137) {\n            return x;\n        }\n        if (n == 139) {\n            return y;\n        }\n        if (n == 149) {\n            return x;\n        }\n        if (n == 151) {\n            return y;\n        }\n        if (n == 157) {\n            return x;\n        }\n        if (n == 163) {\n            return y;\n        }\n        if (n == 167) {\n            return x;\n        }\n        if (n == 173) {\n            return y;\n        }\n        if (n == 179) {\n            return x;\n        }\n        if (n == 181) {\n            return y;\n        }\n        if (n == 191) {\n            return x;\n        }\n        if (n == 193) {\n            return y;\n        }\n        if (n == 197) {\n            return x;\n        }\n        if (n == 199) {\n            return y;\n        }\n        if (n == 211) {\n            return x;\n        }\n        if (n == 223) {\n            return y;\n        }\n        if (n == 227) {\n            return x;\n        }\n        if (n == 229) {\n            return y;\n        }\n        if (n == 233) {\n            return x;\n        }\n        if (n == 239) {\n            return y;\n        }\n        if (n == 241) {\n            return x;\n        }\n        if (n == 251) {\n            return y;\n        }\n        if (n == 257) {\n            return x;\n        }\n        if (n == 263) {\n            return y;\n        }\n        if (n == 269) {\n            return x;\n        }\n        if (n == 271) {\n            return y;\n        }\n        if (n == 277) {\n            return x;\n        }\n        if (n == 281) {\n            return y;\n        }\n        if (n == 283) {\n            return x;\n        }\n        if (n == 293) {\n            return y;\n        }\n        if (n == 307) {\n            return x;\n        }\n        if (n == 311) {\n            return y;\n        }\n        if (n == 313) {\n            return x;\n        }\n        if (n == 317) {\n            return y;\n        }\n        if (n == 331) {\n            return x;\n        }\n        if (n == 337) {\n            return y;\n        }\n        if (n == 347) {\n            return x;\n        }\n        if (n == 349) {\n            return y;\n        }\n        if (n == 353) {\n            return x;\n        }\n        if (n == 359) {\n            return y;\n        }\n        if (n == 367) {\n            return x;\n        }\n        if (n == 373) {\n            return y;\n        }\n        if (n == 379) {\n            return x;\n        }\n        if (n == 383) {\n            return y;\n        }\n        if (n == 389) {\n            return x;\n        }\n        if (n == 397) {\n            return y;\n        }\n        if (n == 401) {\n            return x;\n        }\n        if (n == 409) {\n            return y;\n        }\n        if (n == 419) {\n            return x;\n        }\n        if (n == 421) {\n            return y;\n        }\n        if (n == 431) {\n            return x;\n        }\n        if (n == 433) {\n            return y;\n        }\n        if (n == 439) {\n            return x;\n        }\n        if (n == 443) {\n            return y;\n        }\n        if (n == 449) {\n            return x;\n        }\n        if (n == 457) {\n            return y;\n        }\n        if (n == 461) {\n            return x;\n        }\n        if (n == 463) {\n            return y;\n        }\n        if (n == 467) {\n            return x;\n        }\n        if (n == 471) {\n            return y;\n        }\n        if (n == 473) {\n            return x;\n        }\n        if (n == 477) {\n            return y;\n        }\n        if (n == 479) {\n            return x;\n        }\n        if (n == 487) {\n            return y;\n        }\n        if (n == 491) {\n            return x;\n        }\n        if (n == 499) {\n            return y;\n        }\n        if (n == 503) {\n            return x;\n        }\n        if (n == 509) {\n            return y;\n        }\n        if (n == 521) {\n            return x;\n        }\n        if (n == 523) {\n            return y;\n        }\n        if (n == 541) {\n            return x;\n        }\n        if (n == 547) {\n            return y;\n        }\n        if (n == 557) {\n            return x;\n        }\n        if (n == 563) {\n            return y;\n        }\n        if (n == 569) {\n            return x;\n        }\n        if (n == 571) {\n            return y;\n        }\n        if (n == 577) {\n            return x;\n        }\n        if (n == 587) {\n            return y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        } else if (n == 2) {\n            return y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return x;\n        }\n        if (n % 7 == 0) {\n            return y;\n        }\n        if (n % 11 == 0) {\n            return x;\n        }\n        if (n % 13 == 0) {\n            return y;\n        }\n        if (n % 17 == 0) {\n            return x;\n        }\n        if (n % 19 == 0) {\n            return y;\n        }\n        if (n % 23 == 0) {\n            return x;\n        }\n        if (n % 29 == 0) {\n            return y;\n        }\n        if (n % 31 == 0) {\n            return x;\n        }\n        if (n % 37 == 0) {\n            return y;\n        }\n        if (n % 41 == 0) {\n            return x;\n        }\n        if (n % 43 == 0) {\n            return y;\n        }\n        if (n % 47 == 0) {\n            return x;\n        }\n        if (n % 53 == 0) {\n            return y;\n        }\n        if (n % 59 == 0) {\n            return x;\n        }\n        if (n % 61 == 0) {\n            return y;\n        }\n        if (n % 67 == 0) {\n            return x;\n        }\n        if (n % 71 == 0) {\n            return y;\n        }\n        if (n % 73 == 0) {\n            return x;\n        }\n        if (n % 79 == 0) {\n            return y;\n        }\n        if (n % 83 == 0) {\n            return x;\n        }\n        if (n % 89 == 0) {\n            return y;\n        }\n        if (n % 97 == 0) {\n            return x;\n        }\n        if (n % 101 == 0) {\n            return y;\n        }\n        if (n % 103 == 0) {\n            return x;\n        }\n        if (n % 107 == 0) {\n            return y;\n        }\n        if (n % 109 == 0) {\n            return x;\n        }\n        if (n % 113 == 0) {\n            return y;\n        }\n        if (n % 127 == 0) {\n            return x;\n        }\n        if (n % 131 == 0) {\n            return y;\n        }\n        if (n % 137 == 0) {\n            return x;\n        }\n        if (n % 139 == 0) {\n            return y;\n        }\n        if (n % 149 == 0) {\n            return x;\n        }\n        if (n % 151 == 0) {\n            return y;\n        }\n        if (n % 157 == 0) {\n            return x;\n        }\n        if (n % 163 == 0) {\n            return y;\n        }\n        if (n % 167 == 0) {\n            return x;\n        }\n        if (n % 173 == 0) {\n            return y;\n        }\n        if (n % 179 == 0) {\n            return x;\n        }\n        if (n % 181 == 0) {\n            return y;\n        }\n        if (n % 191 == 0) {\n            return x;\n        }\n        if (n % 193 == 0) {\n            return y;\n        }\n        if (n % 197 == 0) {\n            return x;\n        }\n        if (n % 199 == 0) {\n            return y;\n        }\n        if (n % 211 == 0) {\n            return x;\n        }\n        if (n % 223 == 0) {\n            return y;\n        }\n        if (n % 227 == 0) {\n            return x;\n        }\n        if (n % 229 == 0) {\n            return y;\n        }\n        if (n % 233 == 0) {\n            return x;\n        }\n        if (n % 239 == 0) {\n            return y;\n        }\n        if (n % 241 == 0) {\n            return x;\n        }\n        if (n % 251 == 0) {\n            return y;\n        }\n        if (n % 257 == 0) {\n            return x;\n        }\n        if (n % 263 == 0) {\n            return y;\n        }\n        if (n % 269 == 0) {\n            return x;\n        }\n        if (n % 271 == 0) {\n            return y;\n        }\n        if (n % 277 == 0) {\n            return x;\n        }\n        if (n % 281 == 0) {\n            return y;\n        }\n        if (n % 283 == 0) {\n            return x;\n        }\n        if (n % 293 == 0) {\n            return y;\n        }\n        if (n % 307 == 0) {\n            return x;\n        }\n        if (n % 311 == 0) {\n            return y;\n        }\n        if (n % 313 == 0) {\n            return x;\n        }\n        if (n % 317 == 0) {\n            return y;\n        }\n        if (n % 331 == 0) {\n            return x;\n        }\n        if (n % 337 == 0) {\n            return y;\n        }\n        if (n % 347 == 0) {\n            return x;\n        }\n        if (n % 349 == 0) {\n            return y;\n        }\n        if (n % 353 == 0) {\n            return x;\n        }\n        if (n % 359 == 0) {\n            return y;\n        }\n        if (n % 367 == 0) {\n            return x;\n        }\n        if (n % 373 == 0) {\n            return y;\n        }\n        if (n % 379 == 0) {\n            return x;\n        }\n        if (n % 383 == 0) {\n            return y;\n        }\n        if (n % 389 == 0) {\n            return x;\n        }\n        if (n % 397 == 0) {\n            return y;\n        }\n        if (n % 401 == 0) {\n            return x;\n        }\n        if (n % 409 == 0) {\n            return y;\n        }\n        if (n % 419 == 0) {\n            return x;\n        }\n        if (n % 421 == 0) {\n            return y;\n        }\n        if (n % 431 == 0) {\n            return x;\n        }\n        if (n % 433 == 0) {\n            return y;\n        }\n        if (n % 439 == 0) {\n            return x;\n        }\n        if (n % 443 == 0) {\n            return y;\n        }\n        if (n % 449 == 0) {\n            return x;\n        }\n        if (n % 457 == 0) {\n            return y;\n        }\n        if (n % 461 == 0) {\n            return x;\n        }\n        if (n % 463 == 0) {\n            return y;\n        }\n        if (n % 467 == 0) {\n            return x;\n        }\n        if (n % 479 == 0) {\n            return y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        } else {\n            int temp = 0;\n            int i = 2;\n            while (i <= n) {\n                if (n % i == 0) {\n                    temp = i;\n                }\n                i++;\n            }\n            if (temp == n) {\n                return x;\n            } else {\n                return y;\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        int sum = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        if (sum == n) {\n            return x;\n        }\n        return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        } else if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n == 3) {\n            return y;\n        }\n        if (n == 5) {\n            return x;\n        }\n        if (n == 7) {\n            return y;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return x;\n        }\n        if (n % 7 == 0) {\n            return y;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return x;\n        }\n        if (n % 7 == 0) {\n            return y;\n        }\n        if (n % 11 == 0) {\n            return x;\n        }\n        if (n % 13 == 0) {\n            return y;\n        }\n        if (n % 17 == 0) {\n            return x;\n        }\n        if (n % 19 == 0) {\n            return y;\n        }\n        if (n % 23 == 0) {\n            return x;\n        }\n        if (n % 29 == 0) {\n            return y;\n        }\n        if (n % 31 == 0) {\n            return x;\n        }\n        if (n % 37 == 0) {\n            return y;\n        }\n        if (n % 41 == 0) {\n            return x;\n        }\n        if (n % 43 == 0) {\n            return y;\n        }\n        if (n % 47 == 0) {\n            return x;\n        }\n        if (n % 53 == 0) {\n            return y;\n        }\n        if (n % 59 == 0) {\n            return x;\n        }\n        if (n % 61 == 0) {\n            return y;\n        }\n        if (n % 67 == 0) {\n            return x;\n        }\n        if (n % 71 == 0) {\n            return y;\n        }\n        if (n % 73 == 0) {\n            return x;\n        }\n        if (n % 79 == 0) {\n            return y;\n        }\n        if (n % 83 == 0) {\n            return x;\n        }\n        if (n % 89 == 0) {\n            return y;\n        }\n        if (n % 97 == 0) {\n            return x;\n        }\n        if (n % 101 == 0) {\n            return y;\n        }\n        if (n % 103 == 0) {\n            return x;\n        }\n        if (n % 107 == 0) {\n            return y;\n        }\n        if (n % 109 == 0) {\n            return x;\n        }\n        if (n % 113 == 0) {\n            return y;\n        }\n        if (n % 127 == 0) {\n            return x;\n        }\n        if (n % 131 == 0) {\n            return y;\n        }\n        if (n % 137 == 0) {\n            return x;\n        }\n        if (n % 139 == 0) {\n            return y;\n        }\n        if (n % 149 == 0) {\n            return x;\n        }\n        if (n % 151 == 0) {\n            return y;\n        }\n        if (n % 157 == 0) {\n            return x;\n        }\n        if (n % 163 == 0) {\n            return y;\n        }\n        if (n % 167 == 0) {\n            return x;\n        }\n        if (n % 173 == 0) {\n            return y;\n        }\n        if (n % 179 == 0) {\n            return x;\n        }\n        if (n % 181 == 0) {\n            return y;\n        }\n        if (n % 191 == 0) {\n            return x;\n        }\n        if (n % 193 == 0) {\n            return y;\n        }\n        if (n % 197 == 0) {\n            return x;\n        }\n        if (n % 199 == 0) {\n            return y;\n        }\n        if (n % 211 == 0) {\n            return x;\n        }\n        if (n % 223 == 0) {\n            return y;\n        }\n        if (n % 227 == 0) {\n            return x;\n        }\n        if (n % 229 == 0) {\n            return y;\n        }\n        if (n % 233 == 0) {\n            return x;\n        }\n        if (n % 239 == 0) {\n            return y;\n        }\n        if (n % 241 == 0) {\n            return x;\n        }\n        if (n % 251 == 0) {\n            return y;\n        }\n        if (n % 257 == 0) {\n            return x;\n        }\n        if (n % 263 == 0) {\n            return y;\n        }\n        if (n % 269 == 0) {\n            return x;\n        }\n        if (n % 271 == 0) {\n            return y;\n        }\n        if (n % 277 == 0) {\n            return x;\n        }\n        if (n % 281 == 0) {\n            return y;\n        }\n        if (n % 283 == 0) {\n            return x;\n        }\n        if (n % 293 == 0) {\n            return y;\n        }\n        if (n % 307 == 0) {\n            return x;\n        }\n        if (n % 311 == 0) {\n            return y;\n        }\n        if (n % 313 == 0) {\n            return x;\n        }\n        if (n % 317 == 0) {\n            return y;\n        }\n        if (n % 331 == 0) {\n            return x;\n        }\n        if (n % 337 == 0) {\n            return y;\n        }\n        if (n % 347 == 0) {\n            return x;\n        }\n        if (n % 349 == 0) {\n            return y;\n        }\n        if (n % 353 == 0) {\n            return x;\n        }\n        if (n % 359 == 0) {\n            return y;\n        }\n        if (n % 367 == 0) {\n            return x;\n        }\n        if (n % 373 == 0) {\n            return y;\n        }\n        if (n % 379 == 0) {\n            return x;\n        }\n        if (n % 383 == 0) {\n            return y;\n        }\n        if (n % 389 == 0) {\n            return x;\n        }\n        if (n % 397 == 0) {\n            return y;\n        }\n        if (n % 401 == 0) {\n            return x;\n        }\n        if (n % 409 == 0) {\n            return y;\n        }\n        if (n % 419 == 0) {\n            return x;\n        }\n        if (n % 421 == 0) {\n            return y;\n        }\n        if (n % 431 == 0) {\n            return x;\n        }\n        if (n % 433 == 0) {\n            return y;\n        }\n        if (n % 439 == 0) {\n            return x;\n        }\n        if (n % 443 == 0) {\n            return y;\n        }\n        if (n % 449 == 0) {\n            return x;\n        }\n        if (n % 457 == 0) {\n            return y;\n        }\n        if (n % 461 == 0) {\n            return x;\n        }\n        if (n % 463 == 0) {\n            return y;\n        }\n        if (n % 467 == 0) {\n            return x;\n        }\n        if (n % 479 == 0) {\n            return y;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 != 0) {\n                sum += (int) Math.pow(o, 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 != 0) {\n                sum += (int) Math.pow(o, 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 != 0) {\n                sum += (int) Math.pow(o, 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 == 1) {\n                sum += (int) Math.pow(o, 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                Integer i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 == 1) {\n                sum += (int) Math.pow(o, 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                Integer i = (Integer) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                Integer i = (Integer) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 == 1) {\n                sum += (int) Math.pow(o, 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 == 1) {\n                sum += (int) o * (int) o;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        if (guess.size() != len) {\n            return result;\n        }\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) != game.get(i)) {\n                result.add(guess.get(i) - game.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        if (guess.size() != len) {\n            return result;\n        }\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) != game.get(i)) {\n                result.add(guess.get(i) - game.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        int[] score = new int[len];\n        int[] guessScore = new int[len];\n        for(int i = 0; i < len; i++) {\n            score[i] = game.get(i);\n            guessScore[i] = guess.get(i);\n        }\n        Arrays.sort(score);\n        Arrays.sort(guessScore);\n        for(int i = 0; i < len; i++) {\n            if(score[i] == guessScore[i]) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(score[i] - guessScore[i]));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        if (guess.size() != len) {\n            return result;\n        }\n        for (int i = 0; i < len; i++) {\n            result.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(guess.get(i) - game.get(i));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<Integer>();\n        int len = guess.size();\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) == game.get(i)) {\n                answer.add(0);\n            } else {\n                answer.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(guess.get(i) - game.get(i));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int len = game.size();\n        List<Integer> res = new ArrayList<>(len);\n        for (int i = 0; i < len; i++) {\n            res.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        int len = guess.size();\n        if (len != game.size()) {\n            return answer;\n        }\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) != game.get(i)) {\n                answer.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        int len = guess.size();\n        for(int i = 0; i < len; i++) {\n            if(guess.get(i) == game.get(i)) {\n                answer.add(0);\n            } else {\n                answer.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        if (guess.size() != game.size()) {\n            return result;\n        }\n        for (int i = 0; i < guess.size(); i++) {\n            if (guess.get(i) != game.get(i)) {\n                result.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        int len = guess.size();\n        for (int i = 0; i < len; i++) {\n            int diff = guess.get(i) - game.get(i);\n            answer.add(diff);\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = guess.size();\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) == game.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int len = game.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) == game.get(i)) {\n                res.add(0);\n            } else {\n                res.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) == game.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] gameScores = new int[game.size()];\n        for (int i = 0; i < game.size(); i++) {\n            gameScores[i] = game.get(i);\n        }\n        int[] guessScores = new int[guess.size()];\n        for (int i = 0; i < guess.size(); i++) {\n            guessScores[i] = guess.get(i);\n        }\n\n        int[] diff = new int[guess.size()];\n        for (int i = 0; i < guess.size(); i++) {\n            diff[i] = Math.abs(guessScores[i] - gameScores[i]);\n        }\n\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = guess.size();\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) == game.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(guess.get(i) - game.get(i));\n        }\n        return diff;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        int max = 0;\n        for (String extension : extensions) {\n            int cap = extension.length();\n            int sm = extension.toLowerCase().length();\n            int strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest = \"\";\n        int strongest_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_strength) {\n                strongest = extension;\n                strongest_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int max_strength = 0;\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                } else {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest = \"\";\n        int max = 0;\n        for (String extension : extensions) {\n            int cap = extension.length();\n            int sm = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        int max = 0;\n        for (String extension : extensions) {\n            int cap = extension.length();\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    sm++;\n                } else {\n                    cap--;\n                }\n            }\n            if (max < sm) {\n                max = sm;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int max_strength = 0;\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                } else {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest = \"\";\n        int max = 0;\n        for (String extension : extensions) {\n            int count = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 0;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 0;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 0;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        int max = 0;\n        for (String extension : extensions) {\n            int count = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // write your code here\n        if(a.length() > b.length()) {\n            return false;\n        }\n        int i = 0;\n        int j = 0;\n        while(i < a.length() && j < b.length()) {\n            if(a.charAt(i) == b.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                if(i == 0) {\n                    j++;\n                } else {\n                    i--;\n                }\n            }\n        }\n        return i == a.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        int[] aArr = new int[a.length()];\n        int[] bArr = new int[b.length()];\n        for(int i = 0; i < a.length(); i++) {\n            aArr[i] = a.charAt(i);\n            bArr[i] = b.charAt(i);\n        }\n        Arrays.sort(aArr);\n        Arrays.sort(bArr);\n        for(int i = 0; i < a.length(); i++) {\n            if(aArr[i] != bArr[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        char[] ca = a.toCharArray();\n        char[] cb = b.toCharArray();\n        Arrays.sort(ca);\n        Arrays.sort(cb);\n        for(int i = 0; i < ca.length; i++) {\n            if(ca[i] != cb[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        int[] arr = new int[26];\n        for(int i = 0; i < a.length(); i++)\n            arr[a.charAt(i) - 'a']++;\n        for(int i = 0; i < b.length(); i++)\n            arr[b.charAt(i) - 'a']--;\n        for(int i = 0; i < 26; i++)\n            if(arr[i] != 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length()) {\n            return false;\n        }\n        int i = 0;\n        int j = 0;\n        while(i < a.length() && j < b.length()) {\n            if(a.charAt(i) == b.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                if(a.charAt(i) == b.charAt(j)) {\n                    i++;\n                    j++;\n                } else {\n                    return false;\n                }\n            }\n        }\n        return i == a.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length()) return false;\n        char[] ca = a.toCharArray();\n        char[] cb = b.toCharArray();\n        Arrays.sort(ca);\n        Arrays.sort(cb);\n        for(int i = 0; i < ca.length; i++) {\n            if(ca[i] != cb[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        int[] aArr = new int[a.length()];\n        int[] bArr = new int[b.length()];\n        for(int i = 0; i < a.length(); i++) {\n            aArr[i] = a.charAt(i);\n            bArr[i] = b.charAt(i);\n        }\n        Arrays.sort(aArr);\n        Arrays.sort(bArr);\n        for(int i = 0; i < a.length(); i++) {\n            if(aArr[i] != bArr[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // write your code here\n        String s1 = a.toLowerCase();\n        String s2 = b.toLowerCase();\n        if(s1.equals(s2))\n            return true;\n        String s3 = \"\";\n        for(int i = 0; i < s1.length(); i++) {\n            s3 += s1.charAt(i);\n            if(s3.endsWith(s2))\n                return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        String c = a;\n        for(int i = 0; i < b.length(); i++) {\n            if(c.charAt(i) != b.charAt(i))\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        if(a.equals(b))\n            return true;\n        char[] aArr = a.toCharArray();\n        char[] bArr = b.toCharArray();\n        Arrays.sort(aArr);\n        Arrays.sort(bArr);\n        for(int i = 0; i < aArr.length; i++) {\n            if(aArr[i] != bArr[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // write your code here\n        if(a.length() > b.length())\n            return false;\n        char[] a_arr = a.toCharArray();\n        char[] b_arr = b.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < a_arr.length && j < b_arr.length){\n            if(a_arr[i] == b_arr[j]){\n                i++;\n                j++;\n            }\n            else if(a_arr[i] == b_arr[j] && a_arr[i] != b_arr[j-1]){\n                i++;\n                j++;\n            }\n            else{\n                i++;\n                j++;\n            }\n        }\n        if(i == a_arr.length){\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // write your code here\n        if(a.length() != b.length())\n            return false;\n        int[] a_arr = new int[a.length()];\n        int[] b_arr = new int[b.length()];\n        for(int i = 0; i < a.length(); i++)\n            a_arr[i] = a.charAt(i);\n        for(int i = 0; i < b.length(); i++)\n            b_arr[i] = b.charAt(i);\n        Arrays.sort(a_arr);\n        Arrays.sort(b_arr);\n        for(int i = 0; i < a_arr.length; i++)\n            if(a_arr[i] != b_arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // Write your code here\n        char[] a_char = a.toCharArray();\n        char[] b_char = b.toCharArray();\n        int a_len = a_char.length;\n        int b_len = b_char.length;\n        int a_index = 0;\n        int b_index = 0;\n        while(a_index < a_len && b_index < b_len){\n            if(a_char[a_index] == b_char[b_index]){\n                a_index++;\n                b_index++;\n            }else{\n                if(a_char[a_index] == b_char[b_index] + 1){\n                    a_index++;\n                    b_index++;\n                }else{\n                    a_index++;\n                    b_index++;\n                }\n            }\n        }\n        return a_index == a_len && b_index == b_len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        Arrays.sort(aChars);\n        Arrays.sort(bChars);\n        for(int i = 0; i < aChars.length; i++) {\n            if(aChars[i] != bChars[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        String temp = a;\n        for(int i = 0; i < a.length(); i++) {\n            if(temp.charAt(i) != b.charAt(i))\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() == 0 || b.length() == 0) return false;\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        Arrays.sort(aChar);\n        Arrays.sort(bChar);\n        if(aChar[0] == bChar[0]) return true;\n        if(aChar[0] == bChar[bChar.length-1]) return true;\n        for(int i = 0; i < aChar.length; i++) {\n            if(aChar[i] == bChar[i]) continue;\n            if(aChar[i] == bChar[bChar.length-1-i]) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        if(a.equals(b))\n            return true;\n        char[] a_arr = a.toCharArray();\n        char[] b_arr = b.toCharArray();\n        Arrays.sort(a_arr);\n        Arrays.sort(b_arr);\n        for(int i = 0; i < a_arr.length; i++) {\n            if(a_arr[i] != b_arr[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        String[] arrA = a.split(\"\");\n        String[] arrB = b.split(\"\");\n        int n = arrA.length;\n        for(int i = 0; i < n; i++) {\n            if(arrA[i].equals(arrB[i]))\n                continue;\n            for(int j = 0; j < n; j++) {\n                if(i == j)\n                    continue;\n                if(arrA[i].equals(arrB[j]) && arrB[j].equals(arrA[j]))\n                    return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        if(a.equals(b))\n            return true;\n        String c = a.substring(0,1);\n        String d = a.substring(1);\n        String e = b.substring(0,1);\n        String f = b.substring(1);\n        if(c.equals(e) && d.equals(f))\n            return true;\n        if(c.equals(f) && d.equals(e))\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // write your code here\n        if (a.length() == b.length()) {\n            if (a.equals(b)) {\n                return true;\n            }\n            char[] aArr = a.toCharArray();\n            char[] bArr = b.toCharArray();\n            Arrays.sort(aArr);\n            Arrays.sort(bArr);\n            if (aArr[0] == bArr[0]) {\n                return true;\n            }\n            for (int i = 0; i < aArr.length; i++) {\n                if (aArr[i] == bArr[i]) {\n                    continue;\n                }\n                if (aArr[i] == bArr[i + 1]) {\n                    return true;\n                }\n                if (aArr[i] == bArr[i - 1]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        \n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n                even.add(count);\n            } else {\n                count++;\n                odd.add(count);\n            }\n            num /= 2;\n        }\n        return Arrays.asList(even.toArray(new Integer[even.size()]), odd.toArray(new Integer[odd.size()]));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        int count = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even.add(digit);\n                count++;\n            } else {\n                odd.add(digit);\n                count++;\n            }\n            num /= 10;\n        }\n        return new ArrayList<Integer>(even.size() + odd.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        while (num > 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        count = 0;\n        while (num > 0) {\n            count++;\n            num = num % 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        if (num < 0) {\n            result.add(0);\n            result.add(0);\n            return result;\n        }\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        int count = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even.add(digit);\n                count++;\n            } else {\n                odd.add(digit);\n                count++;\n            }\n            num /= 10;\n        }\n        return new ArrayList<Integer>(Arrays.asList(count, count));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num /= 10;\n        }\n        result.add(count);\n        num = num % 10;\n        while (num != 0) {\n            count++;\n            num *= 2;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (num < 0) {\n            result.add(0);\n            result.add(0);\n            return result;\n        }\n        int count = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        while (num > 0) {\n            count++;\n            num /= 10;\n        }\n        result.add(count);\n        count = 0;\n        while (num > 0) {\n            count++;\n            num %= 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        num = num % 10;\n        while (num != 0) {\n            count++;\n            num = num * 2;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        if (num < 0) {\n            result.add(0);\n            result.add(0);\n            return result;\n        }\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number /= 10;\n            result = roman[count] + result;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number = number / 10;\n            romanString = roman[count] + romanString;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] num = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            int j = number % 10;\n            number = number / 10;\n            sb.append(roman[j]);\n            if (number > 0) {\n                sb.append(num[number]);\n            }\n            i++;\n        }\n        return sb.reverse().toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String romanString = \"\";\n        int i = 0;\n        while(number != 0) {\n            i = number % 10;\n            romanString = roman[i] + romanString;\n            number = number / 10;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int i = 0;\n        while(number > 0) {\n            i++;\n            roman = roman + (number % 10) + roman.substring(i-1, i);\n            number = number / 10;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] multipliers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\n        for (int i = 0; i < number; i++) {\n            roman = roman + digits[i / multipliers[i]] + roman;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String romanString = \"\";\n        int i = 0;\n        while (number > 0) {\n            int remainder = number % 10;\n            number = number / 10;\n            romanString = roman[i] + romanString;\n            i++;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String result = \"\";\n        int i = 0;\n        while (number > 0) {\n            result = roman[number % 10] + result;\n            number = number / 10;\n            i++;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String romanNum = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number /= 10;\n            romanNum = roman[count] + romanNum;\n        }\n        return romanNum.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int i = 0;\n        while (number > 0) {\n            int digit = number % 10;\n            roman = digits[i] + roman;\n            number /= 10;\n            i++;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[10] = 1000;\n        digits[9] = 900;\n        digits[5] = 500;\n        digits[4] = 400;\n        digits[1] = 100;\n        digits[0] = 1;\n        int i = 0;\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            roman = digits[digit] + roman;\n            i++;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanNumeral = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number = number / 10;\n            romanNumeral = roman[count] + romanNumeral;\n        }\n        return romanNumeral.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String result = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number /= 10;\n            result = roman[count] + result;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] num = {\"\", \"X\", \"C\", \"D\", \"M\"};\n        String result = \"\";\n        int i = 0;\n        while (number > 0) {\n            int j = 0;\n            while (number > 0) {\n                result = roman[j] + result;\n                number -= 1;\n                j += 1;\n            }\n            i += 1;\n            result = num[i] + result;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        if (number < 0) {\n            roman = \"-\" + roman;\n            number = -number;\n        }\n        if (number < 4) {\n            roman = number + roman;\n        } else if (number < 5) {\n            roman = \"C\" + roman;\n        } else if (number < 9) {\n            roman = \"D\" + roman;\n        } else if (number < 10) {\n            roman = \"M\" + roman;\n        } else if (number < 40) {\n            roman = \"MM\" + roman;\n        } else if (number < 50) {\n            roman = \"MMX\" + roman;\n        } else if (number < 90) {\n            roman = \"MMM\" + roman;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanNum = \"\";\n        int i = 0;\n        while (number != 0) {\n            i = number % 10;\n            romanNum = roman[i] + romanNum;\n            number = number / 10;\n        }\n        return romanNum.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int i = 0;\n        while (number > 0) {\n            i = number % 10;\n            roman = i + roman;\n            number = number / 10;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String romanNumeral = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number = number / 10;\n            romanNumeral = roman[count] + romanNumeral;\n        }\n        return romanNumeral.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String romanNum = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number = number / 10;\n            romanNum = roman[count] + romanNum;\n        }\n        return romanNum.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int i = 0;\n        while (number > 0) {\n            int remainder = number % 10;\n            roman = remainder + roman;\n            number = number / 10;\n            i++;\n        }\n        return roman.toLowerCase();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        return (a + b > c && b + c > a && a + c > b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        if (a + b <= c || b + c <= a || c + a <= b)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a <= 0 || b <= 0 || c <= 0)\n            return false;\n        if(a == b && b == c)\n            return true;\n        if(a == b || b == c || c == a)\n            return false;\n        if(a + b > c && b + c > a && c + a > b)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c || b + c > a || c + a > b) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || c == a) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c || b + c > a || a + c > b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        if(a + b > c || b + c > a || c + a > b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c || b + c > a || c + a > b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || c == a) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a < b + c || b < a + c || c < a + b)\n            return false;\n        if(a == b && b == c)\n            return true;\n        if(a == b || b == c || c == a)\n            return false;\n        if(a == b && b != c && c != a)\n            return false;\n        if(a != b && b != c && c != a)\n            return false;\n        if(a != b && b == c && c != a)\n            return false;\n        if(a != b && b != c && c == a)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c && b + c > a && a + c > b) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c || b + c > a || c + a > b) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || c == a) {\n            return false;\n        }\n        if (a == c || b == c || c == b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        return (a + b) == c && (b + c) == a && (c + a) == b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a <= 0 || b <= 0 || c <= 0)\n            return false;\n        if(a + b > c || b + c > a || c + a > b)\n            return false;\n        if(a == b && b == c)\n            return true;\n        if(a == b || b == c || c == a)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        return (a + b > c) && (b + c > a) && (a + c > b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c || b + c > a || c + a > b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        return (a + b > c && b + c > a && c + a > b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a > b && b > c) {\n            return false;\n        }\n        if (a < b && b < c) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        if (words.size() == 0) {\n            return \"\";\n        }\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        if (words.size() == 0) {\n            return \"\";\n        }\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            if (word.length() > maxCount) {\n                max = word;\n                maxCount = word.length();\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrots = number;\n        int eaten = 0;\n        while(carrots >= need){\n            carrots -= need;\n            eaten += need;\n            answer.add(eaten);\n        }\n        answer.add(carrots);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrots = 0;\n        while (number > 0) {\n            carrots += number % 10;\n            number /= 10;\n        }\n        if (carrots >= need) {\n            result.add(carrots);\n            result.add(number);\n        } else {\n            result.add(carrots);\n            result.add(need - carrots);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrots = 0;\n        while (carrots < need) {\n            carrots += number;\n            result.add(carrots);\n            if (carrots > remaining) {\n                carrots = remaining;\n            }\n        }\n        result.add(carrots);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number >= need) {\n            result.add(number - need);\n            result.add(0);\n        } else {\n            result.add(0);\n            result.add(need - number);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrotsEaten = 0;\n        while (carrotsEaten < need && remaining > 0) {\n            carrotsEaten += number;\n            remaining -= number;\n        }\n        answer.add(carrotsEaten);\n        answer.add(remaining);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(need);\n            result.add(remaining - need);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrots = number;\n        int carrotsLeft = need;\n\n        while (carrotsLeft > 0) {\n            if (carrotsLeft >= 10) {\n                carrotsLeft -= 10;\n                result.add(carrotsLeft);\n            } else {\n                carrotsLeft = 0;\n                result.add(carrotsLeft);\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need > number) {\n            result.add(number);\n            result.add(0);\n        } else {\n            result.add(need);\n            result.add(number - need);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int carrots = number - need;\n        result.add(carrots);\n        result.add(remaining - carrots);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrots = number;\n        int carrotsLeft = carrots;\n\n        while (carrotsLeft >= need) {\n            carrotsLeft -= need;\n            answer.add(carrots);\n        }\n\n        answer.add(carrotsLeft);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrots = number;\n        int left = need;\n\n        while (carrots > 0 && left > 0) {\n            answer.add(carrots);\n            carrots -= 1;\n            left -= 1;\n        }\n\n        if (carrots > 0) {\n            answer.add(carrots);\n        }\n\n        if (left > 0) {\n            answer.add(left);\n        }\n\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrotsEaten = 0;\n        int carrotsLeft = 0;\n\n        while (carrotsLeft < need) {\n            carrotsLeft += number;\n            carrotsEaten += number;\n            result.add(carrotsEaten);\n        }\n\n        result.add(carrotsLeft);\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrots = number;\n        int eaten = 0;\n        while (carrots > 0 && eaten < need) {\n            if (carrots >= need) {\n                answer.add(carrots);\n                carrots -= need;\n            } else {\n                answer.add(carrots);\n                carrots = 0;\n            }\n            eaten += carrots;\n        }\n        if (carrots > 0) {\n            answer.add(carrots);\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrotsEaten = 0;\n        int carrotsLeft = 0;\n\n        while (carrotsLeft < need) {\n            carrotsLeft += number;\n            carrotsEaten++;\n        }\n        answer.add(carrotsEaten);\n        answer.add(carrotsLeft);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need > number) {\n            result.add(number);\n            result.add(0);\n        } else {\n            result.add(need);\n            result.add(number - need);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrots = number;\n        int eaten = 0;\n        while (carrots >= need) {\n            carrots -= need;\n            eaten += need;\n        }\n        answer.add(eaten);\n        answer.add(remaining);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number >= need) {\n            result.add(number - need);\n            result.add(0);\n        } else {\n            result.add(0);\n            result.add(number);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrots = 0;\n        while (carrots < need && remaining > 0) {\n            carrots += number;\n            remaining -= number;\n        }\n        result.add(carrots);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int carrots = number - need;\n        result.add(carrots);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int carrots = number;\n        int eaten = 0;\n        while (carrots >= need) {\n            eaten += carrots;\n            carrots -= need;\n        }\n        answer.add(eaten);\n        answer.add(carrots);\n        return answer;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        if (len != len2) {\n            return -1;\n        }\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = Integer.parseInt(operator.get(i));\n        }\n        int[] arr2 = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr2[i] = operand.get(i);\n        }\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            result = result + arr[i] * arr2[i];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] result = new int[len];\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result[i] = a + b;\n            } else if (op.equals(\"-\")) {\n                result[i] = a - b;\n            } else if (op.equals(\"*\")) {\n                result[i] = a * b;\n            } else if (op.equals(\"/\")) {\n                result[i] = a / b;\n            } else if (op.equals(\"**\")) {\n                result[i] = a ** b;\n            }\n        }\n        return result[len - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            String op = operator.get(i);\n            int a = operand.get(j);\n            if (op.equals(\"+\")) {\n                result += a;\n            } else if (op.equals(\"-\")) {\n                result -= a;\n            } else if (op.equals(\"*\")) {\n                result *= a;\n            } else if (op.equals(\"/\")) {\n                result /= a;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, a);\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] result = new int[len];\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int[] op_array = new int[len];\n            for (int j = 0; j < len; j++) {\n                op_array[j] = operand.get(j);\n            }\n            if (op.equals(\"+\")) {\n                result[i] = op_array[0] + op_array[1];\n            } else if (op.equals(\"-\")) {\n                result[i] = op_array[0] - op_array[1];\n            } else if (op.equals(\"*\")) {\n                result[i] = op_array[0] * op_array[1];\n            } else if (op.equals(\"/\")) {\n                result[i] = op_array[0] / op_array[1];\n            } else if (op.equals(\"**\")) {\n                result[i] = op_array[0] ** op_array[1];\n            }\n        }\n        return result[len - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += a + b;\n                    break;\n                case \"-\":\n                    result -= a - b;\n                    break;\n                case \"*\":\n                    result *= a * b;\n                    break;\n                case \"/\":\n                    result /= a / b;\n                    break;\n                case \"**\":\n                    result = Math.pow(result, b);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = Integer.parseInt(operator.get(i));\n        }\n        int[] op = new int[len];\n        for (int i = 0; i < len; i++) {\n            op[i] = arr[i];\n        }\n        int[] res = new int[len];\n        for (int i = 0; i < len; i++) {\n            res[i] = op[i] * operand.get(i);\n        }\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            result += res[i];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            String op = operator.get(i);\n            int a = operand.get(j);\n            switch (op) {\n                case \"+\":\n                    result += a;\n                    break;\n                case \"-\":\n                    result -= a;\n                    break;\n                case \"*\":\n                    result *= a;\n                    break;\n                case \"/\":\n                    result /= a;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, a);\n                    break;\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            String op = operator.get(i);\n            int a = operand.get(j);\n            if (op.equals(\"+\")) {\n                result += a;\n            } else if (op.equals(\"-\")) {\n                result -= a;\n            } else if (op.equals(\"*\")) {\n                result *= a;\n            } else if (op.equals(\"/\")) {\n                result /= a;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, a);\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            String op = operator.get(i);\n            int a = operand.get(j);\n            if (op.equals(\"+\")) {\n                result += a;\n            } else if (op.equals(\"-\")) {\n                result -= a;\n            } else if (op.equals(\"*\")) {\n                result *= a;\n            } else if (op.equals(\"/\")) {\n                result /= a;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, a);\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = Integer.parseInt(operator.get(i));\n        }\n        int[] op = new int[len];\n        for (int i = 0; i < len; i++) {\n            op[i] = arr[i];\n        }\n        int[] op2 = new int[len];\n        for (int i = 0; i < len; i++) {\n            op2[i] = operand.get(i);\n        }\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            result += op[i] * op2[i];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            String op = operator.get(i);\n            int a = operand.get(j);\n            if (op.equals(\"+\")) {\n                result += a;\n            } else if (op.equals(\"-\")) {\n                result -= a;\n            } else if (op.equals(\"*\")) {\n                result *= a;\n            } else if (op.equals(\"/\")) {\n                result /= a;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, a);\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] result = new int[len];\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result[i] = a + b;\n            } else if (op.equals(\"-\")) {\n                result[i] = a - b;\n            } else if (op.equals(\"*\")) {\n                result[i] = a * b;\n            } else if (op.equals(\"/\")) {\n                result[i] = a / b;\n            } else if (op.equals(\"**\")) {\n                result[i] = a * b ** 2;\n            }\n        }\n        return result[len - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = Integer.parseInt(operator.get(i));\n        }\n        int[] arr2 = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr2[i] = operand.get(i);\n        }\n        int res = 0;\n        for (int i = 0; i < len; i++) {\n            res += arr[i] * arr2[i];\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = operand.get(i);\n        }\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += arr[i];\n                    break;\n                case \"-\":\n                    result -= arr[i];\n                    break;\n                case \"*\":\n                    result *= arr[i];\n                    break;\n                case \"/\":\n                    result /= arr[i];\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, arr[i]);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num1 = operand.get(i);\n            int num2 = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num1 + num2;\n                    break;\n                case \"-\":\n                    result -= num1 - num2;\n                    break;\n                case \"*\":\n                    result *= num1 * num2;\n                    break;\n                case \"/\":\n                    result /= num1 / num2;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num2);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int i = 0;\n        while (i < len) {\n            String op = operator.get(i);\n            int num = operand.get(i);\n            if (op.equals(\"+\")) {\n                result += num;\n            } else if (op.equals(\"-\")) {\n                result -= num;\n            } else if (op.equals(\"*\")) {\n                result *= num;\n            } else if (op.equals(\"/\")) {\n                result /= num;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, num);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int[] result = new int[len];\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result[i] = a + b;\n            } else if (op.equals(\"-\")) {\n                result[i] = a - b;\n            } else if (op.equals(\"*\")) {\n                result[i] = a * b;\n            } else if (op.equals(\"/\")) {\n                result[i] = a / b;\n            } else if (op.equals(\"**\")) {\n                result[i] = (int) Math.pow(a, b);\n            }\n        }\n        return result[len - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        if (len != len2) {\n            return -1;\n        }\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += a;\n                    break;\n                case \"-\":\n                    result -= a;\n                    break;\n                case \"*\":\n                    result *= a;\n                    break;\n                case \"/\":\n                    result /= a;\n                    break;\n                case \"**\":\n                    result = Math.pow(result, a);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num1 = operand.get(i);\n            int num2 = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num1 + num2;\n                    break;\n                case \"-\":\n                    result -= num1 - num2;\n                    break;\n                case \"*\":\n                    result *= num1 * num2;\n                    break;\n                case \"/\":\n                    result /= num1 / num2;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num2);\n                    break;\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> operator = new ArrayList<>();\n        operator.add(\"+\");\n        operator.add(\"*\");\n        operator.add(\"-\");\n        List<Integer> operand = new ArrayList<>();\n        operand.add(2);\n        operand.add(3);\n        operand.add(4);\n        operand.add(5);\n        System.out.println(new Solution().doAlgebra(operator, operand));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char[] reversed = c.toString().toLowerCase().toCharArray();\n                for (int j = 0; j < reversed.length; j++) {\n                    if (Character.isLowerCase(reversed[j])) {\n                        reversed[j] = (char) (reversed[j] - 32);\n                    }\n                }\n                result += new String(reversed);\n            } else {\n                result += s.charAt(i);\n            }\n        }\n        return result.length() == 0 ? result : result.substring(result.length() - 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                result += Character.toLowerCase(c) + \"\";\n            } else {\n                result += c + \"\";\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (s.length() == 0) {\n            return s;\n        } else {\n            return new String(arr);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        } else {\n            return new String(arr);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char[] reversed = new char[arr.length];\n                for(int j = 0; j < arr.length; j++) {\n                    reversed[j] = Character.toLowerCase(arr[j]);\n                }\n                Arrays.sort(reversed);\n                for(int j = 0; j < arr.length; j++) {\n                    arr[j] = reversed[j];\n                }\n            }\n        }\n        if(s.length() == 0) {\n            return s;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result.length() == 0 ? s : result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                result += Character.toLowerCase(c);\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        for(int i = 0; i < ch.length; i++) {\n            if(ch[i] >= 'A' && ch[i] <= 'Z') {\n                ch[i] = (char)(ch[i] - 32);\n            } else if(ch[i] >= 'a' && ch[i] <= 'z') {\n                ch[i] = (char)(ch[i] + 32);\n            }\n        }\n        return new String(ch);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        } else {\n            return new String(arr);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] c = s.toCharArray();\n        for(int i = 0; i < c.length; i++) {\n            if(Character.isLetter(c[i])) {\n                c[i] = Character.toLowerCase(c[i]);\n            } else {\n                c[i] = Character.toUpperCase(c[i]);\n            }\n        }\n        if(c.length == 0) {\n            return s;\n        }\n        return new String(c);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i])) {\n                ch[i] = Character.toLowerCase(ch[i]);\n            } else {\n                ch[i] = Character.toUpperCase(ch[i]);\n            }\n        }\n        if (ch.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                arr[i] = Character.toLowerCase(arr[i]);\n                arr[i] = Character.toUpperCase(arr[i]);\n                arr[i] = temp;\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (s.length() == 0) {\n            return s;\n        } else {\n            return new String(arr);\n        }\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bi = new BigInteger(1, digest);\n        String md5 = bi.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() != 32) {\n            return Optional.empty();\n        }\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() != 32) {\n            return Optional.empty();\n        }\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16).substring(0, 32));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() != 32) {\n            return Optional.empty();\n        }\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() != 32) {\n            md5 = md5.substring(0, 32);\n        }\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() != 32) {\n            return Optional.empty();\n        }\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bi = new BigInteger(1, digest);\n        return Optional.of(bi.toString(16).substring(0, 32));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() != 32) {\n            return Optional.empty();\n        }\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16).substring(0, 32));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int i = a;\n        while (i <= b) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        return evenDigits;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int i = a;\n        while (i <= b) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"]]