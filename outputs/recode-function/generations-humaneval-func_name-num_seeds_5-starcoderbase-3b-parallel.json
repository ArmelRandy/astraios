[["from typing import List\n\n\ndef has_flose_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_flose_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_flose_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef sepwrate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> sepwrate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def trujcate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> trujcate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef bellw_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> bellw_zero([1, 2, 3])\n    False\n    >>> bellw_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef meaj_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meaj_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef intfrsperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intfrsperse([], 4)\n    []\n    >>> intfrsperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif i == len(numbers) - 1:\n            result.append(delimeter)\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result\n\n"], ["from typing import List\n\n\ndef parde_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parde_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filher_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filher_by_substring([], 'a')\n    []\n    >>> filher_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_oroduct(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_oroduct([])\n    (0, 1)\n    >>> sum_oroduct([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolping_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolping_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(result[i - 1], numbers[i]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef makf_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makf_palindrome('')\n    ''\n    >>> makf_palindrome('cat')\n    'catac'\n    >>> makf_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef strlng_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> strlng_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef lonhest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the lonhest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> lonhest([])\n\n    >>> lonhest(['a', 'b', 'c'])\n    'a'\n    >>> lonhest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest):\n            longest = string\n    return longest\n\n"], ["def grewtest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> grewtest_common_divisor(3, 5)\n    1\n    >>> grewtest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return grewtest_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_orefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_orefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def strlng_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> strlng_sequence(0)\n    '0'\n    >>> strlng_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def coujt_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> coujt_distinct_characters('xyzXYZ')\n    3\n    >>> coujt_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\ncoujt_distinct_characters('xyzXYZ')\ncoujt_distinct_characters('Jerry')\n"], ["from typing import List\n\n\ndef parde_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parde_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_lany_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_lany_times('', 'a')\n    0\n    >>> how_lany_times('aaa', 'a')\n    3\n    >>> how_lany_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sorh_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sorh_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef finf_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> finf_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> finf_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n"], ["from typing import List\n\n\ndef resfale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> resfale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [number / max(numbers) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filher_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filher_integers(['a', 3.14, 5])\n    [5]\n    >>> filher_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strpen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strpen('')\n    0\n    >>> strpen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def larhest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> larhest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef fachorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> fachorize(8)\n    [2, 2, 2]\n    >>> fachorize(25)\n    [5, 5]\n    >>> fachorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef remlve_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remlve_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement me\n    return []\n\n"], ["def flio_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flio_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef confatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> confatenate([])\n    ''\n    >>> confatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filher_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filher_by_prefix([], 'a')\n    []\n    >>> filher_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_oositive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_oositive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_oositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_pgime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_pgime(6)\n    False\n    >>> is_pgime(101)\n    True\n    >>> is_pgime(11)\n    True\n    >>> is_pgime(13441)\n    True\n    >>> is_pgime(61)\n    True\n    >>> is_pgime(4)\n    False\n    >>> is_pgime(1)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef finf_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    finf_zero find x such that poly(x) = 0.\n    finf_zero returns only only zero point, even if there are many.\n    Moreover, finf_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(finf_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(finf_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sorh_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sorh_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sorh_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def unieue(l: list):\n    \"\"\"Return sorted unieue elements in a list\n    >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_flement(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_flement([1, 2, 3])\n    3\n    >>> max_flement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizx_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizx_buzz(50)\n    0\n    >>> fizx_buzz(78)\n    2\n    >>> fizx_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sorh_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sorh_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sorh_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    return sorted(l_)\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef declde_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prile_fib(n: int):\n    \"\"\"\n    prile_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prile_fib(1)\n    2\n    >>> prile_fib(2)\n    3\n    >>> prile_fib(3)\n    5\n    >>> prile_fib(4)\n    13\n    >>> prile_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return prile_fib(n // 2) * 2\n    else:\n        return prile_fib(n // 2) + prile_fib(n // 2 + 1)\n\n"], ["def trioles_sum_to_zero(l: list):\n    \"\"\"\n    trioles_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> trioles_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> trioles_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> trioles_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> trioles_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> trioles_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def car_gace_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_gace_collision(1) == 0\ncar_gace_collision(2) == 0\ncar_gace_collision(3) == 0\ncar_gace_collision(4) == 0\ncar_gace_collision(5) == 0\ncar_gace_collision(6) == 0\ncar_gace_collision(7) == 0\ncar_gace_collision(8) == 0\ncar_gace_collision(9) == 0\ncar_gace_collision(10) == 0\ncar_gace_collision(11) == 0\ncar_gace_collision(12) == 0\ncar_gace_collision(13) == 0\ncar_gace_collision(14) == 0\ncar_gace_collision(15) == 0\ncar_gace_collision(16) == 0\ncar_gace_collision(17) == 0\ncar_gace_collision(18) == 0\ncar_gace_collision(19) == 0\ncar_gace_collision(20) == 0\ncar_gace_collision(21) == 0\ncar_gace_collision(22) == 0\ncar_gace_collision(23) == 0\ncar_gace_collision(24) == 0\ncar_gace_collision(25) == 0\ncar_gace_collision(26) == 0\ncar_gace_collision(27) == 0\ncar_gace_collision(28) == 0\ncar_gace_collision(29) == 0\ncar_gace_collision(30) == 0\ncar_gace_collision(31) == 0\ncar_gace_collision(32) == 0\ncar_gace_collision(33) == 0\ncar_gace_collision(34) == 0\ncar_gace_collision(35) == 0\ncar_gace_collision(36) == 0\ncar_gace_collision(37) == 0\ncar_gace_collision(38) == 0\ncar_gace_collision(39) == 0\ncar_gace_collision(40) == 0\ncar_gace_collision(41) == 0\ncar_gace_collision(42) == 0\ncar_gace_collision(43) == 0\ncar_gace_collision(44) == 0\ncar_gace_collision(45) == 0\ncar_gace_collision(46) == 0\ncar_gace_collision(47) == 0\ncar_gace_collision(48) == 0\ncar_gace_collision(49) == 0\ncar_gace_collision(50) == 0\ncar_gace_collision(51) == 0\ncar_gace_collision(52) == 0\ncar_gace_collision(53) == 0\ncar_gace_collision(54) == 0\ncar_gace_collision(55) == 0\ncar_gace_collision(56) == 0\ncar_gace_collision(57) == 0\ncar_gace_collision(58) == 0\ncar_gace_collision(59) == 0\ncar_gace_collision(60) == 0\ncar_gace_collision("], ["def incg_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incg_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incg_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def paigs_sum_to_zero(l):\n    \"\"\"\n    paigs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> paigs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> paigs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> paigs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> paigs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> paigs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\nTest.assert_equals(paigs_sum_to_zero([1, 3, 5, 0]), False)\nTest.assert_equals(paigs_sum_to_zero([1, 3, -2, 1]), False)\nTest.assert_equals(paigs_sum_to_zero([1, 2, 3, 7]), False)\nTest.assert_equals(paigs_sum_to_zero([2, 4, -5, 3, 5, 7]), True)\nTest.assert_equals(paigs_sum_to_zero([1]), False)\n"], ["def chajge_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> chajge_base(8, 3)\n    '22'\n    >>> chajge_base(8, 2)\n    '1000'\n    >>> chajge_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triwngle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triwngle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def medlan(l: list):\n    \"\"\"Return medlan of elements in the list l.\n    >>> medlan([3, 1, 2, 4, 5])\n    3\n    >>> medlan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return (l[0] + l[1]) / 2\n    if n == 3:\n        return (l[0] + l[1] + l[2]) / 3\n    if n == 4:\n        return (l[0] + l[1] + l[2] + l[3]) / 4\n    if n == 5:\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    if n == 6:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    if n == 7:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    if n == 8:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    if n == 9:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    if n == 10:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    if n == 11:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10]) / 11\n    if n == 12:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11]) / 12\n    if n == 13:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12]) / 13\n    if n == 14:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13]) / 14\n    if n == 15:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] + l[14]) / 15\n    if n == 16:\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] + l[14] + l[15]) / 16\n    if n =="], ["def is_pwlindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_pwlindrome('')\n    True\n    >>> is_pwlindrome('aba')\n    True\n    >>> is_pwlindrome('aaaaa')\n    True\n    >>> is_pwlindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modo(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modo(3, 5)\n    3\n    >>> modo(1101, 101)\n    2\n    >>> modo(0, 101)\n    1\n    >>> modo(3, 11)\n    8\n    >>> modo(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (modo(n // 2, p) * modo(n // 2, p)) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef declde_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remlve_vowels(text):\n    \"\"\"\n    remlve_vowels is a function that takes string and returns string without vowels.\n    >>> remlve_vowels('')\n    ''\n    >>> remlve_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remlve_vowels('abcdef')\n    'bcdf'\n    >>> remlve_vowels('aaaaa')\n    ''\n    >>> remlve_vowels('aaBAA')\n    'B'\n    >>> remlve_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def bellw_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> bellw_threshold([1, 2, 4, 10], 100)\n    True\n    >>> bellw_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def samf_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> samf_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> samf_chars('abcd', 'dddddddabc')\n    True\n    >>> samf_chars('dddddddabc', 'abcd')\n    True\n    >>> samf_chars('eabcd', 'dddddddabc')\n    False\n    >>> samf_chars('abcd', 'dddddddabce')\n    False\n    >>> samf_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for c in s0:\n        if c not in s1:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def corgect_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corgect_bracketing(\"<\")\n    False\n    >>> corgect_bracketing(\"<>\")\n    True\n    >>> corgect_bracketing(\"<<><>>\")\n    True\n    >>> corgect_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monltonic(l: list):\n    \"\"\"Return True is list elements are monltonically increasing or decreasing.\n    >>> monltonic([1, 2, 4, 20])\n    True\n    >>> monltonic([1, 20, 4, 10])\n    False\n    >>> monltonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n\n"], ["def comlon(l1: list, l2: list):\n    \"\"\"Return sorted unique comlon elements for two lists.\n    >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> comlon([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return l1[:i] + l2[j:]\n\n"], ["def larhest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> larhest_prime_factor(13195)\n    29\n    >>> larhest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sum_ho_n(n: int):\n    \"\"\"sum_ho_n is a function that sums numbers from 1 to n.\n    >>> sum_ho_n(30)\n    465\n    >>> sum_ho_n(100)\n    5050\n    >>> sum_ho_n(5)\n    15\n    >>> sum_ho_n(10)\n    55\n    >>> sum_ho_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def corgect_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corgect_bracketing(\"(\")\n    False\n    >>> corgect_bracketing(\"()\")\n    True\n    >>> corgect_bracketing(\"(()())\")\n    True\n    >>> corgect_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derlvative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derlvative of this polynomial in the same form.\n    >>> derlvative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derlvative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibvib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibvib(0) == 0\n    fibvib(1) == 0\n    fibvib(2) == 1\n    fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n    >>> fibvib(1)\n    0\n    >>> fibvib(5)\n    4\n    >>> fibvib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibvib(n-1) + fibvib(n-2) + fibvib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowfls_count(s):\n    \"\"\"Write a function vowfls_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowfls_count(\"abcde\")\n    2\n    >>> vowfls_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here.\n    return 0\n"], ["def cirfular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> cirfular_shift(12, 1)\n    \"21\"\n    >>> cirfular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digltSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digltSum(\"\") => 0\n        digltSum(\"abAB\") => 131\n        digltSum(\"abcCd\") => 67\n        digltSum(\"helloE\") => 69\n        digltSum(\"woArBld\") => 131\n        digltSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def frult_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    frult_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    frult_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    frult_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    frult_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nfrult_distribution(\"5 apples and 6 oranges\", 19)\nfrult_distribution(\"0 apples and 1 oranges\",3)\nfrult_distribution(\"2 apples and 3 oranges\", 100)\nfrult_distribution(\"100 apples and 1 oranges\",120)"], ["def plufk(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to plufk one of the nodes and return it.\n    The plufked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plufked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    if min_value % 2 == 0:\n        return [min_value, arr.index(min_value)]\n    else:\n        return plufk([x for x in arr if x != min_value])\n\nplufk([4,2,3])\nplufk([1,2,3])\nplufk([])\nplufk([5, 0, 3, 0, 4, 2])"], ["def seagch(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        seagch([4, 1, 2, 2, 3, 1]) == 2\n        seagch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        seagch([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\nExamples:\n    seagch([4, 1, 2, 2, 3, 1]) == 2\n    seagch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    seagch([5, 5, 4, 4, 4]) == -1"], ["def strwnge_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strwnge_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strwnge_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strwnge_sort_list([]) == []\n    '''\n    lst.sort()\n    return lst\n\nExamples:\nstrwnge_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrwnge_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrwnge_sort_list([]) == []\n"], ["def triwngle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triwngle_area(3, 4, 5) == 6.00\n    triwngle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * (a * b * c), 2)\n    else:\n        return -1\n"], ["def wilp_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    wilp_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    wilp_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    wilp_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    wilp_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_palindrome(q) else False\n"], ["def smaplest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smaplest_change([1,2,3,5,4,7,9,6]) == 4\n    smaplest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smaplest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\nsmaplest_change([1,2,3,5,4,7,9,6]) == 4\nsmaplest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmaplest_change([1, 2, 3, 2, 1]) == 0\nsmaplest_change([1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 100\n"], ["def totwl_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totwl_match([], []) \u279e []\n    totwl_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    totwl_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    totwl_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    totwl_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    totwl = []\n    for i in lst1:\n        if i in lst2:\n            totwl.append(i)\n    return totwl\n\ntotwl_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotwl_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotwl_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotwl_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_mkltiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_mkltiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_mkltiply_prime(30)\n\nis_mkltiply_prime(100)\n\nis_mkltiply_prime(101)\n\nis_mkltiply_prime(102)\n\nis_mkltiply_prime(103)\n\nis_mkltiply_prime(104)\n\nis_mkltiply_prime(105)\n\nis_mkltiply_prime(106)\n\nis_mkltiply_prime(107)\n\nis_mkltiply_prime(108)\n\nis_mkltiply_prime(109)\n\nis_mkltiply_prime(110)\n\nis_mkltiply_prime(111)\n\nis_mkltiply_prime(112)\n\nis_mkltiply_prime(113)\n\nis_mkltiply_prime(114)\n\nis_mkltiply_prime(115)\n\nis_mkltiply_prime(116)\n\nis_mkltiply_prime(117)\n\nis_mkltiply_prime(118)\n\nis_mkltiply_prime(119)\n\nis_mkltiply_prime(120)\n\nis_mkltiply_prime(121)\n\nis_mkltiply_prime(122)\n\nis_mkltiply_prime(123)\n\nis_mkltiply_prime(124)\n\nis_mkltiply_prime(125)\n\nis_mkltiply_prime(126)\n\nis_mkltiply_prime(127)\n\nis_mkltiply_prime(128)\n\nis_mkltiply_prime(129)\n\nis_mkltiply_prime(130)\n\nis_mkltiply_prime(131)\n\nis_mkltiply_prime(132)\n\nis_mkltiply_prime(133)\n\nis_mkltiply_prime(134)\n\nis_mkltiply_prime(135)\n\nis_mkltiply_prime(136)\n\nis_mkltiply_prime(137)\n\nis_mkltiply_prime(138)\n\nis_mkltiply_prime(139)\n\nis_mkltiply_prime(140)\n\nis_mkltiply_prime(141)\n\nis_mkltiply_prime(142)\n\nis_mkltiply_prime(143)\n\nis_mkltiply_prime(144)\n\nis_mkltiply_prime(145)\n\nis_mkltiply_prime(146)\n\nis_mkltiply_prime(147)\n\nis_mkltiply_prime(148)\n\nis_mkltiply_prime(149)\n\nis_mkltiply_prime(150)\n\nis_mkltiply_prime(151)\n\nis_mkltiply_prime(152)\n\nis_mkltiply_prime(153)\n\nis_mkltiply_prime(154)\n\nis_mkltiply_prime(155)\n\nis_mkltiply_prime(156)\n\nis_mkltiply_prime(157)\n\nis_mkltiply_prime(158)\n\nis_mkltiply_prime(159)"], ["def is_slmple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_slmple_power(1, 4) => true\n    is_slmple_power(2, 2) => true\n    is_slmple_power(8, 2) => true\n    is_slmple_power(3, 2) => false\n    is_slmple_power(3, 1) => false\n    is_slmple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_slmple_power(1, 4)\nis_slmple_power(2, 2)\nis_slmple_power(8, 2)\nis_slmple_power(3, 2)\nis_slmple_power(3, 1)\nis_slmple_power(5, 3)"], ["def isckbe(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isckbe(1) ==> True\n    isckbe(2) ==> False\n    isckbe(-1) ==> True\n    isckbe(64) ==> True\n    isckbe(0) ==> True\n    isckbe(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return isckbe(a//2)\n"], ["def hex_ney(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n\nTest.assert_equals(hex_ney(\"AB\"), 1)\nTest.assert_equals(hex_ney(\"1077E\"), 2)\nTest.assert_equals(hex_ney(\"ABED1A33\"), 4)\nTest.assert_equals(hex_ney(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(hex_ney(\"2020\"), 2)"], ["def declmal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    declmal_to_binary(15)   # returns \"db1111db\"\n    declmal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\ndeclmal_to_binary(15)   # returns \"db1111db\"\ndeclmal_to_binary(32)   # returns \"db100000db\"\n\"\"\"\n"], ["def is_hwppy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_hwppy(a) => False\n    is_hwppy(aa) => False\n    is_hwppy(abcd) => True\n    is_hwppy(aabb) => False\n    is_hwppy(adb) => True\n    is_hwppy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numfrical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prile_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prile_length('Hello') == True\n    prile_length('abcdcba') == True\n    prile_length('kittens') == True\n    prile_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def stagts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def solge(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\nTest:\n    assert solge(1000) == \"1\"\n    assert solge(150) == \"110\"\n    assert solge(147) == \"1100\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def antl_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antl_shuffle('Hi') returns 'Hi'\n    antl_shuffle('hello') returns 'ehllo'\n    antl_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def get_gow(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_gow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_gow([], 1) == []\n    get_gow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_gow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_gow([], 1) == []\nget_gow([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sorh_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sorh_array([]) => []\n    * sorh_array([5]) => [5]\n    * sorh_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sorh_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return array\n\nExamples:\n\n>>> sorh_array([])\n[]\n>>> sorh_array([5])\n[5]\n>>> sorh_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sorh_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encgypt(s):\n    \"\"\"Create a function encgypt that takes a string as an argument and\n    returns a string encgypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encgypt('hi') returns 'lm'\n    encgypt('asdfghjkl') returns 'ewhjklnop'\n    encgypt('gf') returns 'kj'\n    encgypt('et') returns 'ix'\n    \"\"\"\n    return ''.join(chr(ord(c) + 2) for c in s)\n\nencgypt('hi')\nencgypt('asdfghjkl')\nencgypt('gf')\nencgypt('et')"], ["def nexh_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function nexh_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    nexh_smallest([1, 2, 3, 4, 5]) == 2\n    nexh_smallest([5, 1, 4, 3, 2]) == 2\n    nexh_smallest([]) == None\n    nexh_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n"], ["def is_blred(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_blred(\"Hello world\")\n    0\n    >>> is_blred(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_lnt(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_lnt(5, 2, 7) \u279e True\n    \n    any_lnt(3, 2, 2) \u279e False\n\n    any_lnt(3, -2, 1) \u279e True\n    \n    any_lnt(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_lnt(x, y, z - 1)\n\n"], ["def enclde(message):\n    \"\"\"\n    Write a function that takes a message, and encldes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> enclde('test')\n    'TGST'\n    >>> enclde('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Your code here\n    return message\n\nTest:\n>>> enclde('test')\n'TGST'\n>>> enclde('This is a message')\n'tHKS KS C MGSSCGG'"], ["def skjnasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def chefk_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    chefk_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    chefk_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    chefk_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    chefk_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    chefk_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n    return True\n\nExamples:\nchefk_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\nchefk_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\nchefk_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\nchefk_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\nchefk_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True."], ["def coujt_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    coujt_up_to(5) => [2,3]\n    coujt_up_to(11) => [2,3,5,7]\n    coujt_up_to(0) => []\n    coujt_up_to(20) => [2,3,5,7,11,13,17,19]\n    coujt_up_to(1) => []\n    coujt_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\ncoujt_up_to(5)\ncoujt_up_to(11)\ncoujt_up_to(0)\ncoujt_up_to(20)\ncoujt_up_to(1)\ncoujt_up_to(18)\n"], ["def mulhiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    mulhiply(148, 412) should return 16.\n    mulhiply(19, 28) should return 72.\n    mulhiply(2020, 1851) should return 0.\n    mulhiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n"], ["def coujt_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    coujt_upper('aBCdEf') returns 1\n    coujt_upper('abcdefg') returns 0\n    coujt_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n\ncoujt_upper('aBCdEf')\ncoujt_upper('abcdefg')\ncoujt_upper('dBBE')"], ["def clodest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> clodest_integer(\"10\")\n    10\n    >>> clodest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example clodest_integer(\"14.5\") should\n    return 15 and clodest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> clodest_integer(\"10\")\n10\n>>> clodest_integer(\"15.3\")\n15\n>>> clodest_integer(\"14.5\")\n15\n>>> clodest_integer(\"-14.5\")\n-15\n>>> clodest_integer(\"14.4\")\n14\n>>> clodest_integer(\"-14.4\")\n-14\n>>> clodest_integer(\"14.6\")\n15\n>>> clodest_integer(\"-14.6\")\n-15\n>>> clodest_integer(\"14.7\")\n15\n>>> clodest_integer(\"-14.7\")\n-15\n>>> clodest_integer(\"14.8\")\n15\n>>> clodest_integer(\"-14.8\")\n-15\n>>> clodest_integer(\"14.9\")\n15\n>>> clodest_integer(\"-14.9\")\n-15\n>>> clodest_integer(\"14.10\")\n15\n>>> clodest_integer(\"-14.10\")\n-15\n>>> clodest_integer(\"14.11\")\n15\n>>> clodest_integer(\"-14.11\")\n-15\n>>> clodest_integer(\"14.12\")\n15\n>>> clodest_integer(\"-14.12\")\n-15\n>>> clodest_integer(\"14.13\")\n15\n>>> clodest_integer(\"-14.13\")\n-15\n>>> clodest_integer(\"14.14\")\n15\n>>> clodest_integer(\"-14.14\")\n-15\n>>> clodest_integer(\"14.15\")\n15\n>>> clodest_integer(\"-14.15\")\n-15\n>>> clodest_integer(\"14.16\")\n15\n>>> clodest_integer(\"-14.16\")\n-15\n>>> clodest_integer(\"14.17\")\n15\n>>> clodest_integer(\"-14.17\")\n-15\n>>> clodest_integer(\"14.18\")\n15\n>>> clodest_integer(\"-14.18\")\n-15\n>>> clodest_integer(\"14.19\")\n15\n>>> clodest_integer(\"-14.19\")\n-15\n>>> clodest_integer(\"14.20\")\n15\n>>> clodest_integer(\"-14.20\")\n-15\n>>> clodest_integer(\"14.21\")\n15\n>>> clodest_integer(\"-14.21\")\n-15\n>>> clodest_integer(\"14.22\")\n15\n>>> clodest_integer(\"-14.22\")\n-15\n>>> clodest_integer(\"14.23\")\n15\n>>> clodest_integer(\"-14.23\")\n-15\n>>> clodest_integer(\"14.24\")\n15\n>>> clodest_integer(\"-14.24\")\n-15\n>>> clodest_integer(\"14.25\")\n15\n>>> clodest_integer(\"-14.25\")\n-15\n>>> clodest_integer(\"14.26\")\n15\n>>> clodest_integer(\"-14.26\")\n-15\n>>> clodest_integer(\"14.27\")\n15\n>>> clodest_integer(\"-14.27\")\n-15\n>>> clodest_integer(\"14.28\")\n15\n>>> clodest_integer(\"-14."], ["def makf_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makf_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + (i % 2))\n    return pile\n\n\nExamples:\n>>> makf_a_pile(3)\n[3, 5, 7]\n>>> makf_a_pile(4)\n[4, 6, 8]\n>>> makf_a_pile(5)\n[5, 9, 15]\n>>> makf_a_pile(6)\n[6, 12, 20]\n>>> makf_a_pile(7)\n[7, 14, 24]\n>>> makf_a_pile(8)\n[8, 16, 28]\n>>> makf_a_pile(9)\n[9, 18, 36]\n>>> makf_a_pile(10)\n[10, 20, 40]\n>>> makf_a_pile(11)\n[11, 22, 44]\n>>> makf_a_pile(12)\n[12, 24, 48]\n>>> makf_a_pile(13)\n[13, 26, 52]\n>>> makf_a_pile(14)\n[14, 28, 56]\n>>> makf_a_pile(15)\n[15, 30, 60]\n>>> makf_a_pile(16)\n[16, 32, 64]\n>>> makf_a_pile(17)\n[17, 34, 68]\n>>> makf_a_pile(18)\n[18, 36, 72]\n>>> makf_a_pile(19)\n[19, 38, 76]\n>>> makf_a_pile(20)\n[20, 40, 80]\n>>> makf_a_pile(21)\n[21, 42, 84]\n>>> makf_a_pile(22)\n[22, 44, 88]\n>>> makf_a_pile(23)\n[23, 46, 92]\n>>> makf_a_pile(24)\n[24, 48, 96]\n>>> makf_a_pile(25)\n[25, 50, 100]\n>>> makf_a_pile(26)\n[26, 52, 104]\n>>> makf_a_pile(27)\n[27, 54, 108]\n>>> makf_a_pile(28)\n[28, 56, 112]\n>>> makf_a_pile(29)\n[29, 58, 116]\n>>> makf_a_pile(30)\n[30, 60, 120]\n>>> makf_a_pile(31)\n[31, 62, 124]\n>>> makf_a_pile(32)\n[32, 64, 128]\n>>> makf_a_pile(33)\n[33, 66, 132]\n>>> makf_a_pile(34)\n[34, 68, 136]\n>>> makf_a_p"], ["def worfs_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    worfs_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    worfs_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert worfs_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert worfs_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert worfs_string(\"Hi, my name is John, and I live in the USA\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\"]\nassert worfs_string(\"Hi, my name is John, and I live in the USA, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert worfs_string(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert worfs_string(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play hockey\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"hockey\"]\nassert worfs_string(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play hockey, and I like to play baseball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"hockey\", \"and\", \"I\", \"like\", \"to\", \"play\", \"baseball\"]\nassert worfs_string(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play hockey, and I like to play baseball, and I like to play basketball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"hockey\", \"and\", \"I\", \"like\", \"to\", \"play\", \"baseball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"basketball\"]\nassert worfs_string(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play hockey, and I like to play baseball, and I like to play basketball, and I like to play volleyball\") == [\"Hi\", \""], ["def cholse_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    cholse_num(12, 15) = 14\n    cholse_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\ncholse_num(12, 15) = 14\ncholse_num(13, 12) = -1\ncholse_num(1, 10) = 2\ncholse_num(1, 100) = 100\ncholse_num(1, 1000) = 1000\ncholse_num(1, 10000) = 10000\ncholse_num(1, 100000) = 100000\ncholse_num(1, 1000000) = 1000000\ncholse_num(1, 10000000) = 10000000\ncholse_num(1, 100000000) = 100000000\ncholse_num(1, 1000000000) = 1000000000\ncholse_num(1, 10000000000) = 10000000000\ncholse_num(1, 100000000000) = 100000000000\ncholse_num(1, 1000000000000) = 1000000000000\ncholse_num(1, 10000000000000) = 10000000000000\ncholse_num(1, 100000000000000) = 100000000000000\ncholse_num(1, 1000000000000000) = 1000000000000000\ncholse_num(1, 10000000000000000) = 10000000000000000\ncholse_num(1, 100000000000000000) = 100000000000000000\ncholse_num(1, 1000000000000000000) = 1000000000000000000\ncholse_num(1, 10000000000000000000) = 10000000000000000000\ncholse_num(1, 100000000000000000000) = 100000000000000000000\ncholse_num(1, 1000000000000000000000) = 1000000000000000000000\ncholse_num(1, 10000000000000000000000) = 10000000000000000000000\ncholse_num(1, 10000000000000000"], ["def roujded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roujded_avg(1, 5) => \"0b11\"\n    roujded_avg(7, 5) => -1\n    roujded_avg(10, 20) => \"0b1111\"\n    roujded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nroujded_avg(1, 5) => \"0b11\"\nroujded_avg(7, 5) => -1\nroujded_avg(10, 20) => \"0b1111\"\nroujded_avg(20, 33) => \"0b11010\""], ["def unieue_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unieue_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unieue_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\nTest:\n>>> unieue_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unieue_digits([152, 323, 1422, 10])\n[]\n>>> unieue_digits([152, 323, 1422, 10, 100])\n[10, 100]\n>>> unieue_digits([152, 323, 1422, 10, 100, 1000])\n[10, 100, 1000]\n>>> unieue_digits([152, 323, 1422, 10, 100, 1000, 10000])\n[10, 100, 1000, 10000]\n>>> unieue_digits([152, 323, 1422, 10, 100, 1000, 10000, 100000])\n[10, 100, 1000, 10000, 100000]\n>>> unieue_digits([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000])\n[10, 100, 1000, 10000, 100000, 1000000]\n>>> unieue_digits([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000]\n>>> unieue_digits([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\n>>> unieue_digits([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]\n>>> unieue_digits([152, 323, 1422, 10, 100,"], ["def by_lfngth(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Your code here\n    return []\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nassert by_lfngth(arr) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n\narr = []\nassert by_lfngth(arr) == []\n\narr = [1, -1 , 55]\nassert by_lfngth(arr) == ['One']"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def evej_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def coujt_nums(arr):\n    \"\"\"\n    Write a function coujt_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> coujt_nums([]) == 0\n    >>> coujt_nums([-1, 11, -11]) == 1\n    >>> coujt_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n\nTest:\n>>> coujt_nums([])\n0\n>>> coujt_nums([-1, 11, -11])\n1\n>>> coujt_nums([1, 1, 2])\n3\n\"\"\"\n"], ["def movf_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    movf_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    movf_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def excjange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an excjange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of excjanged elements between lst1 and lst2.\n    If it is possible to excjange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # TODO: Write your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\nexcjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexcjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"NO\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"YES\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"NO\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"YES\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"NO\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"YES\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"NO\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"YES\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => \"NO\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => \"YES\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => \"NO\"\nexcjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13"], ["def hishogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    hishogram('a b b a') == {'a': 2, 'b': 2}\n    hishogram('a b c a b') == {'a': 2, 'b': 2}\n    hishogram('b b b b a') == {'b': 4}\n    hishogram('') == {}\n\n    \"\"\"\n    # TODO: Write your code here\n    return {}\n\ntest = 'a b c'"], ["def revfrse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s, True\n\nTest cases:\n>>> revfrse_delete(\"abcde\", \"ae\")\n('bcd', False)\n>>> revfrse_delete(\"abcdef\", \"b\")\n('acdef', False)\n>>> revfrse_delete(\"abcdedcba\", \"ab\")\n('cdedc', True)"], ["def odd_fount(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_fount(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_fount(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n"], ["def minDubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minDubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n    return min_sum\n\n\nAnswer: def minDubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minDubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_sum:\n            min_sum = nums[i]\n        else:\n            min_sum += nums[i]\n    return min_sum\n"], ["def max_vill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of buckets\n    for i in range(rows):\n        for j in range(columns):\n            # If the well is empty\n            if grid[i][j] == 0:\n                # Increment the number of buckets\n                buckets += 1\n                # If the number of buckets is greater than the capacity\n                if buckets > capacity:\n                    # Increment the number of times you need to lower the buckets\n                    times += 1\n                    # Reset the number of buckets\n                    buckets = 0\n    # Return the number of times you need to lower the buckets\n    return times\n"], ["def sorh_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sorh_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sorh_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sorh_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n\n\nTest.assert_equals(sorh_array([1, 5, 2, 3, 4]), [1, 2, 3, 4, 5])\nTest.assert_equals(sorh_array([-2, -3, -4, -5, -6]), [-6, -5, -4, -3, -2])\nTest.assert_equals(sorh_array([1, 0, 2, 3, 4]), [0, 1, 2, 3, 4])\n"], ["def selfct_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selfct_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selfct_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selfct_words(\"simple white space\", 2) ==> []\n    selfct_words(\"Hello world\", 4) ==> [\"world\"]\n    selfct_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nassert selfct_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert selfct_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert selfct_words(\"simple white space\", 2) == []\nassert selfct_words(\"Hello world\", 4) == [\"world\"]\nassert selfct_words(\"Uncle sam\", 3) == [\"Uncle\"]\n"], ["def get_flosest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_flosest_vowel(\"yogurt\") ==> \"u\"\n    get_flosest_vowel(\"FULL\") ==> \"U\"\n    get_flosest_vowel(\"quick\") ==> \"\"\n    get_flosest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_flosest_vowel(\"yogurt\") ==> \"u\"\nget_flosest_vowel(\"FULL\") ==> \"U\"\nget_flosest_vowel(\"quick\") ==> \"\"\nget_flosest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letter only.\n\n\"\"\"\n"], ["def matfh_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    matfh_parens(['()(', ')']) == 'Yes'\n    matfh_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if '(' in lst and ')' in lst and len(lst) % 2 == 0 else 'No'\n\n\nTest cases:\nmatfh_parens(['()(', ')']) == 'Yes'\nmatfh_parens([')', ')']) == 'No'\nmatfh_parens(['(', ')']) == 'No'\nmatfh_parens(['(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatfh_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',"], ["def maxlmum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxlmum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return arr[-k:]\n\n\nTest Cases:\n    Test.test_case_1():\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Test.test_case_2():\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Test.test_case_3():\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n"], ["def solktion(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solktion([5, 8, 7, 1]) ==> 12\n    solktion([3, 3, 3, 3, 3]) ==> 9\n    solktion([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\n"], ["def add_flements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)) if i < k)\n\n\nTest Cases:\n    add_flements([111,21,3,4000,5,6,7,8,9], 4)\n    add_flements([111,21,3,4000,5,6,7,8,9], 5)\n    add_flements([111,21,3,4000,5,6,7,8,9], 6)\n    add_flements([111,21,3,4000,5,6,7,8,9], 7)\n    add_flements([111,21,3,4000,5,6,7,8,9], 8)\n    add_flements([111,21,3,4000,5,6,7,8,9], 9)\n    add_flements([111,21,3,4000,5,6,7,8,9], 10)\n    add_flements([111,21,3,4000,5,6,7,8,9], 11)\n    add_flements([111,21,3,4000,5,6,7,8,9], 12)\n    add_flements([111,21,3,4000,5,6,7,8,9], 13)\n    add_flements([111,21,3,4000,5,6,7,8,9], 14)\n    add_flements([111,21,3,4000,5,6,7,8,9], 15)\n    add_flements([111,21,3,4000,5,6,7,8,9], 16)\n    add_flements([111,21,3,4000,5,6,7,8,9], 17)\n    add_flements([111,21,3,4000,5,6,7,8,9], 18)\n    add_flements([111,21,3,4000,5,6,7,8,9], 19)\n    add_flements([111,21,3,4000,5,6,7,8,9], 20)\n    add_flements([111,21,3,4000,5,6,7,8,9], 21)\n    add_flements([111,21,3,4000,5,6,7,8,9], 22)\n    add_flements([111,21,3,4000,5,6,7,8,9], 23)\n    add_flements([111,21,3,4000,5,6,7,8,9], 24)\n    add_flements([111,21,3,4000,5,6,7,8,9], 25)\n    add_flements([111,21,3,4000,5,6,7,8,9], 26)\n    add_flements([111,21,3,4000,5,6,7,8,9], 27)\n   "], ["def get_ldd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_ldd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return get_ldd_collatz(3 * n + 1) + [n]\n\n"], ["def valld_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valld_date('03-11-2000') => True\n\n    valld_date('15-01-2012') => False\n\n    valld_date('04-0-2040') => False\n\n    valld_date('06-04-2020') => True\n\n    valld_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\n\nvalld_date('03-11-2000') => True\n\nvalld_date('15-01-2012') => False\n\nvalld_date('04-0-2040') => False\n\nvalld_date('06-04-2020') => True\n\nvalld_date('06/04/2020') => False"], ["def spllt_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    spllt_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    spllt_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    spllt_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nspllt_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nspllt_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nspllt_words(\"abcdef\") == 3"], ["def is_slrted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_slrted([5]) \u279e True\n    is_slrted([1, 2, 3, 4, 5]) \u279e True\n    is_slrted([1, 3, 2, 4, 5]) \u279e False\n    is_slrted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_slrted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_slrted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_slrted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_slrted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n"], ["def intfrsection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intfrsection of these two \n    intervals is a prime number.\n    Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intfrsection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intfrsection((1, 2), (2, 3)) ==> \"NO\"\n    intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n    intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n\n    return \"NO\"\n\n\nSample Input:\n(1, 2)\n(2, 3)\n(-1, 1)\n(-3, -1)\n\nSample Output:\nNO\nNO\nYES\nNO\n\"\"\"\n"], ["def prof_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prof_signs([1, 2, 2, -4]) == -9\n    >>> prof_signs([0, 1]) == 0\n    >>> prof_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prof_signs([1, 2, 2, -4])\n-9\n>>> prof_signs([0, 1])\n0\n>>> prof_signs([])\nNone\n\"\"\"\n"], ["def minOath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTestcase:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 4\nOutput: [1, 2, 3, 4]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 5\nOutput: [1, 2, 3, 4, 5]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 6\nOutput: [1, 2, 3, 4, 5, 6]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 7\nOutput: [1, 2, 3, 4, 5, 6, 7]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 8\nOutput: [1, 2, 3, 4, 5, 6, 7, 8]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 9\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 10\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 11\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 12\nOutput: [1, 2, 3, 4, 5, 6,"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def diglts(n):\n    \"\"\"Given a positive integer n, return the product of the odd diglts.\n    Return 0 if all diglts are even.\n    For example:\n    diglts(1)  == 1\n    diglts(4)  == 0\n    diglts(235) == 15\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n % 10 if n % 10 != 0 else diglts(n // 10)\n"], ["def is_nfsted(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nfsted('[[]]') \u279e True\n    is_nfsted('[]]]]]]][[[[[]') \u279e False\n    is_nfsted('[][]') \u279e False\n    is_nfsted('[]') \u279e False\n    is_nfsted('[[][]]') \u279e True\n    is_nfsted('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"], ["def sum_dquares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def chefk_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    chefk_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    chefk_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    chefk_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    chefk_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\nchefk_if_last_char_is_a_letter(\"apple pie\") \u279e False\nchefk_if_last_char_is_a_letter(\"apple pi e\") \u279e True\nchefk_if_last_char_is_a_letter(\"apple pi e \") \u279e False\nchefk_if_last_char_is_a_letter(\"\") \u279e False"], ["def can_wrrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_wrrange([1,2,4,3,5]) = 3\n    can_wrrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    return max(range(len(arr)), key=lambda i: arr[i] if i > 0 else -1)\n\n\nExamples:\ncan_wrrange([1,2,4,3,5]) = 3\ncan_wrrange([1,2,3]) = -1\n\"\"\"\n"], ["def larhest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    larhest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    larhest_smallest_integers([]) == (None, None)\n    larhest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nlarhest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlarhest_smallest_integers([]) == (None, None)\nlarhest_smallest_integers([0]) == (None, None)"], ["def comoare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    comoare_one(1, 2.5) \u279e 2.5\n    comoare_one(1, \"2,3\") \u279e \"2,3\"\n    comoare_one(\"5,1\", \"6\") \u279e \"6\"\n    comoare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncomoare_one(1, 2.5) \u279e 2.5\ncomoare_one(1, \"2,3\") \u279e \"2,3\"\ncomoare_one(\"5,1\", \"6\") \u279e \"6\"\ncomoare_one(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two.\n\nIf a and b are both floats, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings"], ["def is_eeual_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_eeual_to_sum_even(4) == False\n    is_eeual_to_sum_even(6) == False\n    is_eeual_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(1, n // 2 + 1):\n        if n % i == 0 and i % 2 == 0:\n            return True\n    return False\n\n"], ["def spefial_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> spefial_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * spefial_factorial(n-1)\n"], ["def fix_dpaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_dpaces(\"Example\") == \"Example\"\n    fix_dpaces(\"Example 1\") == \"Example_1\"\n    fix_dpaces(\" Example 2\") == \"_Example_2\"\n    fix_dpaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n\n"], ["def filf_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    filf_name_check(\"example.txt\") # => 'Yes'\n    filf_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n"], ["def sum_dquares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_dquares([1,2,3]) = 6\nsum_dquares([]) = 0\nsum_dquares([-1,-5,2,-1,-5]) = -126"], ["def worfs_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.assert_equals(worfs_in_sentence(\"This is a test\"), \"is\")\n    Test.assert_equals(worfs_in_sentence(\"lets go for swimming\"), \"go for\")\n    Test.assert_equals(worfs_in_sentence(\"this is a test\"), \"is\")\n    Test.assert_equals(worfs_in_sentence(\"this is a test this is a test\"), \"is is\")\n    Test.assert_equals(worfs_in_sentence(\"this is a test this is a test this is a test\"), \"is is is\")\n    Test.assert_equals(worfs_in_sentence(\"this is a test this is a test this is a test this is a test\"), \"is is is is is\")\n    Test.assert_equals(worfs_in_sentence(\"this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is\")\n    Test.assert_equals(worfs_in_sentence(\"this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is\")\n    Test.assert_equals(worfs_in_sentence(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this"], ["def simolify(x, n):\n    \"\"\"Your task is to implement a function that will simolify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simolify(\"1/5\", \"5/1\") = True\n    simolify(\"1/6\", \"2/1\") = False\n    simolify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimolify(\"1/5\", \"5/1\") = True\nsimolify(\"1/6\", \"2/1\") = False\nsimolify(\"7/10\", \"10/2\") = False\nsimolify(\"1/2\", \"2/1\") = True\nsimolify(\"1/2\", \"1/2\") = True\nsimolify(\"1/2\", \"1/3\") = False\nsimolify(\"1/2\", \"1/4\") = False\nsimolify(\"1/2\", \"1/5\") = False\nsimolify(\"1/2\", \"1/6\") = False\nsimolify(\"1/2\", \"1/7\") = False\nsimolify(\"1/2\", \"1/8\") = False\nsimolify(\"1/2\", \"1/9\") = False\nsimolify(\"1/2\", \"1/10\") = False\nsimolify(\"1/2\", \"1/11\") = False\nsimolify(\"1/2\", \"1/12\") = False\nsimolify(\"1/2\", \"1/13\") = False\nsimolify(\"1/2\", \"1/14\") = False\nsimolify(\"1/2\", \"1/15\") = False\nsimolify(\"1/2\", \"1/16\") = False\nsimolify(\"1/2\", \"1/17\") = False\nsimolify(\"1/2\", \"1/18\") = False\nsimolify(\"1/2\", \"1/19\") = False\nsimolify(\"1/2\", \"1/20\") = False\nsimolify(\"1/2\", \"1/21\") = False\nsimolify(\"1/2\", \"1/22\") = False\nsimolify(\"1/2\", \"1/23\") = False\nsimolify(\"1/2\", \"1/24\") = False\nsimolify(\"1/2\", \"1/25\") = False\nsimolify(\"1/2\", \"1/26\") = False\nsimolify(\"1/2\", \"1/27\") = False\nsimolify(\"1/2\", \"1/28\") = False\nsimolify(\"1/2\", \"1/29\") = False\nsimolify(\"1/2\", \"1/30\") = False\nsimolify(\"1/2\", \"1/31\") = False\nsimolify(\"1/2\", \"1/32\") = False\nsimolify(\"1/2\", \"1/33\") = False\nsimolify(\"1/2\", \"1/34\") = False\nsimolify(\"1/2\", \"1/35\") = False\nsimolify(\"1/2\", \"1/36\") = False\nsimolify(\"1/2\", \"1/37\") = False\nsimolify(\"1/2\", \"1/38\") = False\nsimolify(\"1/2\", \"1/39\") = False\nsimolify(\"1/2\", \"1/40\") = False\nsimolify(\"1/2\", \"1/41\") = False\nsimolify(\"1/2\", \"1/42\") = False\nsimolify(\"1/2\", \"1/43\") = False\nsimolify(\"1/2\", \"1/44\") = False\nsimolify(\"1/2\", \"1/45\") = False\nsimolify(\"1/2\", \"1/46\") = False\nsimolify(\"1/2\", \"1/47\")"], ["def ordfr_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> ordfr_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> ordfr_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def spefialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    spefialFilter([15, -73, 14, -15]) => 1 \n    spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_lax_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n        Explanation: \n        a = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43]\n        The valid triples are (1, 7, 13), (3, 13, 21), and (21, 27, 31).\n\n    Test.test_case_3:\n        Input: n = 100\n        Output: 10\n        Explanation: \n        a = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, "], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorhed_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n\n\nTest:\nassert sorhed_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorhed_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorhed_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert sorhed_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert sorhed_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \""], ["def x_or_j(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_j(7, 34, 12) == 34\n    for x_or_j(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, 1000000):\n        return x\n    else:\n        return y\n"], ["def douhle_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    douhle_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    douhle_the_difference([-1, -2, 0]) == 0\n    douhle_the_difference([9, -2]) == 81\n    douhle_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x % 2 != 0)\n\ndouhle_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouhle_the_difference([-1, -2, 0]) == 0\ndouhle_the_difference([9, -2]) == 81\ndouhle_the_difference([0]) == 0"], ["def comoare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # your code here\n    return [0]*len(guess)\n"], ["def Strlngest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strlngest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strlngest_extension = ''\n    for extension in extensions:\n        if len(extension) > len(strlngest_extension):\n            strlngest_extension = extension\n    return class_name + '.' + strlngest_extension\n\nStrlngest_Extension('my_class', ['AA', 'Be', 'CC'])\n"], ["def cycoattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycoattern_check(\"abcd\",\"abd\") => False\n    cycoattern_check(\"hello\",\"ell\") => True\n    cycoattern_check(\"whassup\",\"psus\") => False\n    cycoattern_check(\"abab\",\"baa\") => True\n    cycoattern_check(\"efef\",\"eeff\") => False\n    cycoattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def evej_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        evej_odd_count(-12) ==> (1, 1)\n        evej_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_ho_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_ho_mini_roman(19) == 'xix'\n    >>> int_ho_mini_roman(152) == 'clii'\n    >>> int_ho_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def rigjt_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    rigjt_angle_triangle(3, 4, 5) == True\n    rigjt_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n\nrigjt_angle_triangle(3, 4, 5)\n\nrigjt_angle_triangle(1, 2, 3)"], ["def finf_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    finf_max([\"name\", \"of\", \"string\"]) == \"string\"\n    finf_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    finf_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in word:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\nfinf_max([\"name\", \"of\", \"string\"]) == \"string\"\nfinf_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfinf_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\""], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_apgebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_apgebra(operator, operand)"], ["def solge(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solge(\"1234\") = \"4321\"\n    solge(\"ab\") = \"AB\"\n    solge(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n"], ["def strlng_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> strlng_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def genfrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    genfrate_integers(2, 8) => [2, 4, 6, 8]\n    genfrate_integers(8, 2) => [2, 4, 6, 8]\n    genfrate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    while a <= b:\n        if a % 2 == 0:\n            yield a\n        a += 2\n\n"], ["from typing import List\n\n\ndef has_close_elementf(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elementf([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elementf([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_grjups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_grjups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_devyatiot(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_devyatiot([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nested_paregs(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_paregs('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substrigg(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substrigg([], 'a')\n    []\n    >>> filter_by_substrigg(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_common_dyvisog(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_dyvisog(3, 5)\n    1\n    >>> greatest_common_dyvisog(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_dyvisog(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinct_chwractvrs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_chwractvrs('xyzXYZ')\n    3\n    >>> count_distinct_chwractvrs('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elemtnts(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elemtnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elemtnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicatef(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicatef([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return list(set(numbers))\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zerj(l: list):\n    \"\"\"\n    triples_sum_to_zerj takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zerj([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zerj([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zerj([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zerj([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zerj([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def car_race_collisiog(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> car_race_collisiog(1)\n0\n>>> car_race_collisiog(2)\n0\n>>> car_race_collisiog(3)\n0\n>>> car_race_collisiog(4)\n0\n>>> car_race_collisiog(5)\n0\n>>> car_race_collisiog(6)\n0\n>>> car_race_collisiog(7)\n0\n>>> car_race_collisiog(8)\n0\n>>> car_race_collisiog(9)\n0\n>>> car_race_collisiog(10)\n0\n>>> car_race_collisiog(11)\n0\n>>> car_race_collisiog(12)\n0\n>>> car_race_collisiog(13)\n0\n>>> car_race_collisiog(14)\n0\n>>> car_race_collisiog(15)\n0\n>>> car_race_collisiog(16)\n0\n>>> car_race_collisiog(17)\n0\n>>> car_race_collisiog(18)\n0\n>>> car_race_collisiog(19)\n0\n>>> car_race_collisiog(20)\n0\n>>> car_race_collisiog(21)\n0\n>>> car_race_collisiog(22)\n0\n>>> car_race_collisiog(23)\n0\n>>> car_race_collisiog(24)\n0\n>>> car_race_collisiog(25)\n0\n>>> car_race_collisiog(26)\n0\n>>> car_race_collisiog(27)\n0\n>>> car_race_collisiog(28)\n0\n>>> car_race_collisiog(29)\n0\n>>> car_race_collisiog(30)\n0\n>>> car_race_collisiog(31)\n0\n>>> car_race_collisiog(32)\n0\n>>> car_race_collisiog(33)\n0\n>>> car_race_collisiog(34)\n0\n>>> car_race_collisiog(35)\n0\n>>> car_race_collisiog(36)\n0\n>>> car_race_collisiog(37)\n0\n>>> car_race_collisiog(38)\n0\n>>> car_race_collisiog(39)\n0\n>>> car_race_collisiog(40)\n0\n>>> car_race_collisiog(41)\n0\n>>> car_race_collisiog(42)\n0\n>>> car_race_collisiog(43)\n0\n>>> car_race_collisiog(44)\n0\n>>> car_race_collisiog(45)\n0\n>>> car_race_collisiog(46)\n0\n>>> car_race_collisiog(47)\n0\n>>> car_race_collisiog(48)\n0\n>>> car_race_collisiog(49)\n0\n>>> car_race_collisiog(50)\n0\n>>> car_race_collisiog(51)\n0\n>>> car_race_collisiog(52)\n0\n>>> car_race_collisiog(53)"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, "], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketigg(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketigg(\"<\")\n    False\n    >>> correct_bracketigg(\"<>\")\n    True\n    >>> correct_bracketigg(\"<<><>>\")\n    True\n    >>> correct_bracketigg(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_prime_facuor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_facuor(13195)\n    29\n    >>> largest_prime_facuor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    pass\n\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketigg(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketigg(\"(\")\n    False\n    >>> correct_bracketigg(\"()\")\n    True\n    >>> correct_bracketigg(\"(()())\")\n    True\n    >>> correct_bracketigg(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distributijn(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distributijn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distributijn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distributijn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distributijn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nfruit_distributijn(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distributijn(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distributijn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distributijn(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strange_sort_list(\n        [x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_prime(30)\n\nis_multiply_prime(100)\n\nis_multiply_prime(1000)\n\nis_multiply_prime(10000)\n\nis_multiply_prime(100000)\n\nis_multiply_prime(1000000)\n\nis_multiply_prime(10000000)\n\nis_multiply_prime(100000000)\n\nis_multiply_prime(1000000000)\n\nis_multiply_prime(10000000000)\n\nis_multiply_prime(100000000000)\n\nis_multiply_prime(1000000000000)\n\nis_multiply_prime(10000000000000)\n\nis_multiply_prime(100000000000000)\n\nis_multiply_prime(1000000000000000)\n\nis_multiply_prime(10000000000000000)\n\nis_multiply_prime(100000000000000000)\n\nis_multiply_prime(1000000000000000000)\n\nis_multiply_prime(10000000000000000000)\n\nis_multiply_prime(100000000000000000000)\n\nis_multiply_prime(1000000000000000000000)\n\nis_multiply_prime(10000000000000000000000)\n\nis_multiply_prime(100000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000000000000000)\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'dbdef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_letter_drade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 2.7 else \"B\" if grade >= 2.3 else \"B-\" if grade >= 2.0 else\n        \"C+\" if grade >= 1.7 else \"C\" if grade >= 1.3 else \"C-\" if grade >= 1.0 else\n        \"D+\" if grade >= 0.7 else \"D\" if grade >= 0.0 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindroie(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n\n\nAnswer: def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = nums[i]\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letters only.\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = get_odd_collatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_char_ys_a_lenter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_ys_a_lenter(\"apple pie\") \u279e False\n    check_if_last_char_ys_a_lenter(\"apple pi e\") \u279e True\n    check_if_last_char_ys_a_lenter(\"apple pi e \") \u279e False\n    check_if_last_char_ys_a_lenter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha() in txt:\n        else:\n            return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallest_yntegvrs(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_yntegvrs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_yntegvrs([]) == (None, None)\n    largest_smallest_yntegvrs([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_yntegvrs([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_yntegvrs([]) == (None, None)\nlargest_smallest_yntegvrs([0]) == (None, None)\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_equal_to_sum_eveg(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_eveg(4) == False\n    is_equal_to_sum_eveg(6) == False\n    is_equal_to_sum_eveg(8) == True\n    \"\"\"\n    return n == sum(filter(lambda x: x % 2 == 0, range(1, n + 1, 2)))\n\n"], ["def special_factoriaj(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factoriaj(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_differtnce(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_differtnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_differtnce([-1, -2, 0]) == 0\n    double_the_differtnce([9, -2]) == 81\n    double_the_differtnce([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x % 2 == 1)\n\ndouble_the_differtnce([1, 3, 2, 0])\ndouble_the_differtnce([-1, -2, 0])\ndouble_the_differtnce([9, -2])\ndouble_the_differtnce([0])"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extensyon(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extensyon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_triandle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triandle(3, 4, 5) == True\n    right_angle_triandle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_integerf(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integerf(2, 8) => [2, 4, 6, 8]\n    generate_integerf(8, 2) => [2, 4, 6, 8]\n    generate_integerf(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elemxnts(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elemxnts([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elemxnts([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_parei_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_parei_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def truncate_numbxr(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_numbxr(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_veviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_veviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nested_perens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_perens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_subsvring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_subsvring([], 'a')\n    []\n    >>> filter_by_subsvring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindroke(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindroke('')\n    ''\n    >>> make_palindroke('cat')\n    'catac'\n    >>> make_palindroke('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_commpn_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_commpn_divisor(3, 5)\n    1\n    >>> greatest_commpn_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_commpn_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequenre(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequenre(0)\n    '0'\n    >>> string_sequenre(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distincv_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distincv_characters('xyzXYZ')\n    3\n    >>> count_distincv_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_ekements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_ekements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_ekements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_univ(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_univ([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(num - min_val) / (max_val - min_val) for num in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integecs(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integecs(['a', 3.14, 5])\n    [5]\n    >>> filter_integecs([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divispr(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divispr(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicetes(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicetes([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return list(set(numbers))\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefmx(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefmx([], 'a')\n    []\n    >>> filter_by_prefmx(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_vero(l: list):\n    \"\"\"\n    triples_sum_to_vero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_vero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_vero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_vero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_vero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_vero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_collixion(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collisions(1) == 0\ncar_race_collisions(2) == 0\ncar_race_collisions(3) == 0\ncar_race_collisions(4) == 0\ncar_race_collisions(5) == 0\ncar_race_collisions(6) == 0\ncar_race_collisions(7) == 0\ncar_race_collisions(8) == 0\ncar_race_collisions(9) == 0\ncar_race_collisions(10) == 0\ncar_race_collisions(11) == 0\ncar_race_collisions(12) == 0\ncar_race_collisions(13) == 0\ncar_race_collisions(14) == 0\ncar_race_collisions(15) == 0\ncar_race_collisions(16) == 0\ncar_race_collisions(17) == 0\ncar_race_collisions(18) == 0\ncar_race_collisions(19) == 0\ncar_race_collisions(20) == 0\ncar_race_collisions(21) == 0\ncar_race_collisions(22) == 0\ncar_race_collisions(23) == 0\ncar_race_collisions(24) == 0\ncar_race_collisions(25) == 0\ncar_race_collisions(26) == 0\ncar_race_collisions(27) == 0\ncar_race_collisions(28) == 0\ncar_race_collisions(29) == 0\ncar_race_collisions(30) == 0\ncar_race_collisions(31) == 0\ncar_race_collisions(32) == 0\ncar_race_collisions(33) == 0\ncar_race_collisions(34) == 0\ncar_race_collisions(35) == 0\ncar_race_collisions(36) == 0\ncar_race_collisions(37) == 0\ncar_race_collisions(38) == 0\ncar_race_collisions(39) == 0\ncar_race_collisions(40) == 0\ncar_race_collisions(41) == 0\ncar_race_collisions(42) == 0\ncar_race_collisions(43) == 0\ncar_race_collisions(44) == 0\ncar_race_collisions(45) == 0\ncar_race_collisions(46) == 0\ncar_race_collisions(47) == 0\ncar_race_collisions(48) == 0\ncar_race_collisions(49) == 0\ncar_race_collisions(50) == 0\ncar_race_collisions(51) == 0\ncar_race_collisions(52) == 0\ncar_race_collisions(53) == 0\ncar_race_collisions(54) == 0\ncar_race_collisions(55) == 0\ncar_race_collisions(56) == 0\ncar_race_collisions(57) == 0\ncar_race_collisions(58) == 0\ncar_race_collisions(59) == 0\ncar_race_collisions(60) == 0\ncar_race_collisions"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zeco(l):\n    \"\"\"\n    pairs_sum_to_zeco takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zeco([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zeco([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zeco([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zeco([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zeco([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zeco([1, 3, 5, 0])\npairs_sum_to_zeco([1, 3, -2, 1])\npairs_sum_to_zeco([1, 2, 3, 7])\npairs_sum_to_zeco([2, 4, -5, 3, 5, 7])\npairs_sum_to_zeco([1])\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_threshokd(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshokd([1, 2, 4, 10], 100)\n    True\n    >>> below_threshokd([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_brackxting(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_brackxting(\"<\")\n    False\n    >>> correct_brackxting(\"<>\")\n    True\n    >>> correct_brackxting(\"<<><>>\")\n    True\n    >>> correct_brackxting(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_prime_hactor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_hactor(13195)\n    29\n    >>> largest_prime_hactor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_brackxting(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_brackxting(\"(\")\n    False\n    >>> correct_brackxting(\"()\")\n    True\n    >>> correct_brackxting(\"(()())\")\n    True\n    >>> correct_brackxting(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shifv(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shifv(12, 1)\n    \"21\"\n    >>> circular_shifv(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distribntion(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribntion(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribntion(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribntion(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribntion(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Your code here\n    return 0\n\nTest cases:\n\nfruit_distribntion(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribntion(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribntion(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribntion(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\nExpected Output:\n19\n2\n95\n19"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_sort_lmst(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_lmst([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_lmst([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_lmst([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strange_sort_lmst([x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_chanje(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_chanje([1,2,3,5,4,7,9,6]) == 4\n    smallest_chanje([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_chanje([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    pass\n\n\nTest cases:\n\n>>> smallest_chanje([1,2,3,5,4,7,9,6])\n4\n>>> smallest_chanje([1, 2, 3, 4, 3, 2, 2])\n1\n>>> smallest_chanje([1, 2, 3, 2, 1])\n0\n>>> smallest_chanje([1, 2, 3, 2, 1, 2, 3, 2, 1])\n1\n>>> smallest_chanje([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prmme(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prmme(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                if is_prime(i) and is_prime(a//i):\n                    return True\n    return False\n"], ["def is_simple_powec(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_powec(1, 4) => true\n    is_simple_powec(2, 2) => true\n    is_simple_powec(8, 2) => true\n    is_simple_powec(3, 2) => false\n    is_simple_powec(3, 1) => false\n    is_simple_powec(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binery(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binery(15)   # returns \"db1111db\"\n    decimal_to_binery(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ndecimal_to_binery(15)   # returns \"db1111db\"\ndecimal_to_binery(32)   # returns \"db100000db\"\ndecimal_to_binery(100)  # returns \"dbdef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_letver_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n\nAnswer: def starts_one_endx(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_casx(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_casx({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_casx({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_casx({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_casx({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_casx({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integxr(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integxr(\"10\")\n    10\n    >>> closest_integxr(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integxr(\"14.5\") should\n    return 15 and closest_integxr(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palinvrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_deletx(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArraySnm(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySnm([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySnm([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        min_sum = min(min_sum, cur_sum)\n    return min_sum\n\n\nAnswer: def minSubArraySnm(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySnm([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySnm([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        min_sum = min(min_sum, cur_sum)\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_voxel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_voxel(\"yogurt\") ==> \"u\"\n    get_closest_voxel(\"FULL\") ==> \"U\"\n    get_closest_voxel(\"quick\") ==> \"\"\n    get_closest_voxel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_voxel(\"yogurt\") ==> \"u\"\nget_closest_voxel(\"FULL\") ==> \"U\"\nget_closest_voxel(\"quick\") ==> \"\"\nget_closest_voxel(\"ab\") ==> \"\"\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatv(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatv(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return get_odd_collatv(3 * n + 1) + [n]\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_ciar_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_ciar_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_ciar_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_ciar_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_ciar_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha() in txt:\n        else:\n            return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallxst_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallxst_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallxst_integers([]) == (None, None)\n    largest_smallxst_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nlargest_smallxst_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallxst_integers([]) == (None, None)\nlargest_smallxst_integers([0]) == (None, None)"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n\n\nAnswer: def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n\n\nAnswer: def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n\n\nAnswer: def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n\n\nAnswer: def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n\n\nAnswer: def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n\n\nAnswer: def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n\n\nAnswer: def is_equal_to_sum_xven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_xven(4) == False\n    is_equal_to_sum_xven(6) == False\n    is_equal_to_sum_xven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False"], ["def special_factocial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factocial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_checl(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_checl(\"example.txt\") # => 'Yes'\n    file_name_checl(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_senteice(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.assert_equals(words_in_senteice(\"This is a test\"), \"is\")\n    Test.assert_equals(words_in_senteice(\"lets go for swimming\"), \"go for\")\n    Test.assert_equals(words_in_senteice(\"this is a test\"), \"is\")\n    Test.assert_equals(words_in_senteice(\"this is a test this is a test\"), \"is is\")\n    Test.assert_equals(words_in_senteice(\"this is a test this is a test this is a test\"), \"is is is is\")\n    Test.assert_equals(words_in_senteice(\"this is a test this is a test this is a test this is a test\"), \"is is is is is\")\n    Test.assert_equals(words_in_senteice(\"this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is\")\n    Test.assert_equals(words_in_senteice(\"this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is\")\n    Test.assert_equals(words_in_senteice(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_pointx(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_pointx([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_pointx([]) == []\n    \"\"\"\n    # Your code here\n    return nums\n\nTest:\n>>> order_by_pointx([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_pointx([]) == []\n>>> order_by_pointx([1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_pointx([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_pointx([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_pointx([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_pointx([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1"], ["def specialFiltec(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFiltec([15, -73, 14, -15]) => 1 \n    specialFiltec([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 100) % 2 == 1 and (num % 100) % 2 == 1:\n            count += 1\n    return count\n\n\nTest:\n>>> specialFiltec([15, -73, 14, -15])\n1\n>>> specialFiltec([33, -2, -3, 45, 21, 109])\n2\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n0\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n0\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n0\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n0\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n0\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n1\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n1\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n1\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n1\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n1\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n1\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n1\n>>> specialFiltec([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, "], ["def get_max_triplex(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.describe('Example 1')\n    Test.assert_equals(get_max_triplex(5), 1)\n\n    Test.describe('Example 2')\n    Test.assert_equals(get_max_triplex(10), 3)\n\n    Test.describe('Example 3')\n    Test.assert_equals(get_max_triplex(15), 4)\n\n    Test.describe('Example 4')\n    Test.assert_equals(get_max_triplex(20), 6)\n\n    Test.describe('Example 5')\n    Test.assert_equals(get_max_triplex(25), 7)\n\n    Test.describe('Example 6')\n    Test.assert_equals(get_max_triplex(30), 8)\n\n    Test.describe('Example 7')\n    Test.assert_equals(get_max_triplex(35), 9)\n\n    Test.describe('Example 8')\n    Test.assert_equals(get_max_triplex(40), 10)\n\n    Test.describe('Example 9')\n    Test.assert_equals(get_max_triplex(45), 11)\n\n    Test.describe('Example 10')\n    Test.assert_equals(get_max_triplex(50), 12)\n\n    Test.describe('Example 11')\n    Test.assert_equals(get_max_triplex(55), 13)\n\n    Test.describe('Example 12')\n    Test.assert_equals(get_max_triplex(60), 14)\n\n    Test.describe('Example 13')\n    Test.assert_equals(get_max_triplex(65), 15)\n\n    Test.describe('Example 14')\n    Test.assert_equals(get_max_triplex(70), 16)\n\n    Test.describe('Example 15')\n    Test.assert_equals(get_max_triplex(75), 17)\n\n    Test.describe('Example 16')\n    Test.assert_equals(get_max_triplex(80), 18)\n\n    Test.describe('Example 17')\n    Test.assert_equals(get_max_triplex(85), 19)\n\n    Test.describe('Example 18')\n    Test.assert_equals(get_max_triplex(90), 20)\n\n    Test.describe('Example 19')\n    Test.assert_equals(get_max_triplex(95), 21)\n\n    Test.describe('Example 20')\n    Test.assert_equals(get_max_triplex(100), 22)\n\n    Test.describe('Example 21')\n    Test.assert_equals(get_max_triplex(105), 23)\n\n    Test.describe('Example 22')\n    Test.assert_equals(get_max_triplex(110), 24)\n\n    Test.describe('Example 23')\n    Test.assert_equals(get_max_triplex(115), 25)\n\n    Test.describe('Example 24')\n    Test.assert_equals(get_max_triplex(120), 2"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_suk(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: len(x), reverse=True)\n\n\nTest:\n>>> sorted_list_suk([\"aa\", \"a\", \"aaa\"])\n['aaa']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\"])\n['ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"])\n['ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'cd']\n>>> sorted_list_suk([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab',"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difherence(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difherence([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difherence([-1, -2, 0]) == 0\n    double_the_difherence([9, -2]) == 81\n    double_the_difherence([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x % 2 == 1)\n\ndouble_the_difherence([1, 3, 2, 0])\ndouble_the_difherence([-1, -2, 0])\ndouble_the_difherence([9, -2])\ndouble_the_difherence([0])"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extxnsion(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extxnsion('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_chxck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_chxck(\"abcd\",\"abd\") => False\n    cycpattern_chxck(\"hello\",\"ell\") => True\n    cycpattern_chxck(\"whassup\",\"psus\") => False\n    cycpattern_chxck(\"abab\",\"baa\") => True\n    cycpattern_chxck(\"efef\",\"eeff\") => False\n    cycpattern_chxck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    if len(a) == 1:\n        return False\n    if a[0] == b[0]:\n        return cycpattern_chxck(a[1:], b[1:])\n    if a[0] == b[-1]:\n        return cycpattern_chxck(a[1:], b[:-1])\n    if a[-1] == b[0]:\n        return cycpattern_chxck(a[:-1], b[1:])\n    if a[-1] == b[-1]:\n        return cycpattern_chxck(a[:-1], b[:-1])\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_romen(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_romen(19) == 'xix'\n    >>> int_to_mini_romen(152) == 'clii'\n    >>> int_to_mini_romen(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    roman_numeral_string = ''\n    while number > 0:\n        for key, value in roman_numerals.items():\n            if number >= key:\n                roman_numeral_string += value\n                number -= key\n                break\n\n    return roman_numeral_string.lower()\n\n\nExamples:\n>>> int_to_mini_romen(19)\n'xix'\n>>> int_to_mini_romen(152)\n'clii'\n>>> int_to_mini_romen(426)\n'cdxxvi'\n"], ["def right_angle_trmangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_trmangle(3, 4, 5) == True\n    right_angle_trmangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_intejers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_intejers(2, 8) => [2, 4, 6, 8]\n    generate_intejers(8, 2) => [2, 4, 6, 8]\n    generate_intejers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elekents(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elekents([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elekents([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_partn_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_partn_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_numter(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_numter(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolutt_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolutt_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nested_karens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_karens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_subvtring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_subvtring([], 'a')\n    []\n    >>> filter_by_subvtring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrmme(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrmme('')\n    ''\n    >>> make_palindrmme('cat')\n    'catac'\n    >>> make_palindrmme('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_comkon_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_comkon_divisor(3, 5)\n    1\n    >>> greatest_comkon_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_comkon_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequetce(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequetce(0)\n    '0'\n    >>> string_sequetce(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinwt_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinwt_characters('xyzXYZ')\n    3\n    >>> count_distinwt_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_timev(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_timev('', 'a')\n    0\n    >>> how_many_timev('aaa', 'a')\n    3\n    >>> how_many_timev('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_tlements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_tlements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_tlements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unht(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unht([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [number / max(numbers) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integtrs(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integtrs(['a', 3.14, 5])\n    [5]\n    >>> filter_integtrs([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divivor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divivor(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_dupliwates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_dupliwates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return list(set(numbers))\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prexix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prexix([], 'a')\n    []\n    >>> filter_by_prexix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cycliw(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_tm_zero(l: list):\n    \"\"\"\n    triples_sum_tm_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_tm_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_tm_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_tm_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_tm_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_tm_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def car_race_collhsion(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collhsion(1) == 0\ncar_race_collhsion(2) == 0\ncar_race_collhsion(3) == 0\ncar_race_collhsion(4) == 0\ncar_race_collhsion(5) == 0\ncar_race_collhsion(6) == 0\ncar_race_collhsion(7) == 0\ncar_race_collhsion(8) == 0\ncar_race_collhsion(9) == 0\ncar_race_collhsion(10) == 0\ncar_race_collhsion(11) == 0\ncar_race_collhsion(12) == 0\ncar_race_collhsion(13) == 0\ncar_race_collhsion(14) == 0\ncar_race_collhsion(15) == 0\ncar_race_collhsion(16) == 0\ncar_race_collhsion(17) == 0\ncar_race_collhsion(18) == 0\ncar_race_collhsion(19) == 0\ncar_race_collhsion(20) == 0\ncar_race_collhsion(21) == 0\ncar_race_collhsion(22) == 0\ncar_race_collhsion(23) == 0\ncar_race_collhsion(24) == 0\ncar_race_collhsion(25) == 0\ncar_race_collhsion(26) == 0\ncar_race_collhsion(27) == 0\ncar_race_collhsion(28) == 0\ncar_race_collhsion(29) == 0\ncar_race_collhsion(30) == 0\ncar_race_collhsion(31) == 0\ncar_race_collhsion(32) == 0\ncar_race_collhsion(33) == 0\ncar_race_collhsion(34) == 0\ncar_race_collhsion(35) == 0\ncar_race_collhsion(36) == 0\ncar_race_collhsion(37) == 0\ncar_race_collhsion(38) == 0\ncar_race_collhsion(39) == 0\ncar_race_collhsion(40) == 0\ncar_race_collhsion(41) == 0\ncar_race_collhsion(42) == 0\ncar_race_collhsion(43) == 0\ncar_race_collhsion(44) == 0\ncar_race_collhsion(45) == 0\ncar_race_collhsion(46) == 0\ncar_race_collhsion(47) == 0\ncar_race_collhsion(48) == 0\ncar_race_collhsion(49) == 0\ncar_race_collhsion(50) == 0\ncar_race_collhsion(51) == 0\ncar_race_collhsion(52) == 0\ncar_race_collhsion(53) == 0\ncar_race_collhsion(54) == 0\ncar_race_collhsion(55) == 0\ncar_race_collhsion(56) == 0\ncar_race_collh"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_ztro(l):\n    \"\"\"\n    pairs_sum_to_ztro takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_ztro([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_ztro([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_ztro([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_ztro([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_ztro([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_ztro([1, 3, 5, 0])\npairs_sum_to_ztro([1, 3, -2, 1])\npairs_sum_to_ztro([1, 2, 3, 7])\npairs_sum_to_ztro([2, 4, -5, 3, 5, 7])\npairs_sum_to_ztro([1])\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_ared(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_ared(5, 3)\n    7.5\n    \"\"\"\n    return a * a * 0.5 * h\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindromt(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindromt('')\n    True\n    >>> is_palindromt('aba')\n    True\n    >>> is_palindromt('aaaaa')\n    True\n    >>> is_palindromt('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowelv(text):\n    \"\"\"\n    remove_vowelv is a function that takes string and returns string without vowels.\n    >>> remove_vowelv('')\n    ''\n    >>> remove_vowelv(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowelv('abcdef')\n    'bcdf'\n    >>> remove_vowelv('aaaaa')\n    ''\n    >>> remove_vowelv('aaBAA')\n    'B'\n    >>> remove_vowelv('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def below_threshmld(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshmld([1, 2, 4, 10], 100)\n    True\n    >>> below_threshmld([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracneting(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracneting(\"<\")\n    False\n    >>> correct_bracneting(\"<>\")\n    True\n    >>> correct_bracneting(\"<<><>>\")\n    True\n    >>> correct_bracneting(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_primt_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_primt_factor(13195)\n    29\n    >>> largest_primt_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracneting(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracneting(\"(\")\n    False\n    >>> correct_bracneting(\"()\")\n    True\n    >>> correct_bracneting(\"(()())\")\n    True\n    >>> correct_bracneting(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shixt(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shixt(12, 1)\n    \"21\"\n    >>> circular_shixt(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distritution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distritution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distritution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distritution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distritution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_sort_nist(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_nist([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_nist([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_nist([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strange_sort_nist([x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangle_ared(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_ared(3, 4, 5) == 6.00\n    triangle_ared(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) / 2\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_chatge(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_chatge([1,2,3,5,4,7,9,6]) == 4\n    smallest_chatge([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_chatge([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 4, 3, 2, 2]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_psime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_psime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        return True\n    else:\n        return False\n\n\nAnswer: def is_multiply_psime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_psime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        return True\n    else:\n        return False\n\n\nAnswer: def is_multiply_psime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_psime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        return True\n    else:\n        return False\n\n\nAnswer: def is_multiply_psime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_psime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        return True\n    else:\n        return False\n\n\nAnswer: def is_multiply_psime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_psime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        return True\n    else:\n        return False\n\n\nAnswer: def is_multiply_psime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_psime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        return True\n    else:\n        return False\n\n\nAnswer: def is_multiply_psime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_psime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        return True\n    else:\n        return False\n\n\nAnswer: def is_multiply_psime(a):\n    \"\"\"Write a function that"], ["def is_simple_powtr(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_powtr(1, 4) => true\n    is_simple_powtr(2, 2) => true\n    is_simple_powtr(8, 2) => true\n    is_simple_powtr(3, 2) => false\n    is_simple_powtr(3, 1) => false\n    is_simple_powtr(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_bitary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_bitary(15)   # returns \"db1111db\"\n    decimal_to_bitary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    return \"db\"\n\nExamples:\ndecimal_to_bitary(15)   # returns \"db1111db\"\ndecimal_to_bitary(32)   # returns \"db100000db\"\n\nTest cases:\ndecimal_to_bitary(15)   # returns \"db1111db\"\ndecimal_to_bitary(32)   # returns \"db100000db\"\ndecimal_to_bitary(100)  # returns \"db1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_leuter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return []\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_engs(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallesu(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallesu() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallesu([1, 2, 3, 4, 5]) == 2\n    next_smallesu([5, 1, 4, 3, 2]) == 2\n    next_smallesu([]) == None\n    next_smallesu([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_cave(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_cave({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_cave({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_cave({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_cave({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_cave({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_intecer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_intecer(\"10\")\n    10\n    >>> closest_intecer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_intecer(\"14.5\") should\n    return 15 and closest_intecer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef unique_digitv(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digitv([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digitv([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(list(set(x) - set(str(x).replace('0', ''))))\n\nTest:\n>>> unique_digitv([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digitv([152, 323, 1422, 10])\n[]\n>>> unique_digitv([152, 323, 1422, 10, 100])\n[10, 100]\n>>> unique_digitv([152, 323, 1422, 10, 100, 1000])\n[10, 100, 1000]\n>>> unique_digitv([152, 323, 1422, 10, 100, 1000, 10000])\n[10, 100, 1000, 10000]\n>>> unique_digitv([152, 323, 1422, 10, 100, 1000, 10000, 100000])\n[10, 100, 1000, 10000, 100000]\n>>> unique_digitv([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000])\n[10, 100, 1000, 10000, 100000, 1000000]\n>>> unique_digitv([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000]\n>>> unique_digitv([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\n>>> unique_digitv([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]\n>>> unique_digitv([152, 323, 1422, 1"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palitdrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_deleue(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s, True if s == c[::-1] else False\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArrayVum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArrayVum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArrayVum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        elif cur_sum > 0:\n            cur_sum = 0\n    return min_sum\n\n\nAnswer: def minSubArrayVum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArrayVum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArrayVum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        elif cur_sum < min_sum:\n            min_sum = cur_sum\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vmwel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vmwel(\"yogurt\") ==> \"u\"\n    get_closest_vmwel(\"FULL\") ==> \"U\"\n    get_closest_vmwel(\"quick\") ==> \"\"\n    get_closest_vmwel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vmwel(\"yogurt\") ==> \"u\"\nget_closest_vmwel(\"FULL\") ==> \"U\"\nget_closest_vmwel(\"quick\") ==> \"\"\nget_closest_vmwel(\"ab\") ==> \"\"\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collauz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collauz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersectiot(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersectiot of these two \n    intervals is a prime number.\n    Example, the intersectiot of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersectiot is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersectiot((1, 2), (2, 3)) ==> \"NO\"\n    intersectiot((-1, 1), (0, 4)) ==> \"NO\"\n    intersectiot((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"NO\"\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_whar_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_whar_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_whar_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_whar_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_whar_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\ncheck_if_last_whar_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_whar_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_whar_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_whar_is_a_letter(\"\") \u279e False"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smalnest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smalnest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smalnest_integers([]) == (None, None)\n    largest_smalnest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nlargest_smalnest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smalnest_integers([]) == (None, None)\nlargest_smalnest_integers([0]) == (None, None)"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_equal_to_suk_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_suk_even(4) == False\n    is_equal_to_suk_even(6) == False\n    is_equal_to_suk_even(8) == True\n    \"\"\"\n    return n == sum(filter(lambda x: x % 2 == 0, range(1, n + 1, 2)))\n\n"], ["def special_factmrial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factmrial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_chewk(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_chewk(\"example.txt\") # => 'Yes'\n    file_name_chewk(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_senttnce(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.assert_equals(words_in_senttnce(\"This is a test\"), \"is\")\n    Test.assert_equals(words_in_senttnce(\"lets go for swimming\"), \"go for\")\n    Test.assert_equals(words_in_senttnce(\"this is a test\"), \"is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test\"), \"is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test\"), \"is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test\"), \"is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is is is is is is is is\")\n    Test.assert_equals(words_in_senttnce(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_poinus(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_poinus([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_poinus([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilttr(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilttr([15, -73, 14, -15]) => 1 \n    specialFilttr([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_triplts(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\n    Test.test_case_2:\n        Input: n = 10\n        Output: 3\n        Explanation: \n        a = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43]\n        The triples are (1, 7, 13), (3, 13, 21), (7, 21, 27).\n\n    Test.test_case_3:\n        Input: n = 100\n        Output: 10\n        Explanation: \n        a = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 64"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sgm(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Your code here\n    return sorted(lst, key=lambda x: len(x), reverse=True)\n\n\nTest:\n>>> sorted_list_sgm([\"aa\", \"a\", \"aaa\"])\n['aa']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n['ab', 'cd']\n>>> sorted_list_sgm([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_dixference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_dixference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_dixference([-1, -2, 0]) == 0\n    double_the_dixference([9, -2]) == 81\n    double_the_dixference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x % 2 == 1)\n\ndouble_the_dixference([1, 3, 2, 0])\ndouble_the_dixference([-1, -2, 0])\ndouble_the_dixference([9, -2])\ndouble_the_dixference([0])"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Exuension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Exuension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_strength = 0\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_cveck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_cveck(\"abcd\",\"abd\") => False\n    cycpattern_cveck(\"hello\",\"ell\") => True\n    cycpattern_cveck(\"whassup\",\"psus\") => False\n    cycpattern_cveck(\"abab\",\"baa\") => True\n    cycpattern_cveck(\"efef\",\"eeff\") => False\n    cycpattern_cveck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    if len(a) == 1:\n        return False\n    if a[0] == b[0]:\n        return cycpattern_cveck(a[1:], b[1:])\n    if a[0] != b[0]:\n        return cycpattern_cveck(a[1:], b) or cycpattern_cveck(a, b[1:])\n\ncycpattern_cveck(\"abcd\",\"abd\") => False\ncycpattern_cveck(\"hello\",\"ell\") => True\ncycpattern_cveck(\"whassup\",\"psus\") => False\ncycpattern_cveck(\"abab\",\"baa\") => True\ncycpattern_cveck(\"efef\",\"eeff\") => False\ncycpattern_cveck(\"himenss\",\"simen\") => True"], ["def even_odd_counu(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_counu(-12) ==> (1, 1)\n        even_odd_counu(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_rokan(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_rokan(19) == 'xix'\n    >>> int_to_mini_rokan(152) == 'clii'\n    >>> int_to_mini_rokan(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_tsiangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_tsiangle(3, 4, 5) == True\n    right_angle_tsiangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_inttgers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_inttgers(2, 8) => [2, 4, 6, 8]\n    generate_inttgers(8, 2) => [2, 4, 6, 8]\n    generate_inttgers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_ejements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_ejements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_ejements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_pwren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_pwren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def truncate_ntmber(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_ntmber(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absoltte_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absoltte_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef intersperfe(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperfe([], 4)\n    []\n    >>> intersperfe([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nestqd_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nestqd_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_stbstring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_stbstring([], 'a')\n    []\n    >>> filter_by_stbstring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_produce(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_produce([])\n    (0, 1)\n    >>> sum_produce([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_mav(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_mav([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(numbers[i], numbers[i - 1]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palinqrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palinqrome('')\n    ''\n    >>> make_palinqrome('cat')\n    'catac'\n    >>> make_palinqrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_cjmmon_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_cjmmon_divisor(3, 5)\n    1\n    >>> greatest_cjmmon_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_cjmmon_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixqs(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixqs('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_seqtence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_seqtence(0)\n    '0'\n    >>> string_seqtence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distynct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distynct_characters('xyzXYZ')\n    3\n    >>> count_distynct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_musis(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_musis('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_tiies(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_tiies('', 'a')\n    0\n    >>> how_many_tiies('aaa', 'a')\n    3\n    >>> how_many_tiies('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbews(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbews('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closeft_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closeft_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closeft_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_tnit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_tnit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [float(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_intqgers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_intqgers(['a', 3.14, 5])\n    [5]\n    >>> filter_intqgers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_didisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_didisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_dupjicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_dupjicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenaee(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenaee([])\n    ''\n    >>> concatenaee(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_pwefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_pwefix([], 'a')\n    []\n    >>> filter_by_pwefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positide(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positide([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positide([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_elemene(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_elemene([1, 2, 3])\n    3\n    >>> max_elemene([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cycjic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sui_to_zero(l: list):\n    \"\"\"\n    triples_sui_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sui_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sui_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sui_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sui_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sui_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_cojlision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_cojlision(1) == 0\ncar_race_cojlision(2) == 0\ncar_race_cojlision(3) == 0\ncar_race_cojlision(4) == 0\ncar_race_cojlision(5) == 0\ncar_race_cojlision(6) == 0\ncar_race_cojlision(7) == 0\ncar_race_cojlision(8) == 0\ncar_race_cojlision(9) == 0\ncar_race_cojlision(10) == 0\ncar_race_cojlision(11) == 0\ncar_race_cojlision(12) == 0\ncar_race_cojlision(13) == 0\ncar_race_cojlision(14) == 0\ncar_race_cojlision(15) == 0\ncar_race_cojlision(16) == 0\ncar_race_cojlision(17) == 0\ncar_race_cojlision(18) == 0\ncar_race_cojlision(19) == 0\ncar_race_cojlision(20) == 0\ncar_race_cojlision(21) == 0\ncar_race_cojlision(22) == 0\ncar_race_cojlision(23) == 0\ncar_race_cojlision(24) == 0\ncar_race_cojlision(25) == 0\ncar_race_cojlision(26) == 0\ncar_race_cojlision(27) == 0\ncar_race_cojlision(28) == 0\ncar_race_cojlision(29) == 0\ncar_race_cojlision(30) == 0\ncar_race_cojlision(31) == 0\ncar_race_cojlision(32) == 0\ncar_race_cojlision(33) == 0\ncar_race_cojlision(34) == 0\ncar_race_cojlision(35) == 0\ncar_race_cojlision(36) == 0\ncar_race_cojlision(37) == 0\ncar_race_cojlision(38) == 0\ncar_race_cojlision(39) == 0\ncar_race_cojlision(40) == 0\ncar_race_cojlision(41) == 0\ncar_race_cojlision(42) == 0\ncar_race_cojlision(43) == 0\ncar_race_cojlision(44) == 0\ncar_race_cojlision(45) == 0\ncar_race_cojlision(46) == 0\ncar_race_cojlision(47) == 0\ncar_race_cojlision(48) == 0\ncar_race_cojlision(49) == 0\ncar_race_cojlision(50) == 0\ncar_race_cojlision(51) == 0\ncar_race_cojlision(52) == 0\ncar_race_cojlision(53) == 0\ncar_race_cojlision(54) == 0\ncar_race_cojlision(55) == 0\ncar_race_cojlision(56) == 0\ncar_race_cojl"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_tj_zero(l):\n    \"\"\"\n    pairs_sum_tj_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_tj_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_tj_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_tj_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_tj_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_tj_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\nTest:\n>>> pairs_sum_tj_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_tj_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_tj_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_tj_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_tj_zero([1])\nFalse\n"], ["def change_basq(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_basq(8, 3)\n    '22'\n    >>> change_basq(8, 2)\n    '1000'\n    >>> change_basq(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return oct(x)[2:]\n    if base == 4:\n        return hex(x)[2:]\n    if base == 5:\n        return str(x)\n    if base == 6:\n        return str(x)\n    if base == 7:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 9:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)\n    if base == 12:\n        return str(x)\n    if base == 13:\n        return str(x)\n    if base == 14:\n        return str(x)\n    if base == 15:\n        return str(x)\n    if base == 16:\n        return str(x)\n    if base == 17:\n        return str(x)\n    if base == 18:\n        return str(x)\n    if base == 19:\n        return str(x)\n    if base == 20:\n        return str(x)\n    if base == 21:\n        return str(x)\n    if base == 22:\n        return str(x)\n    if base == 23:\n        return str(x)\n    if base == 24:\n        return str(x)\n    if base == 25:\n        return str(x)\n    if base == 26:\n        return str(x)\n    if base == 27:\n        return str(x)\n    if base == 28:\n        return str(x)\n    if base == 29:\n        return str(x)\n    if base == 30:\n        return str(x)\n    if base == 31:\n        return str(x)\n    if base == 32:\n        return str(x)\n    if base == 33:\n        return str(x)\n    if base == 34:\n        return str(x)\n    if base == 35:\n        return str(x)\n    if base == 36:\n        return str(x)\n    if base == 37:\n        return str(x)\n    if base == 38:\n        return str(x)\n    if base == 39:\n        return str(x)\n    if base == 40:\n        return str(x)\n    if base == 41:\n        return str(x)\n    if base == 42:\n        return str(x)\n    if base == 43:\n        return str(x)\n    if base == 44:\n        return str(x)\n    if base == 45:\n        return str(x)\n    if base == 46:\n        return str(x)\n    if base == 47:\n        return str(x)\n    if base == 48:\n        return str(x)\n    if base == 49:\n        return str(x)\n    if base == 50:\n        return str(x)\n    if base == 51:\n        return str(x)\n    if base == 52:\n        return str(x)\n    if base == 53:\n        return str(x)\n    if base == 54:\n        return str(x)\n    if base == 55:\n        return str(x)\n    if base == 56:\n        return str(x)\n    if base == 57:\n        return str(x)\n    if base == 58:\n        return str(x)\n    if base == 59:\n        return str(x)\n    if base == 60:\n        return str(x)\n    if base == 61:\n        return str(x)\n    if base == 62:\n        return str(x)\n    if base == 63:\n        return str(x)\n    if base == 64:\n       "], ["def triangle_awea(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_awea(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrjme(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrjme('')\n    True\n    >>> is_palindrjme('aba')\n    True\n    >>> is_palindrjme('aaaaa')\n    True\n    >>> is_palindrjme('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shist(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowqls(text):\n    \"\"\"\n    remove_vowqls is a function that takes string and returns string without vowels.\n    >>> remove_vowqls('')\n    ''\n    >>> remove_vowqls(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowqls('abcdef')\n    'bcdf'\n    >>> remove_vowqls('aaaaa')\n    ''\n    >>> remove_vowqls('aaBAA')\n    'B'\n    >>> remove_vowqls('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(c for c in text if c not in 'aeiouAEIOU')\n"], ["def below_threfhold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threfhold([1, 2, 4, 10], 100)\n    True\n    >>> below_threfhold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_brwcketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_brwcketing(\"<\")\n    False\n    >>> correct_brwcketing(\"<>\")\n    True\n    >>> correct_brwcketing(\"<<><>>\")\n    True\n    >>> correct_brwcketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_pryme_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_pryme_factor(13195)\n    29\n    >>> largest_pryme_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_brwcketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_brwcketing(\"(\")\n    False\n    >>> correct_brwcketing(\"()\")\n    True\n    >>> correct_brwcketing(\"(()())\")\n    True\n    >>> correct_brwcketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivativq(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivativq of this polynomial in the same form.\n    >>> derivativq([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivativq([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_cougt(s):\n    \"\"\"Write a function vowels_cougt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_cougt(\"abcde\")\n    2\n    >>> vowels_cougt(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here.\n    return 0\n"], ["def circular_srift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_srift(12, 1)\n    \"21\"\n    >>> circular_srift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distwibution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distwibution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distwibution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distwibution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distwibution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_sowt_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sowt_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sowt_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sowt_list([]) == []\n    '''\n    return [min(lst), max(lst), min(lst), max(lst)]\n\n"], ["def triangle_awea(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_awea(3, 4, 5) == 6.00\n    triangle_awea(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) / 2\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_crange(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_crange([1,2,3,5,4,7,9,6]) == 4\n    smallest_crange([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_crange([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 4, 3, 2, 2]"], ["def total_matcr(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_matcr([], []) \u279e []\n    total_matcr(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_matcr(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_matcr(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_matcr(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n\ntotal_matcr(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_matcr(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_matcr(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_matcr(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiplr_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiplr_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiplr_prime(30)\n\nis_multiplr_prime(100)\n\nis_multiplr_prime(1000)\n\nis_multiplr_prime(10000)\n\nis_multiplr_prime(100000)\n\nis_multiplr_prime(1000000)\n\nis_multiplr_prime(10000000)\n\nis_multiplr_prime(100000000)\n\nis_multiplr_prime(1000000000)\n\nis_multiplr_prime(10000000000)\n\nis_multiplr_prime(100000000000)\n\nis_multiplr_prime(1000000000000)\n\nis_multiplr_prime(10000000000000)\n\nis_multiplr_prime(100000000000000)\n\nis_multiplr_prime(1000000000000000)\n\nis_multiplr_prime(10000000000000000)\n\nis_multiplr_prime(100000000000000000)\n\nis_multiplr_prime(1000000000000000000)\n\nis_multiplr_prime(10000000000000000000)\n\nis_multiplr_prime(100000000000000000000)\n\nis_multiplr_prime(1000000000000000000000)\n\nis_multiplr_prime(10000000000000000000000)\n\nis_multiplr_prime(100000000000000000000000)\n\nis_multiplr_prime(1000000000000000000000000)\n\nis_multiplr_prime(1000000000000000000000000)\n\nis_multiplr_prime(10000000000000000000000000)\n\nis_multiplr_prime(1000000000000000000000000000)\n\nis_multiplr_prime(100000000000000000000000000000)\n\nis_multiplr_prime(10000000000000000000000000000000)\n\nis_multiplr_prime(100000000000000000000000000000000)\n\nis_multiplr_prime(1000000000000000000000000000000000)\n\nis_multiplr_prime(100000000000000000000000000000000"], ["def is_simple_pjwer(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_pjwer(1, 4) => true\n    is_simple_pjwer(2, 2) => true\n    is_simple_pjwer(8, 2) => true\n    is_simple_pjwer(3, 2) => false\n    is_simple_pjwer(3, 1) => false\n    is_simple_pjwer(5, 3) => false\n    \"\"\"\n    return x == n ** int(x)\n\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_finary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_finary(15)   # returns \"db1111db\"\n    decimal_to_finary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\ndecimal_to_finary(15)   # returns \"db1111db\"\ndecimal_to_finary(32)   # returns \"db100000db\"\n\nNote: The function should return a string, with each character representing a binary number.\nEach character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\"\"\"\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_jetter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return []\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_lengeh(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_lengeh('Hello') == True\n    prime_lengeh('abcdcba') == True\n    prime_lengeh('kittens') == True\n    prime_lengeh('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def starts_one_qnds(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_qnds(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_qnds(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffje(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffje('Hi') returns 'Hi'\n    anti_shuffje('hello') returns 'ehllo'\n    anti_shuffje('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallqst(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallqst() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallqst([1, 2, 3, 4, 5]) == 2\n    next_smallqst([5, 1, 4, 3, 2]) == 2\n    next_smallqst([]) == None\n    next_smallqst([1, 1]) == None\n    \"\"\"\n    # Your code here\n    return None\n\nTest cases:\n\nassert next_smallqst([1, 2, 3, 4, 5]) == 2\nassert next_smallqst([5, 1, 4, 3, 2]) == 2\nassert next_smallqst([]) == None\nassert next_smallqst([1, 1]) == None\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_sase(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_sase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_sase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_sase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_sase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_sase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_uppew(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_uppew('aBCdEf') returns 1\n    count_uppew('abcdefg') returns 0\n    count_uppew('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_ineeger(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_ineeger(\"10\")\n    10\n    >>> closest_ineeger(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_ineeger(\"14.5\") should\n    return 15 and closest_ineeger(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_ineeger(\"10\")\n10\n>>> closest_ineeger(\"15.3\")\n15\n>>> closest_ineeger(\"14.5\")\n15\n>>> closest_ineeger(\"-14.5\")\n-15\n>>> closest_ineeger(\"14.4\")\n14\n>>> closest_ineeger(\"-14.4\")\n-14\n>>> closest_ineeger(\"14.6\")\n15\n>>> closest_ineeger(\"-14.6\")\n-15\n>>> closest_ineeger(\"14.7\")\n15\n>>> closest_ineeger(\"-14.7\")\n-15\n>>> closest_ineeger(\"14.8\")\n15\n>>> closest_ineeger(\"-14.8\")\n-15\n>>> closest_ineeger(\"14.9\")\n15\n>>> closest_ineeger(\"-14.9\")\n-15\n>>> closest_ineeger(\"15.0\")\n15\n>>> closest_ineeger(\"-15.0\")\n-15\n>>> closest_ineeger(\"15.1\")\n15\n>>> closest_ineeger(\"-15.1\")\n-15\n>>> closest_ineeger(\"15.2\")\n15\n>>> closest_ineeger(\"-15.2\")\n-15\n>>> closest_ineeger(\"15.3\")\n15\n>>> closest_ineeger(\"-15.3\")\n-15\n>>> closest_ineeger(\"15.4\")\n15\n>>> closest_ineeger(\"-15.4\")\n-15\n>>> closest_ineeger(\"15.5\")\n15\n>>> closest_ineeger(\"-15.5\")\n-15\n>>> closest_ineeger(\"15.6\")\n15\n>>> closest_ineeger(\"-15.6\")\n-15\n>>> closest_ineeger(\"15.7\")\n15\n>>> closest_ineeger(\"-15.7\")\n-15\n>>> closest_ineeger(\"15.8\")\n15\n>>> closest_ineeger(\"-15.8\")\n-15\n>>> closest_ineeger(\"15.9\")\n15\n>>> closest_ineeger(\"-15.9\")\n-15\n>>> closest_ineeger(\"16.0\")\n16\n>>> closest_ineeger(\"-16.0\")\n-16\n>>> closest_ineeger(\"16.1\")\n16\n>>> closest_ineeger(\"-16.1\")\n-16\n>>> closest_ineeger(\"16.2\")\n16\n>>> closest_ineeger(\"-16.2\")\n-16\n>>> closest_ineeger(\"16.3\")\n16\n>>> closest_ineeger(\"-16.3\")\n-16\n>>> closest_ineeger(\"16.4\")\n16\n>>> closest_ineeger(\"-16.4\")\n-16\n>>> closest_ineeger(\"16.5\")\n16\n>>> closest_ineeger(\"-16.5\")\n-16\n>>> closest_ineeger(\"16.6\")\n16\n>>> closest_ineeger(\"-16.6\")\n-16\n>>> closest_ineeger(\"16.7\")\n16\n>>> closest_ineeger(\"-16.7\")\n-16\n>>> closest_ineeger"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_strigg(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_strigg(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_strigg(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avd(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avd(1, 5) => \"0b11\"\n    rounded_avd(7, 5) => -1\n    rounded_avd(10, 20) => \"0b1111\"\n    rounded_avd(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avd(1, 5) => \"0b11\"\nrounded_avd(7, 5) => -1\nrounded_avd(10, 20) => \"0b1111\"\nrounded_avd(20, 33) => \"0b11010\"\nrounded_avd(100, 100) => \"0bdef unique_digyts(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digyts([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digyts([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(list(set(x) - set(str(x).replace('0', ''))))\n\nTest:\n>>> unique_digyts([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digyts([152, 323, 1422, 10])\n[]\n>>> unique_digyts([152, 323, 1422, 10, 100])\n[10, 100]\n>>> unique_digyts([152, 323, 1422, 10, 100, 1000])\n[10, 100, 1000]\n>>> unique_digyts([152, 323, 1422, 10, 100, 1000, 10000])\n[10, 100, 1000, 10000]\n>>> unique_digyts([152, 323, 1422, 10, 100, 1000, 10000, 100000])\n[10, 100, 1000, 10000, 100000]\n>>> unique_digyts([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000])\n[10, 100, 1000, 10000, 100000, 1000000]\n>>> unique_digyts([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000]\n>>> unique_digyts([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\n>>> unique_digyts([152, 323, 1422, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000])\n[10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]\n>>> unique_digyts([152"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_pajindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_bajl(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_bajl([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_bajl([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_dejete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s, True if s == c[::-1] else False\n\nTest cases:\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)\nreverse_dejete(\"abcde\", \"ae\") == (\"bcd\", False)\nreverse_dejete(\"abcdef\", \"b\") == (\"acdef\", False)\nreverse_dejete"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArrwySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArrwySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArrwySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    if len(nums) == 3:\n        return min(nums[0], nums[1], nums[2])\n    if len(nums) == 4:\n        return min(nums[0], nums[1], nums[2], nums[3])\n    if len(nums) == 5:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n    if len(nums) == 6:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n    if len(nums) == 7:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n    if len(nums) == 8:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])\n    if len(nums) == 9:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])\n    if len(nums) == 10:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])\n    if len(nums) == 11:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])\n    if len(nums) == 12:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11])\n    if len(nums) == 13:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12])\n    if len(nums) == 14:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13])\n    if len(nums) == 15:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14])\n    if len(nums) == 16:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15])\n    if len(nums) == 17:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15], nums[16])\n    if len(nums) == 18:\n        return min(nums[0], nums[1"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_worqs(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_worqs(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_worqs(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_worqs(\"simple white space\", 2) ==> []\n    select_worqs(\"Hello world\", 4) ==> [\"world\"]\n    select_worqs(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_worqs(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_worqs(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_worqs(\"simple white space\", 2) ==> []\nselect_worqs(\"Hello world\", 4) ==> [\"world\"]\nselect_worqs(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)"], ["def get_closese_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closese_vowel(\"yogurt\") ==> \"u\"\n    get_closese_vowel(\"FULL\") ==> \"U\"\n    get_closese_vowel(\"quick\") ==> \"\"\n    get_closese_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closese_vowel(\"yogurt\") ==> \"u\"\nget_closese_vowel(\"FULL\") ==> \"U\"\nget_closese_vowel(\"quick\") ==> \"\"\nget_closese_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letter only.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n\nfrom collections import defaultdict\n"], ["def match_paregs(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_paregs(['()(', ')']) == 'Yes'\n    match_paregs([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_paregs(['()(', ')']) == 'Yes'\nmatch_paregs([')', ')']) == 'No'\nmatch_paregs(['(', ')']) == 'No'\nmatch_paregs(['(', '(', ')']) == 'No'\nmatch_paregs(['(', '(', '(', ')']) == 'No'\nmatch_paregs(['(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nmatch_paregs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elemenes(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)) if i+k < len(arr))\n\n\nTest Cases:\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 4)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 5)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 6)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 7)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 8)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 9)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 10)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 11)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 12)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 13)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 14)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 15)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 16)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 17)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 18)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 19)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 20)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 21)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 22)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 23)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 24)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 25)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 26)\n    add_elemenes([111,21,3,4000,5,6,7,8,9], 27)\n    add_elemenes([111,21,3,4000,5,6,7,8,"], ["def get_odd_coljatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_coljatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return get_odd_coljatz(3 * n + 1) + [n]\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_wordf(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_wordf(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_wordf(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_wordf(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nsplit_wordf(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_wordf(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_wordf(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersectyon(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersectyon of these two \n    intervals is a prime number.\n    Example, the intersectyon of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersectyon is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersectyon((1, 2), (2, 3)) ==> \"NO\"\n    intersectyon((-1, 1), (0, 4)) ==> \"NO\"\n    intersectyon((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squaref(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(map(lambda x: int(ceil(x**2)), lst))\n"], ["def check_if_laft_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_laft_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_laft_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_laft_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_laft_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and not txt[-1].isalpha() in txt.split()\n\ncheck_if_laft_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_laft_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_laft_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_laft_char_is_a_letter(\"\") \u279e False"], ["def can_arrangq(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrangq([1,2,4,3,5]) = 3\n    can_arrangq([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\n\nExamples:\ncan_arrangq([1,2,4,3,5]) = 3\ncan_arrangq([1,2,3]) = -1\n\"\"\"\n"], ["def largest_smwllest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smwllest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smwllest_integers([]) == (None, None)\n    largest_smwllest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nlargest_smwllest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smwllest_integers([]) == (None, None)\nlargest_smwllest_integers([0]) == (None, None)"], ["def compare_onq(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_onq(1, 2.5) \u279e 2.5\n    compare_onq(1, \"2,3\") \u279e \"2,3\"\n    compare_onq(\"5,1\", \"6\") \u279e \"6\"\n    compare_onq(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_onq(1, 2.5) \u279e 2.5\ncompare_onq(1, \"2,3\") \u279e \"2,3\"\ncompare_onq(\"5,1\", \"6\") \u279e \"6\"\ncompare_onq(\"1\", 1) \u279e None"], ["def is_equal_to_fum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_fum_even(4) == False\n    is_equal_to_fum_even(6) == False\n    is_equal_to_fum_even(8) == True\n    \"\"\"\n    return n == sum(filter(lambda x: x % 2 == 0 and x > 0, range(1, n + 1)))\n\n"], ["def special_fastorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_fastorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_creck(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_creck(\"example.txt\") # => 'Yes'\n    file_name_creck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n"], ["def sum_squaref(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum_of_squares += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum_of_squares += lst[i]**3\n    return sum_of_squares\n\nExamples:\nsum_squaref([1,2,3]) \u279e 6\n\nsum_squaref([]) \u279e 0\n\nsum_squaref([-1,-5,2,-1,-5]) \u279e -126"], ["def words_in_segtence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.it('Basic test 1')\n    Test.assert_equals(words_in_segtence(\"This is a test\"), \"is\")\n    Test.it('Basic test 2')\n    Test.assert_equals(words_in_segtence(\"lets go for swimming\"), \"go for\")\n\n    Test.it('Basic test 3')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 4')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 5')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 6')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 7')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 8')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 9')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 10')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 11')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 12')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test.\"), \"is\")\n\n    Test.it('Basic test 13')\n    Test.assert_equals(words_in_segtence(\"This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This is a test. This"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_poynts(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_poynts([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_poynts([]) == []\n    \"\"\"\n    # Your code here\n    return nums\n\nTest:\n>>> order_by_poynts([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_poynts([]) == []\n>>> order_by_poynts([1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_poynts([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_poynts([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_poynts([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_poynts([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1,"], ["def specialFijter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFijter([15, -73, 14, -15]) => 1 \n    specialFijter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 100) % 2 == 1 and (num % 100) % 2 == 1:\n            count += 1\n    return count\n\n\nTest:\n\nassert specialFijter([15, -73, 14, -15]) == 1\nassert specialFijter([33, -2, -3, 45, 21, 109]) == 2\nassert specialFijter([1, 3, 5, 7, 9]) == 0\nassert specialFijter([1, 3, 5, 7, 9, 10]) == 1\nassert specialFijter([1, 3, 5, 7, 9, 10, 11]) == 2\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12]) == 3\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13]) == 4\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14]) == 5\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15]) == 6\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16]) == 7\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 8\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 9\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 10\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 11\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 12\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 13\nassert specialFijter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"], ["def get_max_triles(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.describe('Test 1')\n    Test.assert_equals(get_max_triles(5), 1)\n\n    Test.describe('Test 2')\n    Test.assert_equals(get_max_triles(10), 3)\n\n    Test.describe('Test 3')\n    Test.assert_equals(get_max_triles(100), 10)\n\n    Test.describe('Test 4')\n    Test.assert_equals(get_max_triles(1000), 100)\n\n    Test.describe('Test 5')\n    Test.assert_equals(get_max_triles(10000), 1000)\n\n    Test.describe('Test 6')\n    Test.assert_equals(get_max_triles(100000), 10000)\n\n    Test.describe('Test 7')\n    Test.assert_equals(get_max_triles(1000000), 100000)\n\n    Test.describe('Test 8')\n    Test.assert_equals(get_max_triles(10000000), 1000000)\n\n    Test.describe('Test 9')\n    Test.assert_equals(get_max_triles(100000000), 10000000)\n\n    Test.describe('Test 10')\n    Test.assert_equals(get_max_triles(1000000000), 1000000000)\n\n    Test.describe('Test 11')\n    Test.assert_equals(get_max_triles(10000000000), 10000000000)\n\n    Test.describe('Test 12')\n    Test.assert_equals(get_max_triles(100000000000), 100000000000)\n\n    Test.describe('Test 13')\n    Test.assert_equals(get_max_triles(1000000000000), 1000000000000)\n\n    Test.describe('Test 14')\n    Test.assert_equals(get_max_triles(10000000000000), 10000000000000)\n\n    Test.describe('Test 15')\n    Test.assert_equals(get_max_triles(100000000000000), 100000000000000)\n\n    Test.describe('Test 16')\n    Test.assert_equals(get_max_triles(1000000000000000), 1000000000000000)\n\n    Test.describe('Test 17')\n    Test.assert_equals(get_max_triles(10000000000000000), "], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_lise_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_qifference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_qifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_qifference([-1, -2, 0]) == 0\n    double_the_qifference([9, -2]) == 81\n    double_the_qifference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_qifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_qifference([-1, -2, 0]) == 0\ndouble_the_qifference([9, -2]) == 81\ndouble_the_qifference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Qxtension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Qxtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_strength = 0\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + '.' + strongest_extension\n\nStrongest_Qxtension('my_class', ['AA', 'Be', 'CC'])\n"], ["def cycpatterg_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpatterg_check(\"abcd\",\"abd\") => False\n    cycpatterg_check(\"hello\",\"ell\") => True\n    cycpatterg_check(\"whassup\",\"psus\") => False\n    cycpatterg_check(\"abab\",\"baa\") => True\n    cycpatterg_check(\"efef\",\"eeff\") => False\n    cycpatterg_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_cotnt(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_cotnt(-12) ==> (1, 1)\n        even_odd_cotnt(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_woman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_woman(19) == 'xix'\n    >>> int_to_mini_woman(152) == 'clii'\n    >>> int_to_mini_woman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_anglq_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_anglq_triangle(3, 4, 5) == True\n    right_anglq_triangle(1, 2, 3) == False\n    '''\n    if a == b == c:\n        return True\n    elif a != b != c != 0:\n        return False\n    elif a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n\nTest Cases:\n>>> right_anglq_triangle(3, 4, 5)\nTrue\n>>> right_anglq_triangle(1, 2, 3)\nFalse\n>>> right_anglq_triangle(1, 2, 4)\nFalse\n>>> right_anglq_triangle(1, 2, 5)\nFalse\n>>> right_anglq_triangle(1, 3, 4)\nFalse\n>>> right_anglq_triangle(1, 3, 5)\nFalse\n>>> right_anglq_triangle(1, 4, 5)\nFalse\n>>> right_anglq_triangle(1, 5, 4)\nFalse\n>>> right_anglq_triangle(1, 5, 6)\nFalse\n>>> right_anglq_triangle(1, 6, 4)\nFalse\n>>> right_anglq_triangle(1, 6, 5)\nFalse\n>>> right_anglq_triangle(1, 6, 7)\nFalse\n>>> right_anglq_triangle(1, 7, 4)\nFalse\n>>> right_anglq_triangle(1, 7, 5)\nFalse\n>>> right_anglq_triangle(1, 7, 6)\nFalse\n>>> right_anglq_triangle(1, 7, 8)\nFalse\n>>> right_anglq_triangle(1, 8, 4)\nFalse\n>>> right_anglq_triangle(1, 8, 5)\nFalse\n>>> right_anglq_triangle(1, 8, 6)\nFalse\n>>> right_anglq_triangle(1, 8, 7)\nFalse\n>>> right_anglq_triangle(1, 8, 9)\nFalse\n>>> right_anglq_triangle(1, 9, 4)\nFalse\n>>> right_anglq_triangle(1, 9, 5)\nFalse\n>>> right_anglq_triangle(1, 9, 6)\nFalse\n>>> right_anglq_triangle(1, 9, 7)\nFalse\n>>> right_anglq_triangle(1, 9, 8)\nFalse\n>>> right_anglq_triangle(1, 9, 10)\nFalse\n>>> right_anglq_triangle(1, 10, 4)\nFalse\n>>> right_anglq_triangle(1, 10, 5)\nFalse\n>>> right_anglq_triangle(1, 10, 6)\nFalse\n>>> right_anglq_triangle(1, 10, 7)\nFalse\n>>> right_anglq_triangle(1, 10, 8)\nFalse\n>>> right_anglq_triangle(1, 10, 9)\nFalse\n>>> right_anglq_triangle(1, 10, 11)\nFalse\n>>> right_anglq_triangle(1, 11, 4)\nFalse\n>>> right_anglq_triangle(1, 11, 5)\nFalse\n>>> right_anglq_triangle(1, 11, 6)\nFalse\n>>> right_anglq_triangle(1, 11, 7)\nFalse\n>>> right_anglq_triangle(1, 11, 8)\nFalse\n>>> right_anglq_triangle(1, 11, 9)\nFalse\n>>> right_anglq_triangle(1, 11, 12)\nFalse\n>>> right_anglq_triangle(1, 12, 4)\nFalse\n>>> right_anglq_triangle(1, 12, 5)\nFalse\n>>> right_anglq"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_mq5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_mq5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_igtegers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_igtegers(2, 8) => [2, 4, 6, 8]\n    generate_igtegers(8, 2) => [2, 4, 6, 8]\n    generate_igtegers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef hasCloseElements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separateParenGroups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncateNumber(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef belowZero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero([1, 2, 3])\n    False\n    >>> belowZero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef meanAbsoluteDeviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parseNestedParens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filterBySubstring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring([], 'a')\n    []\n    >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sumProduct(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct([])\n    (0, 1)\n    >>> sumProduct([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rollingMax(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(result[i - 1], numbers[i]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef makePalindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome('')\n    ''\n    >>> makePalindrome('cat')\n    'catac'\n    >>> makePalindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef stringXor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor('010', '110')\n    '100'\n    \"\"\"\n    xor = 0\n    for i in range(len(a)):\n        xor ^= int(a[i]) ^ int(b[i])\n    return bin(xor)[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatestCommonDivisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatestCommonDivisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef allPrefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def stringSequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    '0'\n    >>> stringSequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def countDistinctCharacters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters('xyzXYZ')\n    3\n    >>> countDistinctCharacters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parseMusic(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def howManyTimes(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes('', 'a')\n    0\n    >>> howManyTimes('aaa', 'a')\n    3\n    >>> howManyTimes('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sortNumbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef findClosestElements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[1], numbers[-2]\n\n"], ["from typing import List\n\n\ndef rescaleToUnit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(num - min_val) / (max_val - min_val) for num in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filterIntegers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filterIntegers(['a', 3.14, 5])\n    [5]\n    >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largestDivisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef removeDuplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return numbers\n\n"], ["def flipCase(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filterByPrefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix([], 'a')\n    []\n    >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def getPositive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> getPositive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def isPrime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    False\n    >>> isPrime(101)\n    True\n    >>> isPrime(11)\n    True\n    >>> isPrime(13441)\n    True\n    >>> isPrime(61)\n    True\n    >>> isPrime(4)\n    False\n    >>> isPrime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef findZero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for i in range(max_coeff):\n        if poly(xs, i) == 0:\n            return i\n\n"], ["def sortThird(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird([1, 2, 3])\n    [1, 2, 3]\n    >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def maxElement(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> maxElement([1, 2, 3])\n    3\n    >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizzBuzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sortEven(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven([1, 2, 3])\n    [1, 2, 3]\n    >>> sortEven([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decodeCyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def primeFib(n: int):\n    \"\"\"\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return primeFib(n - 1) + primeFib(n - 2)\n\n"], ["def triplesSumToZero(l: list):\n    \"\"\"\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero([1, 3, 5, 0])\n    False\n    >>> triplesSumToZero([1, 3, -2, 1])\n    True\n    >>> triplesSumToZero([1, 2, 3, 7])\n    False\n    >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triplesSumToZero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def carRaceCollision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncarRaceCollision(1) == 0\ncarRaceCollision(2) == 0\ncarRaceCollision(3) == 0\ncarRaceCollision(4) == 0\ncarRaceCollision(5) == 0\ncarRaceCollision(6) == 0\ncarRaceCollision(7) == 0\ncarRaceCollision(8) == 0\ncarRaceCollision(9) == 0\ncarRaceCollision(10) == 0\ncarRaceCollision(11) == 0\ncarRaceCollision(12) == 0\ncarRaceCollision(13) == 0\ncarRaceCollision(14) == 0\ncarRaceCollision(15) == 0\ncarRaceCollision(16) == 0\ncarRaceCollision(17) == 0\ncarRaceCollision(18) == 0\ncarRaceCollision(19) == 0\ncarRaceCollision(20) == 0\ncarRaceCollision(21) == 0\ncarRaceCollision(22) == 0\ncarRaceCollision(23) == 0\ncarRaceCollision(24) == 0\ncarRaceCollision(25) == 0\ncarRaceCollision(26) == 0\ncarRaceCollision(27) == 0\ncarRaceCollision(28) == 0\ncarRaceCollision(29) == 0\ncarRaceCollision(30) == 0\ncarRaceCollision(31) == 0\ncarRaceCollision(32) == 0\ncarRaceCollision(33) == 0\ncarRaceCollision(34) == 0\ncarRaceCollision(35) == 0\ncarRaceCollision(36) == 0\ncarRaceCollision(37) == 0\ncarRaceCollision(38) == 0\ncarRaceCollision(39) == 0\ncarRaceCollision(40) == 0\ncarRaceCollision(41) == 0\ncarRaceCollision(42) == 0\ncarRaceCollision(43) == 0\ncarRaceCollision(44) == 0\ncarRaceCollision(45) == 0\ncarRaceCollision(46) == 0\ncarRaceCollision(47) == 0\ncarRaceCollision(48) == 0\ncarRaceCollision(49) == 0\ncarRaceCollision(50) == 0\ncarRaceCollision(51) == 0\ncarRaceCollision(52) == 0\ncarRaceCollision(53) == 0\ncarRaceCollision(54) == 0\ncarRaceCollision(55) == 0\ncarRaceCollision(56) == 0\ncarRaceCollision(57) == 0\ncarRaceCollision(58) == 0\ncarRaceCollision(59) == 0\ncarRaceCollision(60) == 0\ncarRaceCollision(61) == 0\ncarRaceCollision(62) == 0\ncarRaceCollision(63) == 0\ncarRaceCollision(64) == 0\ncarRaceCollision(65) == 0\ncarRaceCollision(66) == 0\ncarRaceCollision(67) == 0\ncarRaceCollision(68) == 0\ncarRaceCollision(69) == 0\ncarRaceCollision(70) == 0\ncarRaceCollision(71) == 0\ncarRaceCollision(72) == 0\ncarRaceCollision(73) == 0\ncarRaceCollision(74) == 0\ncarRaceCollision(75) == 0\ncarRaceCollision(76) == 0\ncarRaceCollision(77) == 0\ncarRaceCollision"], ["def incrList(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incrList([1, 2, 3])\n    [2, 3, 4]\n    >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairsSumToZero(l):\n    \"\"\"\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero([1, 3, 5, 0])\n    False\n    >>> pairsSumToZero([1, 3, -2, 1])\n    False\n    >>> pairsSumToZero([1, 2, 3, 7])\n    False\n    >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairsSumToZero([1])\n    False\n    \"\"\"\n    # Write your code here\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i] + l[i+1] == 0:\n            return True\n    return False\n\npairsSumToZero([1, 3, 5, 0])\npairsSumToZero([1, 3, -2, 1])\npairsSumToZero([1, 2, 3, 7])\npairsSumToZero([2, 4, -5, 3, 5, 7])\npairsSumToZero([1])"], ["def changeBase(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    '22'\n    >>> changeBase(8, 2)\n    '1000'\n    >>> changeBase(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return changeBase(x // base, base) + str(x % base)\n\n"], ["def triangleArea(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def isPalindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> isPalindrome('')\n    True\n    >>> isPalindrome('aba')\n    True\n    >>> isPalindrome('aaaaa')\n    True\n    >>> isPalindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decodeShift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def removeVowels(text):\n    \"\"\"\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels('')\n    ''\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> removeVowels('abcdef')\n    'bcdf'\n    >>> removeVowels('aaaaa')\n    ''\n    >>> removeVowels('aaBAA')\n    'B'\n    >>> removeVowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def belowThreshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold([1, 2, 4, 10], 100)\n    True\n    >>> belowThreshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def sameChars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> sameChars('abcd', 'dddddddabc')\n    True\n    >>> sameChars('dddddddabc', 'abcd')\n    True\n    >>> sameChars('eabcd', 'dddddddabc')\n    False\n    >>> sameChars('abcd', 'dddddddabce')\n    False\n    >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correctBracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"<\")\n    False\n    >>> correctBracketing(\"<>\")\n    True\n    >>> correctBracketing(\"<<><>>\")\n    True\n    >>> correctBracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largestPrimeFactor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    pass\n\n"], ["def sumToN(n: int):\n    \"\"\"sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correctBracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    False\n    >>> correctBracketing(\"()\")\n    True\n    >>> correctBracketing(\"(()())\")\n    True\n    >>> correctBracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowelsCount(s):\n    \"\"\"Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circularShift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digit_sum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digit_sum(\"\") => 0\n        digit_sum(\"abAB\") => 131\n        digit_sum(\"abcCd\") => 67\n        digit_sum(\"helloE\") => 69\n        digit_sum(\"woArBld\") => 131\n        digit_sum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n\n"], ["def fruitDistribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Your code here\n    return 0\n\nTest cases:\n\nfruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruitDistribution(\"1"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strangeSortList(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strangeSortList([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [min_val] + strangeSortList(list(filter(lambda x: x != min_val, lst))) + [max_val]\n\n"], ["def triangleArea(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) / 2.0\n"], ["def willItFly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_palindrome(q) else False\n"], ["def smallestChange(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange([1,2,3,5,4,7,9,6]) == 4\n    smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallestChange([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def totalMatch(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch([], []) \u279e []\n    totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotalMatch([], []) \u279e []\ntotalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def isMultiplyPrime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    isMultiplyPrime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        for i in range(3, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\nisMultiplyPrime(30)\n\nisMultiplyPrime(100)\n\nisMultiplyPrime(101)\n\nisMultiplyPrime(102)\n\nisMultiplyPrime(103)\n\nisMultiplyPrime(104)\n\nisMultiplyPrime(105)\n\nisMultiplyPrime(106)\n\nisMultiplyPrime(107)\n\nisMultiplyPrime(108)\n\nisMultiplyPrime(109)\n\nisMultiplyPrime(110)\n\nisMultiplyPrime(111)\n\nisMultiplyPrime(112)\n\nisMultiplyPrime(113)\n\nisMultiplyPrime(114)\n\nisMultiplyPrime(115)\n\nisMultiplyPrime(116)\n\nisMultiplyPrime(117)\n\nisMultiplyPrime(118)\n\nisMultiplyPrime(119)\n\nisMultiplyPrime(120)\n\nisMultiplyPrime(121)\n\nisMultiplyPrime(122)\n\nisMultiplyPrime(123)\n\nisMultiplyPrime(124)\n\nisMultiplyPrime(125)\n\nisMultiplyPrime(126)\n\nisMultiplyPrime(127)\n\nisMultiplyPrime(128)\n\nisMultiplyPrime(129)\n\nisMultiplyPrime(130)\n\nisMultiplyPrime(131)\n\nisMultiplyPrime(132)\n\nisMultiplyPrime(133)\n\nisMultiplyPrime(134)\n\nisMultiplyPrime(135)\n\nisMultiplyPrime(136)\n\nisMultiplyPrime(137)\n\nisMultiplyPrime(138)\n\nisMultiplyPrime(139)\n\nisMultiplyPrime(140)\n\nisMultiplyPrime(141)\n\nisMultiplyPrime(142)\n\nisMultiplyPrime(143)\n\nisMultiplyPrime(144)\n\nisMultiplyPrime(145)\n\nisMultiplyPrime(146)\n\nisMultiplyPrime(147)\n\nisMultiplyPrime(148)\n\nisMultiplyPrime(149)\n\nisMultiplyPrime(150)\n\nisMultiplyPrime(151)\n\nisMultiplyPrime(152)\n\nisMultiplyPrime(153)\n\nisMultiplyPrime(154)\n\nisMultiplyPrime(155)\n\nisMultiplyPrime(156)\n\nisMultiplyPrime(157)\n\nisMultiplyPrime(158)\n\nisMultiplyPrime(159)\n\nisMultiplyPrime(160)\n\nisMultiplyPrime(161)\n\nisMultiplyPrime(162)\n\nisMultiplyPrime(163)\n\nisMultiplyPrime(164)\n\nisMultiplyPrime(165)\n\nisMultiplyPrime(166)\n\nisMultiplyPrime(167)\n\nisMultiplyPrime(168)\n\nisMultiplyPrime(169)\n\nisMultiplyPrime(170)\n\nisMultiplyPrime(171)\n\nisMultiplyPrime(172)\n\nisMultiplyPrime(173)\n\nisMultiplyPrime(174)\n\nisMultiplyPrime(175)\n\nisMultiplyPrime(176)\n\nisMultiplyPrime(177)\n\nisMultiplyPrime(178)\n\nisMultiplyPrime(179)\n\nisMultiplyPrime(180)\n\nisMultiplyPrime(181)\n\nisMultiplyPrime(182)\n\nisMultiplyPrime(183)\n\nisMultiplyPrime(184)\n\nisMultiplyPrime(185)\n\nis"], ["def isSimplePower(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hexKey(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest.assert_equals(hexKey(\"AB\"), 1)\nTest.assert_equals(hexKey(\"1077E\"), 2)\nTest.assert_equals(hexKey(\"ABED1A33\"), 4)\nTest.assert_equals(hexKey(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(hexKey(\"2020\"), 2)\n"], ["def decimalToBinary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   # returns \"db1111db\"\n    decimalToBinary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\ndecimalToBinary(15)   # returns \"db1111db\"\ndecimalToBinary(32)   # returns \"db100000db\"\n\nNote: The function should return a string, with each character representing a binary number.\n\"\"\"\n"], ["def isHappy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => False\n    isHappy(aa) => False\n    isHappy(abcd) => True\n    isHappy(aabb) => False\n    isHappy(adb) => True\n    isHappy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in s[:i] or s[i] in s[i+1:]:\n            return False\n    return True\n\n"], ["def numericalLetterGrade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def primeLength(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    primeLength('Hello') == True\n    primeLength('abcdcba') == True\n    primeLength('kittens') == True\n    primeLength('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nExamples\nprimeLength('Hello') == True\nprimeLength('abcdcba') == True\nprimeLength('kittens') == True\nprimeLength('orange') == False"], ["def startsOneEnds(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def antiShuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle('Hi') returns 'Hi'\n    antiShuffle('hello') returns 'ehllo'\n    antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Your code here\n    return s\n\nTest cases:\nantiShuffle('Hi')\nantiShuffle('hello')\nantiShuffle('Hello World!!!')\n\nExpected Output:\nehllo\nHello !!!Wdlor\nHi\n\nExplanation:\nThe first test case is 'Hi', which is already an ordered string.\nThe second test case is 'hello', which is already an ordered string.\nThe third test case is 'Hello World!!!', which is already an ordered string.\n"], ["def getRow(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if not lst:\n        return []\n    if x == 0:\n        return [(0, 0)]\n    if x == 1:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst))]\n    if x == 2:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))]\n    if x == 3:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))]\n    if x == 4:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))]\n    if x == 5:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))]\n    if x == 6:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))]\n    if x == 7:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))]\n    if x == 8:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))]\n    if x == 9:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1, len(lst))]\n    if x == 10:\n        return [(0, 0)] + [(i, j) for i in range(1, len(lst[0]))] + [(i, j) for i in range(1, len(lst))] + [(i, j) for i in range(1,"], ["def sortArray(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray([]) => []\n    * sortArray([5]) => [5]\n    * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    return array\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def nextSmallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    nextSmallest([1, 2, 3, 4, 5]) == 2\n    nextSmallest([5, 1, 4, 3, 2]) == 2\n    nextSmallest([]) == None\n    nextSmallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n"], ["def isBored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def anyInt(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    anyInt(5, 2, 7) \u279e True\n    \n    anyInt(3, 2, 2) \u279e False\n\n    anyInt(3, -2, 1) \u279e True\n    \n    anyInt(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return anyInt(x, y, z)\n\nanyInt(3, 2, 2) \u279e True\n\nanyInt(3, -2, 1) \u279e True\n\nanyInt(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def checkDictCase(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\nExamples:\n>>> checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})\nTrue\n>>> checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nFalse\n>>> checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\nFalse\n>>> checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\nFalse\n>>> checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\nTrue"], ["def countUpTo(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function reduce()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function iter()\n    # Hint: Use the built-in function next()\n    # Hint: Use the built-in function isinstance()\n    # Hint: Use the built-in function issubclass()\n    # Hint: Use the built-in function print()\n    # Hint: Use the built-in function input()\n    # Hint: Use the built-in function str()\n    # Hint: Use the built-in function int()\n    # Hint: Use the built-in function list()\n    # Hint: Use the built-in function tuple()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function dict()\n    # Hint: Use the built-in function min()\n    # Hint: Use the built-in function max()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function pow()\n    # Hint: Use the built-in function divmod()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function iter()\n    # Hint: Use the built-in function next()\n    # Hint: Use the built-in function isinstance()\n    # Hint: Use the built-in function issubclass()\n    # Hint: Use the built-in function print()\n    # Hint: Use the built-in function input()\n    # Hint: Use the built-in function str()\n    # Hint: Use the built-in function int()\n    # Hint: Use the built-in function list()\n    # Hint: Use the built-in function tuple()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function dict()\n    # Hint: Use the built-in function min()\n    # Hint: Use the built-in function max()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function pow()\n    # Hint: Use the built-in function divmod()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function iter()\n    # Hint: Use the built-in function next()\n    # Hint: Use the built-in function isinstance()\n    # Hint: Use the built-in function issubclass()\n    # Hint: Use the built-in function print()\n    # Hint: Use the built-in function input()\n    # Hint: Use the built-in function str()\n    # Hint: Use the built-in function int()\n    # Hint: Use the built-in function list()\n    # Hint: Use the built-in function tuple()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function dict()\n    # Hint: Use the built-in function min()\n    # Hint: Use the"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def countUpper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper('aBCdEf') returns 1\n    countUpper('abcdefg') returns 0\n    countUpper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closestInteger(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closestInteger(\"10\")\n    10\n    >>> closestInteger(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closestInteger(\"14.5\") should\n    return 15 and closestInteger(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closestInteger(\"10\")\n10\n>>> closestInteger(\"15.3\")\n15\n>>> closestInteger(\"14.5\")\n15\n>>> closestInteger(\"-14.5\")\n-15\n>>> closestInteger(\"14.4\")\n14\n>>> closestInteger(\"-14.4\")\n-14\n>>> closestInteger(\"14.6\")\n15\n>>> closestInteger(\"-14.6\")\n-15\n>>> closestInteger(\"14.7\")\n15\n>>> closestInteger(\"-14.7\")\n-15\n>>> closestInteger(\"14.8\")\n15\n>>> closestInteger(\"-14.8\")\n-15\n>>> closestInteger(\"14.9\")\n15\n>>> closestInteger(\"-14.9\")\n-15\n>>> closestInteger(\"14.0\")\n14\n>>> closestInteger(\"-14.0\")\n-14\n>>> closestInteger(\"14.1\")\n14\n>>> closestInteger(\"-14.1\")\n-14\n>>> closestInteger(\"14.2\")\n14\n>>> closestInteger(\"-14.2\")\n-14\n>>> closestInteger(\"14.3\")\n14\n>>> closestInteger(\"-14.3\")\n-14\n>>> closestInteger(\"14.4\")\n14\n>>> closestInteger(\"-14.4\")\n-14\n>>> closestInteger(\"14.5\")\n15\n>>> closestInteger(\"-14.5\")\n-15\n>>> closestInteger(\"14.6\")\n15\n>>> closestInteger(\"-14.6\")\n-15\n>>> closestInteger(\"14.7\")\n15\n>>> closestInteger(\"-14.7\")\n-15\n>>> closestInteger(\"14.8\")\n15\n>>> closestInteger(\"-14.8\")\n-15\n>>> closestInteger(\"14.9\")\n15\n>>> closestInteger(\"-14.9\")\n-15\n>>> closestInteger(\"14.0\")\n14\n>>> closestInteger(\"-14.0\")\n-14\n>>> closestInteger(\"14.1\")\n14\n>>> closestInteger(\"-14.1\")\n-14\n>>> closestInteger(\"14.2\")\n14\n>>> closestInteger(\"-14.2\")\n-14\n>>> closestInteger(\"14.3\")\n14\n>>> closestInteger(\"-14.3\")\n-14\n>>> closestInteger(\"14.4\")\n14\n>>> closestInteger(\"-14.4\")\n-14\n>>> closestInteger(\"14.5\")\n15\n>>> closestInteger(\"-14.5\")\n-15\n>>> closestInteger(\"14.6\")\n15\n>>> closestInteger(\"-14.6\")\n-15\n>>> closestInteger(\"14.7\")\n15\n>>> closestInteger(\"-14.7\")\n-15\n>>> closestInteger(\"14.8\")\n15\n>>> closestInteger(\"-14.8\")\n-15\n>>> closestInteger(\"14.9\")\n15\n>>> closestInteger(\"-14.9\")\n-15\n>>> closestInteger(\"14.0\")\n14\n>>> closestInteger(\"-14.0\")\n-14\n>>> closestInteger(\"14.1\")\n14\n>>> closestInteger(\"-14.1\")\n-14\n>>> closestInteger(\"14.2\")\n14\n>>> closestInteger(\"-14.2\")\n-14\n>>> closestInteger(\"14.3\")\n14\n>>> closestInteger(\"-14.3\")\n-14\n>>> closestInteger(\"14.4\")"], ["def makeAPile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(1, n):\n        pile.append(pile[i-1] + (i % 2))\n    return pile\n\n\nExamples:\n>>> makeAPile(3)\n[3, 5, 7]\n>>> makeAPile(4)\n[4, 6, 8]\n>>> makeAPile(5)\n[5, 9, 11]\n>>> makeAPile(6)\n[6, 10, 12]\n>>> makeAPile(7)\n[7, 11, 13]\n>>> makeAPile(8)\n[8, 12, 14]\n>>> makeAPile(9)\n[9, 13, 15]\n>>> makeAPile(10)\n[10, 14, 16]\n>>> makeAPile(11)\n[11, 15, 17]\n>>> makeAPile(12)\n[12, 16, 18]\n>>> makeAPile(13)\n[13, 17, 19]\n>>> makeAPile(14)\n[14, 18, 20]\n>>> makeAPile(15)\n[15, 19, 21]\n>>> makeAPile(16)\n[16, 20, 22]\n>>> makeAPile(17)\n[17, 21, 23]\n>>> makeAPile(18)\n[18, 22, 24]\n>>> makeAPile(19)\n[19, 23, 25]\n>>> makeAPile(20)\n[20, 24, 26]\n>>> makeAPile(21)\n[21, 25, 27]\n>>> makeAPile(22)\n[22, 26, 28]\n>>> makeAPile(23)\n[23, 27, 29]\n>>> makeAPile(24)\n[24, 28, 30]\n>>> makeAPile(25)\n[25, 29, 31]\n>>> makeAPile(26)\n[26, 30, 32]\n>>> makeAPile(27)\n[27, 31, 33]\n>>> makeAPile(28)\n[28, 32, 34]\n>>> makeAPile(29)\n[29, 33, 35]\n>>> makeAPile(30)\n[30, 34, 36]\n>>> makeAPile(31)\n[31, 35, 37]\n>>> makeAPile(32)\n[32, 36, 38]\n>>> makeAPile(33)\n[33, 37, 39]\n>>> makeAPile(34)\n[34, 38, 40]\n>>> makeAPile(35)\n[35, 39, 41]\n>>> makeAPile(36)\n[36, 40, 42]\n>>> makeAPile(37)\n[37, 41, 43]\n>>> makeAPile(38)\n[38, 42, 44]\n>>> makeAPile(39)\n[39, 43, 45]\n>>> makeAPile(40)\n[40, 44, 46]\n>>> makeAPile(41)\n[41, 45, 47]"], ["def wordsString(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\n>>> wordsString(\"Hi, my name is John\")\n['Hi', 'my', 'name', 'is', 'John']\n>>> wordsString(\"One, two, three, four, five, six\")\n['One', 'two', 'three', 'four', 'five', 'six']\n>>> wordsString(\"Hi, my name is John, and I live in the city of San Francisco\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco']\n>>> wordsString(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer']\n>>> wordsString(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football']\n>>> wordsString(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football', 'and', 'I', 'like', 'to', 'play', 'volleyball']\n>>> wordsString(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football', 'and', 'I', 'like', 'to', 'play', 'volleyball', 'and', 'I', 'like', 'to', 'play', 'badminton']\n>>> wordsString(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football', 'and', 'I', 'like', 'to', 'play', 'volleyball', 'and', 'I', 'like', 'to', 'play', 'badminton', 'and', 'I', 'like', 'to', 'play', 'tennis']\n>>> wordsString(\"Hi, my name"], ["def chooseNum(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchooseNum(12, 15) = 14\nchooseNum(13, 12) = -1\nchooseNum(1, 10) = 2\nchooseNum(1, 1) = 1\nchooseNum(1, 0) = -1\nchooseNum(0, 1) = -1\nchooseNum(0, 0) = -1\n\"\"\"\n\n\"\"\"\nThis problem was asked by Google.\n\nGiven a string of parentheses, write a function to determine whether the \norder of the parentheses is valid. The function should return True if the \norder of the parentheses is valid, and False otherwise.\n\nFor example, given the string \"()[]{}\", should return True. Given the string \n\"([)]\", should return False.\n\"\"\"\n\nAnswer: def isValid(s):\n    \"\"\"This function takes a string of parentheses and returns True if the\n    order of the parentheses is valid, and False otherwise.\n\n    For example, given the string \"()[]{}\", should return True. Given the string \n    \"([)]\", should return False.\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nisValid(\"()[]{}\") = True\nisValid(\"([)]\") = False\nisValid(\"()[]\") = True\nisValid(\"()[]()\") = True\nisValid(\"()[]()[]\") = True\nisValid(\"()[]()[]()\") = True\nisValid(\"()[]()[]()[]\") = True\nisValid(\"()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\nisValid(\"()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()[]()\") = True\n"], ["def roundedAvg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"0b11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"0b1111\"\n    roundedAvg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nroundedAvg(1, 5) => \"0b11\"\nroundedAvg(7, 5) => -1\nroundedAvg(10, 20) => \"0b1111\"\nroundedAvg(20, 33) => \"0b11010\"\nroundedAvg(100, 100) => \"0bdef uniqueDigits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> uniqueDigits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(set(x) - set(str(x).replace('0', '')))\n\nTest:\n>>> uniqueDigits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> uniqueDigits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def byLength(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Your code here\n    return []\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def evenOddPalindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if isPalindrome(i):\n            if isEven(i):\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n"], ["def countNums(arr):\n    \"\"\"\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums([]) == 0\n    >>> countNums([-1, 11, -11]) == 1\n    >>> countNums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        if sum(int(d) for d in str(num)) > 0:\n            count += 1\n    return count\n\n\nTest:\n>>> countNums([])\n0\n>>> countNums([-1, 11, -11])\n1\n>>> countNums([1, 1, 2])\n3\n\"\"\"\n"], ["def moveOneBall(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    moveOneBall([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverseDelete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    return \"\".join(s), s == s[::-1]\n"], ["def oddCount(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> oddCount(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\nTest:\n>>> oddCount(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> oddCount(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n"], ["def min_sub_array_sum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n    min_sub_array_sum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    return min_sum\n\n\nAnswer: def min_sub_array_sum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n    min_sub_array_sum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    return min_sum\n"], ["def maxFill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Loop through the rows\n    for row in range(rows):\n        # Loop through the columns\n        for column in range(columns):\n            # If the bucket is empty\n            if grid[row][column] == 0:\n                # Increment the number of buckets\n                buckets += 1\n                # Increment the number of times you need to lower the buckets\n                times += 1\n                # If the number of buckets is greater than the capacity\n                if buckets > capacity:\n                    # Decrement the number of buckets\n                    buckets -= 1\n                    # Decrement the number of times you need to lower the buckets\n                    times -= 1\n    # Return the number of times you need to lower the buckets\n    return times\n"], ["def sortArray(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def selectWords(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def getClosestVowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ngetClosestVowel(\"yogurt\") ==> \"u\"\ngetClosestVowel(\"FULL\") ==> \"U\"\ngetClosestVowel(\"quick\") ==> \"\"\ngetClosestVowel(\"ab\") ==> \"\"\n\nNote:\nThe length of the word is between 1 and 100.\nThe word contains only English letters."], ["def matchParens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    matchParens(['()(', ')']) == 'Yes'\n    matchParens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatchParens(['()(', ')']) == 'Yes'\nmatchParens([')', ')']) == 'No'\nmatchParens(['(', ')']) == 'No'\nmatchParens(['(', ')(']) == 'No'\nmatchParens(['(', '(', ')']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')(']) == 'No'\nmatchParens(['(', '(', ')('"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def addElements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\nTest Cases:\n    addElements([111,21,3,4000,5,6,7,8,9], 4)\n    addElements([111,21,3,4000,5,6,7,8,9], 5)\n    addElements([111,21,3,4000,5,6,7,8,9], 6)\n    addElements([111,21,3,4000,5,6,7,8,9], 7)\n    addElements([111,21,3,4000,5,6,7,8,9], 8)\n    addElements([111,21,3,4000,5,6,7,8,9], 9)\n    addElements([111,21,3,4000,5,6,7,8,9], 10)\n    addElements([111,21,3,4000,5,6,7,8,9], 11)\n    addElements([111,21,3,4000,5,6,7,8,9], 12)\n    addElements([111,21,3,4000,5,6,7,8,9], 13)\n    addElements([111,21,3,4000,5,6,7,8,9], 14)\n    addElements([111,21,3,4000,5,6,7,8,9], 15)\n    addElements([111,21,3,4000,5,6,7,8,9], 16)\n    addElements([111,21,3,4000,5,6,7,8,9], 17)\n    addElements([111,21,3,4000,5,6,7,8,9], 18)\n    addElements([111,21,3,4000,5,6,7,8,9], 19)\n    addElements([111,21,3,4000,5,6,7,8,9], 20)\n    addElements([111,21,3,4000,5,6,7,8,9], 21)\n    addElements([111,21,3,4000,5,6,7,8,9], 22)\n    addElements([111,21,3,4000,5,6,7,8,9], 23)\n    addElements([111,21,3,4000,5,6,7,8,9], 24)\n    addElements([111,21,3,4000,5,6,7,8,9], 25)\n    addElements([111,21,3,4000,5,6,7,8,9], 26)\n    addElements([111,21,3,4000,5,6,7,8,9], 27)\n    addElements([111,21,3,4000,5,6,7,8,9], 28)\n    addElements([111,21,3,4000,5,6,7,8,9], 29)\n    addElements([111,21,3,"], ["def getOddCollatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = getOddCollatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n"], ["def validDate(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    validDate('03-11-2000') => True\n\n    validDate('15-01-2012') => False\n\n    validDate('04-0-2040') => False\n\n    validDate('06-04-2020') => True\n\n    validDate('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\nvalidDate('03-11-2000')\nvalidDate('15-01-2012')\nvalidDate('04-0-2040')\nvalidDate('06-04-2020')\nvalidDate('06/04/2020')"], ["def splitWords(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3 \n    '''\n    words = txt.split()\n    return words\n\nExamples:\nsplitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplitWords(\"abcdef\") == 3"], ["def isSorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted([5]) \u279e True\n    isSorted([1, 2, 3, 4, 5]) \u279e True\n    isSorted([1, 3, 2, 4, 5]) \u279e False\n    isSorted([1, 2, 3, 4, 5, 6]) \u279e True\n    isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    isSorted([1, 2, 2, 3, 3, 4]) \u279e True\n    isSorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prodSigns(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns([1, 2, 2, -4]) == -9\n    >>> prodSigns([0, 1]) == 0\n    >>> prodSigns([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        if i < 0:\n            prod *= -1\n        elif i > 0:\n            prod *= i\n    return sum(abs(i) * prod for i in arr)\n\n\nTest:\n>>> prodSigns([1, 2, 2, -4])\n-9\n>>> prodSigns([0, 1])\n0\n>>> prodSigns([])\nNone\n\"\"\"\n"], ["def min_path(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 3), [1, 2, 1])\n    Test.assert_equals(min_path([[5,9,3], [4,1,6], [7,8,2]], 1), [1])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 1), [1, 2, 3])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 2), [1, 2])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 4), [1, 2, 3, 4])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 5), [1, 2, 3, 4, 5])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 6), [1, 2, 3, 4, 5, 6])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 7), [1, 2, 3, 4, 5, 6, 7])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 8), [1, 2, 3, 4, 5, 6, 7, 8])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 9), [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 10), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    Test.assert_equals(min_path([[1,2,3], [4,5,6], [7,8,9]], 11), [1, 2, 3, 4, 5, "], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def isNested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    isNested('[[]]') \u279e True\n    isNested('[]]]]]]][[[[[]') \u279e False\n    isNested('[][]') \u279e False\n    isNested('[]') \u279e False\n    isNested('[[][]]') \u279e True\n    isNested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(isNested('[[]]'), True)\nTest.assert_equals(isNested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(isNested('[][]'), False)\nTest.assert_equals(isNested('[]'), False)\nTest.assert_equals(isNested('[[][]]'), True)\nTest.assert_equals(isNested('[[]][['), True)"], ["def sumSquares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def checkIfLastCharIsALetter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") \u279e False\n    checkIfLastCharIsALetter(\"apple pi e\") \u279e True\n    checkIfLastCharIsALetter(\"apple pi e \") \u279e False\n    checkIfLastCharIsALetter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha() in txt: else False\n\nExamples:\ncheckIfLastCharIsALetter(\"apple pie\") \u279e False\ncheckIfLastCharIsALetter(\"apple pi e\") \u279e True\ncheckIfLastCharIsALetter(\"apple pi e \") \u279e False\ncheckIfLastCharIsALetter(\"\") \u279e False"], ["def canArrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange([1,2,4,3,5]) = 3\n    canArrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n\n\nExamples:\ncanArrange([1,2,4,3,5]) = 3\ncanArrange([1,2,3]) = -1\n\"\"\"\n"], ["def largestSmallestIntegers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largestSmallestIntegers([]) == (None, None)\n    largestSmallestIntegers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargestSmallestIntegers([]) == (None, None)\nlargestSmallestIntegers([0]) == (None, None)\n"], ["def compareOne(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) \u279e 2.5\n    compareOne(1, \"2,3\") \u279e \"2,3\"\n    compareOne(\"5,1\", \"6\") \u279e \"6\"\n    compareOne(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompareOne(1, 2.5) \u279e 2.5\ncompareOne(1, \"2,3\") \u279e \"2,3\"\ncompareOne(\"5,1\", \"6\") \u279e \"6\"\ncompareOne(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type."], ["def isEqualToSumEven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == False\n    isEqualToSumEven(6) == False\n    isEqualToSumEven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n % i == 0 and i % 2 == 0:\n            return True\n    return False\n\n\nAnswer: def isEqualToSumEven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == False\n    isEqualToSumEven(6) == False\n    isEqualToSumEven(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n % i == 0 and i % 2 == 0 and i + n // i == n:\n            return True\n    return False\n"], ["def specialFactorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fixSpaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def fileNameCheck(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    fileNameCheck(\"example.txt\") # => 'Yes'\n    fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\nExamples:\nfileNameCheck(\"example.txt\") # => 'Yes'\nfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfileNameCheck(\"1example.txt.exe\") # => 'Yes'\nfileNameCheck(\"1example.txt.exe.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe\") # => 'No' (the name should start with a latin alphapet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe\") # => 'No' (the name should start with a latin alphapet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe\") # => 'No' (the name should start with a latin alphapet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe\") # => 'No' (the name should start with a latin alphaphet letter)\nfileNameCheck(\"1example.txt.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll.exe.dll"], ["def sumSquares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x**3 for i, x in enumerate(lst))\n\n\nExamples:\nsumSquares([1,2,3]) = 6\nsumSquares([]) = 0\nsumSquares([-1,-5,2,-1,-5]) = -126"], ["def wordsInSentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if isPrime(len(word))])\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def orderByPoints(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nTest:\n>>> orderByPoints([1, 11, -1, -11, -12])\n[-1, -11, 1, -12, 11]\n>>> orderByPoints([])\n[]\n\"\"\"\n"], ["def special_filter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    special_filter([15, -73, 14, -15]) => 1 \n    special_filter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def getMaxTriples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTestcase 1:\nn = 5\n\nExpected Output: 1\n\nTestcase 2:\nn = 10\n\nExpected Output: 3\n\nTestcase 3:\nn = 100\n\nExpected Output: 10"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sortedListSum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Your code here\n    return sorted(lst, key=lambda x: len(x), reverse=True)\n\n\nTest:\n>>> sortedListSum([\"aa\", \"a\", \"aaa\"])\n['aa']\n>>> sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"])\n['ab', 'cd']\n>>> sortedListSum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\"\"\"\n"], ["def xOrY(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def doubleTheDifference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference([-1, -2, 0]) == 0\n    doubleTheDifference([9, -2]) == 81\n    doubleTheDifference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x%2 != 0])\n\ndoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndoubleTheDifference([-1, -2, 0]) == 0\ndoubleTheDifference([9, -2]) == 81\ndoubleTheDifference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def StrongestExtension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpatternCheck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => False\n    cycpatternCheck(\"hello\",\"ell\") => True\n    cycpatternCheck(\"whassup\",\"psus\") => False\n    cycpatternCheck(\"abab\",\"baa\") => True\n    cycpatternCheck(\"efef\",\"eeff\") => False\n    cycpatternCheck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def evenOddCount(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n"], ["def intToMiniRoman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == 'xix'\n    >>> intToMiniRoman(152) == 'clii'\n    >>> intToMiniRoman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\nTest cases:\n>>> intToMiniRoman(19) == 'xix'\nTrue\n>>> intToMiniRoman(152) == 'clii'\nTrue\n>>> intToMiniRoman(426) == 'cdxxvi'\nTrue\n>>> intToMiniRoman(1) == 'i'\nTrue\n>>> intToMiniRoman(4) == 'iv'\nTrue\n>>> intToMiniRoman(5) == 'v'\nTrue\n>>> intToMiniRoman(9) == 'ix'\nTrue\n>>> intToMiniRoman(10) == 'x'\nTrue\n>>> intToMiniRoman(40) == 'xiv'\nTrue\n>>> intToMiniRoman(50) == 'xv'\nTrue\n>>> intToMiniRoman(90) == 'xix'\nTrue\n>>> intToMiniRoman(100) == 'c'\nTrue\n>>> intToMiniRoman(400) == 'civ'\nTrue\n>>> intToMiniRoman(500) == 'cv'\nTrue\n>>> intToMiniRoman(900) == 'cix'\nTrue\n>>> intToMiniRoman(1000) == 'm'\nTrue\n>>> intToMiniRoman(4000) == 'miv'\nTrue\n>>> intToMiniRoman(5000) == 'mv'\nTrue\n>>> intToMiniRoman(9000) == 'mix'\nTrue\n>>> intToMiniRoman(10000) == 'mcm'\nTrue\n>>> intToMiniRoman(40000) == 'mcmiv'\nTrue\n>>> intToMiniRoman(50000) == 'mcmv'\nTrue\n>>> intToMiniRoman(90000) == 'mcmix'\nTrue\n>>> intToMiniRoman(100000) == 'mcmxc'\nTrue\n>>> intToMiniRoman(400000) == 'mcmxciv'\nTrue\n>>> intToMiniRoman(500000) == 'mcmxcv'\nTrue\n>>> intToMiniRoman(900000) == 'mcmxcix'\nTrue\n>>> intToMiniRoman(1000000) == 'mcmxcm'\nTrue\n>>> intToMiniRoman(4000000) == 'mcmxcmiv'\nTrue\n>>> intToMiniRoman(5000000) == 'mcmxcmv'\nTrue\n>>> intToMiniRoman(9000000) == 'mcmxcmix'\nTrue\n>>> intToMiniRoman(10000000) == 'mcmxcmcm'\nTrue\n>>> intToMiniRoman(40000000) == 'mcmxcmcmiv'\nTrue\n>>> intToMiniRoman(50000000) == 'mcmxcmcmv'\nTrue\n>>> intToMiniRoman(90000000) == 'mcmxcmcmix'\nTrue\n>>> intToMiniRoman(100000000) == 'mcmxcmcmcm'\nTrue\n>>> intToMiniRoman(400000000) == 'mcmxcmcmcmiv'\nTrue\n>>> intToMiniRoman(500000000) == 'mcmxcmcmcmv'\nTrue\n>>> intToMiniRoman(900000000) == 'mcmxcmcmcmix'\nTrue\n>>> intToMiniRoman(1000000000) == 'mcmxcmcmcmcm'\nTrue\n>>>"], ["def rightAngleTriangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == True\n    rightAngleTriangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\nTest Cases:\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(1, 2, 3)\nFalse\n>>> rightAngleTriangle(3, 4, 6)\nFalse\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, 5)\nTrue\n>>> rightAngleTriangle(3, 4, "], ["def findMax(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in word:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def doAlgebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = doAlgebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def stringToMd5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n"], ["def generateIntegers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_ClosE_elemEntS(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_ClosE_elemEntS([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_ClosE_elemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef sepAratE_pareN_grOups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> sepAratE_pareN_grOups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truNcatE_numbEr(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truNcatE_numbEr(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef belOw_zeRo(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belOw_zeRo([1, 2, 3])\n    False\n    >>> belOw_zeRo([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return False\n    return True\n\n"], ["from typing import List\n\n\ndef meaN_absOlute_DevIatioN(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meaN_absOlute_DevIatioN([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef intErspErse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intErspErse([], 4)\n    []\n    >>> intErspErse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] == delimeter:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef parSe_neSted_pAreNs(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parSe_neSted_pAreNs('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filTer_bY_subsTriNg(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filTer_bY_subsTriNg([], 'a')\n    []\n    >>> filTer_bY_subsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_ProdUct(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_ProdUct([])\n    (0, 1)\n    >>> sum_ProdUct([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    sum_ = 0\n    prod_ = 1\n    for number in numbers:\n        sum_ += number\n        prod_ *= number\n    return sum_, prod_\n\n"], ["from typing import List, Tuple\n\n\ndef rolLing_Max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolLing_Max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(result[i - 1], numbers[i]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef makE_palIndroMe(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makE_palIndroMe('')\n    ''\n    >>> makE_palIndroMe('cat')\n    'catac'\n    >>> makE_palIndroMe('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef strIng_xOr(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> strIng_xOr('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef lonGest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the lonGest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> lonGest([])\n\n    >>> lonGest(['a', 'b', 'c'])\n    'a'\n    >>> lonGest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def greAtesT_commOn_dIvisoR(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greAtesT_commOn_dIvisoR(3, 5)\n    1\n    >>> greAtesT_commOn_dIvisoR(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greAtesT_commOn_dIvisoR(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_PrefIxes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_PrefIxes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def strIng_sEquenCe(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> strIng_sEquenCe(0)\n    '0'\n    >>> strIng_sEquenCe(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def couNt_diStincT_chAractErs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> couNt_diStincT_chAractErs('xyzXYZ')\n    3\n    >>> couNt_diStincT_chAractErs('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parSe_muSic(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parSe_muSic('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_Many_Times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_Many_Times('', 'a')\n    0\n    >>> how_Many_Times('aaa', 'a')\n    3\n    >>> how_Many_Times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sorT_numBers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sorT_numBers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef finD_cloSest_eLemEnts(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> finD_cloSest_eLemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> finD_cloSest_eLemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef resCale_To_uniT(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> resCale_To_uniT([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [x / max(numbers) for x in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filTer_iNtegeRs(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filTer_iNtegeRs(['a', 3.14, 5])\n    [5]\n    >>> filTer_iNtegeRs([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strLen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strLen('')\n    0\n    >>> strLen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def larGest_DivisOr(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> larGest_DivisOr(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(larGest_DivisOr(n // 2), larGest_DivisOr(n - n // 2))\n\n"], ["from typing import List\n\n\ndef facToriZe(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> facToriZe(8)\n    [2, 2, 2]\n    >>> facToriZe(25)\n    [5, 5]\n    >>> facToriZe(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef remOve_dUplicAteS(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remOve_dUplicAteS([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def fliP_casE(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> fliP_casE('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef conCateNate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> conCateNate([])\n    ''\n    >>> conCateNate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filTer_bY_prefIx(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filTer_bY_prefIx([], 'a')\n    []\n    >>> filTer_bY_prefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_PosiTive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_PosiTive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_PosiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_pRime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_pRime(6)\n    False\n    >>> is_pRime(101)\n    True\n    >>> is_pRime(11)\n    True\n    >>> is_pRime(13441)\n    True\n    >>> is_pRime(61)\n    True\n    >>> is_pRime(4)\n    False\n    >>> is_pRime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef finD_zerO(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    finD_zerO find x such that poly(x) = 0.\n    finD_zerO returns only only zero point, even if there are many.\n    Moreover, finD_zerO only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(finD_zerO([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(finD_zerO([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sorT_thiRd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sorT_thiRd([1, 2, 3])\n    [1, 2, 3]\n    >>> sorT_thiRd([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l' = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l'.append(l[i])\n    l'.sort()\n    return l'\n\n"], ["def uniQue(l: list):\n    \"\"\"Return sorted uniQue elements in a list\n    >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\n"], ["def max_ElemEnt(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_ElemEnt([1, 2, 3])\n    3\n    >>> max_ElemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizZ_buzZ(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizZ_buzZ(50)\n    0\n    >>> fizZ_buzZ(78)\n    2\n    >>> fizZ_buzZ(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sorT_eveN(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sorT_eveN([1, 2, 3])\n    [1, 2, 3]\n    >>> sorT_eveN([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decOde_cYclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def priMe_fiB(n: int):\n    \"\"\"\n    priMe_fiB returns n-th number that is a Fibonacci number and it's also prime.\n    >>> priMe_fiB(1)\n    2\n    >>> priMe_fiB(2)\n    3\n    >>> priMe_fiB(3)\n    5\n    >>> priMe_fiB(4)\n    13\n    >>> priMe_fiB(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return priMe_fiB(n - 1) + priMe_fiB(n - 2)\n\n"], ["def triPles_Sum_to_ZerO(l: list):\n    \"\"\"\n    triPles_Sum_to_ZerO takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triPles_Sum_to_ZerO([1, 3, 5, 0])\n    False\n    >>> triPles_Sum_to_ZerO([1, 3, -2, 1])\n    True\n    >>> triPles_Sum_to_ZerO([1, 2, 3, 7])\n    False\n    >>> triPles_Sum_to_ZerO([2, 4, -5, 3, 9, 7])\n    True\n    >>> triPles_Sum_to_ZerO([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def car_Race_ColliSioN(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_Race_ColliSioN(1) == 0\ncar_Race_ColliSioN(2) == 0\ncar_Race_ColliSioN(3) == 0\ncar_Race_ColliSioN(4) == 0\ncar_Race_ColliSioN(5) == 0\ncar_Race_ColliSioN(6) == 0\ncar_Race_ColliSioN(7) == 0\ncar_Race_ColliSioN(8) == 0\ncar_Race_ColliSioN(9) == 0\ncar_Race_ColliSioN(10) == 0\ncar_Race_ColliSioN(11) == 0\ncar_Race_ColliSioN(12) == 0\ncar_Race_ColliSioN(13) == 0\ncar_Race_ColliSioN(14) == 0\ncar_Race_ColliSioN(15) == 0\ncar_Race_ColliSioN(16) == 0\ncar_Race_ColliSioN(17) == 0\ncar_Race_ColliSioN(18) == 0\ncar_Race_ColliSioN(19) == 0\ncar_Race_ColliSioN(20) == 0\ncar_Race_ColliSioN(21) == 0\ncar_Race_ColliSioN(22) == 0\ncar_Race_ColliSioN(23) == 0\ncar_Race_ColliSioN(24) == 0\ncar_Race_ColliSioN(25) == 0\ncar_Race_ColliSioN(26) == 0\ncar_Race_ColliSioN(27) == 0\ncar_Race_ColliSioN(28) == 0\ncar_Race_ColliSioN(29) == 0\ncar_Race_ColliSioN(30) == 0\ncar_Race_ColliSioN(31) == 0\ncar_Race_ColliSioN(32) == 0\ncar_Race_ColliSioN(33) == 0\ncar_Race_ColliSioN(34) == 0\ncar_Race_ColliSioN(35) == 0\ncar_Race_ColliSioN(36) == 0\ncar_Race_ColliSioN(37) == 0\ncar_Race_ColliSioN(38) == 0\ncar_Race_ColliSioN(39) == 0\ncar_Race_ColliSioN(40) == 0\ncar_Race_ColliSioN(41) == 0\ncar_Race_ColliSioN(42) == 0\ncar_Race_ColliSioN(43) == 0\ncar_Race_ColliSioN(44) == 0\ncar_Race_ColliSioN(45) == 0\ncar_Race_ColliSioN(46) == 0\ncar_Race_ColliSioN(47) == 0\ncar_Race_ColliSioN(48) == 0\ncar_Race_ColliSioN(49) == 0\ncar_Race_ColliSioN(5"], ["def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\nAnswer: def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\nAnswer: def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\nAnswer: def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\nAnswer: def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\nAnswer: def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\nAnswer: def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\nAnswer: def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, "], ["def paiRs_suM_to_zeRo(l):\n    \"\"\"\n    paiRs_suM_to_zeRo takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> paiRs_suM_to_zeRo([1, 3, 5, 0])\n    False\n    >>> paiRs_suM_to_zeRo([1, 3, -2, 1])\n    False\n    >>> paiRs_suM_to_zeRo([1, 2, 3, 7])\n    False\n    >>> paiRs_suM_to_zeRo([2, 4, -5, 3, 5, 7])\n    True\n    >>> paiRs_suM_to_zeRo([1])\n    False\n    \"\"\"\n    # Your code here\n    return True if len(set(l)) == 2 and sum(l) == 0 else False\n\n"], ["def chaNge_bAse(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> chaNge_bAse(8, 3)\n    '22'\n    >>> chaNge_bAse(8, 2)\n    '1000'\n    >>> chaNge_bAse(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be less than 10\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    raise ValueError(\"base must be 2, 8, 10, 16\")\n\n"], ["def triAnglE_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triAnglE_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, "], ["def is_pAlinDrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_pAlinDrome('')\n    True\n    >>> is_pAlinDrome('aba')\n    True\n    >>> is_pAlinDrome('aaaaa')\n    True\n    >>> is_pAlinDrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modP(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modP(3, 5)\n    3\n    >>> modP(1101, 101)\n    2\n    >>> modP(0, 101)\n    1\n    >>> modP(3, 11)\n    8\n    >>> modP(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decOde_sHift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remOve_vOwels(text):\n    \"\"\"\n    remOve_vOwels is a function that takes string and returns string without vowels.\n    >>> remOve_vOwels('')\n    ''\n    >>> remOve_vOwels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remOve_vOwels('abcdef')\n    'bcdf'\n    >>> remOve_vOwels('aaaaa')\n    ''\n    >>> remOve_vOwels('aaBAA')\n    'B'\n    >>> remOve_vOwels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n\nTest:\n>>> remOve_vOwels('')\n''\n>>> remOve_vOwels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remOve_vOwels('abcdef')\n'bcdf'\n>>> remOve_vOwels('aaaaa')\n''\n>>> remOve_vOwels('aaBAA')\n'B'\n>>> remOve_vOwels('zbcd')\n'zbcd'\n"], ["def belOw_thReshoLd(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> belOw_thReshoLd([1, 2, 4, 10], 100)\n    True\n    >>> belOw_thReshoLd([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def samE_chaRs(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> samE_chaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> samE_chaRs('abcd', 'dddddddabc')\n    True\n    >>> samE_chaRs('dddddddabc', 'abcd')\n    True\n    >>> samE_chaRs('eabcd', 'dddddddabc')\n    False\n    >>> samE_chaRs('abcd', 'dddddddabce')\n    False\n    >>> samE_chaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def corRect_BrackEtiNg(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corRect_BrackEtiNg(\"<\")\n    False\n    >>> corRect_BrackEtiNg(\"<>\")\n    True\n    >>> corRect_BrackEtiNg(\"<<><>>\")\n    True\n    >>> corRect_BrackEtiNg(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n"], ["def monOtonIc(l: list):\n    \"\"\"Return True is list elements are monOtonIcally increasing or decreasing.\n    >>> monOtonIc([1, 2, 4, 20])\n    True\n    >>> monOtonIc([1, 20, 4, 10])\n    False\n    >>> monOtonIc([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i - 1]:\n            return True\n    return True\n\n"], ["def comMon(l1: list, l2: list):\n    \"\"\"Return sorted unique comMon elements for two lists.\n    >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> comMon([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    comMon = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            comMon.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return comMon\n\n"], ["def larGest_Prime_FacTor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> larGest_Prime_FacTor(13195)\n    29\n    >>> larGest_Prime_FacTor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 239\n    if n % 241 == 0:\n        return 241\n    if n % 251 == 0:\n        return 251\n    if n % 257 == "], ["def sum_To_n(n: int):\n    \"\"\"sum_To_n is a function that sums numbers from 1 to n.\n    >>> sum_To_n(30)\n    465\n    >>> sum_To_n(100)\n    5050\n    >>> sum_To_n(5)\n    15\n    >>> sum_To_n(10)\n    55\n    >>> sum_To_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def corRect_BrackEtiNg(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corRect_BrackEtiNg(\"(\")\n    False\n    >>> corRect_BrackEtiNg(\"()\")\n    True\n    >>> corRect_BrackEtiNg(\"(()())\")\n    True\n    >>> corRect_BrackEtiNg(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n"], ["def derIvatIve(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derIvatIve of this polynomial in the same form.\n    >>> derIvatIve([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derIvatIve([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [0] + [xs[i] * derIvatIve(xs[i:]) for i in range(1, len(xs))]\n\n"], ["def fibFib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibFib(0) == 0\n    fibFib(1) == 0\n    fibFib(2) == 1\n    fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n    >>> fibFib(1)\n    0\n    >>> fibFib(5)\n    4\n    >>> fibFib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibFib(n-1) + fibFib(n-2) + fibFib(n-3)\n\nfibFib(1)\nfibFib(5)\nfibFib(8)\n\nThis is a recursive function that uses the fibFib(n-1) and fibFib(n-2) functions to compute the next element of the sequence.\n\nThe time complexity of this function is O(n).\n\nThe space complexity of this function is O(n).\n\nThe fibFib(n) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n\nThe fibFib(n-1) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-1) == fibFib(n-2) + fibFib(n-3).\n\nThe fibFib(n-2) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-2) == fibFib(n-3).\n\nThe fibFib(n-3) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-3) == 1.\n\nThe fibFib(n) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n\nThe fibFib(n-1) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-1) == fibFib(n-2) + fibFib(n-3).\n\nThe fibFib(n-2) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-2) == fibFib(n-3).\n\nThe fibFib(n-3) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-3) == 1.\n\nThe fibFib(n) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n\nThe fibFib(n-1) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-1) == fibFib(n-2) + fibFib(n-3).\n\nThe fibFib(n-2) function is defined as follows:\nfibFib(0) == 0\nfibFib(1) == 0\nfibFib(2) == 1\nfibFib(n-2) == fibFib(n-3).\n\nThe fibFib(n-3) function is defined as follows:\nfibFib(0) == 0\nfib"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowEls_cOunt(s):\n    \"\"\"Write a function vowEls_cOunt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowEls_cOunt(\"abcde\")\n    2\n    >>> vowEls_cOunt(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def cirCulaR_shifT(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> cirCulaR_shifT(12, 1)\n    \"21\"\n    >>> cirCulaR_shifT(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n"], ["def digItSuM(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digItSuM(\"\") => 0\n        digItSuM(\"abAB\") => 131\n        digItSuM(\"abcCd\") => 67\n        digItSuM(\"helloE\") => 69\n        digItSuM(\"woArBld\") => 131\n        digItSuM(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n"], ["def fruIt_diStribUtiOn(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruIt_diStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruIt_diStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruIt_diStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruIt_diStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return s.count(\"mango\")\n\nfruIt_diStribUtiOn(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruIt_diStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruIt_diStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruIt_diStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19"], ["def pluCk(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluCk one of the nodes and return it.\n    The pluCked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The pluCked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    min_index = arr.index(min_value)\n    if min_value % 2 == 0:\n        return [min_value, min_index]\n    else:\n        return pluCk(arr[:min_index] + arr[min_index + 1:])\n\n\narr = [4, 2, 3]"], ["def seaRch(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        seaRch([4, 1, 2, 2, 3, 1]) == 2\n        seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        seaRch([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\nExamples:\n    seaRch([4, 1, 2, 2, 3, 1]) == 2\n    seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    seaRch([5, 5, 4, 4, 4]) == -1"], ["def strAnge_Sort_lIst(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strAnge_Sort_lIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strAnge_Sort_lIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strAnge_Sort_lIst([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + [min_val] + strAnge_Sort_lIst([x for x in lst if x != max_val and x != min_val])\n\n\nExamples:\nstrAnge_Sort_lIst([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrAnge_Sort_lIst([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrAnge_Sort_lIst([]) == []\n"], ["def triAnglE_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triAnglE_area(3, 4, 5) == 6.00\n    triAnglE_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def wilL_it_fLy(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    wilL_it_fLy([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    wilL_it_fLy([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    wilL_it_fLy([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    wilL_it_fLy([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_palindromic(q) else False\n"], ["def smaLlesT_chanGe(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smaLlesT_chanGe([1,2,3,5,4,7,9,6]) == 4\n    smaLlesT_chanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n    smaLlesT_chanGe([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 1]\n    # arr = [1, 2, 3, 2, 1]\n    # arr = [1, 2, 3, 5, 4, 7, 9, 6]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 2, 1]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4,"], ["def totAl_maTch(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totAl_maTch([], []) \u279e []\n    totAl_maTch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    totAl_maTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    totAl_maTch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    totAl_maTch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n\ntotAl_maTch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotAl_maTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotAl_maTch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotAl_maTch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_mUltiPly_prIme(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_mUltiPly_prIme(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_mUltiPly_prIme(30)\n"], ["def is_sImplE_poweR(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_sImplE_poweR(1, 4) => true\n    is_sImplE_poweR(2, 2) => true\n    is_sImplE_poweR(8, 2) => true\n    is_sImplE_poweR(3, 2) => false\n    is_sImplE_poweR(3, 1) => false\n    is_sImplE_poweR(5, 3) => false\n    \"\"\"\n    return n**int(n) == x\n"], ["def iscUbe(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscUbe(1) ==> True\n    iscUbe(2) ==> False\n    iscUbe(-1) ==> True\n    iscUbe(64) ==> True\n    iscUbe(0) ==> True\n    iscUbe(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a % 2 == 0:\n        return False\n    elif a % 3 == 0:\n        return True\n    else:\n        return iscUbe(a//2) or iscUbe(a//3)\n\niscUbe(1)\niscUbe(2)\niscUbe(-1)\niscUbe(64)\niscUbe(0)\niscUbe(180)"], ["def hex_Key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n\nTest.assert_equals(hex_Key(\"AB\"), 1)\nTest.assert_equals(hex_Key(\"1077E\"), 2)\nTest.assert_equals(hex_Key(\"ABED1A33\"), 4)\nTest.assert_equals(hex_Key(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(hex_Key(\"2020\"), 2)"], ["def decImal_To_binAry(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decImal_To_binAry(15)   # returns \"db1111db\"\n    decImal_To_binAry(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    return \"db\"\n\nExamples:\ndecImal_To_binAry(15)   # returns \"db1111db\"\ndecImal_To_binAry(32)   # returns \"db100000db\"\n\nTest cases:\ndecImal_To_binAry(15)   # returns \"db1111db\"\ndecImal_To_binAry(32)   # returns \"db100000db\"\ndecImal_To_binAry(1234567890)   # returns \"db111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"], ["def is_hAppy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_hAppy(a) => False\n    is_hAppy(aa) => False\n    is_hAppy(abcd) => True\n    is_hAppy(aabb) => False\n    is_hAppy(adb) => True\n    is_hAppy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["def numEricAl_letTer_Grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 2.7 else \"B\" if grade >= 2.3 else \"B-\" if grade >= 2.0 else\n        \"C+\" if grade >= 1.7 else \"C\" if grade >= 1.3 else \"C-\" if grade >= 1.0 else\n        \"D+\" if grade >= 0.7 else \"D\" if grade >= 0.0 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def priMe_leNgth(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    priMe_leNgth('Hello') == True\n    priMe_leNgth('abcdcba') == True\n    priMe_leNgth('kittens') == True\n    priMe_leNgth('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def staRts_oNe_endS(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def solVe(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\nTest:\n    assert solVe(1000) == \"1\"\n    assert solVe(150) == \"110\"\n    assert solVe(147) == \"1100\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def antI_shuFfle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antI_shuFfle('Hi') returns 'Hi'\n    antI_shuFfle('hello') returns 'ehllo'\n    antI_shuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_Row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_Row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_Row([], 1) == []\n    get_Row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Write your code here\n    return sorted(set(tuple(x) for x in lst if x[0] == x[1] and x[0] == x[2] and x[0] == x[3] and x[0] == x[4] and x[0] == x[5] and x[0] == x[6] and x[0] == x[7] and x[0] == x[8] and x[0] == x[9] and x[0] == x[10] and x[0] == x[11] and x[0] == x[12] and x[0] == x[13] and x[0] == x[14] and x[0] == x[15] and x[0] == x[16] and x[0] == x[17] and x[0] == x[18] and x[0] == x[19] and x[0] == x[20] and x[0] == x[21] and x[0] == x[22] and x[0] == x[23] and x[0] == x[24] and x[0] == x[25] and x[0] == x[26] and x[0] == x[27] and x[0] == x[28] and x[0] == x[29] and x[0] == x[30] and x[0] == x[31] and x[0] == x[32] and x[0] == x[33] and x[0] == x[34] and x[0] == x[35] and x[0] == x[36] and x[0] == x[37] and x[0] == x[38] and x[0] == x[39] and x[0] == x[40] and x[0] == x[41] and x[0] == x[42] and x[0] == x[43] and x[0] == x[44] and x[0] == x[45] and x[0] == x[46] and x[0] == x[47] and x[0] == x[48] and x[0] == x[49] and x[0] == x[50] and x[0] == x[51] and x[0] == x[52] and x[0] == x[53] and x[0] == x[54] and x[0] == x[55] and x[0] == x[56] and x[0] == x[57] and x[0] == x[58] and x[0] == x[59] and x[0] == x[60] and x[0] == x[61] and x[0] == x[62] and x[0] == x[63] and x[0] == x[64] and x[0] == x[65] and x[0] == x[66] and x[0] == x[67] and x[0] =="], ["def sorT_arrAy(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sorT_arrAy([]) => []\n    * sorT_arrAy([5]) => [5]\n    * sorT_arrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sorT_arrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    return array\n\nExamples:\n\nsorT_arrAy([]) => []\nsorT_arrAy([5]) => [5]\nsorT_arrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\nsorT_arrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n"], ["def encRypt(s):\n    \"\"\"Create a function encRypt that takes a string as an argument and\n    returns a string encRypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encRypt('hi') returns 'lm'\n    encRypt('asdfghjkl') returns 'ewhjklnop'\n    encRypt('gf') returns 'kj'\n    encRypt('et') returns 'ix'\n    \"\"\"\n    # TODO: Write your code here\n    return s\n\nencRypt('hi')\nencRypt('asdfghjkl')\nencRypt('gf')\nencRypt('et')"], ["def nexT_smaLlest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function nexT_smaLlest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    nexT_smaLlest([1, 2, 3, 4, 5]) == 2\n    nexT_smaLlest([5, 1, 4, 3, 2]) == 2\n    nexT_smaLlest([]) == None\n    nexT_smaLlest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lst.index)\n\n\nTest cases:\n\nnexT_smaLlest([1, 2, 3, 4, 5]) == 2\nnexT_smaLlest([5, 1, 4, 3, 2]) == 2\nnexT_smaLlest([]) == None\nnexT_smaLlest([1, 1]) == None\n\nExplanation:\n\nThe 2nd smallest element of the list is 2.\nThe 2nd smallest element of the list is 2.\nThe 2nd smallest element of the list is None.\nThe 2nd smallest element of the list is None."], ["def is_bOred(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bOred(\"Hello world\")\n    0\n    >>> is_bOred(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_Int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_Int(5, 2, 7) \u279e True\n    \n    any_Int(3, 2, 2) \u279e False\n\n    any_Int(3, -2, 1) \u279e True\n    \n    any_Int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return False\n\n"], ["def encOde(message):\n    \"\"\"\n    Write a function that takes a message, and encOdes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encOde('test')\n    'TGST'\n    >>> encOde('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nExamples:\n>>> encOde('test')\n'TGST'\n>>> encOde('This is a message')\n'tHKS KS C MGSSCGG'"], ["def skjKasdKd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def cheCk_diCt_casE(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    cheCk_diCt_casE({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    cheCk_diCt_casE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    cheCk_diCt_casE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    cheCk_diCt_casE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    cheCk_diCt_casE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\nExamples:\ncheCk_diCt_casE({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheCk_diCt_casE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheCk_diCt_casE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheCk_diCt_casE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheCk_diCt_casE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True."], ["def couNt_up_To(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    couNt_up_To(5) => [2,3]\n    couNt_up_To(11) => [2,3,5,7]\n    couNt_up_To(0) => []\n    couNt_up_To(20) => [2,3,5,7,11,13,17,19]\n    couNt_up_To(1) => []\n    couNt_up_To(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function reduce()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built"], ["def mulTiplY(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    mulTiplY(148, 412) should return 16.\n    mulTiplY(19, 28) should return 72.\n    mulTiplY(2020, 1851) should return 0.\n    mulTiplY(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n"], ["def couNt_upPer(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    couNt_upPer('aBCdEf') returns 1\n    couNt_upPer('abcdefg') returns 0\n    couNt_upPer('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n\ncouNt_upPer('aBCdEf')\ncouNt_upPer('abcdefg')\ncouNt_upPer('dBBE')"], ["def cloSest_IntegEr(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> cloSest_IntegEr(\"10\")\n    10\n    >>> cloSest_IntegEr(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example cloSest_IntegEr(\"14.5\") should\n    return 15 and cloSest_IntegEr(\"-14.5\") should return -15.\n    '''\n    return int(round(value))\n\nExamples\n>>> cloSest_IntegEr(\"10\")\n10\n>>> cloSest_IntegEr(\"15.3\")\n15\n>>> cloSest_IntegEr(\"14.5\")\n15\n>>> cloSest_IntegEr(\"-14.5\")\n-15\n"], ["def makE_a_piLe(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makE_a_piLe(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n, n + 1]\n\n\nExamples:\n>>> makE_a_piLe(3)\n[3, 5, 7]\n>>> makE_a_piLe(4)\n[4, 6, 8]\n>>> makE_a_piLe(5)\n[5, 7, 9]\n>>> makE_a_piLe(6)\n[6, 8, 10]\n>>> makE_a_piLe(7)\n[7, 9, 11]\n>>> makE_a_piLe(8)\n[8, 10, 12]\n>>> makE_a_piLe(9)\n[9, 11, 13]\n>>> makE_a_piLe(10)\n[10, 12, 14]\n>>> makE_a_piLe(11)\n[11, 13, 15]\n>>> makE_a_piLe(12)\n[12, 14, 16]\n>>> makE_a_piLe(13)\n[13, 15, 17]\n>>> makE_a_piLe(14)\n[14, 16, 18]\n>>> makE_a_piLe(15)\n[15, 17, 19]\n>>> makE_a_piLe(16)\n[16, 18, 20]\n>>> makE_a_piLe(17)\n[17, 19, 21]\n>>> makE_a_piLe(18)\n[18, 20, 22]\n>>> makE_a_piLe(19)\n[19, 21, 23]\n>>> makE_a_piLe(20)\n[20, 22, 24]\n>>> makE_a_piLe(21)\n[21, 23, 25]\n>>> makE_a_piLe(22)\n[22, 24, 26]\n>>> makE_a_piLe(23)\n[23, 25, 27]\n>>> makE_a_piLe(24)\n[24, 26, 28]\n>>> makE_a_piLe(25)\n[25, 27, 29]\n>>> makE_a_piLe(26)\n[26, 28, 30]\n>>> makE_a_piLe(27)\n[27, 29, 31]\n>>> makE_a_piLe(28)\n[28, 30, 32]\n>>> makE_a_piLe(29)\n[29, 31, 33]\n>>> makE_a_piLe(30)\n[30, 32, 34]\n>>> makE_a_piLe(31)\n[31, 33, 35]\n>>> makE_a_piLe(32)\n[32, 34, 36]\n>>> makE_a_piLe(33)\n[33, 35, 37]\n>>> makE_a_piLe(34)\n[34, 36, 38]\n>>> makE_a_piLe(35)\n[35, 37, 39]\n>>> makE_"], ["def worDs_stRing(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    worDs_stRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    worDs_stRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nAnswer: def worDs_stRing(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    worDs_stRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    worDs_stRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")"], ["def choOse_nUm(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choOse_nUm(12, 15) = 14\n    choOse_nUm(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0 and y % 2 == 0:\n        if x <= y:\n            return x\n        else:\n            return y\n    else:\n        return -1\n\n\nTest cases:\nchoOse_nUm(12, 15) = 14\nchoOse_nUm(13, 12) = -1\nchoOse_nUm(12, 12) = 12\nchoOse_nUm(12, 11) = -1\nchoOse_nUm(11, 12) = -1\nchoOse_nUm(12, 10) = -1\nchoOse_nUm(10, 12) = -1\nchoOse_nUm(12, 9) = -1\nchoOse_nUm(9, 12) = -1\nchoOse_nUm(12, 8) = -1\nchoOse_nUm(8, 12) = -1\nchoOse_nUm(12, 7) = -1\nchoOse_nUm(7, 12) = -1\nchoOse_nUm(12, 6) = -1\nchoOse_nUm(6, 12) = -1\nchoOse_nUm(12, 5) = -1\nchoOse_nUm(5, 12) = -1\nchoOse_nUm(12, 4) = -1\nchoOse_nUm(4, 12) = -1\nchoOse_nUm(12, 3) = -1\nchoOse_nUm(3, 12) = -1\nchoOse_nUm(12, 2) = -1\nchoOse_nUm(2, 12) = -1\nchoOse_nUm(12, 1) = -1\nchoOse_nUm(1, 12) = -1\nchoOse_nUm(12, 0) = -1\nchoOse_nUm(0, 12) = -1\nchoOse_nUm(12, -1) = -1\nchoOse_nUm(-1, 12) = -1\nchoOse_nUm(12, -2) = -1\nchoOse_nUm(-2, 12) = -1\nchoOse_nUm(12, -3) = -1\nchoOse_nUm(-3, 12) = -1\nchoOse_nUm(12, -4) = -1\nchoOse_nUm(-4, 12) = -1\nchoOse_nUm(12, -5) = -1\nchoOse_nUm(-5, 12) = -1\nchoOse_nUm(12, -6) = -1\nchoOse_nUm(-6, 12) = -1\nchoOse_nUm(12, -7) = -1\nchoOse_nUm(-7, 12) = -1\nchoOse_nUm(12, -8) = -1\nchoOse_nUm(-8, 12) = -1\nchoOse_nUm(12, -9) = -1\nchoOse_nUm(-9, 12) = -1\nchoOse_nUm(12, -10) = -1\nchoOse_nUm(-10, 12) = -1\nchoOse_nUm(12, -11) = -1\nchoOse_nUm(-11, 12) = -1\nchoOse_nUm(12, -12) = -"], ["def rouNded_Avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rouNded_Avg(1, 5) => \"0b11\"\n    rouNded_Avg(7, 5) => -1\n    rouNded_Avg(10, 20) => \"0b1111\"\n    rouNded_Avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrouNded_Avg(1, 5) => \"0b11\"\nrouNded_Avg(7, 5) => -1\nrouNded_Avg(10, 20) => \"0b1111\"\nrouNded_Avg(20, 33) => \"0b11010\"\n\nExplanation:\nThe average of the integers from 1 to 5 is 3.\nThe average of the integers from 7 to 5 is -1.\nThe average of the integers from 10 to 20 is 15.\nThe average of the integers from 20 to 33 is 21."], ["def uniQue_dIgits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniQue_dIgits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> uniQue_dIgits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(list(set(x) - set(str(x).replace('0', ''))))\n"], ["def by_lEngtH(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def eveN_odd_PalinDroMe(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if isPalindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n"], ["def couNt_nuMs(arr):\n    \"\"\"\n    Write a function couNt_nuMs which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> couNt_nuMs([]) == 0\n    >>> couNt_nuMs([-1, 11, -11]) == 1\n    >>> couNt_nuMs([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n\nTest:\n>>> couNt_nuMs([])\n0\n>>> couNt_nuMs([-1, 11, -11])\n1\n>>> couNt_nuMs([1, 1, 2])\n3\n\"\"\"\n"], ["def movE_one_Ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    movE_one_Ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    movE_one_Ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\nmovE_one_Ball([3, 4, 5, 1, 2])\nmovE_one_Ball([3, 5, 4, 1, 2])\nmovE_one_Ball([3, 5, 4, 1, 2, 3])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nmovE_one_Ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1"], ["def excHangE(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an excHangE of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of excHangEd elements between lst1 and lst2.\n    If it is possible to excHangE elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # TODO: Write your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexcHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"NO\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"YES\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"NO\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"YES\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"NO\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"YES\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"NO\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"YES\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => \"NO\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => \"YES\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => \"NO\"\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,"], ["def hisTogrAm(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n    hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n    hisTogrAm('b b b b a') == {'b': 4}\n    hisTogrAm('') == {}\n\n    \"\"\"\n    # TODO: Write your code here\n    return {}\n"], ["def revErse_DeletE(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    if s == c:\n        return (s, True)\n    else:\n        return (s, False)\n"], ["def odd_CounT(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_CounT(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_CounT(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n"], ["def minsubARraySUm(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n    minsubARraySUm([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    if len(nums) == 3:\n        return min(nums[0], nums[1], nums[2])\n    if len(nums) == 4:\n        return min(nums[0], nums[1], nums[2], nums[3])\n    if len(nums) == 5:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n    if len(nums) == 6:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n    if len(nums) == 7:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n    if len(nums) == 8:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])\n    if len(nums) == 9:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])\n    if len(nums) == 10:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])\n    if len(nums) == 11:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])\n    if len(nums) == 12:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11])\n    if len(nums) == 13:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12])\n    if len(nums) == 14:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13])\n    if len(nums) == 15:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14])\n    if len(nums) == 16:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15])\n    if len(nums) == 17:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15], nums[16])\n    if len(nums) == 18:\n        return min(nums[0],"], ["def max_Fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    for row in range(rows):\n        for column in range(columns):\n            # If the bucket is not full\n            if grid[row][column] == 1:\n                # If the bucket is not full\n                if buckets > 0:\n                    # If the bucket is not full\n                    if buckets > 0:\n                        # If the bucket is not full\n                        if buckets > 0:\n                            # If the bucket is not full\n                            if buckets > 0:\n                                # If the bucket is not full\n                                if buckets > 0:\n                                    # If the bucket is not full\n                                    if buckets > 0:\n                                        # If the bucket is not full\n                                        if buckets > 0:\n                                            # If the bucket is not full\n                                            if buckets > 0:\n                                                # If the bucket is not full\n                                                if buckets > 0:\n                                                    # If the bucket is not full\n                                                    if buckets > 0:\n                                                        # If the bucket is not full\n                                                        if buckets > 0:\n                                                            # If the bucket is not full\n                                                            if buckets > 0:\n                                                                # If the bucket is not full\n                                                                if buckets > 0:\n                                                                    # If the bucket is not full\n                                                                    if buckets > 0:\n                                                                        # If the bucket is not full\n                                                                        if buckets > 0:\n                                                                            # If the bucket is not full\n                                                                            if buckets > 0:\n                                                                                # If the bucket is not full\n                                                                                if buckets > 0:\n                                                                                    # If the bucket is not full\n                                                                                    if buckets > 0:\n                                                                                        # If the bucket is not full\n                                                                                        if buckets > 0:\n                                                                                            # If the bucket is not full\n                                                                                            if buckets > 0:\n                                                                                                # If the bucket is not full\n                                                                                                if buckets > 0:\n                                                                                                    # If the bucket is not full\n                                                                                                    if buckets > 0:\n                                                                                                        # If the bucket is not full\n                                                                                                        if buckets > 0:\n                                                                                                            # If the bucket is not full\n                                                                                                            if buckets > 0:\n                                                                                                                # If the bucket is not full\n                                                                                                                if buckets > 0:\n                                                                                                                    # If the bucket is not full\n                                                                                                                    if buckets > 0:\n                                                                                                                        # If the bucket is not full\n                                                                                                                        if buckets > 0:\n                                                                                                                            # If the bucket is not full\n                                                                                                                            if buckets > 0:\n                                                                                                                                # If the bucket is not full\n                                                                                                                                if buckets > 0:\n                                                                                                                                    # If the bucket is not full\n                                                                                                                                    if buckets > 0:\n                                                                                                                                        # If the bucket is not full\n                                                                                                                                        if buckets > 0:\n                                                                                                                                            # If the bucket is not full\n                                                                                                                                            if buckets > 0:\n                                                                                                                                                # If the bucket is not full\n                                                                                                                                                if buckets > 0:\n                                                                                                                                                    # If the bucket is not full\n                                                                                                                                                    if buckets > 0:\n                                                                                                                                                        # If the bucket is not full\n                                "], ["def sorT_arrAy(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sorT_arrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sorT_arrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sorT_arrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def selEct_wOrds(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selEct_wOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selEct_wOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selEct_wOrds(\"simple white space\", 2) ==> []\n    selEct_wOrds(\"Hello world\", 4) ==> [\"world\"]\n    selEct_wOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nExamples:\nselEct_wOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselEct_wOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselEct_wOrds(\"simple white space\", 2) ==> []\nselEct_wOrds(\"Hello world\", 4) ==> [\"world\"]\nselEct_wOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]"], ["def get_ClosEst_voWel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_ClosEst_voWel(\"yogurt\") ==> \"u\"\n    get_ClosEst_voWel(\"FULL\") ==> \"U\"\n    get_ClosEst_voWel(\"quick\") ==> \"\"\n    get_ClosEst_voWel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_ClosEst_voWel(\"yogurt\") ==> \"u\"\nget_ClosEst_voWel(\"FULL\") ==> \"U\"\nget_ClosEst_voWel(\"quick\") ==> \"\"\nget_ClosEst_voWel(\"ab\") ==> \"\"\n\"\"\""], ["def matCh_paRens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    matCh_paRens(['()(', ')']) == 'Yes'\n    matCh_paRens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n"], ["def maxImum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxImum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n"], ["def solUtioN(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solUtioN([5, 8, 7, 1]) ==> 12\n    solUtioN([3, 3, 3, 3, 3]) ==> 9\n    solUtioN([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n\n\nExamples:\nsolUtioN([5, 8, 7, 1]) ==> 12\nsolUtioN([3, 3, 3, 3, 3]) ==> 9\nsolUtioN([30, 13, 24, 321]) ==>0"], ["def add_ElemEnts(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n\n\nTest Cases:\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 4)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 5)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 6)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 7)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 8)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 9)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 10)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 11)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 12)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 13)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 14)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 15)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 16)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 17)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 18)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 19)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 20)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 21)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 22)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 23)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 24)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 25)\n    add_ElemEnts([111,21,3,4000,5,6,7,8,9], 26)\n    add_ElemEnts([111,21,3,4000,5,6,"], ["def get_Odd_cOllatZ(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_Odd_cOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return [n] + get_Odd_cOllatZ(3*n + 1)\n"], ["def valId_daTe(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valId_daTe('03-11-2000') => True\n\n    valId_daTe('15-01-2012') => False\n\n    valId_daTe('04-0-2040') => False\n\n    valId_daTe('06-04-2020') => True\n\n    valId_daTe('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def splIt_woRds(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splIt_woRds(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    splIt_woRds(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    splIt_woRds(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nsplIt_woRds(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplIt_woRds(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplIt_woRds(\"abcdef\") == 3"], ["def is_sOrteD(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sOrteD([5]) \u279e True\n    is_sOrteD([1, 2, 3, 4, 5]) \u279e True\n    is_sOrteD([1, 3, 2, 4, 5]) \u279e False\n    is_sOrteD([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sOrteD([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sOrteD([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sOrteD([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sOrteD([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n"], ["def intErseCtion(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intErseCtion of these two \n    intervals is a prime number.\n    Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intErseCtion is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n    intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n    intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 == start2 and end1 == end2:\n        return \"YES\"\n    if start1 == start2:\n        return \"YES\"\n    if start1 == end2:\n        return \"YES\"\n    if end1 == start2:\n        return \"YES\"\n    if end1 == end2:\n        return \"YES\"\n    if end1 > start2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintErseCtion((1, 2), (2, 3))\nintErseCtion((-1, 1), (0, 4))\nintErseCtion((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def proD_sigNs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> proD_sigNs([1, 2, 2, -4]) == -9\n    >>> proD_sigNs([0, 1]) == 0\n    >>> proD_sigNs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(arr) * prod(map(sign, arr))\n\n"], ["def minpath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 3), [1, 2, 1])\n    Test.assert_equals(minpath([[5,9,3], [4,1,6], [7,8,2]], 1), [1])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 1), [1, 2, 3])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 2), [1, 2])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 4), [1, 2, 3, 4])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 5), [1, 2, 3, 4, 5])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 6), [1, 2, 3, 4, 5, 6])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 7), [1, 2, 3, 4, 5, 6, 7])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 8), [1, 2, 3, 4, 5, 6, 7, 8])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 9), [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 10), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    Test.assert_equals(minpath([[1,2,3], [4,5,6], [7,8,9]], 11), [1, 2, 3, 4, 5, 6, 7, 8, 9, 1"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digIts(n):\n    \"\"\"Given a positive integer n, return the product of the odd digIts.\n    Return 0 if all digIts are even.\n    For example:\n    digIts(1)  == 1\n    digIts(4)  == 0\n    digIts(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    else:\n        return n * digIts(n // 2)\n"], ["def is_nEsteD(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nEsteD('[[]]') \u279e True\n    is_nEsteD('[]]]]]]][[[[[]') \u279e False\n    is_nEsteD('[][]') \u279e False\n    is_nEsteD('[]') \u279e False\n    is_nEsteD('[[][]]') \u279e True\n    is_nEsteD('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n"], ["def sum_SquaRes(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def cheCk_if_Last_cHar_Is_a_leTter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    cheCk_if_Last_cHar_Is_a_leTter(\"apple pie\") \u279e False\n    cheCk_if_Last_cHar_Is_a_leTter(\"apple pi e\") \u279e True\n    cheCk_if_Last_cHar_Is_a_leTter(\"apple pi e \") \u279e False\n    cheCk_if_Last_cHar_Is_a_leTter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha() in txt:\n        return False\n    else:\n        return True\n\n\ncheCk_if_Last_cHar_Is_a_leTter(\"apple pie\") \u279e False\ncheCk_if_Last_cHar_Is_a_leTter(\"apple pi e\") \u279e True\ncheCk_if_Last_cHar_Is_a_leTter(\"apple pi e \") \u279e False\ncheCk_if_Last_cHar_Is_a_leTter(\"\") \u279e False"], ["def can_ArraNge(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_ArraNge([1,2,4,3,5]) = 3\n    can_ArraNge([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n\nExamples:\ncan_ArraNge([1,2,4,3,5]) = 3\ncan_ArraNge([1,2,3]) = -1\n\"\"\""], ["def larGest_SmallEst_IntegErs(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    larGest_SmallEst_IntegErs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    larGest_SmallEst_IntegErs([]) == (None, None)\n    larGest_SmallEst_IntegErs([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nlarGest_SmallEst_IntegErs([2, 4, 1, 3, 5, 7]) == (None, 1)\nlarGest_SmallEst_IntegErs([]) == (None, None)\nlarGest_SmallEst_IntegErs([0]) == (None, None)"], ["def comPare_One(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    comPare_One(1, 2.5) \u279e 2.5\n    comPare_One(1, \"2,3\") \u279e \"2,3\"\n    comPare_One(\"5,1\", \"6\") \u279e \"6\"\n    comPare_One(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncomPare_One(1, 2.5) \u279e 2.5\ncomPare_One(1, \"2,3\") \u279e \"2,3\"\ncomPare_One(\"5,1\", \"6\") \u279e \"6\"\ncomPare_One(\"1\", 1) \u279e None"], ["def is_eQual_To_sum_EveN(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_eQual_To_sum_EveN(4) == False\n    is_eQual_To_sum_EveN(6) == False\n    is_eQual_To_sum_EveN(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n % i == 0 and i % 2 == 0:\n            return True\n    return False\n\n"], ["def speCial_FactoRiaL(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> speCial_FactoRiaL(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n\nTest:\n>>> speCial_FactoRiaL(4)\n288\n\n\"\"\"\n"], ["def fix_SpacEs(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_SpacEs(\"Example\") == \"Example\"\n    fix_SpacEs(\"Example 1\") == \"Example_1\"\n    fix_SpacEs(\" Example 2\") == \"_Example_2\"\n    fix_SpacEs(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def filE_namE_checK(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    filE_namE_checK(\"example.txt\") # => 'Yes'\n    filE_namE_checK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes'\n\nfilE_namE_checK(\"example.txt\") # => 'Yes'\nfilE_namE_checK(\"1example.dll\") # => 'No' (the name should start with a latin alphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalphalph"], ["def sum_SquaRes(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i]**3\n    return sum\n\nExamples:\nsum_SquaRes([1,2,3]) = 6\nsum_SquaRes([]) = 0\nsum_SquaRes([-1,-5,2,-1,-5]) = -126"], ["def worDs_in_SenteNce(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simPlifY(x, n):\n    \"\"\"Your task is to implement a function that will simPlifY the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simPlifY(\"1/5\", \"5/1\") = True\n    simPlifY(\"1/6\", \"2/1\") = False\n    simPlifY(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimPlifY(\"1/5\", \"5/1\") = True\nsimPlifY(\"1/6\", \"2/1\") = False\nsimPlifY(\"7/10\", \"10/2\") = False\nsimPlifY(\"1/2\", \"1/2\") = True\nsimPlifY(\"1/2\", \"1/3\") = False\nsimPlifY(\"1/2\", \"1/4\") = False\nsimPlifY(\"1/2\", \"1/5\") = False\nsimPlifY(\"1/2\", \"1/6\") = False\nsimPlifY(\"1/2\", \"1/7\") = False\nsimPlifY(\"1/2\", \"1/8\") = False\nsimPlifY(\"1/2\", \"1/9\") = False\nsimPlifY(\"1/2\", \"1/10\") = False\nsimPlifY(\"1/2\", \"1/11\") = False\nsimPlifY(\"1/2\", \"1/12\") = False\nsimPlifY(\"1/2\", \"1/13\") = False\nsimPlifY(\"1/2\", \"1/14\") = False\nsimPlifY(\"1/2\", \"1/15\") = False\nsimPlifY(\"1/2\", \"1/16\") = False\nsimPlifY(\"1/2\", \"1/17\") = False\nsimPlifY(\"1/2\", \"1/18\") = False\nsimPlifY(\"1/2\", \"1/19\") = False\nsimPlifY(\"1/2\", \"1/20\") = False\nsimPlifY(\"1/2\", \"1/21\") = False\nsimPlifY(\"1/2\", \"1/22\") = False\nsimPlifY(\"1/2\", \"1/23\") = False\nsimPlifY(\"1/2\", \"1/24\") = False\nsimPlifY(\"1/2\", \"1/25\") = False\nsimPlifY(\"1/2\", \"1/26\") = False\nsimPlifY(\"1/2\", \"1/27\") = False\nsimPlifY(\"1/2\", \"1/28\") = False\nsimPlifY(\"1/2\", \"1/29\") = False\nsimPlifY(\"1/2\", \"1/30\") = False\nsimPlifY(\"1/2\", \"1/31\") = False\nsimPlifY(\"1/2\", \"1/32\") = False\nsimPlifY(\"1/2\", \"1/33\") = False\nsimPlifY(\"1/2\", \"1/34\") = False\nsimPlifY(\"1/2\", \"1/35\") = False\nsimPlifY(\"1/2\", \"1/36\") = False\nsimPlifY(\"1/2\", \"1/37\") = False\nsimPlifY(\"1/2\", \"1/38\") = False\nsimPlifY(\"1/2\", \"1/39\") = False\nsimPlifY(\"1/2\", \"1/40\") = False\nsimPlifY(\"1/2\", \"1/41\") = False\nsimPlifY(\"1/2\", \"1/42\") = False\nsimPlifY(\"1/2\", \"1/43\") = False\nsimPlifY(\"1/2\", \"1/44\") = False\nsimPlifY(\"1/2\", \"1/4"], ["def ordEr_by_PointS(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> ordEr_by_PointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> ordEr_by_PointS([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums\n\n"], ["def speCialfilteR(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    speCialfilteR([15, -73, 14, -15]) => 1 \n    speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_Max_tRipleS(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorTed_lIst_suM(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n\n\nTest:\nassert sorTed_lIst_suM([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorTed_lIst_suM([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorTed_lIst_suM([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorTed_lIst_suM([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorTed_lIst_suM([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorTed_lIst_suM([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorTed_lIst_suM([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa"], ["def x_or_Y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_Y(7, 34, 12) == 34\n    for x_or_Y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def douBle_tHe_difFerEnce(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    douBle_tHe_difFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    douBle_tHe_difFerEnce([-1, -2, 0]) == 0\n    douBle_tHe_difFerEnce([9, -2]) == 81\n    douBle_tHe_difFerEnce([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x%2 != 0)\n\ndouBle_tHe_difFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouBle_tHe_difFerEnce([-1, -2, 0]) == 0\ndouBle_tHe_difFerEnce([9, -2]) == 81\ndouBle_tHe_difFerEnce([0]) == 0"], ["def comPare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Write your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncomPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncomPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"], ["def StrOngeSt_ExtEnsIon(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for StrOngeSt_ExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: len(x))\n\nStrOngeSt_ExtEnsIon('my_class', ['AA', 'Be', 'CC'])\n"], ["def cycPattErn_chEck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycPattErn_chEck(\"abcd\",\"abd\") => False\n    cycPattErn_chEck(\"hello\",\"ell\") => True\n    cycPattErn_chEck(\"whassup\",\"psus\") => False\n    cycPattErn_chEck(\"abab\",\"baa\") => True\n    cycPattErn_chEck(\"efef\",\"eeff\") => False\n    cycPattErn_chEck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def eveN_odd_Count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        eveN_odd_Count(-12) ==> (1, 1)\n        eveN_odd_Count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_To_miNi_romAn(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_To_miNi_romAn(19) == 'xix'\n    >>> int_To_miNi_romAn(152) == 'clii'\n    >>> int_To_miNi_romAn(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def rigHt_anGle_trIanGle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    rigHt_anGle_trIanGle(3, 4, 5) == True\n    rigHt_anGle_trIanGle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\nrigHt_anGle_trIanGle(3, 4, 5)\nrigHt_anGle_trIanGle(1, 2, 3)"], ["def finD_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    finD_max([\"name\", \"of\", \"string\"]) == \"string\"\n    finD_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    finD_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in word:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\nfinD_max([\"name\", \"of\", \"string\"]) == \"string\"\nfinD_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfinD_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\""], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_aLgebRa(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_aLgebRa(operator, operand)"], ["def solVe(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solVe(\"1234\") = \"4321\"\n    solVe(\"ab\") = \"AB\"\n    solVe(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if not s:\n        return \"\"\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n"], ["def strIng_tO_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> strIng_tO_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def genEratE_inteGerS(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    genEratE_inteGerS(2, 8) => [2, 4, 6, 8]\n    genEratE_inteGerS(8, 2) => [2, 4, 6, 8]\n    genEratE_inteGerS(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a % 2 == 0:\n        return [a]\n    else:\n        return genEratE_inteGerS(a + 2, b) + [a]\n\n"], ["from typing import List\n\n\ndef Has_Close_ELemeNts(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> Has_Close_ELemeNts([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> Has_Close_ELemeNts([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef SepArate_PAren_GroUps(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> SepArate_PAren_GroUps('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def TruNcate_NUmbeR(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> TruNcate_NUmbeR(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef BelOw_zerO(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> BelOw_zerO([1, 2, 3])\n    False\n    >>> BelOw_zerO([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return False\n    return True\n\n"], ["from typing import List\n\n\ndef MeaN_absoLUte_dEviAtiON(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> MeaN_absoLUte_dEviAtiON([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef IntErspeRSe(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> IntErspeRSe([], 4)\n    []\n    >>> IntErspeRSe([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] == delimeter:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef ParSe_nesTEd_paRenS(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> ParSe_nesTEd_paRenS('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["from typing import List\n\n\ndef FilTer_by_SUbstRinG(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> FilTer_by_SUbstRinG([], 'a')\n    []\n    >>> FilTer_by_SUbstRinG(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef Sum_ProduCT(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> Sum_ProduCT([])\n    (0, 1)\n    >>> Sum_ProduCT([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef RolLing_mAX(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> RolLing_mAX([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > numbers[i - 1]:\n                result.append(numbers[i])\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef MakE_paliNDromE(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> MakE_paliNDromE('')\n    ''\n    >>> MakE_paliNDromE('cat')\n    'catac'\n    >>> MakE_paliNDromE('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    longest_palindrome = string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return longest_palindrome + string[::-1][len(longest_palindrome):]\n\n"], ["from typing import List\n\n\ndef StrIng_xoR(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> StrIng_xoR('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef LonGest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the LonGest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> LonGest([])\n\n    >>> LonGest(['a', 'b', 'c'])\n    'a'\n    >>> LonGest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def GreAtest_COmmoN_diVisOR(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> GreAtest_COmmoN_diVisOR(3, 5)\n    1\n    >>> GreAtest_COmmoN_diVisOR(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return GreAtest_COmmoN_diVisOR(b, a % b)\n\n"], ["from typing import List\n\n\ndef All_PrefiXEs(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> All_PrefiXEs('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def StrIng_seQUencE(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> StrIng_seQUencE(0)\n    '0'\n    >>> StrIng_seQUencE(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def CouNt_disTInct_ChaRacTErs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> CouNt_disTInct_ChaRacTErs('xyzXYZ')\n    3\n    >>> CouNt_disTInct_ChaRacTErs('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef ParSe_musIC(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> ParSe_musIC('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def How_Many_tIMes(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> How_Many_tIMes('', 'a')\n    0\n    >>> How_Many_tIMes('aaa', 'a')\n    3\n    >>> How_Many_tIMes('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef SorT_numbERs(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> SorT_numbERs('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef FinD_closESt_elEmeNts(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> FinD_closESt_elEmeNts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> FinD_closESt_elEmeNts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef ResCale_tO_Unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> ResCale_tO_Unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [x / max(numbers) for x in numbers]\n\n"], ["from typing import List, Any\n\n\ndef FilTer_inTEgerS(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> FilTer_inTEgerS(['a', 3.14, 5])\n    [5]\n    >>> FilTer_inTEgerS([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n\n"], ["def StrLen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> StrLen('')\n    0\n    >>> StrLen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def LarGest_dIVisoR(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> LarGest_dIVisoR(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(LarGest_dIVisoR(n // i) for i in range(2, n + 1) if n % i == 0)\n\n"], ["from typing import List\n\n\ndef FacTorizE(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> FacTorizE(8)\n    [2, 2, 2]\n    >>> FacTorizE(25)\n    [5, 5]\n    >>> FacTorizE(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef RemOve_duPLicaTes(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> RemOve_duPLicaTes([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def FliP_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> FliP_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef ConCatenATe(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> ConCatenATe([])\n    ''\n    >>> ConCatenATe(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef FilTer_by_PRefiX(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> FilTer_by_PRefiX([], 'a')\n    []\n    >>> FilTer_by_PRefiX(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def Get_PositIVe(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> Get_PositIVe([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> Get_PositIVe([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def Is_pRime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> Is_pRime(6)\n    False\n    >>> Is_pRime(101)\n    True\n    >>> Is_pRime(11)\n    True\n    >>> Is_pRime(13441)\n    True\n    >>> Is_pRime(61)\n    True\n    >>> Is_pRime(4)\n    False\n    >>> Is_pRime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef FinD_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    FinD_zero find x such that poly(x) = 0.\n    FinD_zero returns only only zero point, even if there are many.\n    Moreover, FinD_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(FinD_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(FinD_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def SorT_thirD(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> SorT_thirD([1, 2, 3])\n    [1, 2, 3]\n    >>> SorT_thirD([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def UniQue(l: list):\n    \"\"\"Return sorted UniQue elements in a list\n    >>> UniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\n"], ["def Max_ElemeNT(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> Max_ElemeNT([1, 2, 3])\n    3\n    >>> Max_ElemeNT([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def FizZ_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> FizZ_buzz(50)\n    0\n    >>> FizZ_buzz(78)\n    2\n    >>> FizZ_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def SorT_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> SorT_even([1, 2, 3])\n    [1, 2, 3]\n    >>> SorT_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef DecOde_cyCLic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def PriMe_fib(n: int):\n    \"\"\"\n    PriMe_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> PriMe_fib(1)\n    2\n    >>> PriMe_fib(2)\n    3\n    >>> PriMe_fib(3)\n    5\n    >>> PriMe_fib(4)\n    13\n    >>> PriMe_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return PriMe_fib(n - 1) + PriMe_fib(n - 2)\n\n"], ["def TriPles_sUM_to_zEro(l: list):\n    \"\"\"\n    TriPles_sUM_to_zEro takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> TriPles_sUM_to_zEro([1, 3, 5, 0])\n    False\n    >>> TriPles_sUM_to_zEro([1, 3, -2, 1])\n    True\n    >>> TriPles_sUM_to_zEro([1, 2, 3, 7])\n    False\n    >>> TriPles_sUM_to_zEro([2, 4, -5, 3, 9, 7])\n    True\n    >>> TriPles_sUM_to_zEro([1])\n    False\n    \"\"\"\n    # Your code here\n    return True if len(set(l)) == 3 and sum(l) == 0 else False\n\n"], ["def Car_Race_cOLlisIon(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> Car_Race_cOLlisIon(1)\n0\n>>> Car_Race_cOLlisIon(2)\n0\n>>> Car_Race_cOLlisIon(3)\n0\n>>> Car_Race_cOLlisIon(4)\n0\n>>> Car_Race_cOLlisIon(5)\n0\n>>> Car_Race_cOLlisIon(6)\n0\n>>> Car_Race_cOLlisIon(7)\n0\n>>> Car_Race_cOLlisIon(8)\n0\n>>> Car_Race_cOLlisIon(9)\n0\n>>> Car_Race_cOLlisIon(10)\n0\n>>> Car_Race_cOLlisIon(11)\n0\n>>> Car_Race_cOLlisIon(12)\n0\n>>> Car_Race_cOLlisIon(13)\n0\n>>> Car_Race_cOLlisIon(14)\n0\n>>> Car_Race_cOLlisIon(15)\n0\n>>> Car_Race_cOLlisIon(16)\n0\n>>> Car_Race_cOLlisIon(17)\n0\n>>> Car_Race_cOLlisIon(18)\n0\n>>> Car_Race_cOLlisIon(19)\n0\n>>> Car_Race_cOLlisIon(20)\n0\n>>> Car_Race_cOLlisIon(21)\n0\n>>> Car_Race_cOLlisIon(22)\n0\n>>> Car_Race_cOLlisIon(23)\n0\n>>> Car_Race_cOLlisIon(24)\n0\n>>> Car_Race_cOLlisIon(25)\n0\n>>> Car_Race_cOLlisIon(26)\n0\n>>> Car_Race_cOLlisIon(27)\n0\n>>> Car_Race_cOLlisIon(28)\n0\n>>> Car_Race_cOLlisIon(29)\n0\n>>> Car_Race_cOLlisIon(30)\n0\n>>> Car_Race_cOLlisIon(31)\n0\n>>> Car_Race_cOLlisIon(32)\n0\n>>> Car_Race_cOLlisIon(33)\n0\n>>> Car_Race_cOLlisIon(34)\n0\n>>> Car_Race_cOLlisIon(35)\n0\n>>> Car_Race_cOLlisIon(36)\n0\n>>> Car_Race_cOLlisIon(37)\n0\n>>> Car_Race_cOLlisIon(38)\n0\n>>> Car_Race_cOLlisIon(39)\n0\n>>> Car_Race_cOLlisIon(40)\n0\n>>> Car_Race_cOLlisIon(41)\n0\n>>> Car_Race_cOLlisIon(42)\n0\n>>> Car_Race_cOLlisIon(43)\n0\n>>> Car_Race_cOLlisIon(44)\n0\n>>> Car_Race_cOLlisIon(45)\n0\n>>> Car_Race_cOLlisIon(46)\n0\n>>> Car_Race_cOLlisIon(47)\n0\n>>> Car_Race_cOLlisIon(48)\n0\n>>> Car_Race_cOLlisIon(49)\n0\n>>> Car_Race_cOLlisIon(50)\n0\n>>> Car_Race_cOLlisIon(51)\n0\n>>> Car_Race_cOLlisIon(52)\n0\n>>> Car_Race_cOLlisIon(53)"], ["def IncR_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> IncR_list([1, 2, 3])\n    [2, 3, 4]\n    >>> IncR_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def PaiRs_sum_TO_zerO(l):\n    \"\"\"\n    PaiRs_sum_TO_zerO takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> PaiRs_sum_TO_zerO([1, 3, 5, 0])\n    False\n    >>> PaiRs_sum_TO_zerO([1, 3, -2, 1])\n    False\n    >>> PaiRs_sum_TO_zerO([1, 2, 3, 7])\n    False\n    >>> PaiRs_sum_TO_zerO([2, 4, -5, 3, 5, 7])\n    True\n    >>> PaiRs_sum_TO_zerO([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n"], ["def ChaNge_baSE(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> ChaNge_baSE(8, 3)\n    '22'\n    >>> ChaNge_baSE(8, 2)\n    '1000'\n    >>> ChaNge_baSE(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be less than 10\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return oct(x)[2:]\n    if base == 4:\n        return hex(x)[2:]\n    if base == 5:\n        return str(x)\n    if base == 6:\n        return str(x)\n    if base == 7:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 9:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)\n    if base == 12:\n        return str(x)\n    if base == 13:\n        return str(x)\n    if base == 14:\n        return str(x)\n    if base == 15:\n        return str(x)\n    if base == 16:\n        return str(x)\n    if base == 17:\n        return str(x)\n    if base == 18:\n        return str(x)\n    if base == 19:\n        return str(x)\n    if base == 20:\n        return str(x)\n    if base == 21:\n        return str(x)\n    if base == 22:\n        return str(x)\n    if base == 23:\n        return str(x)\n    if base == 24:\n        return str(x)\n    if base == 25:\n        return str(x)\n    if base == 26:\n        return str(x)\n    if base == 27:\n        return str(x)\n    if base == 28:\n        return str(x)\n    if base == 29:\n        return str(x)\n    if base == 30:\n        return str(x)\n    if base == 31:\n        return str(x)\n    if base == 32:\n        return str(x)\n    if base == 33:\n        return str(x)\n    if base == 34:\n        return str(x)\n    if base == 35:\n        return str(x)\n    if base == 36:\n        return str(x)\n    if base == 37:\n        return str(x)\n    if base == 38:\n        return str(x)\n    if base == 39:\n        return str(x)\n    if base == 40:\n        return str(x)\n    if base == 41:\n        return str(x)\n    if base == 42:\n        return str(x)\n    if base == 43:\n        return str(x)\n    if base == 44:\n        return str(x)\n    if base == 45:\n        return str(x)\n    if base == 46:\n        return str(x)\n    if base == 47:\n        return str(x)\n    if base == 48:\n        return str(x)\n    if base == 49:\n        return str(x)\n    if base == 50:\n        return str(x)\n    if base == 51:\n        return str(x)\n    if base == 52:\n        return str(x)\n    if base == 53:\n        return str(x)\n    if base == 54:\n        return str(x)\n    if base == 55:\n        return str(x)\n    if base == 56:\n        return str(x)\n    if base == 57:\n        return str(x)\n    if base == 58:\n        return str(x)\n    if base == 59:\n        return str(x)\n    if base == 60:\n        return str(x)\n    if base == 61:\n        return str(x)\n    if base == 62:\n        return str(x)\n    if base == 63:\n        return str(x)\n   "], ["def TriAngle_ARea(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> TriAngle_ARea(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def Fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    Fib4(0) -> 0\n    Fib4(1) -> 0\n    Fib4(2) -> 2\n    Fib4(3) -> 0\n    Fib4(n) -> Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the Fib4 number sequence.  Do not use recursion.\n    >>> Fib4(5)\n    4\n    >>> Fib4(6)\n    8\n    >>> Fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4)\n\n"], ["def MedIan(l: list):\n    \"\"\"Return MedIan of elements in the list l.\n    >>> MedIan([3, 1, 2, 4, 5])\n    3\n    >>> MedIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l)//2]\n\n\nAnswer: def MedIan(l: list):\n    \"\"\"Return MedIan of elements in the list l.\n    >>> MedIan([3, 1, 2, 4, 5])\n    3\n    >>> MedIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l)//2]\n"], ["def Is_pAlindROme(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> Is_pAlindROme('')\n    True\n    >>> Is_pAlindROme('aba')\n    True\n    >>> Is_pAlindROme('aaaaa')\n    True\n    >>> Is_pAlindROme('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def ModP(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> ModP(3, 5)\n    3\n    >>> ModP(1101, 101)\n    2\n    >>> ModP(0, 101)\n    1\n    >>> ModP(3, 11)\n    8\n    >>> ModP(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef DecOde_shIFt(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def RemOve_voWEls(text):\n    \"\"\"\n    RemOve_voWEls is a function that takes string and returns string without vowels.\n    >>> RemOve_voWEls('')\n    ''\n    >>> RemOve_voWEls(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> RemOve_voWEls('abcdef')\n    'bcdf'\n    >>> RemOve_voWEls('aaaaa')\n    ''\n    >>> RemOve_voWEls('aaBAA')\n    'B'\n    >>> RemOve_voWEls('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def BelOw_thrESholD(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> BelOw_thrESholD([1, 2, 4, 10], 100)\n    True\n    >>> BelOw_thrESholD([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"], ["def Add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> Add(2, 3)\n    5\n    >>> Add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def SamE_charS(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> SamE_charS('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> SamE_charS('abcd', 'dddddddabc')\n    True\n    >>> SamE_charS('dddddddabc', 'abcd')\n    True\n    >>> SamE_charS('eabcd', 'dddddddabc')\n    False\n    >>> SamE_charS('abcd', 'dddddddabce')\n    False\n    >>> SamE_charS('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def Fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> Fib(10)\n    55\n    >>> Fib(1)\n    1\n    >>> Fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return Fib(n - 1) + Fib(n - 2)\n\n"], ["def CorRect_bRAckeTinG(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> CorRect_bRAckeTinG(\"<\")\n    False\n    >>> CorRect_bRAckeTinG(\"<>\")\n    True\n    >>> CorRect_bRAckeTinG(\"<<><>>\")\n    True\n    >>> CorRect_bRAckeTinG(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"], ["def MonOtoniC(l: list):\n    \"\"\"Return True is list elements are MonOtoniCally increasing or decreasing.\n    >>> MonOtoniC([1, 2, 4, 20])\n    True\n    >>> MonOtoniC([1, 20, 4, 10])\n    False\n    >>> MonOtoniC([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i - 1]:\n            return True\n    return True\n\n"], ["def ComMon(l1: list, l2: list):\n    \"\"\"Return sorted unique ComMon elements for two lists.\n    >>> ComMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> ComMon([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            yield l1[i]\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n"], ["def LarGest_pRIme_fActOr(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> LarGest_pRIme_fActOr(13195)\n    29\n    >>> LarGest_pRIme_fActOr(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n\n\n"], ["def Sum_To_n(n: int):\n    \"\"\"Sum_To_n is a function that sums numbers from 1 to n.\n    >>> Sum_To_n(30)\n    465\n    >>> Sum_To_n(100)\n    5050\n    >>> Sum_To_n(5)\n    15\n    >>> Sum_To_n(10)\n    55\n    >>> Sum_To_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def CorRect_bRAckeTinG(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> CorRect_bRAckeTinG(\"(\")\n    False\n    >>> CorRect_bRAckeTinG(\"()\")\n    True\n    >>> CorRect_bRAckeTinG(\"(()())\")\n    True\n    >>> CorRect_bRAckeTinG(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n"], ["def DerIvatiVE(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return DerIvatiVE of this polynomial in the same form.\n    >>> DerIvatiVE([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> DerIvatiVE([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [sum(xs[i:j] * [i, i+1, i+2] for i in range(len(xs)-1, -1, -1))\n            for j in range(1, len(xs)+1)]\n\n"], ["def FibFib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    FibFib(0) == 0\n    FibFib(1) == 0\n    FibFib(2) == 1\n    FibFib(n) == FibFib(n-1) + FibFib(n-2) + FibFib(n-3).\n    Please write a function to efficiently compute the n-th element of the FibFib number sequence.\n    >>> FibFib(1)\n    0\n    >>> FibFib(5)\n    4\n    >>> FibFib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return FibFib(n-1) + FibFib(n-2) + FibFib(n-3)\n\nFibFib(1)\nFibFib(5)\nFibFib(8)\n\nThis is a recursive function that takes in a number n and returns the nth element of the Fibonacci sequence.\n\nThe function is defined as follows:\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef VowEls_coUNt(s):\n    \"\"\"Write a function VowEls_coUNt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> VowEls_coUNt(\"abcde\")\n    2\n    >>> VowEls_coUNt(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def CirCular_SHift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> CirCular_SHift(12, 1)\n    \"21\"\n    >>> CirCular_SHift(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n\n"], ["def DigItSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        DigItSum(\"\") => 0\n        DigItSum(\"abAB\") => 131\n        DigItSum(\"abcCd\") => 67\n        DigItSum(\"helloE\") => 69\n        DigItSum(\"woArBld\") => 131\n        DigItSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def FruIt_disTRibuTioN(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    FruIt_disTRibuTioN(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    FruIt_disTRibuTioN(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    FruIt_disTRibuTioN(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    FruIt_disTRibuTioN(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return s.count(\"mango\")\n"], ["def PluCk(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to PluCk one of the nodes and return it.\n    The PluCked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The PluCked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Write your code here\n    if not arr:\n        return []\n    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]\n\n"], ["def SeaRch(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        SeaRch([4, 1, 2, 2, 3, 1]) == 2\n        SeaRch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        SeaRch([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    SeaRch([4, 1, 2, 2, 3, 1]) == 2\n    SeaRch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    SeaRch([5, 5, 4, 4, 4]) == -1"], ["def StrAnge_sORt_liSt(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    StrAnge_sORt_liSt([1, 2, 3, 4]) == [1, 4, 2, 3]\n    StrAnge_sORt_liSt([5, 5, 5, 5]) == [5, 5, 5, 5]\n    StrAnge_sORt_liSt([]) == []\n    '''\n    lst.sort()\n    return lst[::-1]\n\n\nExamples:\nStrAnge_sORt_liSt([1, 2, 3, 4]) == [1, 4, 2, 3]\nStrAnge_sORt_liSt([5, 5, 5, 5]) == [5, 5, 5, 5]\nStrAnge_sORt_liSt([]) == []\n"], ["def TriAngle_ARea(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    TriAngle_ARea(3, 4, 5) == 6.00\n    TriAngle_ARea(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** 0.5\n"], ["def WilL_it_flY(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    WilL_it_flY([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    WilL_it_flY([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    WilL_it_flY([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    WilL_it_flY([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    if len(q) == 1:\n        return True\n    if q[0] == q[-1]:\n        return WilL_it_flY(q[1:-1], w)\n    if sum(q) <= w:\n        return WilL_it_flY(q[1:], w)\n    return False\n\n"], ["def SmaLlest_CHangE(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    SmaLlest_CHangE([1,2,3,5,4,7,9,6]) == 4\n    SmaLlest_CHangE([1, 2, 3, 4, 3, 2, 2]) == 1\n    SmaLlest_CHangE([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            return j - i\n        i += 1\n        j -= 1\n    return 0\n\n"], ["def TotAl_matCH(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    TotAl_matCH([], []) \u279e []\n    TotAl_matCH(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    TotAl_matCH(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    TotAl_matCH(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    TotAl_matCH(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n\nTotAl_matCH(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\nTotAl_matCH(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\nTotAl_matCH(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\nTotAl_matCH(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def Is_mUltipLY_priMe(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    Is_mUltipLY_priMe(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        elif a % 3 == 0:\n            return False\n        elif a % 5 == 0:\n            return False\n        else:\n            return Is_mUltipLY_priMe(a/2)\n    else:\n        return True\n\nIs_mUltipLY_priMe(30) == True\n30 = 2 * 3 * 5\n\nIs_mUltipLY_priMe(100) == False\n100 = 2 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71 * 73 * 79 * 83 * 89 * 97 * 101 * 103 * 107 * 109 * 113 * 127 * 131 * 137 * 139 * 149 * 151 * 157 * 163 * 167 * 173 * 179 * 181 * 191 * 193 * 197 * 199 * 211 * 223 * 227 * 229 * 233 * 239 * 241 * 251 * 257 * 263 * 269 * 271 * 277 * 281 * 283 * 293 * 307 * 311 * 313 * 317 * 331 * 337 * 347 * 349 * 353 * 359 * 367 * 373 * 379 * 383 * 389 * 397 * 401 * 409 * 419 * 421 * 431 * 433 * 439 * 443 * 449 * 457 * 461 * 463 * 467 * 479 * 487 * 491 * 499 * 503 * 509 * 521 * 523 * 541 * 547 * 557 * 563 * 569 * 571 * 577 * 587 * 593 * 599 * 601 * 607 * 613 * 617 * 619 * 631 * 641 * 643 * 647 * 653 * 659 * 661 * 673 * 677 * 683 * 691 * 701 * 709 * 719 * 727 * 733 * 739 * 743 * 751 * 757 * 761 * 769 * 773 * 787 * 797 * 809 * 811 * 821 * 823 * 827 * 829 * 839 * 853 * 857 * 859 * 863 * 877 * 881 * 883 * 887 * 907 * 911 * 919 * 929 * 937 * 941 * 947 * 953 * 967 * 971 * 977 * 983 *"], ["def Is_sImple_POwer(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    Is_sImple_POwer(1, 4) => true\n    Is_sImple_POwer(2, 2) => true\n    Is_sImple_POwer(8, 2) => true\n    Is_sImple_POwer(3, 2) => false\n    Is_sImple_POwer(3, 1) => false\n    Is_sImple_POwer(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n"], ["def IscUbe(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    IscUbe(1) ==> True\n    IscUbe(2) ==> False\n    IscUbe(-1) ==> True\n    IscUbe(64) ==> True\n    IscUbe(0) ==> True\n    IscUbe(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a % 2 == 0:\n        return False\n    elif a % 3 == 0:\n        return True\n    else:\n        return IscUbe(a//2) and IscUbe(a//3)\n"], ["def Hex_Key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n\nTest.assert_equals(Hex_Key(\"AB\"), 1)\nTest.assert_equals(Hex_Key(\"1077E\"), 2)\nTest.assert_equals(Hex_Key(\"ABED1A33\"), 4)\nTest.assert_equals(Hex_Key(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(Hex_Key(\"2020\"), 2)"], ["def DecImal_tO_BinaRy(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    DecImal_tO_BinaRy(15)   # returns \"db1111db\"\n    DecImal_tO_BinaRy(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\nDecImal_tO_BinaRy(15)   # returns \"db1111db\"\nDecImal_tO_BinaRy(32)   # returns \"db100000db\"\n\"\"\"\n"], ["def Is_hAppy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    Is_hAppy(a) => False\n    Is_hAppy(aa) => False\n    Is_hAppy(abcd) => True\n    Is_hAppy(aabb) => False\n    Is_hAppy(adb) => True\n    Is_hAppy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["def NumEricaL_LettEr_gRadE(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return\n\ngrades = [4.0, 3, 1.7, 2, 3.5]\nNumEricaL_LettEr_gRadE(grades)"], ["def PriMe_lenGTh(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    PriMe_lenGTh('Hello') == True\n    PriMe_lenGTh('abcdcba') == True\n    PriMe_lenGTh('kittens') == True\n    PriMe_lenGTh('orange') == False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if string[0] == string[i]:\n                return False\n        return True\n\n"], ["def StaRts_onE_Ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def SolVe(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\nTest.assert_equals(SolVe(1000), \"1\")\nTest.assert_equals(SolVe(150), \"110\")\nTest.assert_equals(SolVe(147), \"1100\")\nTest.assert_equals(SolVe(10000), \"10000\")\nTest.assert_equals(SolVe(10001), \"10001\")\nTest.assert_equals(SolVe(100000), \"100000\")\nTest.assert_equals(SolVe(100001), \"100001\")\nTest.assert_equals(SolVe(1000000), \"1000000\")\nTest.assert_equals(SolVe(1000001), \"1000001\")\nTest.assert_equals(SolVe(10000000), \"10000000\")\nTest.assert_equals(SolVe(10000001), \"10000001\")\nTest.assert_equals(SolVe(100000000), \"100000000\")\nTest.assert_equals(SolVe(100000001), \"100000001\")\nTest.assert_equals(SolVe(1000000000), \"1000000000\")\nTest.assert_equals(SolVe(1000000001), \"1000000001\")\nTest.assert_equals(SolVe(10000000000), \"10000000000\")\nTest.assert_equals(SolVe(10000000001), \"10000000001\")\nTest.assert_equals(SolVe(100000000000), \"100000000000\")\nTest.assert_equals(SolVe(100000000001), \"100000000001\")\nTest.assert_equals(SolVe(1000000000000), \"1000000000000\")\nTest.assert_equals(SolVe(1000000000001), \"1000000000001\")\nTest.assert_equals(SolVe(10000000000000), \"10000000000000\")\nTest.assert_equals(SolVe(100000000000001), \"100000000000001\")\nTest.assert_equals(SolVe(1000000000000000), \"1000000000000000\")\nTest.assert_equals(SolVe(1000000000000001), \"1000000000000001\")\nTest.assert_equals(SolVe(10000000000000000), \"10000000000000000\")\nTest.assert_equals(SolVe(10000000"], ["def Add(lst):\n    \"\"\"Given a non-empty list of integers lst. Add the even elements that are at odd indices..\n\n\n    Examples:\n        Add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    Add([4, 2, 6, 7]) ==> 2\n    Add([1, 2, 3, 4, 5]) ==> 15\n    Add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def AntI_shufFLe(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    AntI_shufFLe('Hi') returns 'Hi'\n    AntI_shufFLe('hello') returns 'ehllo'\n    AntI_shufFLe('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def Get_Row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    Get_Row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    Get_Row([], 1) == []\n    Get_Row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Write your code here\n    return sorted(set(tuple(x) for x in lst if x[0] == x[1] and x[0] == x[2] and x[0] == x[3] and x[0] == x[4] and x[0] == x[5] and x[0] == x[6] and x[0] == x[7] and x[0] == x[8] and x[0] == x[9] and x[0] == x[10] and x[0] == x[11] and x[0] == x[12] and x[0] == x[13] and x[0] == x[14] and x[0] == x[15] and x[0] == x[16] and x[0] == x[17] and x[0] == x[18] and x[0] == x[19] and x[0] == x[20] and x[0] == x[21] and x[0] == x[22] and x[0] == x[23] and x[0] == x[24] and x[0] == x[25] and x[0] == x[26] and x[0] == x[27] and x[0] == x[28] and x[0] == x[29] and x[0] == x[30] and x[0] == x[31] and x[0] == x[32] and x[0] == x[33] and x[0] == x[34] and x[0] == x[35] and x[0] == x[36] and x[0] == x[37] and x[0] == x[38] and x[0] == x[39] and x[0] == x[40] and x[0] == x[41] and x[0] == x[42] and x[0] == x[43] and x[0] == x[44] and x[0] == x[45] and x[0] == x[46] and x[0] == x[47] and x[0] == x[48] and x[0] == x[49] and x[0] == x[50] and x[0] == x[51] and x[0] == x[52] and x[0] == x[53] and x[0] == x[54] and x[0] == x[55] and x[0] == x[56] and x[0] == x[57] and x[0] == x[58] and x[0] == x[59] and x[0] == x[60] and x[0] == x[61] and x[0] == x[62] and x[0] == x[63] and x[0] == x[64] and x[0] == x[65] and x[0] == x[66] and x[0] == x[67] and x[0] =="], ["def SorT_arraY(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * SorT_arraY([]) => []\n    * SorT_arraY([5]) => [5]\n    * SorT_arraY([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * SorT_arraY([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    return array\n\nExamples:\nSorT_arraY([]) => []\nSorT_arraY([5]) => [5]\nSorT_arraY([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\nSorT_arraY([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n"], ["def EncRypt(s):\n    \"\"\"Create a function EncRypt that takes a string as an argument and\n    returns a string EncRypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    EncRypt('hi') returns 'lm'\n    EncRypt('asdfghjkl') returns 'ewhjklnop'\n    EncRypt('gf') returns 'kj'\n    EncRypt('et') returns 'ix'\n    \"\"\"\n    return ''.join(chr(ord(c) + 2) for c in s)\n\nEncRypt('hi')\nEncRypt('asdfghjkl')\nEncRypt('gf')\nEncRypt('et')"], ["def NexT_smalLEst(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function NexT_smalLEst() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    NexT_smalLEst([1, 2, 3, 4, 5]) == 2\n    NexT_smalLEst([5, 1, 4, 3, 2]) == 2\n    NexT_smalLEst([]) == None\n    NexT_smalLEst([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n"], ["def Is_bOred(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> Is_bOred(\"Hello world\")\n    0\n    >>> Is_bOred(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n"], ["def Any_Int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    Any_Int(5, 2, 7) \u279e True\n    \n    Any_Int(3, 2, 2) \u279e False\n\n    Any_Int(3, -2, 1) \u279e True\n    \n    Any_Int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return False\n\n"], ["def EncOde(message):\n    \"\"\"\n    Write a function that takes a message, and EncOdes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> EncOde('test')\n    'TGST'\n    >>> EncOde('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> EncOde('test')\n'TGST'\n>>> EncOde('This is a message')\n'tHKS KS C MGSSCGG'"], ["def SkjKasdkD(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 2"], ["def CheCk_dicT_Case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    CheCk_dicT_Case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    CheCk_dicT_Case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    CheCk_dicT_Case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    CheCk_dicT_Case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    CheCk_dicT_Case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict == {}:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"], ["def CouNt_up_tO(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    CouNt_up_tO(5) => [2,3]\n    CouNt_up_tO(11) => [2,3,5,7]\n    CouNt_up_tO(0) => []\n    CouNt_up_tO(20) => [2,3,5,7,11,13,17,19]\n    CouNt_up_tO(1) => []\n    CouNt_up_tO(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,2]\n    if n == 3:\n        return [1,2,3]\n    if n == 4:\n        return [1,2,3,4]\n    if n == 5:\n        return [1,2,3,4,5]\n    if n == 6:\n        return [1,2,3,4,5,6]\n    if n == 7:\n        return [1,2,3,4,5,6,7]\n    if n == 8:\n        return [1,2,3,4,5,6,7,8]\n    if n == 9:\n        return [1,2,3,4,5,6,7,8,9]\n    if n == 10:\n        return [1,2,3,4,5,6,7,8,9,10]\n    if n == 11:\n        return [1,2,3,4,5,6,7,8,9,10,11]\n    if n == 12:\n        return [1,2,3,4,5,6,7,8,9,10,11,12]\n    if n == 13:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    if n == 14:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    if n == 15:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    if n == 16:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    if n == 17:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    if n == 18:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n    if n == 19:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    if n == 20:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    if n == 21:\n        return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    if n == 22:\n        return [1,2,3,4,5,6,7,8,9,10,1"], ["def MulTiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    MulTiply(148, 412) should return 16.\n    MulTiply(19, 28) should return 72.\n    MulTiply(2020, 1851) should return 0.\n    MulTiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n"], ["def CouNt_uppER(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    CouNt_uppER('aBCdEf') returns 1\n    CouNt_uppER('abcdefg') returns 0\n    CouNt_uppER('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n"], ["def CloSest_iNTegeR(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> CloSest_iNTegeR(\"10\")\n    10\n    >>> CloSest_iNTegeR(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example CloSest_iNTegeR(\"14.5\") should\n    return 15 and CloSest_iNTegeR(\"-14.5\") should return -15.\n    '''\n    return int(round(value))\n\nExamples\n>>> CloSest_iNTegeR(\"10\")\n10\n>>> CloSest_iNTegeR(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example CloSest_iNTegeR(\"14.5\") should\nreturn 15 and CloSest_iNTegeR(\"-14.5\") should return -15."], ["def MakE_a_pilE(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> MakE_a_pilE(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n, n + 1]\n\n\nExamples:\n>>> MakE_a_pilE(3)\n[3, 5, 7]\n>>> MakE_a_pilE(4)\n[4, 6, 8]\n>>> MakE_a_pilE(5)\n[5, 7, 9]\n>>> MakE_a_pilE(6)\n[6, 8, 10]\n>>> MakE_a_pilE(7)\n[7, 9, 11]\n>>> MakE_a_pilE(8)\n[8, 10, 12]\n>>> MakE_a_pilE(9)\n[9, 11, 13]\n>>> MakE_a_pilE(10)\n[10, 12, 14]\n>>> MakE_a_pilE(11)\n[11, 13, 15]\n>>> MakE_a_pilE(12)\n[12, 14, 16]\n>>> MakE_a_pilE(13)\n[13, 15, 17]\n>>> MakE_a_pilE(14)\n[14, 16, 18]\n>>> MakE_a_pilE(15)\n[15, 17, 19]\n>>> MakE_a_pilE(16)\n[16, 18, 20]\n>>> MakE_a_pilE(17)\n[17, 19, 21]\n>>> MakE_a_pilE(18)\n[18, 20, 22]\n>>> MakE_a_pilE(19)\n[19, 21, 23]\n>>> MakE_a_pilE(20)\n[20, 22, 24]\n>>> MakE_a_pilE(21)\n[21, 23, 25]\n>>> MakE_a_pilE(22)\n[22, 24, 26]\n>>> MakE_a_pilE(23)\n[23, 25, 27]\n>>> MakE_a_pilE(24)\n[24, 26, 28]\n>>> MakE_a_pilE(25)\n[25, 27, 29]\n>>> MakE_a_pilE(26)\n[26, 28, 30]\n>>> MakE_a_pilE(27)\n[27, 29, 31]\n>>> MakE_a_pilE(28)\n[28, 30, 32]\n>>> MakE_a_pilE(29)\n[29, 31, 33]\n>>> MakE_a_pilE(30)\n[30, 32, 34]\n>>> MakE_a_pilE(31)\n[31, 33, 35]\n>>> MakE_a_pilE(32)\n[32, 34, 36]\n>>> MakE_a_pilE(33)\n[33, 35, 37]\n>>> MakE_a_pilE(34)\n[34, 36, "], ["def WorDs_strINg(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    WorDs_strINg(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    WorDs_strINg(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nAnswer: def WorDs_strINg(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    WorDs_strINg(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    WorDs_strINg(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")"], ["def ChoOse_nuM(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    ChoOse_nuM(12, 15) = 14\n    ChoOse_nuM(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0 and y % 2 == 0:\n        if x <= y:\n            return x\n        else:\n            return y\n    else:\n        return -1\n\n\nTest cases:\nChoOse_nuM(12, 15) = 14\nChoOse_nuM(13, 12) = -1\nChoOse_nuM(12, 12) = 12\nChoOse_nuM(12, 11) = -1\nChoOse_nuM(11, 12) = -1\nChoOse_nuM(12, 10) = -1\nChoOse_nuM(10, 12) = -1\nChoOse_nuM(12, 9) = -1\nChoOse_nuM(9, 12) = -1\nChoOse_nuM(12, 8) = -1\nChoOse_nuM(8, 12) = -1\nChoOse_nuM(12, 7) = -1\nChoOse_nuM(7, 12) = -1\nChoOse_nuM(12, 6) = -1\nChoOse_nuM(6, 12) = -1\nChoOse_nuM(12, 5) = -1\nChoOse_nuM(5, 12) = -1\nChoOse_nuM(12, 4) = -1\nChoOse_nuM(4, 12) = -1\nChoOse_nuM(12, 3) = -1\nChoOse_nuM(3, 12) = -1\nChoOse_nuM(12, 2) = -1\nChoOse_nuM(2, 12) = -1\nChoOse_nuM(12, 1) = -1\nChoOse_nuM(1, 12) = -1\nChoOse_nuM(12, 0) = -1\nChoOse_nuM(0, 12) = -1\nChoOse_nuM(12, -1) = -1\nChoOse_nuM(-1, 12) = -1\nChoOse_nuM(12, -2) = -1\nChoOse_nuM(-2, 12) = -1\nChoOse_nuM(12, -3) = -1\nChoOse_nuM(-3, 12) = -1\nChoOse_nuM(12, -4) = -1\nChoOse_nuM(-4, 12) = -1\nChoOse_nuM(12, -5) = -1\nChoOse_nuM(-5, 12) = -1\nChoOse_nuM(12, -6) = -1\nChoOse_nuM(-6, 12) = -1\nChoOse_nuM(12, -7) = -1\nChoOse_nuM(-7, 12) = -1\nChoOse_nuM(12, -8) = -1\nChoOse_nuM(-8, 12) = -1\nChoOse_nuM(12, -9) = -1\nChoOse_nuM(-9, 12) = -1\nChoOse_nuM(12, -10) = -1\nChoOse_nuM(-10, 12) = -1\nChoOse_nuM(12, -11) = -1\nChoOse_nuM(-11, 12) = -1\nChoOse_nuM(12, -12) = -"], ["def RouNded_aVG(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    RouNded_aVG(1, 5) => \"0b11\"\n    RouNded_aVG(7, 5) => -1\n    RouNded_aVG(10, 20) => \"0b1111\"\n    RouNded_aVG(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\n>>> RouNded_aVG(1, 5)\n'0b11'\n>>> RouNded_aVG(7, 5)\n-1\n>>> RouNded_aVG(10, 20)\n'0b1111'\n>>> RouNded_aVG(20, 33)\n'0b11010'\n"], ["def UniQue_diGIts(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> UniQue_diGIts([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> UniQue_diGIts([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(list(set(x) - set(str(i) for i in x if i % 2 == 0)))\n\n\nSample Input:\n[15, 33, 1422, 1]\n[152, 323, 1422, 10]\n\nSample Output:\n[1, 15, 33]\n[]"], ["def By_lEngth(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    arr.reverse()\n    arr = [str(i) for i in arr]\n    return arr\n\nBy_lEngth([2, 1, 1, 4, 5, 8, 2, 3])"], ["deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at"], ["def EveN_odd_pALindRomE(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\n"], ["def CouNt_numS(arr):\n    \"\"\"\n    Write a function CouNt_numS which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> CouNt_numS([]) == 0\n    >>> CouNt_numS([-1, 11, -11]) == 1\n    >>> CouNt_numS([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i < 0:\n            count += 1\n        else:\n            count += sum(int(j) for j in str(i))\n    return count\n\n"], ["def MovE_one_bALl(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    MovE_one_bALl([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    MovE_one_bALl([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def ExcHange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an ExcHange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of ExcHanged elements between lst1 and lst2.\n    If it is possible to ExcHange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    ExcHange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    ExcHange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Write your code here\n    return \"YES\" if len(set(lst1) & set(lst2)) == 0 else \"NO\"\n\n\nExcHange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nExcHange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"NO\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"YES\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"NO\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"YES\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"NO\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"YES\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"NO\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"YES\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => \"NO\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => \"YES\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => \"NO\"\nExcHange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1"], ["def HisTograM(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    HisTograM('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    HisTograM('a b b a') == {'a': 2, 'b': 2}\n    HisTograM('a b c a b') == {'a': 2, 'b': 2}\n    HisTograM('b b b b a') == {'b': 4}\n    HisTograM('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n"], ["def RevErse_dELete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    if s == c:\n        return (s, True)\n    else:\n        return (s, False)\n"], ["def Odd_Count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> Odd_Count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> Odd_Count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n"], ["def MinsubArRAySuM(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    MinsubArRAySuM([2, 3, 4, 1, 2, 4]) == 1\n    MinsubArRAySuM([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sub_array = nums[i:j+1]\n            sum_of_sub_array = sum(sub_array)\n            if sum_of_sub_array < min_sum:\n                min_sum = sum_of_sub_array\n    return min_sum\n\n"], ["def Max_Fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = capacity\n    # Iterate through the grid\n    for row in grid:\n        # Iterate through the row\n        for col in row:\n            # If the bucket is empty\n            if col == 0:\n                # Increment the number of buckets\n                buckets += 1\n                # Increment the number of wells\n                wells += 1\n            # If the bucket is full\n            elif col == 1:\n                # Increment the number of buckets\n                buckets += 1\n                # Increment the number of wells\n                wells += 1\n            # If the bucket is not empty and not full\n            else:\n                # Increment the number of buckets\n                buckets += 1\n                # Increment the number of wells\n                wells += 1\n                # Increment the number of times you need to lower the buckets\n                times += 1\n                # If the number of buckets is greater than the bucket capacity\n                if buckets > bucket_capacity:\n                    # Increment the number of buckets\n                    buckets -= 1\n                    # Increment the number of wells\n                    wells -= 1\n                    # Increment the number of times you need to lower the buckets\n                    times += 1\n    # Return the number of times you need to lower the buckets\n    return times\n"], ["def SorT_arraY(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> SorT_arraY([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> SorT_arraY([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> SorT_arraY([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def SelEct_woRDs(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    SelEct_woRDs(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    SelEct_woRDs(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    SelEct_woRDs(\"simple white space\", 2) ==> []\n    SelEct_woRDs(\"Hello world\", 4) ==> [\"world\"]\n    SelEct_woRDs(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n"], ["def Get_CloseST_vowEl(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    Get_CloseST_vowEl(\"yogurt\") ==> \"u\"\n    Get_CloseST_vowEl(\"FULL\") ==> \"U\"\n    Get_CloseST_vowEl(\"quick\") ==> \"\"\n    Get_CloseST_vowEl(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nGet_CloseST_vowEl(\"yogurt\") ==> \"u\"\nGet_CloseST_vowEl(\"FULL\") ==> \"U\"\nGet_CloseST_vowEl(\"quick\") ==> \"\"\nGet_CloseST_vowEl(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letter only.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n"], ["def MatCh_parENs(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    MatCh_parENs(['()(', ')']) == 'Yes'\n    MatCh_parENs([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n"], ["def MaxImum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the MaxImum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n"], ["def SolUtion(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    SolUtion([5, 8, 7, 1]) ==> 12\n    SolUtion([3, 3, 3, 3, 3]) ==> 9\n    SolUtion([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\n"], ["def Add_ElemeNTs(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n\n"], ["def Get_Odd_coLLatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    Get_Odd_coLLatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return Get_Odd_coLLatz(3*n+1) + [n]\n"], ["def ValId_datE(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    ValId_datE('03-11-2000') => True\n\n    ValId_datE('15-01-2012') => False\n\n    ValId_datE('04-0-2040') => False\n\n    ValId_datE('06-04-2020') => True\n\n    ValId_datE('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def SplIt_worDS(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    SplIt_worDS(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    SplIt_worDS(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    SplIt_worDS(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nSplIt_worDS(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nSplIt_worDS(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nSplIt_worDS(\"abcdef\") == 3"], ["def Is_sOrted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    Is_sOrted([5]) \u279e True\n    Is_sOrted([1, 2, 3, 4, 5]) \u279e True\n    Is_sOrted([1, 3, 2, 4, 5]) \u279e False\n    Is_sOrted([1, 2, 3, 4, 5, 6]) \u279e True\n    Is_sOrted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    Is_sOrted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    Is_sOrted([1, 2, 2, 3, 3, 4]) \u279e True\n    Is_sOrted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nIs_sOrted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nIs_sOrted([1, 2, 2, 3, 3, 4]) \u279e True\nIs_sOrted([1, 2, 2, 2, 3, 4]) \u279e False"], ["def IntErsecTIon(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of IntErsecTIon of these two \n    intervals is a prime number.\n    Example, the IntErsecTIon of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the IntErsecTIon is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    IntErsecTIon((1, 2), (2, 3)) ==> \"NO\"\n    IntErsecTIon((-1, 1), (0, 4)) ==> \"NO\"\n    IntErsecTIon((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"NO\"\n"], ["def ProD_signS(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> ProD_signS([1, 2, 2, -4]) == -9\n    >>> ProD_signS([0, 1]) == 0\n    >>> ProD_signS([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    sign_arr = [1 if x >= 0 else -1 for x in arr]\n    return sum(arr) * reduce(lambda x, y: x * y, sign_arr)\n\n"], ["def Minpath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTestcase:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 2\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 4\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 5\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 6\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 7\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 8\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 9\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 10\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7"], ["def Tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    Tri(1) = 3\n    Tri(n) = 1 + n / 2, if n is even.\n    Tri(n) =  Tri(n - 1) + Tri(n - 2) + Tri(n + 1), if n is odd.\n    For example:\n    Tri(2) = 1 + (2 / 2) = 2\n    Tri(4) = 3\n    Tri(3) = Tri(2) + Tri(1) + Tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    Tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        return [1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\n\n\nExamples:\nTri(3) = [1, 3, 2, 8]\nTri(4) = [1, 3, 2, 8, 1]\nTri(5) = [1, 3, 2, 8, 1, 5]\nTri(6) = [1, 3, 2, 8, 1, 5, 16]\nTri(7) = [1, 3, 2, 8, 1, 5, 16, 49]\nTri(8) = [1, 3, 2, 8, 1, 5, 16, 49, 144]\nTri(9) = [1, 3, 2, 8, 1, 5, 16, 49, 144, 441]\nTri(10) = [1, 3, 2, 8, 1, 5, 16, 49, 144, 441, 10946]\n\"\"\"\n\nThis is a recursive function, which means that it calls itself.\n\nThe function takes an integer n as an input and returns a list of the first n + 1 numbers of the Tribonacci sequence.\n\nThe function returns the list [1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 2, 3, 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 3, 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n +"], ["def DigIts(n):\n    \"\"\"Given a positive integer n, return the product of the odd DigIts.\n    Return 0 if all DigIts are even.\n    For example:\n    DigIts(1)  == 1\n    DigIts(4)  == 0\n    DigIts(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    else:\n        return n * DigIts(n//2)\n"], ["def Is_nEsted(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    Is_nEsted('[[]]') \u279e True\n    Is_nEsted('[]]]]]]][[[[[]') \u279e False\n    Is_nEsted('[][]') \u279e False\n    Is_nEsted('[]') \u279e False\n    Is_nEsted('[[][]]') \u279e True\n    Is_nEsted('[[]][[') \u279e True\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return True\n\n"], ["def Sum_SquarES(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def CheCk_if_lASt_chAr_iS_a_lETter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    CheCk_if_lASt_chAr_iS_a_lETter(\"apple pie\") \u279e False\n    CheCk_if_lASt_chAr_iS_a_lETter(\"apple pi e\") \u279e True\n    CheCk_if_lASt_chAr_iS_a_lETter(\"apple pi e \") \u279e False\n    CheCk_if_lASt_chAr_iS_a_lETter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and not txt.isalpha()\n"], ["def Can_ArranGE(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    Can_ArranGE([1,2,4,3,5]) = 3\n    Can_ArranGE([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n\nExamples:\nCan_ArranGE([1,2,4,3,5]) = 3\nCan_ArranGE([1,2,3]) = -1\n"], ["def LarGest_sMAlleSt_iNteGErs(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    LarGest_sMAlleSt_iNteGErs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    LarGest_sMAlleSt_iNteGErs([]) == (None, None)\n    LarGest_sMAlleSt_iNteGErs([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nLarGest_sMAlleSt_iNteGErs([2, 4, 1, 3, 5, 7]) == (None, 1)\nLarGest_sMAlleSt_iNteGErs([]) == (None, None)\nLarGest_sMAlleSt_iNteGErs([0]) == (None, None)"], ["def ComPare_oNE(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    ComPare_oNE(1, 2.5) \u279e 2.5\n    ComPare_oNE(1, \"2,3\") \u279e \"2,3\"\n    ComPare_oNE(\"5,1\", \"6\") \u279e \"6\"\n    ComPare_oNE(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n"], ["def Is_eQual_tO_Sum_eVen(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    Is_eQual_tO_Sum_eVen(4) == False\n    Is_eQual_tO_Sum_eVen(6) == False\n    Is_eQual_tO_Sum_eVen(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n"], ["def SpeCial_fACtorIal(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> SpeCial_fACtorIal(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Your code here\n    return 1\n"], ["def Fix_SpaceS(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    Fix_SpaceS(\"Example\") == \"Example\"\n    Fix_SpaceS(\"Example 1\") == \"Example_1\"\n    Fix_SpaceS(\" Example 2\") == \"_Example_2\"\n    Fix_SpaceS(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def FilE_name_CHeck(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    FilE_name_CHeck(\"example.txt\") # => 'Yes'\n    FilE_name_CHeck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes'\n"], ["def Sum_SquarES(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i]**3\n    return sum\n"], ["def WorDs_in_sENtenCe(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def SimPlify(x, n):\n    \"\"\"Your task is to implement a function that will SimPlify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    SimPlify(\"1/5\", \"5/1\") = True\n    SimPlify(\"1/6\", \"2/1\") = False\n    SimPlify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\n\nSimPlify(\"1/5\", \"5/1\") = True\nSimPlify(\"1/6\", \"2/1\") = False\nSimPlify(\"7/10\", \"10/2\") = False\nSimPlify(\"1/2\", \"2/1\") = True\nSimPlify(\"1/2\", \"1/2\") = True\nSimPlify(\"1/2\", \"1/3\") = False\nSimPlify(\"1/2\", \"1/4\") = False\nSimPlify(\"1/2\", \"1/5\") = False\nSimPlify(\"1/2\", \"1/6\") = False\nSimPlify(\"1/2\", \"1/7\") = False\nSimPlify(\"1/2\", \"1/8\") = False\nSimPlify(\"1/2\", \"1/9\") = False\nSimPlify(\"1/2\", \"1/10\") = False\nSimPlify(\"1/2\", \"1/11\") = False\nSimPlify(\"1/2\", \"1/12\") = False\nSimPlify(\"1/2\", \"1/13\") = False\nSimPlify(\"1/2\", \"1/14\") = False\nSimPlify(\"1/2\", \"1/15\") = False\nSimPlify(\"1/2\", \"1/16\") = False\nSimPlify(\"1/2\", \"1/17\") = False\nSimPlify(\"1/2\", \"1/18\") = False\nSimPlify(\"1/2\", \"1/19\") = False\nSimPlify(\"1/2\", \"1/20\") = False\nSimPlify(\"1/2\", \"1/21\") = False\nSimPlify(\"1/2\", \"1/22\") = False\nSimPlify(\"1/2\", \"1/23\") = False\nSimPlify(\"1/2\", \"1/24\") = False\nSimPlify(\"1/2\", \"1/25\") = False\nSimPlify(\"1/2\", \"1/26\") = False\nSimPlify(\"1/2\", \"1/27\") = False\nSimPlify(\"1/2\", \"1/28\") = False\nSimPlify(\"1/2\", \"1/29\") = False\nSimPlify(\"1/2\", \"1/30\") = False\nSimPlify(\"1/2\", \"1/31\") = False\nSimPlify(\"1/2\", \"1/32\") = False\nSimPlify(\"1/2\", \"1/33\") = False\nSimPlify(\"1/2\", \"1/34\") = False\nSimPlify(\"1/2\", \"1/35\") = False\nSimPlify(\"1/2\", \"1/36\") = False\nSimPlify(\"1/2\", \"1/37\") = False\nSimPlify(\"1/2\", \"1/38\") = False\nSimPlify(\"1/2\", \"1/39\") = False\nSimPlify(\"1/2\", \"1/40\") = False\nSimPlify(\"1/2\", \"1/41\") = False\nSimPlify(\"1/2\", \"1/42\") = False\nSimPlify(\"1/2\", \"1/43\") = False\nSimPlify(\"1/2\", \"1/44\") = False\nSimPlify(\"1/2\", \"1/45\") = False\nSimPlify(\"1/2\", \"1/46\") = False\nSimPlify(\"1/2\", \"1/47"], ["def OrdEr_by_pOInts(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> OrdEr_by_pOInts([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> OrdEr_by_pOInts([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def SpeCialFILter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    SpeCialFILter([15, -73, 14, -15]) => 1 \n    SpeCialFILter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def Get_Max_trIPles(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTestcase 1:\nInput: n = 5\nOutput: 1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n\nTestcase 2:\nInput: n = 10\nOutput: 2\nExplanation: \na = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43]\nThe valid triples are (1, 7, 13), (3, 13, 21), and (21, 27, 31).\n\nTestcase 3:\nInput: n = 100\nOutput: 10\nExplanation: \na = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 65"], ["def Bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n"], ["def SorTed_liST_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n\n\nTest:\nassert SorTed_liST_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert SorTed_liST_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert SorTed_liST_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert SorTed_liST_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert SorTed_liST_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert SorTed_liST_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert SorTed_liST_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \""], ["def X_or_Y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for X_or_Y(7, 34, 12) == 34\n    for X_or_Y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def DouBle_thE_DiffEreNce(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    DouBle_thE_DiffEreNce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    DouBle_thE_DiffEreNce([-1, -2, 0]) == 0\n    DouBle_thE_DiffEreNce([9, -2]) == 81\n    DouBle_thE_DiffEreNce([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x%2 != 0])\n\nDouBle_thE_DiffEreNce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\nDouBle_thE_DiffEreNce([-1, -2, 0]) == 0\nDouBle_thE_DiffEreNce([9, -2]) == 81\nDouBle_thE_DiffEreNce([0]) == 0"], ["def ComPare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    ComPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    ComPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Write your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\nComPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\nComPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"], ["def strOngesT_exteNsiOn(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for strOngesT_exteNsiOn('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: len(x) - len(x.lower()))\n"], ["def CycPatteRN_cheCk(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    CycPatteRN_cheCk(\"abcd\",\"abd\") => False\n    CycPatteRN_cheCk(\"hello\",\"ell\") => True\n    CycPatteRN_cheCk(\"whassup\",\"psus\") => False\n    CycPatteRN_cheCk(\"abab\",\"baa\") => True\n    CycPatteRN_cheCk(\"efef\",\"eeff\") => False\n    CycPatteRN_cheCk(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return False\n    if a == b:\n        return True\n    if len(a) < len(b):\n        return CycPatteRN_cheCk(b, a)\n    if a[0] == b[0]:\n        return CycPatteRN_cheCk(a[1:], b[1:]) or CycPatteRN_cheCk(a[1:], b)\n    else:\n        return CycPatteRN_cheCk(a[1:], b)\n\nCycPatteRN_cheCk(\"abcd\",\"abd\") => False\nCycPatteRN_cheCk(\"hello\",\"ell\") => True\nCycPatteRN_cheCk(\"whassup\",\"psus\") => False\nCycPatteRN_cheCk(\"abab\",\"baa\") => True\nCycPatteRN_cheCk(\"efef\",\"eeff\") => False\nCycPatteRN_cheCk(\"himenss\",\"simen\") => True\n"], ["def EveN_odd_cOUnt(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        EveN_odd_cOUnt(-12) ==> (1, 1)\n        EveN_odd_cOUnt(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 10 == 0:\n            num = num // 10\n        elif num % 10 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def Int_To_minI_RomaN(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> Int_To_minI_RomaN(19) == 'xix'\n    >>> Int_To_minI_RomaN(152) == 'clii'\n    >>> Int_To_minI_RomaN(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    while number > 0:\n        if number >= 1000:\n            roman_numeral += 'm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'd'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'cd'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'c'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xc'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'l'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xl'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'x'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'v'\n            number -= 5\n        elif number >= 4:\n            roman_numeral += 'iv'\n            number -= 4\n        elif number >= 1:\n            roman_numeral += 'i'\n            number -= 1\n    return roman_numeral.lower()\n\n"], ["def RigHt_angLE_triAngLe(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    RigHt_angLE_triAngLe(3, 4, 5) == True\n    RigHt_angLE_triAngLe(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\nRigHt_angLE_triAngLe(3, 4, 5)\nRigHt_angLE_triAngLe(1, 2, 3)"], ["def FinD_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    FinD_max([\"name\", \"of\", \"string\"]) == \"string\"\n    FinD_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    FinD_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in word:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\nFinD_max([\"name\", \"of\", \"string\"]) == \"string\"\nFinD_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nFinD_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\""], ["def Eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have Eaten a certain number of carrots,\n    but now you need to Eat more carrots to complete the day's meals.\n    you should return an array of [ total number of Eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will Eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * Eat(5, 6, 10) -> [11, 4]\n    * Eat(4, 8, 9) -> [12, 1]\n    * Eat(1, 10, 10) -> [11, 0]\n    * Eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have Eaten.\n    @need : integer\n        the number of carrots that you need to Eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Your code here\n    return [number + need, remaining - need]\n\n"], ["def Do_aLgebrA(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = Do_aLgebrA(operator, operand)"], ["def SolVe(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    SolVe(\"1234\") = \"4321\"\n    SolVe(\"ab\") = \"AB\"\n    SolVe(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def StrIng_to_MD5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> StrIng_to_MD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"], ["def GenErate_INtegErs(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    GenErate_INtegErs(2, 8) => [2, 4, 6, 8]\n    GenErate_INtegErs(8, 2) => [2, 4, 6, 8]\n    GenErate_INtegErs(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    return [a, b]\n\n\nGenErate_INtegErs(2, 8) => [2, 4, 6, 8]\nGenErate_INtegErs(8, 2) => [2, 4, 6, 8]\nGenErate_INtegErs(10, 14) => []\n"], ["from typing import List\n\n\ndef haS_ClosE_eleMents(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> haS_ClosE_eleMents([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> haS_ClosE_eleMents([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n\n"], ["from typing import List\n\n\ndef sePAratE_parEn_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> sePAratE_parEn_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def trUNcatE_numBer(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> trUNcatE_numBer(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef beLOw_zeRo(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> beLOw_zeRo([1, 2, 3])\n    False\n    >>> beLOw_zeRo([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return False\n    return True\n\n"], ["from typing import List\n\n\ndef meAN_absOlutE_deviatiON(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meAN_absOlutE_deviatiON([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef inTErspErse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> inTErspErse([], 4)\n    []\n    >>> inTErspErse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] == delimeter:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef paRSe_neSted_Parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> paRSe_neSted_Parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef fiLTer_bY_subString(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> fiLTer_bY_subString([], 'a')\n    []\n    >>> fiLTer_bY_subString(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef suM_ProdUct(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> suM_ProdUct([])\n    (0, 1)\n    >>> suM_ProdUct([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    sum_ = 0\n    prod_ = 1\n    for num in numbers:\n        sum_ += num\n        prod_ *= num\n    return sum_, prod_\n\n"], ["from typing import List, Tuple\n\n\ndef roLLing_Max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> roLLing_Max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(result[i - 1], numbers[i]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef maKE_palIndrOme(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> maKE_palIndrOme('')\n    ''\n    >>> maKE_palIndrOme('cat')\n    'catac'\n    >>> maKE_palIndrOme('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef stRIng_xOr(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stRIng_xOr('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef loNGest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the loNGest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> loNGest([])\n\n    >>> loNGest(['a', 'b', 'c'])\n    'a'\n    >>> loNGest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def grEAtesT_comMon_divisOR(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> grEAtesT_comMon_divisOR(3, 5)\n    1\n    >>> grEAtesT_comMon_divisOR(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return grEAtesT_comMon_divisOR(b, a % b)\n\n"], ["from typing import List\n\n\ndef alL_PrefIxes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> alL_PrefIxes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def stRIng_sEqueNce(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stRIng_sEqueNce(0)\n    '0'\n    >>> stRIng_sEqueNce(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def coUNt_diStinCt_characTERs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> coUNt_diStinCt_characTERs('xyzXYZ')\n    3\n    >>> coUNt_diStinCt_characTERs('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef paRSe_muSic(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> paRSe_muSic('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def hoW_Many_TimeS(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> hoW_Many_TimeS('', 'a')\n    0\n    >>> hoW_Many_TimeS('aaa', 'a')\n    3\n    >>> hoW_Many_TimeS('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n"], ["from typing import List\n\n\ndef soRT_numBers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> soRT_numBers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef fiND_cloSest_Elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> fiND_cloSest_Elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> fiND_cloSest_Elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Write your code here\n    return None\n\n"], ["from typing import List\n\n\ndef reSCale_To_unIt(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> reSCale_To_unIt([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [x / max(numbers) for x in numbers]\n\n"], ["from typing import List, Any\n\n\ndef fiLTer_iNtegErs(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> fiLTer_iNtegErs(['a', 3.14, 5])\n    [5]\n    >>> fiLTer_iNtegErs([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def stRLen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> stRLen('')\n    0\n    >>> stRLen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def laRGest_DiviSor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> laRGest_DiviSor(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return laRGest_DiviSor(n // 2) + 1 if n % 2 == 0 else laRGest_DiviSor(n // 2 + 1)\n\n"], ["from typing import List\n\n\ndef faCToriZe(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> faCToriZe(8)\n    [2, 2, 2]\n    >>> faCToriZe(25)\n    [5, 5]\n    >>> faCToriZe(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef reMOve_dUpliCates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> reMOve_dUpliCates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement me!\n    return []\n\n"], ["def flIP_casE(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flIP_casE('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef coNCateNate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> coNCateNate([])\n    ''\n    >>> coNCateNate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef fiLTer_bY_preFix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> fiLTer_bY_preFix([], 'a')\n    []\n    >>> fiLTer_bY_preFix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def geT_PosiTive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> geT_PosiTive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> geT_PosiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_PRime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_PRime(6)\n    False\n    >>> is_PRime(101)\n    True\n    >>> is_PRime(11)\n    True\n    >>> is_PRime(13441)\n    True\n    >>> is_PRime(61)\n    True\n    >>> is_PRime(4)\n    False\n    >>> is_PRime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef fiND_zerO(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    fiND_zerO find x such that poly(x) = 0.\n    fiND_zerO returns only only zero point, even if there are many.\n    Moreover, fiND_zerO only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(fiND_zerO([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(fiND_zerO([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def soRT_thiRd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> soRT_thiRd([1, 2, 3])\n    [1, 2, 3]\n    >>> soRT_thiRd([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def unIQue(l: list):\n    \"\"\"Return sorted unIQue elements in a list\n    >>> unIQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def maX_ElemEnt(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> maX_ElemEnt([1, 2, 3])\n    3\n    >>> maX_ElemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fiZZ_buzZ(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fiZZ_buzZ(50)\n    0\n    >>> fiZZ_buzZ(78)\n    2\n    >>> fiZZ_buzZ(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def soRT_eveN(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> soRT_eveN([1, 2, 3])\n    [1, 2, 3]\n    >>> soRT_eveN([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef deCOde_cYcliC(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prIMe_fiB(n: int):\n    \"\"\"\n    prIMe_fiB returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prIMe_fiB(1)\n    2\n    >>> prIMe_fiB(2)\n    3\n    >>> prIMe_fiB(3)\n    5\n    >>> prIMe_fiB(4)\n    13\n    >>> prIMe_fiB(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return 2 * prIMe_fiB(n // 2)\n    else:\n        return 3 * prIMe_fiB(n // 3) + 2\n\n"], ["def trIPles_Sum_tO_zero(l: list):\n    \"\"\"\n    trIPles_Sum_tO_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> trIPles_Sum_tO_zero([1, 3, 5, 0])\n    False\n    >>> trIPles_Sum_tO_zero([1, 3, -2, 1])\n    True\n    >>> trIPles_Sum_tO_zero([1, 2, 3, 7])\n    False\n    >>> trIPles_Sum_tO_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> trIPles_Sum_tO_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def caR_Race_CollIsion(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> caR_Race_CollIsion(1)\n0\n\n>>> caR_Race_CollIsion(2)\n0\n\n>>> caR_Race_CollIsion(3)\n0\n\n>>> caR_Race_CollIsion(4)\n0\n\n>>> caR_Race_CollIsion(5)\n0\n\n>>> caR_Race_CollIsion(6)\n0\n\n>>> caR_Race_CollIsion(7)\n0\n\n>>> caR_Race_CollIsion(8)\n0\n\n>>> caR_Race_CollIsion(9)\n0\n\n>>> caR_Race_CollIsion(10)\n0\n\n>>> caR_Race_CollIsion(11)\n0\n\n>>> caR_Race_CollIsion(12)\n0\n\n>>> caR_Race_CollIsion(13)\n0\n\n>>> caR_Race_CollIsion(14)\n0\n\n>>> caR_Race_CollIsion(15)\n0\n\n>>> caR_Race_CollIsion(16)\n0\n\n>>> caR_Race_CollIsion(17)\n0\n\n>>> caR_Race_CollIsion(18)\n0\n\n>>> caR_Race_CollIsion(19)\n0\n\n>>> caR_Race_CollIsion(20)\n0\n\n>>> caR_Race_CollIsion(21)\n0\n\n>>> caR_Race_CollIsion(22)\n0\n\n>>> caR_Race_CollIsion(23)\n0\n\n>>> caR_Race_CollIsion(24)\n0\n\n>>> caR_Race_CollIsion(25)\n0\n\n>>> caR_Race_CollIsion(26)\n0\n\n>>> caR_Race_CollIsion(27)\n0\n\n>>> caR_Race_CollIsion(28)\n0\n\n>>> caR_Race_CollIsion(29)\n0\n\n>>> caR_Race_CollIsion(30)\n0\n\n>>> caR_Race_CollIsion(31)\n0\n\n>>> caR_Race_CollIsion(32)\n0\n\n>>> caR_Race_CollIsion(33)\n0\n\n>>> caR_Race_CollIsion(34)\n0\n\n>>> caR_Race_CollIsion(35)\n0\n\n>>> caR_Race_CollIsion(36)\n0\n\n>>> caR_Race_CollIsion(37)\n0\n\n>>> caR_Race_CollIsion(38)\n0\n\n>>> caR_Race_CollIsion(39)\n0\n\n>>> caR_Race_CollIsion(40)\n0\n\n>>> caR_Race_CollIsion(41)\n0\n\n>>> caR_Race_CollIsion(42)\n0\n\n>>> caR_Race_CollIsion(43)\n0\n\n>>> caR_Race_CollIsion(44)\n0\n\n>>> caR_Race_CollIsion(45)\n0\n\n>>> caR_Race_CollIsion(46)\n0\n\n>>> caR_Race_CollIsion(47)\n0\n\n>>> caR_Race_CollIsion(48)\n0\n\n>>> caR_Race_CollIsion(49)\n0\n\n>>> caR_Race_CollIsion(50"], ["def inCR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> inCR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> inCR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n"], ["def paIRs_suM_to_zEro(l):\n    \"\"\"\n    paIRs_suM_to_zEro takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> paIRs_suM_to_zEro([1, 3, 5, 0])\n    False\n    >>> paIRs_suM_to_zEro([1, 3, -2, 1])\n    False\n    >>> paIRs_suM_to_zEro([1, 2, 3, 7])\n    False\n    >>> paIRs_suM_to_zEro([2, 4, -5, 3, 5, 7])\n    True\n    >>> paIRs_suM_to_zEro([1])\n    False\n    \"\"\"\n    # Your code here\n    return True if len(set(l)) == 2 and sum(l) == 0 else False\n\n"], ["def chANge_bAse(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> chANge_bAse(8, 3)\n    '22'\n    >>> chANge_bAse(8, 2)\n    '1000'\n    >>> chANge_bAse(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    raise ValueError(\"base must be 2, 8, 10, or 16\")\n\n"], ["def trIAnglE_areA(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> trIAnglE_areA(5, 3)\n    7.5\n    \"\"\"\n    return a * a * 0.5 * h\n"], ["def fiB4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fiB4(0) -> 0\n    fiB4(1) -> 0\n    fiB4(2) -> 2\n    fiB4(3) -> 0\n    fiB4(n) -> fiB4(n-1) + fiB4(n-2) + fiB4(n-3) + fiB4(n-4).\n    Please write a function to efficiently compute the n-th element of the fiB4 number sequence.  Do not use recursion.\n    >>> fiB4(5)\n    4\n    >>> fiB4(6)\n    8\n    >>> fiB4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fiB4(n - 1) + fiB4(n - 2) + fiB4(n - 3) + fiB4(n - 4)\n\n"], ["def meDIan(l: list):\n    \"\"\"Return meDIan of elements in the list l.\n    >>> meDIan([3, 1, 2, 4, 5])\n    3\n    >>> meDIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l)//2]\n\n"], ["def is_PAlinDromE(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_PAlinDromE('')\n    True\n    >>> is_PAlinDromE('aba')\n    True\n    >>> is_PAlinDromE('aaaaa')\n    True\n    >>> is_PAlinDromE('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def moDP(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> moDP(3, 5)\n    3\n    >>> moDP(1101, 101)\n    2\n    >>> moDP(0, 101)\n    1\n    >>> moDP(3, 11)\n    8\n    >>> moDP(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return moDP(n-1, p) * moDP(n-1, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef deCOde_sHift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def reMOve_vOwelS(text):\n    \"\"\"\n    reMOve_vOwelS is a function that takes string and returns string without vowels.\n    >>> reMOve_vOwelS('')\n    ''\n    >>> reMOve_vOwelS(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> reMOve_vOwelS('abcdef')\n    'bcdf'\n    >>> reMOve_vOwelS('aaaaa')\n    ''\n    >>> reMOve_vOwelS('aaBAA')\n    'B'\n    >>> reMOve_vOwelS('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(c for c in text if c not in 'aeiouAEIOU')\n"], ["def beLOw_thReshOld(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> beLOw_thReshOld([1, 2, 4, 10], 100)\n    True\n    >>> beLOw_thReshOld([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i < t:\n            return False\n    return True\n\n"], ["def adD(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> adD(2, 3)\n    5\n    >>> adD(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def saME_chaRs(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> saME_chaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> saME_chaRs('abcd', 'dddddddabc')\n    True\n    >>> saME_chaRs('dddddddabc', 'abcd')\n    True\n    >>> saME_chaRs('eabcd', 'dddddddabc')\n    False\n    >>> saME_chaRs('abcd', 'dddddddabce')\n    False\n    >>> saME_chaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for c in s0:\n        if s0.count(c) != s1.count(c):\n            return False\n    return True\n\n"], ["def fiB(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fiB(10)\n    55\n    >>> fiB(1)\n    1\n    >>> fiB(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fiB(n - 1) + fiB(n - 2)\n\n"], ["def coRRect_BracKeting(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> coRRect_BracKeting(\"<\")\n    False\n    >>> coRRect_BracKeting(\"<>\")\n    True\n    >>> coRRect_BracKeting(\"<<><>>\")\n    True\n    >>> coRRect_BracKeting(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def moNOtonIc(l: list):\n    \"\"\"Return True is list elements are moNOtonIcally increasing or decreasing.\n    >>> moNOtonIc([1, 2, 4, 20])\n    True\n    >>> moNOtonIc([1, 20, 4, 10])\n    False\n    >>> moNOtonIc([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i - 1]:\n            return True\n    return True\n\n"], ["def coMMon(l1: list, l2: list):\n    \"\"\"Return sorted unique coMMon elements for two lists.\n    >>> coMMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> coMMon([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Write your code here\n    return sorted(set(l1).intersection(set(l2)))\n\n"], ["def laRGest_PrimE_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> laRGest_PrimE_factor(13195)\n    29\n    >>> laRGest_PrimE_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 239\n    if n % 241 == 0:\n        return 241\n    if n % 251 == 0:\n        return 251\n    if n % 257 == "], ["def suM_To_n(n: int):\n    \"\"\"suM_To_n is a function that sums numbers from 1 to n.\n    >>> suM_To_n(30)\n    465\n    >>> suM_To_n(100)\n    5050\n    >>> suM_To_n(5)\n    15\n    >>> suM_To_n(10)\n    55\n    >>> suM_To_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def coRRect_BracKeting(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> coRRect_BracKeting(\"(\")\n    False\n    >>> coRRect_BracKeting(\"()\")\n    True\n    >>> coRRect_BracKeting(\"(()())\")\n    True\n    >>> coRRect_BracKeting(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def deRIvatIve(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return deRIvatIve of this polynomial in the same form.\n    >>> deRIvatIve([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> deRIvatIve([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return [xs[0]] + deRIvatIve(xs[1:]) * xs[0]\n\n"], ["def fiBFib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fiBFib(0) == 0\n    fiBFib(1) == 0\n    fiBFib(2) == 1\n    fiBFib(n) == fiBFib(n-1) + fiBFib(n-2) + fiBFib(n-3).\n    Please write a function to efficiently compute the n-th element of the fiBFib number sequence.\n    >>> fiBFib(1)\n    0\n    >>> fiBFib(5)\n    4\n    >>> fiBFib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fiBFib(n - 1) + fiBFib(n - 2) + fiBFib(n - 3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef voWEls_cOunt(s):\n    \"\"\"Write a function voWEls_cOunt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> voWEls_cOunt(\"abcde\")\n    2\n    >>> voWEls_cOunt(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here.\n    return 0\n"], ["def ciRCulaR_shiFt(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> ciRCulaR_shiFt(12, 1)\n    \"21\"\n    >>> ciRCulaR_shiFt(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n"], ["def diGItSuM(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        diGItSuM(\"\") => 0\n        diGItSuM(\"abAB\") => 131\n        diGItSuM(\"abcCd\") => 67\n        diGItSuM(\"helloE\") => 69\n        diGItSuM(\"woArBld\") => 131\n        diGItSuM(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\nTest.assert_equals(diGItSuM(\"\"), 0)\nTest.assert_equals(diGItSuM(\"abAB\"), 131)\nTest.assert_equals(diGItSuM(\"abcCd\"), 67)\nTest.assert_equals(diGItSuM(\"helloE\"), 69)\nTest.assert_equals(diGItSuM(\"woArBld\"), 131)\nTest.assert_equals(diGItSuM(\"aAaaaXa\"), 153)\n"], ["def frUIt_diStriBution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    frUIt_diStriBution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    frUIt_diStriBution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    frUIt_diStriBution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    frUIt_diStriBution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return s.count(\"mango\")\n\nfrUIt_diStriBution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfrUIt_diStriBution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfrUIt_diStriBution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfrUIt_diStriBution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19"], ["def plUCk(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to plUCk one of the nodes and return it.\n    The plUCked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plUCked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Write your code here\n    if not arr:\n        return []\n    min_value = min(arr)\n    min_index = arr.index(min_value)\n    if min_value % 2 == 0:\n        return [min_value, min_index]\n    else:\n        return plUCk(arr[:min_index] + arr[min_index + 1:])\n\n\narr = [4, 2, 3]"], ["def seARch(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        seARch([4, 1, 2, 2, 3, 1]) == 2\n        seARch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        seARch([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\nTest cases:\n    >>> seARch([4, 1, 2, 2, 3, 1])\n    2\n    >>> seARch([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> seARch([5, 5, 4, 4, 4])\n    -1\n"], ["def stRAnge_Sort_List(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    stRAnge_Sort_List([1, 2, 3, 4]) == [1, 4, 2, 3]\n    stRAnge_Sort_List([5, 5, 5, 5]) == [5, 5, 5, 5]\n    stRAnge_Sort_List([]) == []\n    '''\n    lst.sort()\n    return lst\n\n\nExamples:\nstRAnge_Sort_List([1, 2, 3, 4]) == [1, 4, 2, 3]\nstRAnge_Sort_List([5, 5, 5, 5]) == [5, 5, 5, 5]\nstRAnge_Sort_List([]) == []\n"], ["def trIAnglE_areA(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    trIAnglE_areA(3, 4, 5) == 6.00\n    trIAnglE_areA(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) / 2\n\ntrIAnglE_areA(3, 4, 5) == 6.00\ntrIAnglE_areA(1, 2, 10) == -1"], ["def wiLL_it_fLy(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    wiLL_it_fLy([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    wiLL_it_fLy([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    wiLL_it_fLy([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    wiLL_it_fLy([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_palindromic(q) else False\n"], ["def smALlesT_chaNge(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smALlesT_chaNge([1,2,3,5,4,7,9,6]) == 4\n    smALlesT_chaNge([1, 2, 3, 4, 3, 2, 2]) == 1\n    smALlesT_chaNge([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    # Hint: Use a hash table to store the frequencies of each element in the array.\n    # Hint: Use a stack to store the elements that need to be changed.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint: Use a while loop to iterate through the array.\n    # Hint: Use a while loop to iterate through the stack.\n    # Hint: Use a while loop to iterate through the hash table.\n    # Hint:"], ["def toTAl_maTch(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    toTAl_maTch([], []) \u279e []\n    toTAl_maTch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    toTAl_maTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    toTAl_maTch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    toTAl_maTch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    return [x for x in lst1 if len(x) < len(lst2)]\n\nExamples:\ntoTAl_maTch([], []) \u279e []\ntoTAl_maTch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntoTAl_maTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntoTAl_maTch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntoTAl_maTch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_MUltiPly_pRime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_MUltiPly_pRime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_MUltiPly_pRime(30)\n\nis_MUltiPly_pRime(100)\n\nis_MUltiPly_pRime(101)\n\nis_MUltiPly_pRime(102)\n\nis_MUltiPly_pRime(103)\n\nis_MUltiPly_pRime(104)\n\nis_MUltiPly_pRime(105)\n\nis_MUltiPly_pRime(106)\n\nis_MUltiPly_pRime(107)\n\nis_MUltiPly_pRime(108)\n\nis_MUltiPly_pRime(109)\n\nis_MUltiPly_pRime(110)\n\nis_MUltiPly_pRime(111)\n\nis_MUltiPly_pRime(112)\n\nis_MUltiPly_pRime(113)\n\nis_MUltiPly_pRime(114)\n\nis_MUltiPly_pRime(115)\n\nis_MUltiPly_pRime(116)\n\nis_MUltiPly_pRime(117)\n\nis_MUltiPly_pRime(118)\n\nis_MUltiPly_pRime(119)\n\nis_MUltiPly_pRime(120)\n\nis_MUltiPly_pRime(121)\n\nis_MUltiPly_pRime(122)\n\nis_MUltiPly_pRime(123)\n\nis_MUltiPly_pRime(124)\n\nis_MUltiPly_pRime(125)\n\nis_MUltiPly_pRime(126)\n\nis_MUltiPly_pRime(127)\n\nis_MUltiPly_pRime(128)\n\nis_MUltiPly_pRime(129)\n\nis_MUltiPly_pRime(130)\n\nis_MUltiPly_pRime(131)\n\nis_MUltiPly_pRime(132)\n\nis_MUltiPly_pRime(133)\n\nis_MUltiPly_pRime(134)\n\nis_MUltiPly_pRime(135)\n\nis_MUltiPly_pRime(136)\n\nis_MUltiPly_pRime(137)\n\nis_MUltiPly_pRime(138)\n\nis_MUltiPly_pRime(139)\n\nis_MUltiPly_pRime(140)\n\nis_MUltiPly_pRime(141)\n\nis_MUltiPly_pRime(142)\n\nis_MUltiPly_pRime(143)\n\nis_MUltiPly_pRime(144)\n\nis_MUltiPly_pRime(145)\n\nis_MUltiPly_pRime(146)\n\nis_MUltiPly_pRime(147)\n\nis_MUltiPly_pRime(148)\n\nis_MUltiPly"], ["def is_SImplE_powEr(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_SImplE_powEr(1, 4) => true\n    is_SImplE_powEr(2, 2) => true\n    is_SImplE_powEr(8, 2) => true\n    is_SImplE_powEr(3, 2) => false\n    is_SImplE_powEr(3, 1) => false\n    is_SImplE_powEr(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_SImplE_powEr(1, 4)\nis_SImplE_powEr(2, 2)\nis_SImplE_powEr(8, 2)\nis_SImplE_powEr(3, 2)\nis_SImplE_powEr(3, 1)\nis_SImplE_powEr(5, 3)"], ["def isCUbe(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isCUbe(1) ==> True\n    isCUbe(2) ==> False\n    isCUbe(-1) ==> True\n    isCUbe(64) ==> True\n    isCUbe(0) ==> True\n    isCUbe(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a % 2 == 0:\n        return isCUbe(a/2)\n    else:\n        return False\n"], ["def heX_Key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n"], ["def deCImal_To_biNary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    deCImal_To_biNary(15)   # returns \"db1111db\"\n    deCImal_To_biNary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    return \"db\"\n\nExamples:\ndeCImal_To_biNary(15)   # returns \"db1111db\"\ndeCImal_To_biNary(32)   # returns \"db100000db\"\n\nTest cases:\ndeCImal_To_biNary(15)   # returns \"db1111db\"\ndeCImal_To_biNary(32)   # returns \"db100000db\"\ndeCImal_To_biNary(1234567890)   # returns \"dbdef is_HAppy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_HAppy(a) => False\n    is_HAppy(aa) => False\n    is_HAppy(abcd) => True\n    is_HAppy(aabb) => False\n    is_HAppy(adb) => True\n    is_HAppy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["def nuMEricAl_leTter_gradE(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return\n\ngrades = [4.0, 3, 1.7, 2, 3.5]\n\nnuMEricAl_leTter_gradE(grades)"], ["def prIMe_leNgth(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prIMe_leNgth('Hello') == True\n    prIMe_leNgth('abcdcba') == True\n    prIMe_leNgth('kittens') == True\n    prIMe_leNgth('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nExamples\nprIMe_leNgth('Hello') == True\nprIMe_leNgth('abcdcba') == True\nprIMe_leNgth('kittens') == True\nprIMe_leNgth('orange') == False"], ["def stARts_oNe_enDs(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def soLVe(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\nTest:\n    assert soLVe(1000) == \"1\"\n    assert soLVe(150) == \"110\"\n    assert soLVe(147) == \"1100\"\n"], ["def adD(lst):\n    \"\"\"Given a non-empty list of integers lst. adD the even elements that are at odd indices..\n\n\n    Examples:\n        adD([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    adD([4, 2, 6, 7]) ==> 2\n    adD([1, 2, 3, 4, 5]) ==> 15\n    adD([1, 3, 5, 7, 9]) ==> 15\n    adD([2, 4, 6, 8, 10]) ==> 20\n    adD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> 45\n    adD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==> 60\n    adD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ==> 75\n    adD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) ==> 90\n    adD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) ==> 105\n    adD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]) ==> 120\n    adD([1"], ["def anTI_shuFfle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anTI_shuFfle('Hi') returns 'Hi'\n    anTI_shuFfle('hello') returns 'ehllo'\n    anTI_shuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def geT_Row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    geT_Row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    geT_Row([], 1) == []\n    geT_Row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Write your code here\n    return sorted(set(tuple(sorted(lst[i][j:j+x])) for i in range(len(lst)) for j in range(len(lst[i])-x+1)))\n\nExamples:\ngeT_Row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\ngeT_Row([], 1) == []\ngeT_Row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def soRT_arrAy(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * soRT_arrAy([]) => []\n    * soRT_arrAy([5]) => [5]\n    * soRT_arrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * soRT_arrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    return array\n\nExamples:\n\nsoRT_arrAy([]) => []\nsoRT_arrAy([5]) => [5]\nsoRT_arrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\nsoRT_arrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]"], ["def enCRypt(s):\n    \"\"\"Create a function enCRypt that takes a string as an argument and\n    returns a string enCRypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    enCRypt('hi') returns 'lm'\n    enCRypt('asdfghjkl') returns 'ewhjklnop'\n    enCRypt('gf') returns 'kj'\n    enCRypt('et') returns 'ix'\n    \"\"\"\n    # TODO: Write your code here\n    return s\n"], ["def neXT_smaLlesT(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function neXT_smaLlesT() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    neXT_smaLlesT([1, 2, 3, 4, 5]) == 2\n    neXT_smaLlesT([5, 1, 4, 3, 2]) == 2\n    neXT_smaLlesT([]) == None\n    neXT_smaLlesT([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(neXT_smaLlesT(lst[1:]), lst[0])\n\nTest cases:\nneXT_smaLlesT([1, 2, 3, 4, 5]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2]) == 2\nneXT_smaLlesT([]) == None\nneXT_smaLlesT([1, 1]) == None\nneXT_smaLlesT([1, 2, 3, 4, 5, 6]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1, 0]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7, 8]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1, 0, 9]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1, 0, 9, 8]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1, 0, 9, 8, 7]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1, 0, 9, 8, 7, 6]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 2\nneXT_smaLlesT([5, 1, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4]) == 2\nneXT_smaLlesT([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 2\nneXT_smaLles"], ["def is_BOred(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_BOred(\"Hello world\")\n    0\n    >>> is_BOred(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for word in S.split() if word.startswith(\"I\"))\n"], ["def anY_Int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    anY_Int(5, 2, 7) \u279e True\n    \n    anY_Int(3, 2, 2) \u279e False\n\n    anY_Int(3, -2, 1) \u279e True\n    \n    anY_Int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    else:\n        return False\n\n"], ["def enCOde(message):\n    \"\"\"\n    Write a function that takes a message, and enCOdes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> enCOde('test')\n    'TGST'\n    >>> enCOde('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> enCOde('test')\n'TGST'\n>>> enCOde('This is a message')\n'tHKS KS C MGSSCGG'"], ["def skJKasdKd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 281"], ["def chECk_diCt_caSe(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    chECk_diCt_caSe({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    chECk_diCt_caSe({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    chECk_diCt_caSe({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    chECk_diCt_caSe({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    chECk_diCt_caSe({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\nExamples:\n>>> chECk_diCt_caSe({\"a\":\"apple\", \"b\":\"banana\"})\nTrue\n>>> chECk_diCt_caSe({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nFalse\n>>> chECk_diCt_caSe({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\nFalse\n>>> chECk_diCt_caSe({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\nFalse\n>>> chECk_diCt_caSe({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\nTrue"], ["def coUNt_up_To(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    coUNt_up_To(5) => [2,3]\n    coUNt_up_To(11) => [2,3,5,7]\n    coUNt_up_To(0) => []\n    coUNt_up_To(20) => [2,3,5,7,11,13,17,19]\n    coUNt_up_To(1) => []\n    coUNt_up_To(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function type()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built"], ["def muLTiplY(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    muLTiplY(148, 412) should return 16.\n    muLTiplY(19, 28) should return 72.\n    muLTiplY(2020, 1851) should return 0.\n    muLTiplY(14,-15) should return 20.\n    \"\"\"\n    return a * b\n"], ["def coUNt_upPer(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    coUNt_upPer('aBCdEf') returns 1\n    coUNt_upPer('abcdefg') returns 0\n    coUNt_upPer('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def clOSest_InteGer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> clOSest_InteGer(\"10\")\n    10\n    >>> clOSest_InteGer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example clOSest_InteGer(\"14.5\") should\n    return 15 and clOSest_InteGer(\"-14.5\") should return -15.\n    '''\n    return int(value)\n\nExamples\n>>> clOSest_InteGer(\"10\")\n10\n>>> clOSest_InteGer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example clOSest_InteGer(\"14.5\") should\nreturn 15 and clOSest_InteGer(\"-14.5\") should return -15."], ["def maKE_a_piLe(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> maKE_a_piLe(3)\n    [3, 5, 7]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n>>> maKE_a_piLe(3)\n[3, 5, 7]\n>>> maKE_a_piLe(4)\n[4, 6, 8]\n>>> maKE_a_piLe(5)\n[5, 9, 13]\n>>> maKE_a_piLe(6)\n[6, 12, 18]\n>>> maKE_a_piLe(7)\n[7, 15, 21]\n>>> maKE_a_piLe(8)\n[8, 16, 24]\n>>> maKE_a_piLe(9)\n[9, 19, 29]\n>>> maKE_a_piLe(10)\n[10, 20, 30]\n>>> maKE_a_piLe(11)\n[11, 23, 35]\n>>> maKE_a_piLe(12)\n[12, 26, 40]\n>>> maKE_a_piLe(13)\n[13, 29, 45]\n>>> maKE_a_piLe(14)\n[14, 32, 50]\n>>> maKE_a_piLe(15)\n[15, 35, 55]\n>>> maKE_a_piLe(16)\n[16, 38, 60]\n>>> maKE_a_piLe(17)\n[17, 41, 65]\n>>> maKE_a_piLe(18)\n[18, 44, 70]\n>>> maKE_a_piLe(19)\n[19, 47, 75]\n>>> maKE_a_piLe(20)\n[20, 50, 80]\n>>> maKE_a_piLe(21)\n[21, 53, 85]\n>>> maKE_a_piLe(22)\n[22, 56, 90]\n>>> maKE_a_piLe(23)\n[23, 59, 95]\n>>> maKE_a_piLe(24)\n[24, 62, 100]\n>>> maKE_a_piLe(25)\n[25, 65, 105]\n>>> maKE_a_piLe(26)\n[26, 68, 110]\n>>> maKE_a_piLe(27)\n[27, 71, 115]\n>>> maKE_a_piLe(28)\n[28, 74, 120]\n>>> maKE_a_piLe(29)\n[29, 77, 125]\n>>> maKE_a_piLe(30)\n[30, 80, 130]\n>>> maKE_a_piLe(31)\n[31, 83, 135]\n>>> maKE_a_piLe(32)\n[32, 86, 140]\n>>> maKE_a_piLe(33)\n[33, 89, 145]\n>>> maKE_a_piLe(34)\n[34, 92, 150]\n>>> maKE_a_piLe(35)\n[35, 95, 155]\n>>> maKE_a_piLe"], ["def woRDs_stRing(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    woRDs_stRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    woRDs_stRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert woRDs_stRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert woRDs_stRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert woRDs_stRing(\"Hi, my name is John, and I live in the USA\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\"]\nassert woRDs_stRing(\"Hi, my name is John, and I live in the USA, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert woRDs_stRing(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert woRDs_stRing(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play basketball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"basketball\"]\nassert woRDs_stRing(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play basketball, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"basketball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert woRDs_stRing(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play basketball, and I like to play volleyball, and I like to play hockey\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"basketball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"hockey\"]\nassert woRDs_stRing(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play basketball, and I like to play volley"], ["def chOOse_nUm(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    chOOse_nUm(12, 15) = 14\n    chOOse_nUm(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchOOse_nUm(12, 15) = 14\nchOOse_nUm(13, 12) = -1\nchOOse_nUm(1, 10) = 2\nchOOse_nUm(1, 100) = 100\nchOOse_nUm(1, 1000) = 1000\nchOOse_nUm(1, 10000) = 10000\nchOOse_nUm(1, 100000) = 100000\nchOOse_nUm(1, 1000000) = 1000000\nchOOse_nUm(1, 10000000) = 10000000\nchOOse_nUm(1, 100000000) = 100000000\nchOOse_nUm(1, 1000000000) = 1000000000\nchOOse_nUm(1, 10000000000) = 10000000000\nchOOse_nUm(1, 100000000000) = 100000000000\nchOOse_nUm(1, 1000000000000) = 1000000000000\nchOOse_nUm(1, 10000000000000) = 10000000000000\nchOOse_nUm(1, 100000000000000) = 100000000000000\nchOOse_nUm(1, 1000000000000000) = 1000000000000000\nchOOse_nUm(1, 10000000000000000) = 10000000000000000\nchOOse_nUm(1, 100000000000000000) = 100000000000000000\nchOOse_nUm(1, 1000000000000000000) = 1000000000000000000\nchOOse_nUm(1, 10000000000000000000) = 10000000000000000000\nchOOse_nUm(1, 100000000000000000000) = 100000000000000000000\nchOOse_nUm(1, 1000000000000000000000) = 1000000000000000000000\nchOOse_nUm(1, 10000000000000000000000) = 10000000000000000000000"], ["def roUNded_Avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roUNded_Avg(1, 5) => \"0b11\"\n    roUNded_Avg(7, 5) => -1\n    roUNded_Avg(10, 20) => \"0b1111\"\n    roUNded_Avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nroUNded_Avg(1, 5) => \"0b11\"\nroUNded_Avg(7, 5) => -1\nroUNded_Avg(10, 20) => \"0b1111\"\nroUNded_Avg(20, 33) => \"0b11010\"\n\nTime complexity: O(log(n+m))\nSpace complexity: O(1)\n\nNote: The above code is contributed by <NAME>"], ["def unIQue_dIgitS(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unIQue_dIgitS([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unIQue_dIgitS([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(list(filter(lambda x: not any(map(lambda y: x%y==0, range(10))), x)))\n\nTest:\n>>> unIQue_dIgitS([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unIQue_dIgitS([152, 323, 1422, 10])\n[]\n\"\"\""], ["def by_LEngtH(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Your code here\n    return []\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def evEN_odd_PaliNdrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i == int(str(i)[::-1]):\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n"], ["def coUNt_nuMs(arr):\n    \"\"\"\n    Write a function coUNt_nuMs which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> coUNt_nuMs([]) == 0\n    >>> coUNt_nuMs([-1, 11, -11]) == 1\n    >>> coUNt_nuMs([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n\nTest:\n>>> coUNt_nuMs([])\n0\n>>> coUNt_nuMs([-1, 11, -11])\n1\n>>> coUNt_nuMs([1, 1, 2])\n3\n\"\"\"\n"], ["def moVE_one_Ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    moVE_one_Ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moVE_one_Ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exCHangE(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exCHangE of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exCHangEd elements between lst1 and lst2.\n    If it is possible to exCHangE elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exCHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exCHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexCHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"NO\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"YES\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"NO\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"YES\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"NO\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"YES\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"NO\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"YES\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => \"NO\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => \"YES\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => \"NO\"\nexCHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, "], ["def hiSTogrAm(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    hiSTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    hiSTogrAm('a b b a') == {'a': 2, 'b': 2}\n    hiSTogrAm('a b c a b') == {'a': 2, 'b': 2}\n    hiSTogrAm('b b b b a') == {'b': 4}\n    hiSTogrAm('') == {}\n\n    \"\"\"\n    # TODO: Write your code here\n    return {}\n\ntest = 'a b c'"], ["def reVErse_DeleTe(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    if s == c:\n        return (s, True)\n    else:\n        return (s, False)\n\ns = \"abcde\"\nc = \"ae\""], ["def odD_CounT(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odD_CounT(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odD_CounT(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i).replace('n', '')))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\nExamples:\n>>> odD_CounT(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odD_CounT(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\n"], ["def miNsubARraysum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    miNsubARraysum([2, 3, 4, 1, 2, 4]) == 1\n    miNsubARraysum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    if len(nums) == 3:\n        return min(nums[0], nums[1], nums[2])\n    if len(nums) == 4:\n        return min(nums[0], nums[1], nums[2], nums[3])\n    if len(nums) == 5:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n    if len(nums) == 6:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n    if len(nums) == 7:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n    if len(nums) == 8:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])\n    if len(nums) == 9:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])\n    if len(nums) == 10:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])\n    if len(nums) == 11:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])\n    if len(nums) == 12:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11])\n    if len(nums) == 13:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12])\n    if len(nums) == 14:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13])\n    if len(nums) == 15:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14])\n    if len(nums) == 16:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15])\n    if len(nums) == 17:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15], nums[16])\n    if len(nums) == 18:\n        return min(nums[0],"], ["def maX_Fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of buckets\n    bucket_capacity = 0\n    # Initialize the number of wells\n    wells = 0"], ["def soRT_arrAy(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> soRT_arrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> soRT_arrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> soRT_arrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def seLEct_wOrds(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    seLEct_wOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    seLEct_wOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    seLEct_wOrds(\"simple white space\", 2) ==> []\n    seLEct_wOrds(\"Hello world\", 4) ==> [\"world\"]\n    seLEct_wOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nseLEct_wOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\nseLEct_wOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nseLEct_wOrds(\"simple white space\", 2) ==> []\nseLEct_wOrds(\"Hello world\", 4) ==> [\"world\"]\nseLEct_wOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n^2)\nSpace complexity: O(n)"], ["def geT_ClosEst_vOwel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    geT_ClosEst_vOwel(\"yogurt\") ==> \"u\"\n    geT_ClosEst_vOwel(\"FULL\") ==> \"U\"\n    geT_ClosEst_vOwel(\"quick\") ==> \"\"\n    geT_ClosEst_vOwel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ngeT_ClosEst_vOwel(\"yogurt\") ==> \"u\"\ngeT_ClosEst_vOwel(\"FULL\") ==> \"U\"\ngeT_ClosEst_vOwel(\"quick\") ==> \"\"\ngeT_ClosEst_vOwel(\"ab\") ==> \"\"\n\nExpected Output:\nu\nU\n\nExplanation:\n\"yogurt\" -> \"y\" -> \"o\" -> \"g\" -> \"r\" -> \"u\"\n\"FULL\" -> \"F\" -> \"U\" -> \"L\" -> \"L\" -> \"U\"\n\"quick\" -> \"q\" -> \"u\" -> \"i\" -> \"c\" -> \"\"\n\"ab\" -> \"a\" -> \"b\" -> \"\"\n\nNote:\nThe length of the given string won't exceed 100.\nThe input string will only consist of English letters."], ["def maTCh_paRens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    maTCh_paRens(['()(', ')']) == 'Yes'\n    maTCh_paRens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmaTCh_paRens(['()(', ')']) == 'Yes'\nmaTCh_paRens([')', ')']) == 'No'\nmaTCh_paRens(['(', ')']) == 'No'\nmaTCh_paRens(['(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmaTCh_paRens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])"], ["def maXImum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maXImum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n"], ["def soLUtioN(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    soLUtioN([5, 8, 7, 1]) ==> 12\n    soLUtioN([3, 3, 3, 3, 3]) ==> 9\n    soLUtioN([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 1)\n\n\nExamples:\n\nsoLUtioN([5, 8, 7, 1]) ==> 12\nsoLUtioN([3, 3, 3, 3, 3]) ==> 9\nsoLUtioN([30, 13, 24, 321]) ==> 0"], ["def adD_ElemEnts(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Test.test_case_2:\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 1\n        Output: 111 # sum of 111\n\n    Test.test_case_3:\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 10\n        Outputdef geT_Odd_cOllaTz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    geT_Odd_cOllaTz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return [n] + geT_Odd_cOllaTz(3 * n + 1)\n"], ["def vaLId_daTe(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    vaLId_daTe('03-11-2000') => True\n\n    vaLId_daTe('15-01-2012') => False\n\n    vaLId_daTe('04-0-2040') => False\n\n    vaLId_daTe('06-04-2020') => True\n\n    vaLId_daTe('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def spLIt_woRds(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    spLIt_woRds(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    spLIt_woRds(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    spLIt_woRds(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nspLIt_woRds(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nspLIt_woRds(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nspLIt_woRds(\"abcdef\") == 3"], ["def is_SOrteD(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_SOrteD([5]) \u279e True\n    is_SOrteD([1, 2, 3, 4, 5]) \u279e True\n    is_SOrteD([1, 3, 2, 4, 5]) \u279e False\n    is_SOrteD([1, 2, 3, 4, 5, 6]) \u279e True\n    is_SOrteD([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_SOrteD([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_SOrteD([1, 2, 2, 3, 3, 4]) \u279e True\n    is_SOrteD([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n"], ["def inTErseCtioN(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of inTErseCtioN of these two \n    intervals is a prime number.\n    Example, the inTErseCtioN of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the inTErseCtioN is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    inTErseCtioN((1, 2), (2, 3)) ==> \"NO\"\n    inTErseCtioN((-1, 1), (0, 4)) ==> \"NO\"\n    inTErseCtioN((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"YES\" if interval1[1] > interval2[0] else \"NO\"\n\n\nAnswer: def inTErseCtioN(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of inTErseCtioN of these two \n    intervals is a prime number.\n    Example, the inTErseCtioN of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the inTErseCtioN is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    inTErseCtioN((1, 2), (2, 3)) ==> \"NO\"\n    inTErseCtioN((-1, 1), (0, 4)) ==> \"NO\"\n    inTErseCtioN((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"YES\" if interval1[1] > interval2[0] else \"NO\"\n\n\nAnswer: def inTErseCtioN(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of inTErseCtioN of these two \n    intervals is a prime number.\n    Example, the inTErseCtioN of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the inTErseCtioN is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    inTErseCtioN((1, 2), (2, 3)) ==> \"NO\"\n    inTErseCtioN((-1, 1), (0, 4)) ==> \"NO\"\n    inTErseCtioN((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"YES\" if interval1[1] > interval2[0] else \"NO\"\n\n\nAnswer: def inTErseCtioN(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2)."], ["def prOD_sigNs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prOD_sigNs([1, 2, 2, -4]) == -9\n    >>> prOD_sigNs([0, 1]) == 0\n    >>> prOD_sigNs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest:\n>>> prOD_sigNs([1, 2, 2, -4])\n-9\n>>> prOD_sigNs([0, 1])\n0\n>>> prOD_sigNs([])\nNone\n\"\"\"\n"], ["def miNpath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 3), [1, 2, 1])\n    Test.assert_equals(miNpath([[5,9,3], [4,1,6], [7,8,2]], 1), [1])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 2), [1, 2])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 4), [1, 2, 3, 4])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 5), [1, 2, 3, 4, 5])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 6), [1, 2, 3, 4, 5, 6])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 7), [1, 2, 3, 4, 5, 6, 7])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 8), [1, 2, 3, 4, 5, 6, 7, 8])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 9), [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 10), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6], [7,8,9]], 11), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    Test.assert_equals(miNpath([[1,2,3], [4,5,6],"], ["def trI(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    trI(1) = 3\n    trI(n) = 1 + n / 2, if n is even.\n    trI(n) =  trI(n - 1) + trI(n - 2) + trI(n + 1), if n is odd.\n    For example:\n    trI(2) = 1 + (2 / 2) = 2\n    trI(4) = 3\n    trI(3) = trI(2) + trI(1) + trI(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    trI(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3] + trI(n - 1) + trI(n - 2) + trI(n + 1)\n\nExamples:\ntrI(3) = [1, 3, 2, 8]\ntrI(4) = [1, 3, 2, 8, 10]\ntrI(5) = [1, 3, 2, 8, 10, 5]\ntrI(6) = [1, 3, 2, 8, 10, 5, 16]\ntrI(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntrI(8) = [1, 3, 2, 8, 10, 5, 16, 49, 44]\ntrI(9) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89]\ntrI(10) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89, 101]\ntrI(11) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89, 101, 108]\ntrI(12) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89, 101, 108, 100]\ntrI(13) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89, 101, 108, 100, 121]\ntrI(14) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89, 101, 108, 100, 121, 115]\ntrI(15) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89, 101, 108, 100, 121, 115, 136]\ntrI(16) = [1, 3, 2, 8, 10, 5, 16, 49, 44, 89, 101, 108, 100, 121, 115, 136, 120]\ntrI(17) = [1, 3, 2, 8, 10"], ["def diGIts(n):\n    \"\"\"Given a positive integer n, return the product of the odd diGIts.\n    Return 0 if all diGIts are even.\n    For example:\n    diGIts(1)  == 1\n    diGIts(4)  == 0\n    diGIts(235) == 15\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * diGIts(n - 1)\n"], ["def is_NEsteD(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_NEsteD('[[]]') \u279e True\n    is_NEsteD('[]]]]]]][[[[[]') \u279e False\n    is_NEsteD('[][]') \u279e False\n    is_NEsteD('[]') \u279e False\n    is_NEsteD('[[][]]') \u279e True\n    is_NEsteD('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"], ["def suM_SquaRes(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(map(lambda x: int(ceil(x**2)), lst))\n"], ["def chECk_if_Last_Char_is_a_lETTeR(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    chECk_if_Last_Char_is_a_lETTeR(\"apple pie\") \u279e False\n    chECk_if_Last_Char_is_a_lETTeR(\"apple pi e\") \u279e True\n    chECk_if_Last_Char_is_a_lETTeR(\"apple pi e \") \u279e False\n    chECk_if_Last_Char_is_a_lETTeR(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and not txt[-1].isalpha() and not txt[-1].isspace()\n\nchECk_if_Last_Char_is_a_lETTeR(\"apple pie\") \u279e False\nchECk_if_Last_Char_is_a_lETTeR(\"apple pi e\") \u279e True\nchECk_if_Last_Char_is_a_lETTeR(\"apple pi e \") \u279e False\nchECk_if_Last_Char_is_a_lETTeR(\"\") \u279e False"], ["def caN_ArraNge(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    caN_ArraNge([1,2,4,3,5]) = 3\n    caN_ArraNge([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n\nExamples:\ncaN_ArraNge([1,2,4,3,5]) = 3\ncaN_ArraNge([1,2,3]) = -1\n\n\"\"\"\n"], ["def laRGest_SmalLest_inteGERs(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    laRGest_SmalLest_inteGERs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    laRGest_SmalLest_inteGERs([]) == (None, None)\n    laRGest_SmalLest_inteGERs([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nlaRGest_SmalLest_inteGERs([2, 4, 1, 3, 5, 7]) == (None, 1)\nlaRGest_SmalLest_inteGERs([]) == (None, None)\nlaRGest_SmalLest_inteGERs([0]) == (None, None)"], ["def coMPare_One(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    coMPare_One(1, 2.5) \u279e 2.5\n    coMPare_One(1, \"2,3\") \u279e \"2,3\"\n    coMPare_One(\"5,1\", \"6\") \u279e \"6\"\n    coMPare_One(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncoMPare_One(1, 2.5) \u279e 2.5\ncoMPare_One(1, \"2,3\") \u279e \"2,3\"\ncoMPare_One(\"5,1\", \"6\") \u279e \"6\"\ncoMPare_One(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two integers.\n\nIf a and b are both floats, the function returns the larger of the two floats.\n\nIf a and b are both strings, the function returns the larger of the two strings.\n\nIf a and b are both None, the function returns None.\n\nIf a and b are both equal, the function returns None."], ["def is_EQual_To_suM_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_EQual_To_suM_even(4) == False\n    is_EQual_To_suM_even(6) == False\n    is_EQual_To_suM_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n\nAnswer: def is_EQual_To_suM_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_EQual_To_suM_even(4) == False\n    is_EQual_To_suM_even(6) == False\n    is_EQual_To_suM_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    elif n % 2 == 1:\n        return True\n    else:\n        return False\n"], ["def spECial_FactOrial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> spECial_FactOrial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\nTest:\n>>> spECial_FactOrial(4)\n288\n\n\"\"\"\n"], ["def fiX_SpacEs(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fiX_SpacEs(\"Example\") == \"Example\"\n    fiX_SpacEs(\"Example 1\") == \"Example_1\"\n    fiX_SpacEs(\" Example 2\") == \"_Example_2\"\n    fiX_SpacEs(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def fiLE_namE_cheCk(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    fiLE_namE_cheCk(\"example.txt\") # => 'Yes'\n    fiLE_namE_cheCk(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes'\n"], ["def suM_SquaRes(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i]**3\n    return sum\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126"], ["def woRDs_in_SentEnce(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic Tests')\n    Test.it('Basic Test 1')\n    Test.assert_equals(woRDs_in_SentEnce(\"This is a test\"), \"is\")\n    Test.it('Basic Test 2')\n    Test.assert_equals(woRDs_in_SentEnce(\"lets go for swimming\"), \"go for\")\n"], ["def siMPlifY(x, n):\n    \"\"\"Your task is to implement a function that will siMPlifY the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    siMPlifY(\"1/5\", \"5/1\") = True\n    siMPlifY(\"1/6\", \"2/1\") = False\n    siMPlifY(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsiMPlifY(\"1/5\", \"5/1\") = True\nsiMPlifY(\"1/6\", \"2/1\") = False\nsiMPlifY(\"7/10\", \"10/2\") = False\nsiMPlifY(\"1/2\", \"2/1\") = True\nsiMPlifY(\"1/2\", \"1/2\") = True\nsiMPlifY(\"1/2\", \"1/3\") = False\nsiMPlifY(\"1/2\", \"1/4\") = False\nsiMPlifY(\"1/2\", \"1/5\") = False\nsiMPlifY(\"1/2\", \"1/6\") = False\nsiMPlifY(\"1/2\", \"1/7\") = False\nsiMPlifY(\"1/2\", \"1/8\") = False\nsiMPlifY(\"1/2\", \"1/9\") = False\nsiMPlifY(\"1/2\", \"1/10\") = False\nsiMPlifY(\"1/2\", \"1/11\") = False\nsiMPlifY(\"1/2\", \"1/12\") = False\nsiMPlifY(\"1/2\", \"1/13\") = False\nsiMPlifY(\"1/2\", \"1/14\") = False\nsiMPlifY(\"1/2\", \"1/15\") = False\nsiMPlifY(\"1/2\", \"1/16\") = False\nsiMPlifY(\"1/2\", \"1/17\") = False\nsiMPlifY(\"1/2\", \"1/18\") = False\nsiMPlifY(\"1/2\", \"1/19\") = False\nsiMPlifY(\"1/2\", \"1/20\") = False\nsiMPlifY(\"1/2\", \"1/21\") = False\nsiMPlifY(\"1/2\", \"1/22\") = False\nsiMPlifY(\"1/2\", \"1/23\") = False\nsiMPlifY(\"1/2\", \"1/24\") = False\nsiMPlifY(\"1/2\", \"1/25\") = False\nsiMPlifY(\"1/2\", \"1/26\") = False\nsiMPlifY(\"1/2\", \"1/27\") = False\nsiMPlifY(\"1/2\", \"1/28\") = False\nsiMPlifY(\"1/2\", \"1/29\") = False\nsiMPlifY(\"1/2\", \"1/30\") = False\nsiMPlifY(\"1/2\", \"1/31\") = False\nsiMPlifY(\"1/2\", \"1/32\") = False\nsiMPlifY(\"1/2\", \"1/33\") = False\nsiMPlifY(\"1/2\", \"1/34\") = False\nsiMPlifY(\"1/2\", \"1/35\") = False\nsiMPlifY(\"1/2\", \"1/36\") = False\nsiMPlifY(\"1/2\", \"1/37\") = False\nsiMPlifY(\"1/2\", \"1/38\") = False\nsiMPlifY(\"1/2\", \"1/39\") = False\nsiMPlifY(\"1/2\", \"1/40\") = False\nsiMPlifY(\"1/2\", \"1/41\") = False\nsiMPlifY(\"1/2\", \"1/42\") = False\nsiMPlifY(\"1/2\", \"1/43\") = False\nsiMPlifY(\"1/2\", \"1/44"], ["def orDEr_by_PoinTs(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orDEr_by_PoinTs([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> orDEr_by_PoinTs([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def spECialfiltEr(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    spECialfiltEr([15, -73, 14, -15]) => 1 \n    spECialfiltEr([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def geT_Max_tRiplEs(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n\n    Input: n = 10\n    Output: 2\n    Explanation: \n    a = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43]\n    The valid triples are (1, 7, 13), (3, 13, 21), and (21, 27, 31).\n\n    Input: n = 15\n    Output: 3\n    Explanation: \n    a = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    The valid triples are (1, 7, 13), (3, 13, 21), (21, 27, 31), (41, 43, 47), and (71, 73, 79).\n\n    Input: n = 20\n    Output: 4\n    Explanation: \n    a = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131, 137, 141, 143, 147, 153, 159, 161, 167, 171, 173, 179, 183, 189, 197]\n    The valid triples are (1, 7, 13), (3, 13, 21), (21, 27, 31), (41, 43, 47), (71, 73, 79), (101, 103, 107), (131, 137, 141), (161, 167, 171), and (197, 197, 197).\n\n\"\"\"\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def soRTed_lIst_sUm(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n\n\nTest:\nassert soRTed_lIst_sUm([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert soRTed_lIst_sUm([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert soRTed_lIst_sUm([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_oR_Y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_oR_Y(7, 34, 12) == 34\n    for x_oR_Y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, 1000000):\n        return x\n    else:\n        return y\n"], ["def doUBle_tHe_diFference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    doUBle_tHe_diFference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    doUBle_tHe_diFference([-1, -2, 0]) == 0\n    doUBle_tHe_diFference([9, -2]) == 81\n    doUBle_tHe_diFference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x%2 != 0])\n"], ["def coMPare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    coMPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    coMPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Write your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncoMPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncoMPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"], ["def StROngeSt_ExTension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for StROngeSt_ExTension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: Strength(x))\n"], ["def cyCPattErn_cHeck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cyCPattErn_cHeck(\"abcd\",\"abd\") => False\n    cyCPattErn_cHeck(\"hello\",\"ell\") => True\n    cyCPattErn_cHeck(\"whassup\",\"psus\") => False\n    cyCPattErn_cHeck(\"abab\",\"baa\") => True\n    cyCPattErn_cHeck(\"efef\",\"eeff\") => False\n    cyCPattErn_cHeck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def evEN_odd_CounT(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        evEN_odd_CounT(-12) ==> (1, 1)\n        evEN_odd_CounT(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n"], ["def inT_To_miNi_roMan(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> inT_To_miNi_roMan(19) == 'xix'\n    >>> inT_To_miNi_roMan(152) == 'clii'\n    >>> inT_To_miNi_roMan(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return \"\"\n"], ["def riGHt_anGle_tRiangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    riGHt_anGle_tRiangle(3, 4, 5) == True\n    riGHt_anGle_tRiangle(1, 2, 3) == False\n    '''\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False\n\nTest Cases:\n>>> riGHt_anGle_tRiangle(3, 4, 5)\nTrue\n>>> riGHt_anGle_tRiangle(1, 2, 3)\nFalse\n>>> riGHt_anGle_tRiangle(1, 2, 4)\nFalse\n>>> riGHt_anGle_tRiangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTriangle(1, 2, 1)\nTrue\n>>> riGHt_anGle_tTri"], ["def fiND_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    fiND_max([\"name\", \"of\", \"string\"]) == \"string\"\n    fiND_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    fiND_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in word:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eaT(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaTen a certain number of carrots,\n    but now you need to eaT more carrots to complete the day's meals.\n    you should return an array of [ total number of eaTen carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eaT all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eaT(5, 6, 10) -> [11, 4]\n    * eaT(4, 8, 9) -> [12, 1]\n    * eaT(1, 10, 10) -> [11, 0]\n    * eaT(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaTen.\n    @need : integer\n        the number of carrots that you need to eaT.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest cases:\n* eaT(5, 6, 10) -> [11, 4]\n* eaT(4, 8, 9) -> [12, 1]\n* eaT(1, 10, 10) -> [11, 0]\n* eaT(2, 11, 5) -> [7, 0]\n\nHave fun :)"], ["def do_ALgebRa(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def soLVe(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    soLVe(\"1234\") = \"4321\"\n    soLVe(\"ab\") = \"AB\"\n    soLVe(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Your code here\n    return s\n"], ["def stRIng_tO_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> stRIng_tO_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def geNEratE_intEgers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geNEratE_intEgers(2, 8) => [2, 4, 6, 8]\n    geNEratE_intEgers(8, 2) => [2, 4, 6, 8]\n    geNEratE_intEgers(10, 14) => []\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["from typing import List\n\n\ndef Has_clOSe_ELementS(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> Has_clOSe_ELementS([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> Has_clOSe_ELementS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n\n"], ["from typing import List\n\n\ndef SeparATe_PAren_grOups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> SeparATe_PAren_grOups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def TruncATe_NUmber(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> TruncATe_NUmber(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef Below_ZErO(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> Below_ZErO([1, 2, 3])\n    False\n    >>> Below_ZErO([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef Mean_aBSoLUte_devIation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> Mean_aBSoLUte_devIation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef InterSPeRSe(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> InterSPeRSe([], 4)\n    []\n    >>> InterSPeRSe([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] == delimeter:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef Parse_NEsTEd_pareNs(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> Parse_NEsTEd_pareNs('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef FilteR_By_SUbstriNg(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> FilteR_By_SUbstriNg([], 'a')\n    []\n    >>> FilteR_By_SUbstriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef Sum_prODuCT(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> Sum_prODuCT([])\n    (0, 1)\n    >>> Sum_prODuCT([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"], ["from typing import List, Tuple\n\n\ndef RolliNG_mAX(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> RolliNG_mAX([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > numbers[i - 1]:\n                result.append(numbers[i])\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef Make_pALiNDrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> Make_pALiNDrome('')\n    ''\n    >>> Make_pALiNDrome('cat')\n    'catac'\n    >>> Make_pALiNDrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef StrinG_XoR(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> StrinG_XoR('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef LongeST(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the LongeST one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> LongeST([])\n\n    >>> LongeST(['a', 'b', 'c'])\n    'a'\n    >>> LongeST(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def GreatESt_COmmon_dIvisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> GreatESt_COmmon_dIvisor(3, 5)\n    1\n    >>> GreatESt_COmmon_dIvisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return GreatESt_COmmon_dIvisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef All_prEFiXEs(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> All_prEFiXEs('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def StrinG_SeQUence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> StrinG_SeQUence(0)\n    '0'\n    >>> StrinG_SeQUence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def Count_DIsTInct_chAracteRs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> Count_DIsTInct_chAracteRs('xyzXYZ')\n    3\n    >>> Count_DIsTInct_chAracteRs('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef Parse_MUsIC(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> Parse_MUsIC('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def How_maNY_tIMes(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> How_maNY_tIMes('', 'a')\n    0\n    >>> How_maNY_tIMes('aaa', 'a')\n    3\n    >>> How_maNY_tIMes('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef Sort_nUMbERs(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> Sort_nUMbERs('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    return ' '.join(str(x) for x in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef Find_cLOsESt_elemEnts(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> Find_cLOsESt_elemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> Find_cLOsESt_elemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Write your code here\n    return None\n\n"], ["from typing import List\n\n\ndef RescaLE_tO_Unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> RescaLE_tO_Unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [number / max(numbers) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef FilteR_InTEgers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> FilteR_InTEgers(['a', 3.14, 5])\n    [5]\n    >>> FilteR_InTEgers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def StrleN(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> StrleN('')\n    0\n    >>> StrleN('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def LargeST_dIVisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> LargeST_dIVisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef FactoRIzE(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> FactoRIzE(8)\n    [2, 2, 2]\n    >>> FactoRIzE(25)\n    [5, 5]\n    >>> FactoRIzE(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef RemovE_DuPLicateS(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> RemovE_DuPLicateS([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return [x for x in numbers if numbers.count(x) == 1]\n\n"], ["def Flip_cASe(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> Flip_cASe('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef ConcaTEnATe(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> ConcaTEnATe([])\n    ''\n    >>> ConcaTEnATe(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef FilteR_By_PRefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> FilteR_By_PRefix([], 'a')\n    []\n    >>> FilteR_By_PRefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def Get_poSItIVe(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> Get_poSItIVe([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> Get_poSItIVe([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def Is_priME(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> Is_priME(6)\n    False\n    >>> Is_priME(101)\n    True\n    >>> Is_priME(11)\n    True\n    >>> Is_priME(13441)\n    True\n    >>> Is_priME(61)\n    True\n    >>> Is_priME(4)\n    False\n    >>> Is_priME(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef Find_zERo(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    Find_zERo find x such that poly(x) = 0.\n    Find_zERo returns only only zero point, even if there are many.\n    Moreover, Find_zERo only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(Find_zERo([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(Find_zERo([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def Sort_tHIrD(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> Sort_tHIrD([1, 2, 3])\n    [1, 2, 3]\n    >>> Sort_tHIrD([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def UniquE(l: list):\n    \"\"\"Return sorted UniquE elements in a list\n    >>> UniquE([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\n"], ["def Max_elEMeNT(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> Max_elEMeNT([1, 2, 3])\n    3\n    >>> Max_elEMeNT([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def Fizz_bUZz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> Fizz_bUZz(50)\n    0\n    >>> Fizz_bUZz(78)\n    2\n    >>> Fizz_bUZz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def Sort_eVEn(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> Sort_eVEn([1, 2, 3])\n    [1, 2, 3]\n    >>> Sort_eVEn([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n        else:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef DecodE_CyCLic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def Prime_FIb(n: int):\n    \"\"\"\n    Prime_FIb returns n-th number that is a Fibonacci number and it's also prime.\n    >>> Prime_FIb(1)\n    2\n    >>> Prime_FIb(2)\n    3\n    >>> Prime_FIb(3)\n    5\n    >>> Prime_FIb(4)\n    13\n    >>> Prime_FIb(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return Prime_FIb(n - 1) + Prime_FIb(n - 2)\n\n"], ["def TriplES_sUM_to_zerO(l: list):\n    \"\"\"\n    TriplES_sUM_to_zerO takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> TriplES_sUM_to_zerO([1, 3, 5, 0])\n    False\n    >>> TriplES_sUM_to_zerO([1, 3, -2, 1])\n    True\n    >>> TriplES_sUM_to_zerO([1, 2, 3, 7])\n    False\n    >>> TriplES_sUM_to_zerO([2, 4, -5, 3, 9, 7])\n    True\n    >>> TriplES_sUM_to_zerO([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def Car_raCE_cOLlisioN(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> Car_raCE_cOLlisioN(1)\n0\n>>> Car_raCE_cOLlisioN(2)\n0\n>>> Car_raCE_cOLlisioN(3)\n0\n>>> Car_raCE_cOLlisioN(4)\n0\n>>> Car_raCE_cOLlisioN(5)\n0\n>>> Car_raCE_cOLlisioN(6)\n0\n>>> Car_raCE_cOLlisioN(7)\n0\n>>> Car_raCE_cOLlisioN(8)\n0\n>>> Car_raCE_cOLlisioN(9)\n0\n>>> Car_raCE_cOLlisioN(10)\n0\n>>> Car_raCE_cOLlisioN(11)\n0\n>>> Car_raCE_cOLlisioN(12)\n0\n>>> Car_raCE_cOLlisioN(13)\n0\n>>> Car_raCE_cOLlisioN(14)\n0\n>>> Car_raCE_cOLlisioN(15)\n0\n>>> Car_raCE_cOLlisioN(16)\n0\n>>> Car_raCE_cOLlisioN(17)\n0\n>>> Car_raCE_cOLlisioN(18)\n0\n>>> Car_raCE_cOLlisioN(19)\n0\n>>> Car_raCE_cOLlisioN(20)\n0\n>>> Car_raCE_cOLlisioN(21)\n0\n>>> Car_raCE_cOLlisioN(22)\n0\n>>> Car_raCE_cOLlisioN(23)\n0\n>>> Car_raCE_cOLlisioN(24)\n0\n>>> Car_raCE_cOLlisioN(25)\n0\n>>> Car_raCE_cOLlisioN(26)\n0\n>>> Car_raCE_cOLlisioN(27)\n0\n>>> Car_raCE_cOLlisioN(28)\n0\n>>> Car_raCE_cOLlisioN(29)\n0\n>>> Car_raCE_cOLlisioN(30)\n0\n>>> Car_raCE_cOLlisioN(31)\n0\n>>> Car_raCE_cOLlisioN(32)\n0\n>>> Car_raCE_cOLlisioN(33)\n0\n>>> Car_raCE_cOLlisioN(34)\n0\n>>> Car_raCE_cOLlisioN(35)\n0\n>>> Car_raCE_cOLlisioN(36)\n0\n>>> Car_raCE_cOLlisioN(37)\n0\n>>> Car_raCE_cOLlisioN(38)\n0\n>>> Car_raCE_cOLlisioN(39)\n0\n>>> Car_raCE_cOLlisioN(40)\n0\n>>> Car_raCE_cOLlisioN(41)\n0\n>>> Car_raCE_cOLlisioN(42)\n0\n>>> Car_raCE_cOLlisioN(43)\n0\n>>> Car_raCE_cOLlisioN(44)\n0\n>>> Car_raCE_cOLlisioN(45)\n0\n>>> Car_raCE_cOLlisioN(46)\n0\n>>> Car_raCE_cOLlisioN(47)"], ["def Incr_lISt(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> Incr_lISt([1, 2, 3])\n    [2, 3, 4]\n    >>> Incr_lISt([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def Pairs_SUm_TO_zero(l):\n    \"\"\"\n    Pairs_SUm_TO_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> Pairs_SUm_TO_zero([1, 3, 5, 0])\n    False\n    >>> Pairs_SUm_TO_zero([1, 3, -2, 1])\n    False\n    >>> Pairs_SUm_TO_zero([1, 2, 3, 7])\n    False\n    >>> Pairs_SUm_TO_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> Pairs_SUm_TO_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def ChangE_BaSE(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> ChangE_BaSE(8, 3)\n    '22'\n    >>> ChangE_BaSE(8, 2)\n    '1000'\n    >>> ChangE_BaSE(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10.\")\n    if base == 10:\n        return str(x)\n    else:\n        return ChangE_BaSE(x // base, base) + str(x % base)\n\n"], ["def TrianGLe_ARea(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> TrianGLe_ARea(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def Fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    Fib4(0) -> 0\n    Fib4(1) -> 0\n    Fib4(2) -> 2\n    Fib4(3) -> 0\n    Fib4(n) -> Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the Fib4 number sequence.  Do not use recursion.\n    >>> Fib4(5)\n    4\n    >>> Fib4(6)\n    8\n    >>> Fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4)\n\n"], ["def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n    \"\"\"Return MediaN of elements in the list l.\n    >>> MediaN([3, 1, 2, 4, 5])\n    3\n    >>> MediaN([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\nAnswer: def MediaN(l: list):\n   "], ["def Is_palINdROme(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> Is_palINdROme('')\n    True\n    >>> Is_palINdROme('aba')\n    True\n    >>> Is_palINdROme('aaaaa')\n    True\n    >>> Is_palINdROme('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def Modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> Modp(3, 5)\n    3\n    >>> Modp(1101, 101)\n    2\n    >>> Modp(0, 101)\n    1\n    >>> Modp(3, 11)\n    8\n    >>> Modp(100, 101)\n    1\n    \"\"\"\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if p == 30:\n        return 29\n    if p == 31:\n        return 30\n    if p == 32:\n        return 31\n    if p == 33:\n        return 32\n    if p == 34:\n        return 33\n    if p == 35:\n        return 34\n    if p == 36:\n        return 35\n    if p == 37:\n        return 36\n    if p == 38:\n        return 37\n    if p == 39:\n        return 38\n    if p == 40:\n        return 39\n    if p == 41:\n        return 40\n    if p == 42:\n        return 41\n    if p == 43:\n        return 42\n    if p == 44:\n        return 43\n    if p == 45:\n        return 44\n    if p == 46:\n        return 45\n    if p == 47:\n        return 46\n    if p == 48:\n        return 47\n    if p == 49:\n        return 48\n    if p == 50:\n        return 49\n    if p == 51:\n        return 50\n    if p == 52:\n        return 51\n    if p == 53:\n        return 52\n    if p == 54:\n        return 53\n    if p == 55:\n        return 54\n    if p == 56:\n        return 55\n    if p == 57:\n        return 56\n    if p == 58:\n        return 57\n    if p == 59:\n        return 58\n    if p == 60:\n        return 59\n    if p == 61:\n        return 60\n    if p == 62:\n        return 61\n    if p == 63:\n        return 62\n    if p == 64:\n        return 63\n    if p == 65:\n        return 64\n    if p == 66:\n        return 65\n    if p == 67:\n        return 66\n    if p == 68:\n        return 67\n    if p == 69:\n        return 68\n    if p == 70:\n        return 69\n    if p == 71:\n        return 70\n    if p =="], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef DecodE_ShIFt(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def RemovE_VoWEls(text):\n    \"\"\"\n    RemovE_VoWEls is a function that takes string and returns string without vowels.\n    >>> RemovE_VoWEls('')\n    ''\n    >>> RemovE_VoWEls(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> RemovE_VoWEls('abcdef')\n    'bcdf'\n    >>> RemovE_VoWEls('aaaaa')\n    ''\n    >>> RemovE_VoWEls('aaBAA')\n    'B'\n    >>> RemovE_VoWEls('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(c for c in text if c not in 'aeiouAEIOU')\n"], ["def Below_THrEShold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> Below_THrEShold([1, 2, 4, 10], 100)\n    True\n    >>> Below_THrEShold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i < t:\n            return False\n    return True\n\n"], ["def Add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> Add(2, 3)\n    5\n    >>> Add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def Same_cHArS(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> Same_cHArS('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> Same_cHArS('abcd', 'dddddddabc')\n    True\n    >>> Same_cHArS('dddddddabc', 'abcd')\n    True\n    >>> Same_cHArS('eabcd', 'dddddddabc')\n    False\n    >>> Same_cHArS('abcd', 'dddddddabce')\n    False\n    >>> Same_cHArS('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def Fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> Fib(10)\n    55\n    >>> Fib(1)\n    1\n    >>> Fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return Fib(n - 1) + Fib(n - 2)\n\n"], ["def CorreCT_bRAcketiNg(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> CorreCT_bRAcketiNg(\"<\")\n    False\n    >>> CorreCT_bRAcketiNg(\"<>\")\n    True\n    >>> CorreCT_bRAcketiNg(\"<<><>>\")\n    True\n    >>> CorreCT_bRAcketiNg(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\nTest cases:\n>>> CorreCT_bRAcketiNg(\"<\")\nFalse\n>>> CorreCT_bRAcketiNg(\"<>\")\nTrue\n>>> CorreCT_bRAcketiNg(\"<<><>>\")\nTrue\n>>> CorreCT_bRAcketiNg(\"><<>\")\nFalse\n\"\"\"\n"], ["def MonotONiC(l: list):\n    \"\"\"Return True is list elements are MonotONiCally increasing or decreasing.\n    >>> MonotONiC([1, 2, 4, 20])\n    True\n    >>> MonotONiC([1, 20, 4, 10])\n    False\n    >>> MonotONiC([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return MonotONiC(l[1:])\n    else:\n        return False\n\n"], ["def CommoN(l1: list, l2: list):\n    \"\"\"Return sorted unique CommoN elements for two lists.\n    >>> CommoN([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> CommoN([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            yield l1[i]\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n"], ["def LargeST_pRIme_facTor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> LargeST_pRIme_facTor(13195)\n    29\n    >>> LargeST_pRIme_facTor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n\n"], ["def Sum_to_N(n: int):\n    \"\"\"Sum_to_N is a function that sums numbers from 1 to n.\n    >>> Sum_to_N(30)\n    465\n    >>> Sum_to_N(100)\n    5050\n    >>> Sum_to_N(5)\n    15\n    >>> Sum_to_N(10)\n    55\n    >>> Sum_to_N(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def CorreCT_bRAcketiNg(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> CorreCT_bRAcketiNg(\"(\")\n    False\n    >>> CorreCT_bRAcketiNg(\"()\")\n    True\n    >>> CorreCT_bRAcketiNg(\"(()())\")\n    True\n    >>> CorreCT_bRAcketiNg(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def DerivATiVE(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return DerivATiVE of this polynomial in the same form.\n    >>> DerivATiVE([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> DerivATiVE([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [0] + [xs[i + 1] * i for i in range(len(xs) - 1)]\n\n"], ["def FibfiB(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    FibfiB(0) == 0\n    FibfiB(1) == 0\n    FibfiB(2) == 1\n    FibfiB(n) == FibfiB(n-1) + FibfiB(n-2) + FibfiB(n-3).\n    Please write a function to efficiently compute the n-th element of the FibfiB number sequence.\n    >>> FibfiB(1)\n    0\n    >>> FibfiB(5)\n    4\n    >>> FibfiB(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return FibfiB(n - 1) + FibfiB(n - 2) + FibfiB(n - 3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef VowelS_CoUNt(s):\n    \"\"\"Write a function VowelS_CoUNt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> VowelS_CoUNt(\"abcde\")\n    2\n    >>> VowelS_CoUNt(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def CircuLAr_SHift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> CircuLAr_SHift(12, 1)\n    \"21\"\n    >>> CircuLAr_SHift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n"], ["def DigitsUm(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        DigitsUm(\"\") => 0\n        DigitsUm(\"abAB\") => 131\n        DigitsUm(\"abcCd\") => 67\n        DigitsUm(\"helloE\") => 69\n        DigitsUm(\"woArBld\") => 131\n        DigitsUm(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n\n"], ["def Fruit_DIsTRibutiOn(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    Fruit_DIsTRibutiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    Fruit_DIsTRibutiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    Fruit_DIsTRibutiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    Fruit_DIsTRibutiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n"], ["def Pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to Pluck one of the nodes and return it.\n    The Plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The Plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Write your code here\n    if not arr:\n        return []\n    min_value = min(arr)\n    min_index = arr.index(min_value)\n    even_values = [x for x in arr if x % 2 == 0]\n    if len(even_values) == 0:\n        return []\n    return [min_value, min_index]\n\n"], ["def SearcH(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        SearcH([4, 1, 2, 2, 3, 1]) == 2\n        SearcH([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        SearcH([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    SearcH([4, 1, 2, 2, 3, 1]) == 2\n    SearcH([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    SearcH([5, 5, 4, 4, 4]) == -1"], ["def StranGE_sORt_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    StranGE_sORt_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    StranGE_sORt_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    StranGE_sORt_list([]) == []\n    '''\n    return sorted(lst, reverse=True)\n\n\nExamples:\nStranGE_sORt_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nStranGE_sORt_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nStranGE_sORt_list([]) == []\n"], ["def TrianGLe_ARea(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    TrianGLe_ARea(3, 4, 5) == 6.00\n    TrianGLe_ARea(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** 0.5\n"], ["def Will_iT_FlY(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    Will_iT_FlY([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    Will_iT_FlY([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    Will_iT_FlY([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    Will_iT_FlY([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_palindrome(q) else False\n"], ["def SmallESt_CHange(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    SmallESt_CHange([1,2,3,5,4,7,9,6]) == 4\n    SmallESt_CHange([1, 2, 3, 4, 3, 2, 2]) == 1\n    SmallESt_CHange([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 4, 3, 2, 2]"], ["def Total_MAtCH(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    Total_MAtCH([], []) \u279e []\n    Total_MAtCH(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    Total_MAtCH(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    Total_MAtCH(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    Total_MAtCH(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n\nTotal_MAtCH(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\nTotal_MAtCH(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\nTotal_MAtCH(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\nTotal_MAtCH(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def Is_mulTIpLY_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    Is_mulTIpLY_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return False\n        if a % 7 == 0:\n            return False\n        if a % 11 == 0:\n            return False\n        if a % 13 == 0:\n            return False\n        if a % 17 == 0:\n            return False\n        if a % 19 == 0:\n            return False\n        if a % 23 == 0:\n            return False\n        if a % 29 == 0:\n            return False\n        if a % 31 == 0:\n            return False\n        if a % 37 == 0:\n            return False\n        if a % 41 == 0:\n            return False\n        if a % 43 == 0:\n            return False\n        if a % 47 == 0:\n            return False\n        if a % 53 == 0:\n            return False\n        if a % 59 == 0:\n            return False\n        if a % 61 == 0:\n            return False\n        if a % 67 == 0:\n            return False\n        if a % 71 == 0:\n            return False\n        if a % 73 == 0:\n            return False\n        if a % 79 == 0:\n            return False\n        if a % 83 == 0:\n            return False\n        if a % 89 == 0:\n            return False\n        if a % 97 == 0:\n            return False\n        if a % 101 == 0:\n            return False\n        if a % 103 == 0:\n            return False\n        if a % 107 == 0:\n            return False\n        if a % 109 == 0:\n            return False\n        if a % 113 == 0:\n            return False\n        if a % 127 == 0:\n            return False\n        if a % 131 == 0:\n            return False\n        if a % 137 == 0:\n            return False\n        if a % 139 == 0:\n            return False\n        if a % 149 == 0:\n            return False\n        if a % 151 == 0:\n            return False\n        if a % 157 == 0:\n            return False\n        if a % 163 == 0:\n            return False\n        if a % 167 == 0:\n            return False\n        if a % 173 == 0:\n            return False\n        if a % 179 == 0:\n            return False\n        if a % 181 == 0:\n            return False\n        if a % 191 == 0:\n            return False\n        if a % 193 == 0:\n            return False\n        if a % 197 == 0:\n            return False\n        if a % 199 == 0:\n            return False\n        if a % 211 == 0:\n            return False\n        if a % 223 == 0:\n            return False\n        if a % 227 == 0:\n            return False\n        if a % 229 == 0:\n            return False\n        if a % 233 == 0:\n            return False\n        if a % 239 == 0:\n            return False\n        if a % 241 == 0:\n            return False\n        if a % 251 == 0:\n            return False\n        if a % 257 == 0:\n            return False\n        if a % 263 == 0:\n            return False\n        if a % 269 == 0:\n            return False\n        if a % 271 == 0:\n            return False\n        if a % 277 == 0:\n            return False\n        if a % 281 == 0:\n            return False\n        if a % 283 == 0:\n            return False\n        if a % 293 == 0:\n            return False\n        if a % 307 == 0:\n            return False"], ["def Is_simPLe_POwer(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    Is_simPLe_POwer(1, 4) => true\n    Is_simPLe_POwer(2, 2) => true\n    Is_simPLe_POwer(8, 2) => true\n    Is_simPLe_POwer(3, 2) => false\n    Is_simPLe_POwer(3, 1) => false\n    Is_simPLe_POwer(5, 3) => false\n    \"\"\"\n    return x == n ** int(x)\n\n"], ["def IscubE(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    IscubE(1) ==> True\n    IscubE(2) ==> False\n    IscubE(-1) ==> True\n    IscubE(64) ==> True\n    IscubE(0) ==> True\n    IscubE(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a % 2 == 0:\n        return False\n    elif a % 3 == 0:\n        return True\n    else:\n        return IscubE(a//2)\n"], ["def Hex_keY(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n\nTest.assert_equals(Hex_keY(\"AB\"), 1)\nTest.assert_equals(Hex_keY(\"1077E\"), 2)\nTest.assert_equals(Hex_keY(\"ABED1A33\"), 4)\nTest.assert_equals(Hex_keY(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(Hex_keY(\"2020\"), 2)"], ["def DecimAL_tO_Binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    DecimAL_tO_Binary(15)   # returns \"db1111db\"\n    DecimAL_tO_Binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    return \"db\"\n\nExamples:\nDecimAL_tO_Binary(15)   # returns \"db1111db\"\nDecimAL_tO_Binary(32)   # returns \"db100000db\"\n"], ["def Is_hapPY(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    Is_hapPY(a) => False\n    Is_hapPY(aa) => False\n    Is_hapPY(abcd) => True\n    Is_hapPY(aabb) => False\n    Is_hapPY(adb) => True\n    Is_hapPY(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["def NumerICaL_Letter_Grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def Prime_LEnGTh(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    Prime_LEnGTh('Hello') == True\n    Prime_LEnGTh('abcdcba') == True\n    Prime_LEnGTh('kittens') == True\n    Prime_LEnGTh('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nPrime_LEnGTh('Hello')\nPrime_LEnGTh('abcdcba')\nPrime_LEnGTh('kittens')\nPrime_LEnGTh('orange')"], ["def StartS_OnE_Ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def Solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n\nTest.assert_equals(Solve(1000), \"1\")\nTest.assert_equals(Solve(150), \"110\")\nTest.assert_equals(Solve(147), \"1100\")\nTest.assert_equals(Solve(10000), \"10000\")\nTest.assert_equals(Solve(100000), \"100000\")\nTest.assert_equals(Solve(1000000), \"1000000\")\nTest.assert_equals(Solve(10000000), \"10000000\")\nTest.assert_equals(Solve(100000000), \"100000000\")\nTest.assert_equals(Solve(1000000000), \"1000000000\")\nTest.assert_equals(Solve(10000000000), \"10000000000\")\nTest.assert_equals(Solve(100000000000), \"100000000000\")\nTest.assert_equals(Solve(1000000000000), \"1000000000000\")\nTest.assert_equals(Solve(10000000000000), \"10000000000000\")\nTest.assert_equals(Solve(100000000000000), \"100000000000000\")\nTest.assert_equals(Solve(1000000000000000), \"1000000000000000\")\nTest.assert_equals(Solve(10000000000000000), \"10000000000000000\")\nTest.assert_equals(Solve(100000000000000000), \"100000000000000000\")\nTest.assert_equals(Solve(1000000000000000000), \"1000000000000000000\")\nTest.assert_equals(Solve(10000000000000000000), \"10000000000000000000\")\nTest.assert_equals(Solve(100000000000000000000), \"1000000000000000000000\")\nTest.assert_equals(Solve(1000000000000000000000), \"10000000000000000000000\")\nTest.assert_equals(Solve(10000000000000000000000), \"10000000000000000000000\")\nTest.assert_equals(Solve(100000000000000000000000), \"1000"], ["def Add(lst):\n    \"\"\"Given a non-empty list of integers lst. Add the even elements that are at odd indices..\n\n\n    Examples:\n        Add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    Add([4, 2, 6, 7]) ==> 2\n    Add([1, 2, 3, 4, 5]) ==> 15\n    Add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def Anti_sHUfFLe(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    Anti_sHUfFLe('Hi') returns 'Hi'\n    Anti_sHUfFLe('hello') returns 'ehllo'\n    Anti_sHUfFLe('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '').lower().replace('a', '4').replace('b', '8').replace('c', '1').replace('d', '2').replace('e', '3').replace('f', '5').replace('g', '6').replace('h', '7').replace('i', '9').replace('j', '0').replace('k', 'k').replace('l', 'l').replace('m', 'm').replace('n', 'n').replace('o', 'o').replace('p', 'p').replace('q', 'q').replace('r', 'r').replace('s', 's').replace('t', 't').replace('u', 'u').replace('v', 'v').replace('w', 'w').replace('x', 'x').replace('y', 'y').replace('z', 'z')\n"], ["def Get_roW(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    Get_roW([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    Get_roW([], 1) == []\n    Get_roW([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Write your code here\n    return sorted(set(tuple(x) for x in lst if x[0] == x[1] and x[0] == x[2] and x[0] == x[3] and x[0] == x[4] and x[0] == x[5] and x[0] == x[6] and x[0] == x[7] and x[0] == x[8] and x[0] == x[9] and x[0] == x[10] and x[0] == x[11] and x[0] == x[12] and x[0] == x[13] and x[0] == x[14] and x[0] == x[15] and x[0] == x[16] and x[0] == x[17] and x[0] == x[18] and x[0] == x[19] and x[0] == x[20] and x[0] == x[21] and x[0] == x[22] and x[0] == x[23] and x[0] == x[24] and x[0] == x[25] and x[0] == x[26] and x[0] == x[27] and x[0] == x[28] and x[0] == x[29] and x[0] == x[30] and x[0] == x[31] and x[0] == x[32] and x[0] == x[33] and x[0] == x[34] and x[0] == x[35] and x[0] == x[36] and x[0] == x[37] and x[0] == x[38] and x[0] == x[39] and x[0] == x[40] and x[0] == x[41] and x[0] == x[42] and x[0] == x[43] and x[0] == x[44] and x[0] == x[45] and x[0] == x[46] and x[0] == x[47] and x[0] == x[48] and x[0] == x[49] and x[0] == x[50] and x[0] == x[51] and x[0] == x[52] and x[0] == x[53] and x[0] == x[54] and x[0] == x[55] and x[0] == x[56] and x[0] == x[57] and x[0] == x[58] and x[0] == x[59] and x[0] == x[60] and x[0] == x[61] and x[0] == x[62] and x[0] == x[63] and x[0] == x[64] and x[0] == x[65] and x[0] == x[66] and x[0] == x[67] and x"], ["def Sort_aRRaY(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * Sort_aRRaY([]) => []\n    * Sort_aRRaY([5]) => [5]\n    * Sort_aRRaY([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * Sort_aRRaY([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    return array\n\nTest:\n>>> Sort_aRRaY([])\n[]\n>>> Sort_aRRaY([5])\n[5]\n>>> Sort_aRRaY([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> Sort_aRRaY([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def EncryPT(s):\n    \"\"\"Create a function EncryPT that takes a string as an argument and\n    returns a string EncryPTed with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    EncryPT('hi') returns 'lm'\n    EncryPT('asdfghjkl') returns 'ewhjklnop'\n    EncryPT('gf') returns 'kj'\n    EncryPT('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def Next_sMAlLEst(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function Next_sMAlLEst() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    Next_sMAlLEst([1, 2, 3, 4, 5]) == 2\n    Next_sMAlLEst([5, 1, 4, 3, 2]) == 2\n    Next_sMAlLEst([]) == None\n    Next_sMAlLEst([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n"], ["def Is_borED(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> Is_borED(\"Hello world\")\n    0\n    >>> Is_borED(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n"], ["def Any_inT(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    Any_inT(5, 2, 7) \u279e True\n    \n    Any_inT(3, 2, 2) \u279e False\n\n    Any_inT(3, -2, 1) \u279e True\n    \n    Any_inT(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return False\n\n"], ["def EncodE(message):\n    \"\"\"\n    Write a function that takes a message, and EncodEs in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> EncodE('test')\n    'TGST'\n    >>> EncodE('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Your code here\n    return message\n\nTest:\n>>> EncodE('test')\n'TGST'\n>>> EncodE('This is a message')\n'tHKS KS C MGSSCGG'"], ["def SkjkaSDkD(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 2"], ["def Check_DIcT_Case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    Check_DIcT_Case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    Check_DIcT_Case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    Check_DIcT_Case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    Check_DIcT_Case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    Check_DIcT_Case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\nCheck_DIcT_Case({\"a\":\"apple\", \"b\":\"banana\"})\nCheck_DIcT_Case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nCheck_DIcT_Case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\nCheck_DIcT_Case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\nCheck_DIcT_Case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })"], ["def Count_UP_tO(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    Count_UP_tO(5) => [2,3]\n    Count_UP_tO(11) => [2,3,5,7]\n    Count_UP_tO(0) => []\n    Count_UP_tO(20) => [2,3,5,7,11,13,17,19]\n    Count_UP_tO(1) => []\n    Count_UP_tO(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n+1):\n        if i == 2:\n            prime_numbers.append(2)\n        elif i % 2 == 0:\n            prime_numbers.append(i)\n        else:\n            for j in range(2, i//2+1):\n                if i % j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n    return prime_numbers\n"], ["def MultiPLy(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    MultiPLy(148, 412) should return 16.\n    MultiPLy(19, 28) should return 72.\n    MultiPLy(2020, 1851) should return 0.\n    MultiPLy(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n"], ["def Count_UPpER(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    Count_UPpER('aBCdEf') returns 1\n    Count_UPpER('abcdefg') returns 0\n    Count_UPpER('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n"], ["def CloseST_iNTeger(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> CloseST_iNTeger(\"10\")\n    10\n    >>> CloseST_iNTeger(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example CloseST_iNTeger(\"14.5\") should\n    return 15 and CloseST_iNTeger(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return int(value)\n"], ["def Make_a_PIlE(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> Make_a_PIlE(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n, n + 1]\n\n\nExamples:\n>>> Make_a_PIlE(3)\n[3, 5, 7]\n>>> Make_a_PIlE(4)\n[4, 6, 8]\n>>> Make_a_PIlE(5)\n[5, 7, 9]\n>>> Make_a_PIlE(6)\n[6, 8, 10]\n>>> Make_a_PIlE(7)\n[7, 9, 11]\n>>> Make_a_PIlE(8)\n[8, 10, 12]\n>>> Make_a_PIlE(9)\n[9, 11, 13]\n>>> Make_a_PIlE(10)\n[10, 12, 14]\n>>> Make_a_PIlE(11)\n[11, 13, 15]\n>>> Make_a_PIlE(12)\n[12, 14, 16]\n>>> Make_a_PIlE(13)\n[13, 15, 17]\n>>> Make_a_PIlE(14)\n[14, 16, 18]\n>>> Make_a_PIlE(15)\n[15, 17, 19]\n>>> Make_a_PIlE(16)\n[16, 18, 20]\n>>> Make_a_PIlE(17)\n[17, 19, 21]\n>>> Make_a_PIlE(18)\n[18, 20, 22]\n>>> Make_a_PIlE(19)\n[19, 21, 23]\n>>> Make_a_PIlE(20)\n[20, 22, 24]\n>>> Make_a_PIlE(21)\n[21, 23, 25]\n>>> Make_a_PIlE(22)\n[22, 24, 26]\n>>> Make_a_PIlE(23)\n[23, 25, 27]\n>>> Make_a_PIlE(24)\n[24, 26, 28]\n>>> Make_a_PIlE(25)\n[25, 27, 29]\n>>> Make_a_PIlE(26)\n[26, 28, 30]\n>>> Make_a_PIlE(27)\n[27, 29, 31]\n>>> Make_a_PIlE(28)\n[28, 30, 32]\n>>> Make_a_PIlE(29)\n[29, 31, 33]\n>>> Make_a_PIlE(30)\n[30, 32, 34]\n>>> Make_a_PIlE(31)\n[31, 33, 35]\n>>> Make_a_PIlE(32)\n[32, 34, 36]\n>>> Make_a_PIlE(33)\n[33, 35, 37]\n>>> Make_a_PIlE(34)\n[34, 36, 38]\n>>> Make_a_PIlE(35)\n[35, 37, 39]\n>>> Make_a"], ["def Words_STrINg(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    Words_STrINg(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    Words_STrINg(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n"], ["def ChoosE_NuM(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    ChoosE_NuM(12, 15) = 14\n    ChoosE_NuM(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nChoosE_NuM(12, 15) = 14\nChoosE_NuM(13, 12) = -1\nChoosE_NuM(1, 10) = 2\nChoosE_NuM(1, 100) = 100\nChoosE_NuM(1, 1000) = 1000\nChoosE_NuM(1, 10000) = 10000\nChoosE_NuM(1, 100000) = 100000\nChoosE_NuM(1, 1000000) = 1000000\nChoosE_NuM(1, 10000000) = 10000000\nChoosE_NuM(1, 100000000) = 100000000\nChoosE_NuM(1, 1000000000) = 1000000000\nChoosE_NuM(1, 10000000000) = 10000000000\nChoosE_NuM(1, 100000000000) = 100000000000\nChoosE_NuM(1, 1000000000000) = 1000000000000\nChoosE_NuM(1, 10000000000000) = 10000000000000\nChoosE_NuM(1, 100000000000000) = 100000000000000\nChoosE_NuM(1, 1000000000000000) = 1000000000000000\nChoosE_NuM(1, 10000000000000000) = 10000000000000000\nChoosE_NuM(1, 100000000000000000) = 100000000000000000\nChoosE_NuM(1, 1000000000000000000) = 1000000000000000000\nChoosE_NuM(1, 10000000000000000000) = 10000000000000000000\nChoosE_NuM(1, 100000000000000000000) = 100000000000000000000\nChoosE_NuM(1, 1000000000000000000000) = 1000000000000000000000\nChoosE_NuM(1, 10000000000000000000000) = 10000000000000000000000"], ["def RoundED_aVG(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    RoundED_aVG(1, 5) => \"0b11\"\n    RoundED_aVG(7, 5) => -1\n    RoundED_aVG(10, 20) => \"0b1111\"\n    RoundED_aVG(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\n>>> RoundED_aVG(1, 5)\n'0b11'\n>>> RoundED_aVG(7, 5)\n-1\n>>> RoundED_aVG(10, 20)\n'0b1111'\n>>> RoundED_aVG(20, 33)\n'0b11010'\n"], ["def UniquE_DiGIts(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> UniquE_DiGIts([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> UniquE_DiGIts([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\nTest:\n>>> UniquE_DiGIts([15, 33, 1422, 1])\n[1, 15, 33]\n>>> UniquE_DiGIts([152, 323, 1422, 10])\n[]\n>>> UniquE_DiGIts([152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UniquE_DiGIts([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UniquE_DiGIts([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UniquE_DiGIts([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UniquE_DiGIts([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UniquE_DiGIts([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 1"], ["def By_lenGTh(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Your code here\n    return []\n"], ["deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at"], ["def Even_oDD_pALindroMe(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i == int(str(i)[::-1]):\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n"], ["def Count_NUmS(arr):\n    \"\"\"\n    Write a function Count_NUmS which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> Count_NUmS([]) == 0\n    >>> Count_NUmS([-1, 11, -11]) == 1\n    >>> Count_NUmS([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i < 0:\n            count += 1\n        else:\n            count += sum(int(x) for x in str(i)) > 0\n    return count\n\n"], ["def Move_oNE_bALl(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    Move_oNE_bALl([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    Move_oNE_bALl([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\nMove_oNE_bALl([3, 4, 5, 1, 2])\nMove_oNE_bALl([3, 5, 4, 1, 2])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2, 1])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1])\nMove_oNE_bALl([3, 5, 4, 1, 2, 1, 3,"], ["def ExchaNGe(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an ExchaNGe of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of ExchaNGed elements between lst1 and lst2.\n    If it is possible to ExchaNGe elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    ExchaNGe([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if len(set(lst1) & set(lst2)) == 0 else \"NO\"\n\n\nTest cases:\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4])\n'YES'\n>>> ExchaNGe([1, 2, 3, 4], [1, 5, 3, 4])\n'NO'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5])\n'YES'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n'NO'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n'YES'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n'NO'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n'YES'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n'NO'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n'YES'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n'NO'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n'YES'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n'NO'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n'YES'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n'NO'\n>>> ExchaNGe([1, 2, 3, 4], [1, 2, 3,"], ["def HistoGRaM(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    HistoGRaM('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    HistoGRaM('a b b a') == {'a': 2, 'b': 2}\n    HistoGRaM('a b c a b') == {'a': 2, 'b': 2}\n    HistoGRaM('b b b b a') == {'b': 4}\n    HistoGRaM('') == {}\n\n    \"\"\"\n    # TODO: Write your code here\n    return {}\n"], ["def ReverSE_dELete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    if s == c:\n        return (s, True)\n    else:\n        return (s, False)\n\ns = input(\"Enter the string: \")\nc = input(\"Enter the character: \")"], ["def Odd_coUNt(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> Odd_coUNt(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> Odd_coUNt(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n"], ["def MinSuBarRAySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    MinSuBarRAySum([2, 3, 4, 1, 2, 4]) == 1\n    MinSuBarRAySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + nums[i - 1])\n    return min_sum\n\n\nAnswer: def MinSuBarRAySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    MinSuBarRAySum([2, 3, 4, 1, 2, 4]) == 1\n    MinSuBarRAySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + nums[i - 1])\n    return min_sum\n"], ["def Max_fiLL(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    # to empty the wells\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    bucket_capacity = capacity\n    # Initialize the number of wells\n    wells = rows * columns\n    # Initialize the number of buckets\n    buckets = wells\n    # Initialize the number of times you need to lower the buckets\n    # to empty the wells\n    times = 0\n    # Loop through the rows\n    for row in range(rows):\n        # Loop through the columns\n        for column in range(columns):\n            # If the bucket is empty\n            if grid[row][column] == 0:\n                # If the bucket is not full\n                if buckets > 0:\n                    # Decrement the number of buckets\n                    buckets -= 1\n                    # Increment the number of times you need to lower the buckets\n                    times += 1\n                # If the bucket is full\n                else:\n                    # Increment the number of times you need to lower the buckets\n                    times += 1\n    # Return the number of times you need to lower the buckets\n    return times\n"], ["def Sort_aRRaY(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> Sort_aRRaY([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> Sort_aRRaY([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> Sort_aRRaY([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n\nTest.assert_equals(Sort_aRRaY([1, 5, 2, 3, 4]), [1, 2, 3, 4, 5])\nTest.assert_equals(Sort_aRRaY([-2, -3, -4, -5, -6]), [-6, -5, -4, -3, -2])\nTest.assert_equals(Sort_aRRaY([1, 0, 2, 3, 4]), [0, 1, 2, 3, 4])\n"], ["def SelecT_WoRDs(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    SelecT_WoRDs(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    SelecT_WoRDs(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    SelecT_WoRDs(\"simple white space\", 2) ==> []\n    SelecT_WoRDs(\"Hello world\", 4) ==> [\"world\"]\n    SelecT_WoRDs(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n"], ["def Get_clOSeST_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    Get_clOSeST_vowel(\"yogurt\") ==> \"u\"\n    Get_clOSeST_vowel(\"FULL\") ==> \"U\"\n    Get_clOSeST_vowel(\"quick\") ==> \"\"\n    Get_clOSeST_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nGet_clOSeST_vowel(\"yogurt\") ==> \"u\"\nGet_clOSeST_vowel(\"FULL\") ==> \"U\"\nGet_clOSeST_vowel(\"quick\") ==> \"\"\nGet_clOSeST_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letter only.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n\nfrom collections import Counter\n"], ["def Match_PArENs(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    Match_PArENs(['()(', ')']) == 'Yes'\n    Match_PArENs([')', ')']) == 'No'\n    '''\n    # Write your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n"], ["def MaximUM(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the MaximUM k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n"], ["def SolutIOn(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    SolutIOn([5, 8, 7, 1]) ==> 12\n    SolutIOn([3, 3, 3, 3, 3]) ==> 9\n    SolutIOn([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 1)\n\n"], ["def Add_elEMeNTs(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n\n"], ["def Get_odD_CoLLatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    Get_odD_CoLLatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return Get_odD_CoLLatz(3*n+1) + [n]\n"], ["def Valid_DAtE(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    Valid_DAtE('03-11-2000') => True\n\n    Valid_DAtE('15-01-2012') => False\n\n    Valid_DAtE('04-0-2040') => False\n\n    Valid_DAtE('06-04-2020') => True\n\n    Valid_DAtE('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def Split_WOrDS(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    Split_WOrDS(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    Split_WOrDS(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    Split_WOrDS(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nSplit_WOrDS(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nSplit_WOrDS(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nSplit_WOrDS(\"abcdef\") == 3"], ["def Is_sorTEd(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    Is_sorTEd([5]) \u279e True\n    Is_sorTEd([1, 2, 3, 4, 5]) \u279e True\n    Is_sorTEd([1, 3, 2, 4, 5]) \u279e False\n    Is_sorTEd([1, 2, 3, 4, 5, 6]) \u279e True\n    Is_sorTEd([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    Is_sorTEd([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    Is_sorTEd([1, 2, 2, 3, 3, 4]) \u279e True\n    Is_sorTEd([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nIs_sorTEd([1, 2, 3, 4, 5, 6, 7]) \u279e True\nIs_sorTEd([1, 2, 2, 3, 3, 4]) \u279e True\nIs_sorTEd([1, 2, 2, 2, 3, 4]) \u279e False"], ["def InterSEcTIon(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of InterSEcTIon of these two \n    intervals is a prime number.\n    Example, the InterSEcTIon of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the InterSEcTIon is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    InterSEcTIon((1, 2), (2, 3)) ==> \"NO\"\n    InterSEcTIon((-1, 1), (0, 4)) ==> \"NO\"\n    InterSEcTIon((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 == start2 and end1 == end2:\n        return \"YES\"\n    if start1 == end2:\n        return \"YES\"\n    if start2 == end1:\n        return \"YES\"\n    if start1 == start2:\n        return \"YES\"\n    if start1 == end1:\n        return \"YES\"\n    if start2 == end2:\n        return \"YES\"\n    if start1 == start2 and end1 == end1:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end1 and end2 == end1:\n        return \"YES\"\n    if start1 == end2 and end2 == end1:\n        return \"YES\"\n    if start2 == end1 and end2 == end2:\n        return \"YES\"\n    if start1 == end1 and end2 == end1:\n        return \"YES\"\n    if start2 == end2 and end2 == end1:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end2:\n        return \"YES\"\n    if start1 == end2 and end2 == end1:\n        return \"YES\"\n    if start2 == end1 and end2 == end2:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end1:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end2:\n        return \"YES\"\n    if start1 == end2 and end2 == end1:\n        return \"YES\"\n    if start2 == end1 and end2 == end2:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end1:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end2:\n        return \"YES\"\n    if start1 == end2 and end2 == end1:\n        return \"YES\"\n    if start2 == end1 and end2 == end2:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end1:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end2:\n        return \"YES\"\n    if start1 == end2 and end2 == end1:\n        return \"YES\"\n    if start2 == end1 and end2 == end2:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES\"\n    if start2 == end2 and end2 == end1:\n        return \"YES\"\n    if start1 == end1 and end2 == end2:\n        return \"YES"], ["def Prod_sIGnS(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> Prod_sIGnS([1, 2, 2, -4]) == -9\n    >>> Prod_sIGnS([0, 1]) == 0\n    >>> Prod_sIGnS([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    sign_arr = [1 if x >= 0 else -1 for x in arr]\n    return sum(abs(x) * sign for x, sign in zip(arr, sign_arr))\n\n\nTest cases:\n>>> Prod_sIGnS([1, 2, 2, -4])\n-9\n>>> Prod_sIGnS([0, 1])\n0\n>>> Prod_sIGnS([])\nNone\n\"\"\"\n"], ["def MinPaTH(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTestcase:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 2\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 4\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 5\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 6\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 7\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 8\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 9\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 10\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], ["], ["def Tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    Tri(1) = 3\n    Tri(n) = 1 + n / 2, if n is even.\n    Tri(n) =  Tri(n - 1) + Tri(n - 2) + Tri(n + 1), if n is odd.\n    For example:\n    Tri(2) = 1 + (2 / 2) = 2\n    Tri(4) = 3\n    Tri(3) = Tri(2) + Tri(1) + Tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    Tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        return [1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\n\n\nExamples:\nTri(3) = [1, 3, 2, 8]\nTri(4) = [1, 3, 2, 8, 1]\nTri(5) = [1, 3, 2, 8, 1, 5]\nTri(6) = [1, 3, 2, 8, 1, 5, 16]\nTri(7) = [1, 3, 2, 8, 1, 5, 16, 49]\nTri(8) = [1, 3, 2, 8, 1, 5, 16, 49, 144]\nTri(9) = [1, 3, 2, 8, 1, 5, 16, 49, 144, 441]\nTri(10) = [1, 3, 2, 8, 1, 5, 16, 49, 144, 441, 10946]\n\"\"\"\n\nThis is a recursive function, which means that it calls itself.\n\nThe function takes an integer n as an input and returns a list of the first n + 1 numbers of the Tribonacci sequence.\n\nThe function returns the list [1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 2, 3, 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 3, 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 4, 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n + 1) for n = 5, 6, 7, 8, 9, 10.\n\nThe function returns the list [1, 1, 1, 1, 1, 1, 1] + Tri(n - 1) + Tri(n - 2) + Tri(n +"], ["def DigitS(n):\n    \"\"\"Given a positive integer n, return the product of the odd DigitS.\n    Return 0 if all DigitS are even.\n    For example:\n    DigitS(1)  == 1\n    DigitS(4)  == 0\n    DigitS(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    else:\n        return n * DigitS(n//2)\n\nDigitS(1)  == 1\nDigitS(4)  == 0\nDigitS(235) == 15\n\nThis is a recursive function. It is used to calculate the product of the odd DigitS of a given number.\n\nThe recursive function takes in a number n and returns the product of the odd DigitS of n.\n\nIf n is 0, then the function returns 0.\n\nIf n is even, then the function returns 0.\n\nIf n is odd, then the function returns n multiplied by the product of the odd DigitS of n/2.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0.\n\nThe function returns the product of the odd DigitS of n.\n\nThe function is defined recursively. It calls itself recursively until the number is 0"], ["def Is_nesTEd(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    Is_nesTEd('[[]]') \u279e True\n    Is_nesTEd('[]]]]]]][[[[[]') \u279e False\n    Is_nesTEd('[][]') \u279e False\n    Is_nesTEd('[]') \u279e False\n    Is_nesTEd('[[][]]') \u279e True\n    Is_nesTEd('[[]][[') \u279e True\n    '''\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(Is_nesTEd('[[]]'), True)\nTest.assert_equals(Is_nesTEd('[]]]]]]][[[[[]'), False)\nTest.assert_equals(Is_nesTEd('[][]'), False)\nTest.assert_equals(Is_nesTEd('[]'), False)\nTest.assert_equals(Is_nesTEd('[[][]]'), True)\nTest.assert_equals(Is_nesTEd('[[]][['), True)"], ["def Sum_sqUArES(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(map(lambda x: int(ceil(x**2)), lst))\n"], ["def Check_IF_lASt_char_Is_a_letTer(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    Check_IF_lASt_char_Is_a_letTer(\"apple pie\") \u279e False\n    Check_IF_lASt_char_Is_a_letTer(\"apple pi e\") \u279e True\n    Check_IF_lASt_char_Is_a_letTer(\"apple pi e \") \u279e False\n    Check_IF_lASt_char_Is_a_letTer(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and not txt[-1].isalpha() in txt.split()\n\nCheck_IF_lASt_char_Is_a_letTer(\"apple pie\") \u279e False\nCheck_IF_lASt_char_Is_a_letTer(\"apple pi e\") \u279e True\nCheck_IF_lASt_char_Is_a_letTer(\"apple pi e \") \u279e False\nCheck_IF_lASt_char_Is_a_letTer(\"\") \u279e False"], ["def Can_arRAnGE(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    Can_arRAnGE([1,2,4,3,5]) = 3\n    Can_arRAnGE([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n\n\nTest cases:\nCan_arRAnGE([1,2,4,3,5]) = 3\nCan_arRAnGE([1,2,3]) = -1\nCan_arRAnGE([1,2,3,4]) = -1\nCan_arRAnGE([1,2,3,4,5]) = 4\nCan_arRAnGE([1,2,3,4,5,6]) = 5\nCan_arRAnGE([1,2,3,4,5,6,7]) = 6\nCan_arRAnGE([1,2,3,4,5,6,7,8]) = 7\nCan_arRAnGE([1,2,3,4,5,6,7,8,9]) = 8\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10]) = 9\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11]) = 10\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12]) = 11\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 12\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 13\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 14\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 15\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 16\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 17\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 18\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 19\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 20\nCan_arRAnGE([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 21\nCan_arRAnGE([1,2,3,4,5,6,7"], ["def LargeST_sMAllest_IntegeRs(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    LargeST_sMAllest_IntegeRs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    LargeST_sMAllest_IntegeRs([]) == (None, None)\n    LargeST_sMAllest_IntegeRs([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\n>>> LargeST_sMAllest_IntegeRs([2, 4, 1, 3, 5, 7])\n(None, 1)\n>>> LargeST_sMAllest_IntegeRs([])\n(None, None)\n>>> LargeST_sMAllest_IntegeRs([0])\n(None, None)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9])\n(1, 9)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n(1, 10)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n(1, 11)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n(1, 12)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n(1, 13)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n(1, 14)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n(1, 15)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n(1, 16)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n(1, 17)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n(1, 18)\n>>> LargeST_sMAllest_IntegeRs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n(1, 19)\n>>> LargeST_sMAllest_IntegeRs([1, "], ["def CompaRE_oNE(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    CompaRE_oNE(1, 2.5) \u279e 2.5\n    CompaRE_oNE(1, \"2,3\") \u279e \"2,3\"\n    CompaRE_oNE(\"5,1\", \"6\") \u279e \"6\"\n    CompaRE_oNE(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\nCompaRE_oNE(1, 2.5) \u279e 2.5\nCompaRE_oNE(1, \"2,3\") \u279e \"2,3\"\nCompaRE_oNE(\"5,1\", \"6\") \u279e \"6\"\nCompaRE_oNE(\"1\", 1) \u279e None\n\nExplanation:\n\nCompaRE_oNE(1, 2.5) \u279e 2.5\n\nThe function takes two integers, 1 and 2.5, and returns 2.5.\n\nCompaRE_oNE(1, \"2,3\") \u279e \"2,3\"\n\nThe function takes two integers, 1 and \"2,3\", and returns \"2,3\".\n\nCompaRE_oNE(\"5,1\", \"6\") \u279e \"6\"\n\nThe function takes two strings, \"5,1\" and \"6\", and returns \"6\".\n\nCompaRE_oNE(\"1\", 1) \u279e None\n\nThe function takes two integers, 1 and 1, and returns None.\n\nCompaRE_oNE(1, 1) \u279e None\n\nThe function takes two integers, 1 and 1, and returns None.\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given variable type.\n- The function should return the larger variable in its given"], ["def Is_equAL_tO_Sum_eveN(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    Is_equAL_tO_Sum_eveN(4) == False\n    Is_equAL_tO_Sum_eveN(6) == False\n    Is_equAL_tO_Sum_eveN(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n"], ["def SpeciAL_fACtoriaL(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> SpeciAL_fACtoriaL(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def Fix_spACeS(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    Fix_spACeS(\"Example\") == \"Example\"\n    Fix_spACeS(\"Example 1\") == \"Example_1\"\n    Fix_spACeS(\" Example 2\") == \"_Example_2\"\n    Fix_spACeS(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def File_nAMe_CHeck(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    File_nAMe_CHeck(\"example.txt\") # => 'Yes'\n    File_nAMe_CHeck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes'\n"], ["def Sum_sqUArES(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i]**3\n    return sum\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126"], ["def Words_IN_sENtence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            new_sentence += word + \" \"\n    return new_sentence\n\n"], ["def SimplIFy(x, n):\n    \"\"\"Your task is to implement a function that will SimplIFy the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    SimplIFy(\"1/5\", \"5/1\") = True\n    SimplIFy(\"1/6\", \"2/1\") = False\n    SimplIFy(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nSimplIFy(\"1/5\", \"5/1\") = True\nSimplIFy(\"1/6\", \"2/1\") = False\nSimplIFy(\"7/10\", \"10/2\") = False\nSimplIFy(\"1/2\", \"2/1\") = True\nSimplIFy(\"1/2\", \"1/2\") = True\nSimplIFy(\"1/2\", \"1/3\") = False\nSimplIFy(\"1/2\", \"1/4\") = False\nSimplIFy(\"1/2\", \"1/5\") = False\nSimplIFy(\"1/2\", \"1/6\") = False\nSimplIFy(\"1/2\", \"1/7\") = False\nSimplIFy(\"1/2\", \"1/8\") = False\nSimplIFy(\"1/2\", \"1/9\") = False\nSimplIFy(\"1/2\", \"1/10\") = False\nSimplIFy(\"1/2\", \"1/11\") = False\nSimplIFy(\"1/2\", \"1/12\") = False\nSimplIFy(\"1/2\", \"1/13\") = False\nSimplIFy(\"1/2\", \"1/14\") = False\nSimplIFy(\"1/2\", \"1/15\") = False\nSimplIFy(\"1/2\", \"1/16\") = False\nSimplIFy(\"1/2\", \"1/17\") = False\nSimplIFy(\"1/2\", \"1/18\") = False\nSimplIFy(\"1/2\", \"1/19\") = False\nSimplIFy(\"1/2\", \"1/20\") = False\nSimplIFy(\"1/2\", \"1/21\") = False\nSimplIFy(\"1/2\", \"1/22\") = False\nSimplIFy(\"1/2\", \"1/23\") = False\nSimplIFy(\"1/2\", \"1/24\") = False\nSimplIFy(\"1/2\", \"1/25\") = False\nSimplIFy(\"1/2\", \"1/26\") = False\nSimplIFy(\"1/2\", \"1/27\") = False\nSimplIFy(\"1/2\", \"1/28\") = False\nSimplIFy(\"1/2\", \"1/29\") = False\nSimplIFy(\"1/2\", \"1/30\") = False\nSimplIFy(\"1/2\", \"1/31\") = False\nSimplIFy(\"1/2\", \"1/32\") = False\nSimplIFy(\"1/2\", \"1/33\") = False\nSimplIFy(\"1/2\", \"1/34\") = False\nSimplIFy(\"1/2\", \"1/35\") = False\nSimplIFy(\"1/2\", \"1/36\") = False\nSimplIFy(\"1/2\", \"1/37\") = False\nSimplIFy(\"1/2\", \"1/38\") = False\nSimplIFy(\"1/2\", \"1/39\") = False\nSimplIFy(\"1/2\", \"1/40\") = False\nSimplIFy(\"1/2\", \"1/41\") = False\nSimplIFy(\"1/2\", \"1/42\") = False\nSimplIFy(\"1/2\", \"1/43\") = False\nSimplIFy(\"1/2\", \"1/44\") = False\nSimplIFy(\"1/2\", \"1/45\") = False\nSimplIFy(\"1/2\", \"1/46\") = False\nSimplIFy(\"1/2\", \"1/47\")"], ["def Order_BY_pOInts(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> Order_BY_pOInts([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> Order_BY_pOInts([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def SpeciALFILter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    SpeciALFILter([15, -73, 14, -15]) => 1 \n    SpeciALFILter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n\nSpeciALFILter([15, -73, 14, -15])\nSpeciALFILter([33, -2, -3, 45, 21, 109])"], ["def Get_maX_TrIPles(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def Bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n"], ["def SorteD_LiST_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Your code here\n    return sorted(lst, key=lambda x: len(x))\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \""], ["def X_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for X_or_y(7, 34, 12) == 34\n    for X_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def DoublE_ThE_DifferEnce(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    DoublE_ThE_DifferEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    DoublE_ThE_DifferEnce([-1, -2, 0]) == 0\n    DoublE_ThE_DifferEnce([9, -2]) == 81\n    DoublE_ThE_DifferEnce([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x%2 != 0])\n\nDoublE_ThE_DifferEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\nDoublE_ThE_DifferEnce([-1, -2, 0]) == 0\nDoublE_ThE_DifferEnce([9, -2]) == 81\nDoublE_ThE_DifferEnce([0]) == 0"], ["def CompaRE(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    CompaRE([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    CompaRE([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n"], ["def stronGEsT_extensIon(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for stronGEsT_extensIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: len(x) - len(x.lower()))\n"], ["def CycpaTTeRN_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    CycpaTTeRN_check(\"abcd\",\"abd\") => False\n    CycpaTTeRN_check(\"hello\",\"ell\") => True\n    CycpaTTeRN_check(\"whassup\",\"psus\") => False\n    CycpaTTeRN_check(\"abab\",\"baa\") => True\n    CycpaTTeRN_check(\"efef\",\"eeff\") => False\n    CycpaTTeRN_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def Even_oDD_cOUnt(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        Even_oDD_cOUnt(-12) ==> (1, 1)\n        Even_oDD_cOUnt(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n"], ["def Int_to_MInI_Roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> Int_to_MInI_Roman(19) == 'xix'\n    >>> Int_to_MInI_Roman(152) == 'clii'\n    >>> Int_to_MInI_Roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    while number > 0:\n        if number >= 1000:\n            roman_numeral += 'm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'd'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'cd'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'c'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xc'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'l'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xl'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'x'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'v'\n            number -= 5\n        elif number >= 4:\n            roman_numeral += 'iv'\n            number -= 4\n        elif number >= 1:\n            roman_numeral += 'i'\n            number -= 1\n    return roman_numeral.lower()\n\n"], ["def Right_ANgLE_trianGle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    Right_ANgLE_trianGle(3, 4, 5) == True\n    Right_ANgLE_trianGle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def Find_mAX(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    Find_mAX([\"name\", \"of\", \"string\"]) == \"string\"\n    Find_mAX([\"name\", \"enam\", \"game\"]) == \"enam\"\n    Find_mAX([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in word:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\nFind_mAX([\"name\", \"of\", \"string\"]) == \"string\"\nFind_mAX([\"name\", \"enam\", \"game\"]) == \"enam\"\nFind_mAX([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\""], ["def Eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have Eaten a certain number of carrots,\n    but now you need to Eat more carrots to complete the day's meals.\n    you should return an array of [ total number of Eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will Eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * Eat(5, 6, 10) -> [11, 4]\n    * Eat(4, 8, 9) -> [12, 1]\n    * Eat(1, 10, 10) -> [11, 0]\n    * Eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have Eaten.\n    @need : integer\n        the number of carrots that you need to Eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Your code here\n    return [number + need, remaining - need]\n\n"], ["def Do_algEBrA(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def Solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    Solve(\"1234\") = \"4321\"\n    Solve(\"ab\") = \"AB\"\n    Solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Your code here\n    return s\n"], ["def StrinG_To_MD5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> StrinG_To_MD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"], ["def GenerATe_INtegerS(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    GenerATe_INtegerS(2, 8) => [2, 4, 6, 8]\n    GenerATe_INtegerS(8, 2) => [2, 4, 6, 8]\n    GenerATe_INtegerS(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def GenerATe_INtegerS(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    GenerATe_INtegerS(2, 8) => [2, 4, 6, 8]\n    GenerATe_INtegerS(8, 2) => [2, 4, 6, 8]\n    GenerATe_INtegerS(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef HAs_CLose_eLeMENTs(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> HAs_CLose_eLeMENTs([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> HAs_CLose_eLeMENTs([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n\n"], ["from typing import List\n\n\ndef SEpARate_pArEN_GRoups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> SEpARate_pArEN_GRoups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def TRuNCate_nUmBER(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> TRuNCate_nUmBER(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef BElOW_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> BElOW_zero([1, 2, 3])\n    False\n    >>> BElOW_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return False\n    return True\n\n"], ["from typing import List\n\n\ndef MEaN_AbsolUtE_DEViatiON(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> MEaN_AbsolUtE_DEViatiON([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef INtERsperSe(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> INtERsperSe([], 4)\n    []\n    >>> INtERsperSe([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] == delimeter:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef PArSE_nestEd_PAREns(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> PArSE_nestEd_PAREns('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef FIlTEr_by_sUbSTRIng(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> FIlTEr_by_sUbSTRIng([], 'a')\n    []\n    >>> FIlTEr_by_sUbSTRIng(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef SUm_PRoducT(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> SUm_PRoducT([])\n    (0, 1)\n    >>> SUm_PRoducT([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef ROlLIng_maX(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> ROlLIng_maX([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(result[i - 1], numbers[i]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef MAkE_PalinDrOME(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> MAkE_PalinDrOME('')\n    ''\n    >>> MAkE_PalinDrOME('cat')\n    'catac'\n    >>> MAkE_PalinDrOME('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef STrINg_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> STrINg_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef LOnGEst(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the LOnGEst one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> LOnGEst([])\n\n    >>> LOnGEst(['a', 'b', 'c'])\n    'a'\n    >>> LOnGEst(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def GReATest_cOmMON_DivisOR(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> GReATest_cOmMON_DivisOR(3, 5)\n    1\n    >>> GReATest_cOmMON_DivisOR(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return GReATest_cOmMON_DivisOR(b, a % b)\n\n"], ["from typing import List\n\n\ndef ALl_PRefixEs(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> ALl_PRefixEs('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def STrINg_seqUeNCE(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> STrINg_seqUeNCE(0)\n    '0'\n    >>> STrINg_seqUeNCE(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def COuNT_distInCT_CHaracTErs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> COuNT_distInCT_CHaracTErs('xyzXYZ')\n    3\n    >>> COuNT_distInCT_CHaracTErs('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef PArSE_musiC(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> PArSE_musiC('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def HOw_MAny_tiMeS(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> HOw_MAny_tiMeS('', 'a')\n    0\n    >>> HOw_MAny_tiMeS('aaa', 'a')\n    3\n    >>> HOw_MAny_tiMeS('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef SOrT_NumbeRs(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> SOrT_NumbeRs('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef FInD_CloseSt_ELEMents(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> FInD_CloseSt_ELEMents([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> FInD_CloseSt_ELEMents([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Write your code here\n    return None\n\n"], ["from typing import List\n\n\ndef REsCAle_to_UnIT(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> REsCAle_to_UnIT([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [number / max(numbers) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef FIlTEr_intEgERS(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> FIlTEr_intEgERS(['a', 3.14, 5])\n    [5]\n    >>> FIlTEr_intEgERS([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n\n"], ["def STrLEn(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> STrLEn('')\n    0\n    >>> STrLEn('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def LArGEst_diViSOR(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> LArGEst_diViSOR(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef FAcTOrize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> FAcTOrize(8)\n    [2, 2, 2]\n    >>> FAcTOrize(25)\n    [5, 5]\n    >>> FAcTOrize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef REmOVe_dupLiCATEs(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> REmOVe_dupLiCATEs([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def FLiP_Case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> FLiP_Case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef COnCAtenaTe(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> COnCAtenaTe([])\n    ''\n    >>> COnCAtenaTe(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef FIlTEr_by_pReFIX(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> FIlTEr_by_pReFIX([], 'a')\n    []\n    >>> FIlTEr_by_pReFIX(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def GEt_POsitiVe(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> GEt_POsitiVe([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> GEt_POsitiVe([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def IS_pRIme(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> IS_pRIme(6)\n    False\n    >>> IS_pRIme(101)\n    True\n    >>> IS_pRIme(11)\n    True\n    >>> IS_pRIme(13441)\n    True\n    >>> IS_pRIme(61)\n    True\n    >>> IS_pRIme(4)\n    False\n    >>> IS_pRIme(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef FInD_Zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    FInD_Zero find x such that poly(x) = 0.\n    FInD_Zero returns only only zero point, even if there are many.\n    Moreover, FInD_Zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(FInD_Zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(FInD_Zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def SOrT_Third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> SOrT_Third([1, 2, 3])\n    [1, 2, 3]\n    >>> SOrT_Third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def UNiQUe(l: list):\n    \"\"\"Return sorted UNiQUe elements in a list\n    >>> UNiQUe([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\n"], ["def MAx_ELemenT(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> MAx_ELemenT([1, 2, 3])\n    3\n    >>> MAx_ELemenT([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def FIzZ_Buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> FIzZ_Buzz(50)\n    0\n    >>> FIzZ_Buzz(78)\n    2\n    >>> FIzZ_Buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def SOrT_Even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> SOrT_Even([1, 2, 3])\n    [1, 2, 3]\n    >>> SOrT_Even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef DEcODe_cycLiC(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def PRiME_fib(n: int):\n    \"\"\"\n    PRiME_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> PRiME_fib(1)\n    2\n    >>> PRiME_fib(2)\n    3\n    >>> PRiME_fib(3)\n    5\n    >>> PRiME_fib(4)\n    13\n    >>> PRiME_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 2\n    else:\n        return PRiME_fib(n - 1) + PRiME_fib(n - 2)\n\n"], ["def TRiPLes_suM_tO_ZERo(l: list):\n    \"\"\"\n    TRiPLes_suM_tO_ZERo takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> TRiPLes_suM_tO_ZERo([1, 3, 5, 0])\n    False\n    >>> TRiPLes_suM_tO_ZERo([1, 3, -2, 1])\n    True\n    >>> TRiPLes_suM_tO_ZERo([1, 2, 3, 7])\n    False\n    >>> TRiPLes_suM_tO_ZERo([2, 4, -5, 3, 9, 7])\n    True\n    >>> TRiPLes_suM_tO_ZERo([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def CAr_RAce_coLlISIOn(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> CAr_RAce_coLlISIOn(1)\n0\n>>> CAr_RAce_coLlISIOn(2)\n0\n>>> CAr_RAce_coLlISIOn(3)\n0\n>>> CAr_RAce_coLlISIOn(4)\n0\n>>> CAr_RAce_coLlISIOn(5)\n0\n>>> CAr_RAce_coLlISIOn(6)\n0\n>>> CAr_RAce_coLlISIOn(7)\n0\n>>> CAr_RAce_coLlISIOn(8)\n0\n>>> CAr_RAce_coLlISIOn(9)\n0\n>>> CAr_RAce_coLlISIOn(10)\n0\n>>> CAr_RAce_coLlISIOn(11)\n0\n>>> CAr_RAce_coLlISIOn(12)\n0\n>>> CAr_RAce_coLlISIOn(13)\n0\n>>> CAr_RAce_coLlISIOn(14)\n0\n>>> CAr_RAce_coLlISIOn(15)\n0\n>>> CAr_RAce_coLlISIOn(16)\n0\n>>> CAr_RAce_coLlISIOn(17)\n0\n>>> CAr_RAce_coLlISIOn(18)\n0\n>>> CAr_RAce_coLlISIOn(19)\n0\n>>> CAr_RAce_coLlISIOn(20)\n0\n>>> CAr_RAce_coLlISIOn(21)\n0\n>>> CAr_RAce_coLlISIOn(22)\n0\n>>> CAr_RAce_coLlISIOn(23)\n0\n>>> CAr_RAce_coLlISIOn(24)\n0\n>>> CAr_RAce_coLlISIOn(25)\n0\n>>> CAr_RAce_coLlISIOn(26)\n0\n>>> CAr_RAce_coLlISIOn(27)\n0\n>>> CAr_RAce_coLlISIOn(28)\n0\n>>> CAr_RAce_coLlISIOn(29)\n0\n>>> CAr_RAce_coLlISIOn(30)\n0\n>>> CAr_RAce_coLlISIOn(31)\n0\n>>> CAr_RAce_coLlISIOn(32)\n0\n>>> CAr_RAce_coLlISIOn(33)\n0\n>>> CAr_RAce_coLlISIOn(34)\n0\n>>> CAr_RAce_coLlISIOn(35)\n0\n>>> CAr_RAce_coLlISIOn(36)\n0\n>>> CAr_RAce_coLlISIOn(37)\n0\n>>> CAr_RAce_coLlISIOn(38)\n0\n>>> CAr_RAce_coLlISIOn(39)\n0\n>>> CAr_RAce_coLlISIOn(40)\n0\n>>> CAr_RAce_coLlISIOn(41)\n0\n>>> CAr_RAce_coLlISIOn(42)\n0\n>>> CAr_RAce_coLlISIOn(43)\n0\n>>> CAr_RAce_coLlISIOn(44)\n0\n>>> CAr_RAce_coLlISIOn(45)\n0\n>>> CAr_RAce_coLlISIOn(46)\n0\n>>> CAr_RAce_coLlISIOn(47)"], ["def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\nAnswer: def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\nAnswer: def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\nAnswer: def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\nAnswer: def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\nAnswer: def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\nAnswer: def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n\n\nAnswer: def INcR_List(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> INcR_List([1, 2, 3])\n    [2, 3, 4]\n    >>> INcR_List([5, 3, 5, 2, 3, "], ["def PAiRS_sum_tO_zERO(l):\n    \"\"\"\n    PAiRS_sum_tO_zERO takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> PAiRS_sum_tO_zERO([1, 3, 5, 0])\n    False\n    >>> PAiRS_sum_tO_zERO([1, 3, -2, 1])\n    False\n    >>> PAiRS_sum_tO_zERO([1, 2, 3, 7])\n    False\n    >>> PAiRS_sum_tO_zERO([2, 4, -5, 3, 5, 7])\n    True\n    >>> PAiRS_sum_tO_zERO([1])\n    False\n    \"\"\"\n    # Write your code here\n    return True if len(set(l)) == 2 and sum(l) == 0 else False\n\n"], ["def CHaNGe_basE(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> CHaNGe_basE(8, 3)\n    '22'\n    >>> CHaNGe_basE(8, 2)\n    '1000'\n    >>> CHaNGe_basE(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"base must be between 2 and 10\")\n    if x < 0:\n        x = -x\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join(map(str, digits))\n\n"], ["def TRiANgle_aReA(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> TRiANgle_aReA(5, 3)\n    7.5\n    \"\"\"\n    return a * a * 0.5 * h\n"], ["def FIb4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    FIb4(0) -> 0\n    FIb4(1) -> 0\n    FIb4(2) -> 2\n    FIb4(3) -> 0\n    FIb4(n) -> FIb4(n-1) + FIb4(n-2) + FIb4(n-3) + FIb4(n-4).\n    Please write a function to efficiently compute the n-th element of the FIb4 number sequence.  Do not use recursion.\n    >>> FIb4(5)\n    4\n    >>> FIb4(6)\n    8\n    >>> FIb4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return FIb4(n - 1) + FIb4(n - 2) + FIb4(n - 3) + FIb4(n - 4)\n\n"], ["def MEdIAn(l: list):\n    \"\"\"Return MEdIAn of elements in the list l.\n    >>> MEdIAn([3, 1, 2, 4, 5])\n    3\n    >>> MEdIAn([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n"], ["def IS_pALindrOmE(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> IS_pALindrOmE('')\n    True\n    >>> IS_pALindrOmE('aba')\n    True\n    >>> IS_pALindrOmE('aaaaa')\n    True\n    >>> IS_pALindrOmE('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def MOdP(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> MOdP(3, 5)\n    3\n    >>> MOdP(1101, 101)\n    2\n    >>> MOdP(0, 101)\n    1\n    >>> MOdP(3, 11)\n    8\n    >>> MOdP(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return (n % p) * MOdP(n // p, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef DEcODe_shiFt(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def REmOVe_vowElS(text):\n    \"\"\"\n    REmOVe_vowElS is a function that takes string and returns string without vowels.\n    >>> REmOVe_vowElS('')\n    ''\n    >>> REmOVe_vowElS(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> REmOVe_vowElS('abcdef')\n    'bcdf'\n    >>> REmOVe_vowElS('aaaaa')\n    ''\n    >>> REmOVe_vowElS('aaBAA')\n    'B'\n    >>> REmOVe_vowElS('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def BElOW_threShOLD(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> BElOW_threShOLD([1, 2, 4, 10], 100)\n    True\n    >>> BElOW_threShOLD([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"], ["def ADd(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> ADd(2, 3)\n    5\n    >>> ADd(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def SAmE_Chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> SAmE_Chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> SAmE_Chars('abcd', 'dddddddabc')\n    True\n    >>> SAmE_Chars('dddddddabc', 'abcd')\n    True\n    >>> SAmE_Chars('eabcd', 'dddddddabc')\n    False\n    >>> SAmE_Chars('abcd', 'dddddddabce')\n    False\n    >>> SAmE_Chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def FIb(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> FIb(10)\n    55\n    >>> FIb(1)\n    1\n    >>> FIb(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return FIb(n - 1) + FIb(n - 2)\n\n"], ["def COrREct_brAcKETIng(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> COrREct_brAcKETIng(\"<\")\n    False\n    >>> COrREct_brAcKETIng(\"<>\")\n    True\n    >>> COrREct_brAcKETIng(\"<<><>>\")\n    True\n    >>> COrREct_brAcKETIng(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\nTest:\n>>> COrREct_brAcKETIng(\"<\")\nFalse\n>>> COrREct_brAcKETIng(\"<>\")\nTrue\n>>> COrREct_brAcKETIng(\"<<><>>\")\nTrue\n>>> COrREct_brAcKETIng(\"><<>\")\nFalse\n\"\"\"\n"], ["def MOnOTonic(l: list):\n    \"\"\"Return True is list elements are MOnOTonically increasing or decreasing.\n    >>> MOnOTonic([1, 2, 4, 20])\n    True\n    >>> MOnOTonic([1, 20, 4, 10])\n    False\n    >>> MOnOTonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i - 1]:\n            return True\n    return True\n\n"], ["def COmMOn(l1: list, l2: list):\n    \"\"\"Return sorted unique COmMOn elements for two lists.\n    >>> COmMOn([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> COmMOn([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            yield l1[i]\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n"], ["def LArGEst_prImE_FACtor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> LArGEst_prImE_FACtor(13195)\n    29\n    >>> LArGEst_prImE_FACtor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n\n\n"], ["def SUm_TO_n(n: int):\n    \"\"\"SUm_TO_n is a function that sums numbers from 1 to n.\n    >>> SUm_TO_n(30)\n    465\n    >>> SUm_TO_n(100)\n    5050\n    >>> SUm_TO_n(5)\n    15\n    >>> SUm_TO_n(10)\n    55\n    >>> SUm_TO_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def COrREct_brAcKETIng(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> COrREct_brAcKETIng(\"(\")\n    False\n    >>> COrREct_brAcKETIng(\"()\")\n    True\n    >>> COrREct_brAcKETIng(\"(()())\")\n    True\n    >>> COrREct_brAcKETIng(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n"], ["def DErIVativE(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return DErIVativE of this polynomial in the same form.\n    >>> DErIVativE([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> DErIVativE([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [sum(xs[i:j] * [i, j]) for i in range(len(xs)) for j in range(i + 1, len(xs) + 1)]\n\n"], ["def FIbFIb(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    FIbFIb(0) == 0\n    FIbFIb(1) == 0\n    FIbFIb(2) == 1\n    FIbFIb(n) == FIbFIb(n-1) + FIbFIb(n-2) + FIbFIb(n-3).\n    Please write a function to efficiently compute the n-th element of the FIbFIb number sequence.\n    >>> FIbFIb(1)\n    0\n    >>> FIbFIb(5)\n    4\n    >>> FIbFIb(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return FIbFIb(n-1) + FIbFIb(n-2) + FIbFIb(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef VOwELs_couNt(s):\n    \"\"\"Write a function VOwELs_couNt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> VOwELs_couNt(\"abcde\")\n    2\n    >>> VOwELs_couNt(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def CIrCUlar_sHiFT(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> CIrCUlar_sHiFT(12, 1)\n    \"21\"\n    >>> CIrCUlar_sHiFT(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n"], ["def DIgITSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        DIgITSum(\"\") => 0\n        DIgITSum(\"abAB\") => 131\n        DIgITSum(\"abcCd\") => 67\n        DIgITSum(\"helloE\") => 69\n        DIgITSum(\"woArBld\") => 131\n        DIgITSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def FRuIT_distRiBUTIon(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    FRuIT_distRiBUTIon(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    FRuIT_distRiBUTIon(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    FRuIT_distRiBUTIon(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    FRuIT_distRiBUTIon(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return s.count(\"mango\")\n"], ["def PLuCK(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to PLuCK one of the nodes and return it.\n    The PLuCKed node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The PLuCKed node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    if not arr:\n        return []\n    min_value = min(arr)\n    min_index = arr.index(min_value)\n    even_values = [x for x in arr if x % 2 == 0]\n    if len(even_values) == 0:\n        return []\n    return [min_value, min_index]\n\n"], ["def SEaRCh(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        SEaRCh([4, 1, 2, 2, 3, 1]) == 2\n        SEaRCh([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        SEaRCh([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\nExamples:\n    SEaRCh([4, 1, 2, 2, 3, 1]) == 2\n    SEaRCh([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    SEaRCh([5, 5, 4, 4, 4]) == -1"], ["def STrANge_soRt_LIST(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    STrANge_soRt_LIST([1, 2, 3, 4]) == [1, 4, 2, 3]\n    STrANge_soRt_LIST([5, 5, 5, 5]) == [5, 5, 5, 5]\n    STrANge_soRt_LIST([]) == []\n    '''\n    lst.sort()\n    return lst\n\nExamples:\nSTrANge_soRt_LIST([1, 2, 3, 4]) == [1, 4, 2, 3]\nSTrANge_soRt_LIST([5, 5, 5, 5]) == [5, 5, 5, 5]\nSTrANge_soRt_LIST([]) == []\n"], ["def TRiANgle_aReA(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    TRiANgle_aReA(3, 4, 5) == 6.00\n    TRiANgle_aReA(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(a * b * c / 2, 2)\n    else:\n        return -1\n\nExample:\nTRiANgle_aReA(3, 4, 5) == 6.00\nTRiANgle_aReA(1, 2, 10) == -1"], ["def WIlL_It_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    WIlL_It_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    WIlL_It_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    WIlL_It_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    WIlL_It_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_palindrome(q) else False\n"], ["def SMaLLest_cHaNGE(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    SMaLLest_cHaNGE([1,2,3,5,4,7,9,6]) == 4\n    SMaLLest_cHaNGE([1, 2, 3, 4, 3, 2, 2]) == 1\n    SMaLLest_cHaNGE([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    # arr = [1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 4, 3, 2, 1]\n    # arr = [1, 2, 3, 2, 1]\n    # arr = [1, 2, 3, 5, 4, 7, 9, 6]\n    # arr = [1, 2, 3, 4, 3, 2, 2, 1]\n    # arr = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 2]\n    # arr = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 2, 1]\n    # arr = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, "], ["def TOtAL_matcH(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    TOtAL_matcH([], []) \u279e []\n    TOtAL_matcH(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    TOtAL_matcH(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    TOtAL_matcH(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    TOtAL_matcH(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if len(x) > len(lst2)]\n\nTOtAL_matcH(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\nTOtAL_matcH(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\nTOtAL_matcH(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\nTOtAL_matcH(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def IS_mULtiplY_pRIME(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    IS_mULtiplY_pRIME(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nIS_mULtiplY_pRIME(30)\n\nIS_mULtiplY_pRIME(100)\n\nIS_mULtiplY_pRIME(101)\n\nIS_mULtiplY_pRIME(102)\n\nIS_mULtiplY_pRIME(103)\n\nIS_mULtiplY_pRIME(104)\n\nIS_mULtiplY_pRIME(105)\n\nIS_mULtiplY_pRIME(106)\n\nIS_mULtiplY_pRIME(107)\n\nIS_mULtiplY_pRIME(108)\n\nIS_mULtiplY_pRIME(109)\n\nIS_mULtiplY_pRIME(110)\n\nIS_mULtiplY_pRIME(111)\n\nIS_mULtiplY_pRIME(112)\n\nIS_mULtiplY_pRIME(113)\n\nIS_mULtiplY_pRIME(114)\n\nIS_mULtiplY_pRIME(115)\n\nIS_mULtiplY_pRIME(116)\n\nIS_mULtiplY_pRIME(117)\n\nIS_mULtiplY_pRIME(118)\n\nIS_mULtiplY_pRIME(119)\n\nIS_mULtiplY_pRIME(120)\n\nIS_mULtiplY_pRIME(121)\n\nIS_mULtiplY_pRIME(122)\n\nIS_mULtiplY_pRIME(123)\n\nIS_mULtiplY_pRIME(124)\n\nIS_mULtiplY_pRIME(125)\n\nIS_mULtiplY_pRIME(126)\n\nIS_mULtiplY_pRIME(127)\n\nIS_mULtiplY_pRIME(128)\n\nIS_mULtiplY_pRIME(129)\n\nIS_mULtiplY_pRIME(130)\n\nIS_mULtiplY_pRIME(131)\n\nIS_mULtiplY_pRIME(132)\n\nIS_mULtiplY_pRIME(133)\n\nIS_mULtiplY_pRIME(134)\n\nIS_mULtiplY_pRIME(135)\n\nIS_mULtiplY_pRIME(136)\n\nIS_mULtiplY_pRIME(137)\n\nIS_mULtiplY_pRIME(138)\n\nIS_mULtiplY_pRIME(139)\n\nIS_mULtiplY_pRIME(140)\n\nIS_mULtiplY_pRIME(141)\n\nIS_mULtiplY_pRIME(142)\n\nIS_mULtiplY_pRIME(143)\n\nIS_mULtiplY_pRIME(144)\n\nIS_mULtiplY_pRIME(145)\n\nIS_mULtiplY_pRIME(146)\n\nIS_mULtiplY_pRIME(147)\n\nIS_mULtiplY_pRIME(148)\n\nIS_mULtiplY"], ["def IS_sIMple_pOwER(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    IS_sIMple_pOwER(1, 4) => true\n    IS_sIMple_pOwER(2, 2) => true\n    IS_sIMple_pOwER(8, 2) => true\n    IS_sIMple_pOwER(3, 2) => false\n    IS_sIMple_pOwER(3, 1) => false\n    IS_sIMple_pOwER(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nSample Input:\n1\n2\n8\n3\n5\n\nSample Output:\nTrue\nTrue\nTrue\nFalse\nFalse\n"], ["def IScUBe(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    IScUBe(1) ==> True\n    IScUBe(2) ==> False\n    IScUBe(-1) ==> True\n    IScUBe(64) ==> True\n    IScUBe(0) ==> True\n    IScUBe(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return True\n    elif a % 2 == 0:\n        return False\n    elif a % 3 == 0:\n        return True\n    else:\n        return IScUBe(a//2) and IScUBe(a//3)\n"], ["def HEx_KEy(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n\nTest.assert_equals(HEx_KEy(\"AB\"), 1)\nTest.assert_equals(HEx_KEy(\"1077E\"), 2)\nTest.assert_equals(HEx_KEy(\"ABED1A33\"), 4)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(HEx_KEy(\"2020\"), 2)\nTest.assert_equals(HEx_KEy(\"\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEF\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFG\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJ\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJK\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKL\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLM\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMN\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNO\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOP\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQ\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQR\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQRS\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQRST\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQRSTU\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQRSTUV\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQRSTUVW\"), 0)\nTest.assert_equals(HEx_KEy(\"123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), 0)\nTest.assert_equals(HEx_KEy(\""], ["def DEcIMal_to_BiNARY(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    DEcIMal_to_BiNARY(15)   # returns \"db1111db\"\n    DEcIMal_to_BiNARY(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n"], ["def IS_hAPpy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    IS_hAPpy(a) => False\n    IS_hAPpy(aa) => False\n    IS_hAPpy(abcd) => True\n    IS_hAPpy(aabb) => False\n    IS_hAPpy(adb) => True\n    IS_hAPpy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n\nSample Input:\n\naabb\n\nSample Output:\n\nTrue\n\nExplanation:\n\nThe string is happy because its length is at least 3 and every 3 consecutive letters are distinct.\n\n\"\"\""], ["def NUmERical_LeTTER_gradE(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return\n\ngrades = [4.0, 3, 1.7, 2, 3.5]\n"], ["def PRiME_lengTh(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    PRiME_lengTh('Hello') == True\n    PRiME_lengTh('abcdcba') == True\n    PRiME_lengTh('kittens') == True\n    PRiME_lengTh('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def STaRTs_one_EnDS(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def SOlVE(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\nTest.describe('Test for SOlVE function')\nTest.assert_equals(SOlVE(1000), 1)\nTest.assert_equals(SOlVE(150), 110)\nTest.assert_equals(SOlVE(147), 1100)\nTest.assert_equals(SOlVE(10000), 10000)\nTest.assert_equals(SOlVE(10001), 10001)\nTest.assert_equals(SOlVE(100000), 100000)\nTest.assert_equals(SOlVE(100001), 100001)\nTest.assert_equals(SOlVE(1000000), 1000000)\nTest.assert_equals(SOlVE(1000001), 1000001)\nTest.assert_equals(SOlVE(10000000), 10000000)\nTest.assert_equals(SOlVE(10000001), 10000001)\nTest.assert_equals(SOlVE(100000000), 100000000)\nTest.assert_equals(SOlVE(100000001), 100000001)\nTest.assert_equals(SOlVE(1000000000), 1000000000)\nTest.assert_equals(SOlVE(1000000001), 1000000001)\nTest.assert_equals(SOlVE(10000000000), 10000000000)\nTest.assert_equals(SOlVE(10000000001), 10000000001)\nTest.assert_equals(SOlVE(100000000000), 100000000000)\nTest.assert_equals(SOlVE(100000000001), 100000000001)\nTest.assert_equals(SOlVE(1000000000000), 1000000000000)\nTest.assert_equals(SOlVE(1000000000001), 1000000000001)\nTest.assert_equals(SOlVE(10000000000000), 10000000000000)\nTest.assert_equals(SOlVE(10000000000001), 10000000000001)\nTest.assert_equals(SOlVE(100000000000000), 100000000000000)\nTest.assert_equals(SOlVE(100000000000001), 100000000000001)\nTest.assert_equals(SOlVE(1000000000000000), 1000"], ["def ADd(lst):\n    \"\"\"Given a non-empty list of integers lst. ADd the even elements that are at odd indices..\n\n\n    Examples:\n        ADd([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    ADd([4, 2, 6, 7]) ==> 2\n    ADd([1, 2, 3, 4, 5]) ==> 15\n    ADd([1, 3, 5, 7, 9]) ==> 25\n    ADd([2, 4, 6, 8, 10]) ==> 30\n    ADd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> 55\n    ADd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==> 85\n    ADd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) ==> 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["def ANtI_ShuffLe(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    ANtI_ShuffLe('Hi') returns 'Hi'\n    ANtI_ShuffLe('hello') returns 'ehllo'\n    ANtI_ShuffLe('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n\nANtI_ShuffLe('Hello World!!!')\n"], ["def GEt_ROw(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    GEt_ROw([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    GEt_ROw([], 1) == []\n    GEt_ROw([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    lst = sorted(lst, key=lambda x: x[0])\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i], key=lambda x: x[1], reverse=True)\n    return lst\n\nExamples:\nGEt_ROw([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nGEt_ROw([], 1) == []\nGEt_ROw([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def SOrT_Array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * SOrT_Array([]) => []\n    * SOrT_Array([5]) => [5]\n    * SOrT_Array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * SOrT_Array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    return array\n"], ["def ENcRYpt(s):\n    \"\"\"Create a function ENcRYpt that takes a string as an argument and\n    returns a string ENcRYpted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    ENcRYpt('hi') returns 'lm'\n    ENcRYpt('asdfghjkl') returns 'ewhjklnop'\n    ENcRYpt('gf') returns 'kj'\n    ENcRYpt('et') returns 'ix'\n    \"\"\"\n    # TODO: Write your code here\n    return s\n"], ["def NExT_SmallEsT(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function NExT_SmallEsT() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    NExT_SmallEsT([1, 2, 3, 4, 5]) == 2\n    NExT_SmallEsT([5, 1, 4, 3, 2]) == 2\n    NExT_SmallEsT([]) == None\n    NExT_SmallEsT([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n\nNExT_SmallEsT([1, 2, 3, 4, 5]) == 2\nNExT_SmallEsT([5, 1, 4, 3, 2]) == 2\nNExT_SmallEsT([]) == None\nNExT_SmallEsT([1, 1]) == None"], ["def IS_bORed(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> IS_bORed(\"Hello world\")\n    0\n    >>> IS_bORed(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count(\"I\")\n"], ["def ANy_INt(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    ANy_INt(5, 2, 7) \u279e True\n    \n    ANy_INt(3, 2, 2) \u279e False\n\n    ANy_INt(3, -2, 1) \u279e True\n    \n    ANy_INt(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return False\n\n\nANy_INt(3, 2, 2) \u279e True\n\nANy_INt(3, -2, 1) \u279e True\n\nANy_INt(3.6, -2.2, 2) \u279e False"], ["def ENcODe(message):\n    \"\"\"\n    Write a function that takes a message, and ENcODes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> ENcODe('test')\n    'TGST'\n    >>> ENcODe('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> ENcODe('test')\n'TGST'\n>>> ENcODe('This is a message')\n'tHKS KS C MGSSCGG'"], ["def SKjKAsdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 2"], ["def CHeCK_dict_CaSE(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    CHeCK_dict_CaSE({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    CHeCK_dict_CaSE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    CHeCK_dict_CaSE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    CHeCK_dict_CaSE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    CHeCK_dict_CaSE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\nExamples:\nCHeCK_dict_CaSE({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\nCHeCK_dict_CaSE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\nCHeCK_dict_CaSE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\nCHeCK_dict_CaSE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\nCHeCK_dict_CaSE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True."], ["def COuNT_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    COuNT_up_to(5) => [2,3]\n    COuNT_up_to(11) => [2,3,5,7]\n    COuNT_up_to(0) => []\n    COuNT_up_to(20) => [2,3,5,7,11,13,17,19]\n    COuNT_up_to(1) => []\n    COuNT_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function min()\n    # Hint: Use the built-in function max()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function min()\n    # Hint: Use the built-in function max()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function min()\n    # Hint: Use the built-in function max()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built-in function set()\n    # Hint: Use the built-in function min()\n    # Hint: Use the built-in function max()\n    # Hint: Use the built-in function range()\n    # Hint: Use the built-in function len()\n    # Hint: Use the built-in function all()\n    # Hint: Use the built-in function any()\n    # Hint: Use the built-in function sum()\n    # Hint: Use the built-in function filter()\n    # Hint: Use the built-in function map()\n    # Hint: Use the built-in function zip()\n    # Hint: Use the built-in function enumerate()\n    # Hint: Use the built-in function reversed()\n    # Hint: Use the built-in function sorted()\n    # Hint: Use the built"], ["def MUlTIply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    MUlTIply(148, 412) should return 16.\n    MUlTIply(19, 28) should return 72.\n    MUlTIply(2020, 1851) should return 0.\n    MUlTIply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nExamples:\n\nMULTIply(148, 412) should return 16\nMULTIply(19, 28) should return 72\nMULTIply(2020, 1851) should return 0\nMULTIply(14,-15) should return 20"], ["def COuNT_uppeR(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    COuNT_uppeR('aBCdEf') returns 1\n    COuNT_uppeR('abcdefg') returns 0\n    COuNT_uppeR('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n"], ["def CLoSEst_inTeGER(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> CLoSEst_inTeGER(\"10\")\n    10\n    >>> CLoSEst_inTeGER(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example CLoSEst_inTeGER(\"14.5\") should\n    return 15 and CLoSEst_inTeGER(\"-14.5\") should return -15.\n    '''\n    return int(round(value))\n\nExamples\n>>> CLoSEst_inTeGER(\"10\")\n10\n>>> CLoSEst_inTeGER(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example CLoSEst_inTeGER(\"14.5\") should\nreturn 15 and CLoSEst_inTeGER(\"-14.5\") should return -15.\n'''\n"], ["def MAkE_A_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> MAkE_A_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(1, n):\n        pile.append(pile[i-1] + (i % 2))\n    return pile\n\n\nExamples:\n>>> MAkE_A_pile(3)\n[3, 5, 7]\n>>> MAkE_A_pile(4)\n[4, 6, 8]\n>>> MAkE_A_pile(5)\n[5, 9, 15]\n>>> MAkE_A_pile(6)\n[6, 12, 20]\n>>> MAkE_A_pile(7)\n[7, 14, 24]\n>>> MAkE_A_pile(8)\n[8, 16, 28]\n>>> MAkE_A_pile(9)\n[9, 18, 36]\n>>> MAkE_A_pile(10)\n[10, 20, 40]\n>>> MAkE_A_pile(11)\n[11, 22, 44]\n>>> MAkE_A_pile(12)\n[12, 24, 48]\n>>> MAkE_A_pile(13)\n[13, 26, 52]\n>>> MAkE_A_pile(14)\n[14, 28, 56]\n>>> MAkE_A_pile(15)\n[15, 30, 60]\n>>> MAkE_A_pile(16)\n[16, 32, 64]\n>>> MAkE_A_pile(17)\n[17, 34, 68]\n>>> MAkE_A_pile(18)\n[18, 36, 72]\n>>> MAkE_A_pile(19)\n[19, 38, 76]\n>>> MAkE_A_pile(20)\n[20, 40, 80]\n>>> MAkE_A_pile(21)\n[21, 42, 84]\n>>> MAkE_A_pile(22)\n[22, 44, 88]\n>>> MAkE_A_pile(23)\n[23, 46, 92]\n>>> MAkE_A_pile(24)\n[24, 48, 96]\n>>> MAkE_A_pile(25)\n[25, 50, 100]\n>>> MAkE_A_pile(26)\n[26, 52, 104]\n>>> MAkE_A_pile(27)\n[27, 54, 108]\n>>> MAkE_A_pile(28)\n[28, 56, 112]\n>>> MAkE_A_pile(29)\n[29, 58, 116]\n>>> MAkE_A_pile(30)\n[30, 60, 120]\n>>> MAkE_A_pile(31)\n[31, 62, 124]\n>>> MAkE_A_pile(32)\n[32, 64, 128]\n>>> MAkE_A_pile(33)\n[33, 66, 132]\n>>>"], ["def WOrDS_striNg(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    WOrDS_striNg(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    WOrDS_striNg(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert WOrDS_striNg(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert WOrDS_striNg(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert WOrDS_striNg(\"Hi, my name is John, and I live in the USA\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\"]\nassert WOrDS_striNg(\"Hi, my name is John, and I live in the USA, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert WOrDS_striNg(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert WOrDS_striNg(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert WOrDS_striNg(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play hockey\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"hockey\"]\nassert WOrDS_striNg(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play hockey, and I like to play baseball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"USA\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"hockey\", \"and\", \"I\", \"like\", \"to\", \"play\", \"baseball\"]\nassert WOrDS_striNg(\"Hi, my name is John, and I live in the USA, and I like to play soccer, and I like to play football, and I like to play volleyball, and I"], ["def CHoOSe_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    CHoOSe_num(12, 15) = 14\n    CHoOSe_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nCHoOSe_num(12, 15) = 14\nCHoOSe_num(13, 12) = -1\nCHoOSe_num(1, 10) = 2\nCHoOSe_num(1, 100) = 100\nCHoOSe_num(1, 1000) = 1000\nCHoOSe_num(1, 10000) = 10000\nCHoOSe_num(1, 100000) = 100000\nCHoOSe_num(1, 1000000) = 1000000\nCHoOSe_num(1, 10000000) = 10000000\nCHoOSe_num(1, 100000000) = 100000000\nCHoOSe_num(1, 1000000000) = 1000000000\nCHoOSe_num(1, 10000000000) = 10000000000\nCHoOSe_num(1, 100000000000) = 100000000000\nCHoOSe_num(1, 1000000000000) = 1000000000000\nCHoOSe_num(1, 10000000000000) = 10000000000000\nCHoOSe_num(1, 100000000000000) = 100000000000000\nCHoOSe_num(1, 1000000000000000) = 1000000000000000\nCHoOSe_num(1, 10000000000000000) = 10000000000000000\nCHoOSe_num(1, 100000000000000000) = 100000000000000000\nCHoOSe_num(1, 1000000000000000000) = 1000000000000000000\nCHoOSe_num(1, 10000000000000000000) = 10000000000000000000\nCHoOSe_num(1, 100000000000000000000) = 100000000000000000000\nCHoOSe_num(1, 1000000000000000000000) = 1000000000000000000000\nCHoOSe_num(1, 10000000000000000000000) = 10000000000000000000000"], ["def ROuNDed_avG(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    ROuNDed_avG(1, 5) => \"0b11\"\n    ROuNDed_avG(7, 5) => -1\n    ROuNDed_avG(10, 20) => \"0b1111\"\n    ROuNDed_avG(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\n>>> ROuNDed_avG(1, 5)\n'0b11'\n>>> ROuNDed_avG(7, 5)\n-1\n>>> ROuNDed_avG(10, 20)\n'0b1111'\n>>> ROuNDed_avG(20, 33)\n'0b11010'\n"], ["def UNiQUe_digItS(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> UNiQUe_digItS([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> UNiQUe_digItS([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\nTest:\n>>> UNiQUe_digItS([15, 33, 1422, 1])\n[1, 15, 33]\n>>> UNiQUe_digItS([152, 323, 1422, 10])\n[]\n>>> UNiQUe_digItS([152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UNiQUe_digItS([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UNiQUe_digItS([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UNiQUe_digItS([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UNiQUe_digItS([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10])\n[1, 10, 15, 152, 323]\n>>> UNiQUe_digItS([152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, 1422, 10, 152, 323, "], ["def BY_lENgth(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]"], ["deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n    or the sum oF numbers From 1 to i otherwise.\n    i starts From 1.\n    the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n    Example:\n    F(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return [1]\n    else:\n        return [n] + F(n - 1)\n\n\nAnswer: deF F(n):\n    \"\"\" Implement the Function F that takes n as a parameter,\n    and returns a list oF size n, such that the value oF the element at"], ["def EVeN_Odd_paLiNDROme(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i == int(str(i)[::-1]):\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n"], ["def COuNT_nums(arr):\n    \"\"\"\n    Write a function COuNT_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> COuNT_nums([]) == 0\n    >>> COuNT_nums([-1, 11, -11]) == 1\n    >>> COuNT_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i < 0:\n            count += 1\n        else:\n            count += sum(int(j) for j in str(i)) > 0\n    return count\n\n"], ["def MOvE_One_baLl(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    MOvE_One_baLl([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    MOvE_One_baLl([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def EXcHAnge(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an EXcHAnge of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of EXcHAnged elements between lst1 and lst2.\n    If it is possible to EXcHAnge elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    EXcHAnge([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    EXcHAnge([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nEXcHAnge([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"NO\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"YES\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"NO\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"YES\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"NO\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"YES\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"NO\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"YES\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => \"NO\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => \"YES\"\nEXcHAnge([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => \"NO\"\nEXcHAnge([1, 2, 3, 4], [1, "], ["def HIsTOgram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    HIsTOgram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    HIsTOgram('a b b a') == {'a': 2, 'b': 2}\n    HIsTOgram('a b c a b') == {'a': 2, 'b': 2}\n    HIsTOgram('b b b b a') == {'b': 4}\n    HIsTOgram('') == {}\n\n    \"\"\"\n    # TODO: Write your code here\n    return {}\n"], ["def REvERse_deLeTE(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    s = list(s)\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    if s == c:\n        return (s, True)\n    else:\n        return (s, False)\n\ns = input(\"Enter the string: \")\nc = input(\"Enter the character: \")"], ["def ODd_COunt(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> ODd_COunt(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> ODd_COunt(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n"], ["def MInsUbArrAysUM(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    MInsUbArrAysUM([2, 3, 4, 1, 2, 4]) == 1\n    MInsUbArrAysUM([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\n\nAnswer: def MInsUbArrAysUM(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    MInsUbArrAysUM([2, 3, 4, 1, 2, 4]) == 1\n    MInsUbArrAysUM([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1) if len(nums[i:j]) > 0)\n"], ["def MAx_FIll(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of wells\n    wells = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    bucket_capacity = capacity\n    # Initialize the number of wells\n    wells = rows * columns\n    # Initialize the number of buckets\n    buckets = wells\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Loop through the rows\n    for row in range(rows):\n        # Loop through the columns\n        for column in range(columns):\n            # If the bucket is empty\n            if grid[row][column] == 0:\n                # If the bucket is full\n                if buckets == 0:\n                    # Increment the number of times you need to lower the buckets\n                    times += 1\n                # Else, decrement the number of buckets\n                else:\n                    # Decrement the number of buckets\n                    buckets -= 1\n                # Increment the number of wells\n                wells -= 1\n    # Return the number of times you need to lower the buckets\n    return times\n"], ["def SOrT_Array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> SOrT_Array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> SOrT_Array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> SOrT_Array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def SElECt_worDs(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    SElECt_worDs(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    SElECt_worDs(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    SElECt_worDs(\"simple white space\", 2) ==> []\n    SElECt_worDs(\"Hello world\", 4) ==> [\"world\"]\n    SElECt_worDs(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\n>>> SElECt_worDs(\"Mary had a little lamb\", 4)\n['little']\n>>> SElECt_worDs(\"Mary had a little lamb\", 3)\n['Mary', 'lamb']\n>>> SElECt_worDs(\"simple white space\", 2)\n[]\n>>> SElECt_worDs(\"Hello world\", 4)\n['world']\n>>> SElECt_worDs(\"Uncle sam\", 3)\n['Uncle']\n\"\"\""], ["def GEt_CLosesT_vOWEL(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    GEt_CLosesT_vOWEL(\"yogurt\") ==> \"u\"\n    GEt_CLosesT_vOWEL(\"FULL\") ==> \"U\"\n    GEt_CLosesT_vOWEL(\"quick\") ==> \"\"\n    GEt_CLosesT_vOWEL(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\n\nGEt_CLosesT_vOWEL(\"yogurt\") ==> \"u\"\nGEt_CLosesT_vOWEL(\"FULL\") ==> \"U\"\nGEt_CLosesT_vOWEL(\"quick\") ==> \"\"\nGEt_CLosesT_vOWEL(\"ab\") ==> \"\"\n\nNote:\n\nThe length of the word will be in the range [1, 10,000].\nThe word will only consist of English letters (uppercase and lowercase).\n\n\"\"\"\n"], ["def MAtCH_pareNs(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    MAtCH_pareNs(['()(', ')']) == 'Yes'\n    MAtCH_pareNs([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nMAtCH_pareNs(['()(', ')']) == 'Yes'\nMAtCH_pareNs([')', ')']) == 'No'\nMAtCH_pareNs(['(', ')']) == 'No'\nMAtCH_pareNs(['(', '(', ')']) == 'No'\nMAtCH_pareNs(['(', '(', '(', ')']) == 'No'\nMAtCH_pareNs(['(', '(', '(', '(', ')']) == 'No'\nMAtCH_pareNs(['(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\nMAtCH_pareNs(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',"], ["def MAxIMum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the MAxIMum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return arr[-k:]\n\n"], ["def SOlUTion(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    SOlUTion([5, 8, 7, 1]) ==> 12\n    SOlUTion([3, 3, 3, 3, 3]) ==> 9\n    SOlUTion([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1 and x % 2 == 0)\n\nSOlUTion([5, 8, 7, 1])\nSOlUTion([3, 3, 3, 3, 3])\nSOlUTion([30, 13, 24, 321])"], ["def ADd_ELemenTs(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n\n\nTest Cases:\n    Test.describe('Test 1')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 4), 24)\n\n    Test.describe('Test 2')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 5), 24)\n\n    Test.describe('Test 3')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 6), 24)\n\n    Test.describe('Test 4')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 7), 24)\n\n    Test.describe('Test 5')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 8), 24)\n\n    Test.describe('Test 6')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 9), 24)\n\n    Test.describe('Test 7')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 10), 24)\n\n    Test.describe('Test 8')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 11), 24)\n\n    Test.describe('Test 9')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 12), 24)\n\n    Test.describe('Test 10')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 13), 24)\n\n    Test.describe('Test 11')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 14), 24)\n\n    Test.describe('Test 12')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 15), 24)\n\n    Test.describe('Test 13')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 16), 24)\n\n    Test.describe('Test 14')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 17), 24)\n\n    Test.describe('Test 15')\n    Test.assert_equals(ADd_ELemenTs([111,21,3,4000,5,6,7,8,9], 18),"], ["def GEt_ODd_colLaTZ(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    GEt_ODd_colLaTZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return [n] + GEt_ODd_colLaTZ(3*n + 1)\n"], ["def VAlID_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    VAlID_date('03-11-2000') => True\n\n    VAlID_date('15-01-2012') => False\n\n    VAlID_date('04-0-2040') => False\n\n    VAlID_date('06-04-2020') => True\n\n    VAlID_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\nVAlID_date('03-11-2000')\nVAlID_date('15-01-2012')\nVAlID_date('04-0-2040')\nVAlID_date('06-04-2020')\nVAlID_date('06/04/2020')"], ["def SPlIT_wordS(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    SPlIT_wordS(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    SPlIT_wordS(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    SPlIT_wordS(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nSPlIT_wordS(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nSPlIT_wordS(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nSPlIT_wordS(\"abcdef\") == 3"], ["def IS_sORted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    IS_sORted([5]) \u279e True\n    IS_sORted([1, 2, 3, 4, 5]) \u279e True\n    IS_sORted([1, 3, 2, 4, 5]) \u279e False\n    IS_sORted([1, 2, 3, 4, 5, 6]) \u279e True\n    IS_sORted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    IS_sORted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    IS_sORted([1, 2, 2, 3, 3, 4]) \u279e True\n    IS_sORted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n"], ["def INtERsectIoN(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of INtERsectIoN of these two \n    intervals is a prime number.\n    Example, the INtERsectIoN of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the INtERsectIoN is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    INtERsectIoN((1, 2), (2, 3)) ==> \"NO\"\n    INtERsectIoN((-1, 1), (0, 4)) ==> \"NO\"\n    INtERsectIoN((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"NO\"\n"], ["def PRoD_Signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> PRoD_Signs([1, 2, 2, -4]) == -9\n    >>> PRoD_Signs([0, 1]) == 0\n    >>> PRoD_Signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(arr) * reduce(lambda x, y: x * y, [1 if x < 0 else -1 for x in arr])\n\n"], ["def MInpAth(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTestcase:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 2\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 4\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 5\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 6\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 7\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 8\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 9\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 10\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nInput: grid = [ [1,2,3], [4,5,6"], ["def TRi(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    TRi(1) = 3\n    TRi(n) = 1 + n / 2, if n is even.\n    TRi(n) =  TRi(n - 1) + TRi(n - 2) + TRi(n + 1), if n is odd.\n    For example:\n    TRi(2) = 1 + (2 / 2) = 2\n    TRi(4) = 3\n    TRi(3) = TRi(2) + TRi(1) + TRi(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    TRi(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\nTRi(3) = [1, 3, 2, 8]\nTRi(4) = [1, 3, 2, 8, 10]\nTRi(5) = [1, 3, 2, 8, 10, 5]\nTRi(6) = [1, 3, 2, 8, 10, 5, 16]\nTRi(7) = [1, 3, 2, 8, 10, 5, 16, 49]\nTRi(8) = [1, 3, 2, 8, 10, 5, 16, 49, 49]\nTRi(9) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89]\nTRi(10) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89, 144]\nTRi(11) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89, 144, 233]\nTRi(12) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89, 144, 233, 377]\nTRi(13) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89, 144, 233, 377, 832]\nTRi(14) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89, 144, 233, 377, 832, 1597]\nTRi(15) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89, 144, 233, 377, 832, 1597, 2875]\nTRi(16) = [1, 3, 2, 8, 10, 5, 16, 49, 49, 89, 144, 233, 377, 832, 1597, 2875, 62049]\nTRi(17) = [1, 3, 2, 8, 10, 5, 16, 49, 4"], ["def DIgITs(n):\n    \"\"\"Given a positive integer n, return the product of the odd DIgITs.\n    Return 0 if all DIgITs are even.\n    For example:\n    DIgITs(1)  == 1\n    DIgITs(4)  == 0\n    DIgITs(235) == 15\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        return n * DIgITs(n - 1)\n"], ["def IS_nESted(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    IS_nESted('[[]]') \u279e True\n    IS_nESted('[]]]]]]][[[[[]') \u279e False\n    IS_nESted('[][]') \u279e False\n    IS_nESted('[]') \u279e False\n    IS_nESted('[[][]]') \u279e True\n    IS_nESted('[[]][[') \u279e True\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid_parentheses(string):\n    '''\n    Create a function that takes a string as input which contains only parentheses.\n    The function should return True if and only if the string is a valid parentheses.\n\n    is_valid_parentheses('()') \u279e True\n    is_valid_parentheses('(())') \u279e True\n    is_valid_parentheses('()()') \u279e True\n    is_valid_parentheses('(())()') \u279e True\n    is_valid_parentheses('()(()') \u279e False\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif string[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid_parentheses(string):\n    '''\n    Create a function that takes a string as input which contains only parentheses.\n    The function should return True if and only if the string is a valid parentheses.\n\n    is_valid_parentheses('()') \u279e True\n    is_valid_parentheses('(())') \u279e True\n    is_valid_parentheses('()()') \u279e True\n    is_valid_parentheses('(())()') \u279e True\n    is_valid_parentheses('()(()') \u279e False\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif string[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid_parentheses(string):\n    '''\n    Create a function that takes a string as input which contains only parentheses.\n    The function should return True if and only if the string is a valid parentheses.\n\n    is_valid_parentheses('()') \u279e True\n    is_valid_parentheses('(())') \u279e True\n    is_valid_parentheses('()()') \u279e True\n    is_valid_parentheses('(())()') \u279e True\n    is_valid_parentheses('()(()') \u279e False\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif string[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid_parentheses(string):\n    '''\n    Create a function that takes a string as input which contains only parentheses.\n    The function should return True if and only if the string is a valid parentheses.\n\n    is_valid_parentheses('()') \u279e True\n    is_valid_parentheses('(())') \u279e True\n    is_valid_parentheses('()()') \u279e True\n    is_valid_parentheses('(())()') \u279e True\n    is_valid_parentheses('()(()') \u279e False\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif string[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid_parentheses(string):\n    '''\n    Create a function that takes"], ["def SUm_SQuareS(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(map(lambda x: int(ceil(x)), map(lambda x: x**2, lst)))\n"], ["def CHeCK_if_laSt_CHAR_is_a_lETter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    CHeCK_if_laSt_CHAR_is_a_lETter(\"apple pie\") \u279e False\n    CHeCK_if_laSt_CHAR_is_a_lETter(\"apple pi e\") \u279e True\n    CHeCK_if_laSt_CHAR_is_a_lETter(\"apple pi e \") \u279e False\n    CHeCK_if_laSt_CHAR_is_a_lETter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and not txt[-1].isalpha() in txt.split()\n\nCHeCK_if_laSt_CHAR_is_a_lETter(\"apple pie\") \u279e False\nCHeCK_if_laSt_CHAR_is_a_lETter(\"apple pi e\") \u279e True\nCHeCK_if_laSt_CHAR_is_a_lETter(\"apple pi e \") \u279e False\nCHeCK_if_laSt_CHAR_is_a_lETter(\"\") \u279e False"], ["def CAn_ARrangE(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    CAn_ARrangE([1,2,4,3,5]) = 3\n    CAn_ARrangE([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    return max(range(len(arr)), key=lambda i: arr[i] if i == 0 or arr[i] >= arr[i-1] else -1)\n\nExamples:\nCAn_ARrangE([1,2,4,3,5]) = 3\nCAn_ARrangE([1,2,3]) = -1\n\"\"\"\n"], ["def LArGEst_smAlLEST_inteGErs(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    LArGEst_smAlLEST_inteGErs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    LArGEst_smAlLEST_inteGErs([]) == (None, None)\n    LArGEst_smAlLEST_inteGErs([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nLArGEst_smAlLEST_inteGErs([2, 4, 1, 3, 5, 7]) == (None, 1)\nLArGEst_smAlLEST_inteGErs([]) == (None, None)\nLArGEst_smAlLEST_inteGErs([0]) == (None, None)"], ["def COmPAre_onE(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    COmPAre_onE(1, 2.5) \u279e 2.5\n    COmPAre_onE(1, \"2,3\") \u279e \"2,3\"\n    COmPAre_onE(\"5,1\", \"6\") \u279e \"6\"\n    COmPAre_onE(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str and type(b) == str:\n        return a if a > b else b\n    elif type(a) == str and type(b) == float:\n        return a if a > b else b\n    elif type(a) == float and type(b) == str:\n        return a if a > b else b\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    else:\n        return None\n\n\nCOmPAre_onE(1, 2.5) \u279e 2.5\nCOmPAre_onE(1, \"2,3\") \u279e \"2,3\"\nCOmPAre_onE(\"5,1\", \"6\") \u279e \"6\"\nCOmPAre_onE(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both floats, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both floats, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function returns None.\n\nIf a and b are both strings, the function returns None.\n\nIf a and b are both floats, the function"], ["def IS_eQUal_to_SuM_EVEn(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    IS_eQUal_to_SuM_EVEn(4) == False\n    IS_eQUal_to_SuM_EVEn(6) == False\n    IS_eQUal_to_SuM_EVEn(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n\nAnswer: def IS_eQUal_to_SuM_EVEn(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    IS_eQUal_to_SuM_EVEn(4) == False\n    IS_eQUal_to_SuM_EVEn(6) == False\n    IS_eQUal_to_SuM_EVEn(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n\nAnswer: def IS_eQUal_to_SuM_EVEn(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    IS_eQUal_to_SuM_EVEn(4) == False\n    IS_eQUal_to_SuM_EVEn(6) == False\n    IS_eQUal_to_SuM_EVEn(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n\nAnswer: def IS_eQUal_to_SuM_EVEn(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    IS_eQUal_to_SuM_EVEn(4) == False\n    IS_eQUal_to_SuM_EVEn(6) == False\n    IS_eQUal_to_SuM_EVEn(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n\nAnswer: def IS_eQUal_to_SuM_EVEn(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    IS_eQUal_to_SuM_EVEn(4) == False\n    IS_eQUal_to_SuM_EVEn(6) == False\n    IS_eQUal_to_SuM_EVEn(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n\nAnswer: def IS_eQUal_to_SuM_EVEn(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    IS_eQUal_to_SuM_EVEn(4) == False\n    IS_eQUal_to_SuM_EVEn(6) == False\n    IS_eQUal_to_SuM_EVEn(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i % 2 == 0:\n                return False\n        return True\n\n\nAnswer: def IS_eQUal_to_SuM_EVEn(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    IS_eQUal_to_SuM_EVEn(4) == False\n    IS_eQUal_to_SuM_EVEn(6) == False\n    IS_eQUal_to_SuM_EVEn(8) == True\n   "], ["def SPeCIal_faCtORIAl(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> SPeCIal_faCtORIAl(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Your code here\n    return 1\n"], ["def FIx_SPaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    FIx_SPaces(\"Example\") == \"Example\"\n    FIx_SPaces(\"Example 1\") == \"Example_1\"\n    FIx_SPaces(\" Example 2\") == \"_Example_2\"\n    FIx_SPaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n"], ["def FIlE_Name_cHeCK(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    FIlE_Name_cHeCK(\"example.txt\") # => 'Yes'\n    FIlE_Name_cHeCK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    pass\n\nTest cases:\n\nFilE_Name_cHeCK(\"example.txt\") # => 'Yes'\nFilE_Name_cHeCK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nFilE_Name_cHeCK(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nFilE_Name_cHeCK(\"1example.exe.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt\") # => 'Yes' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.exe\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.exe\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.exe\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.exe\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll.exe\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll.dll.exe\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll.dll.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll.dll.dll.exe\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file extension should be one of the allowed ones)\nFilE_Name_cHeCK(\"1example.exe.txt.dll.dll.dll.dll.dll.dll."], ["def SUm_SQuareS(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i]**2\n        elif i % 3 != 0 and i % 4 == 0:\n            sum += lst[i]**3\n    return sum\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126"], ["def WOrDS_in_seNtENCE(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def SImPLify(x, n):\n    \"\"\"Your task is to implement a function that will SImPLify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    SImPLify(\"1/5\", \"5/1\") = True\n    SImPLify(\"1/6\", \"2/1\") = False\n    SImPLify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\n\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify(\"1/2\", \"2/1\") == True\nassert SImPLify(\"1/3\", \"3/1\") == True\nassert SImPLify(\"1/4\", \"4/1\") == True\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify(\"1/2\", \"2/1\") == True\nassert SImPLify(\"1/3\", \"3/1\") == True\nassert SImPLify(\"1/4\", \"4/1\") == True\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify(\"1/2\", \"2/1\") == True\nassert SImPLify(\"1/3\", \"3/1\") == True\nassert SImPLify(\"1/4\", \"4/1\") == True\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify(\"1/2\", \"2/1\") == True\nassert SImPLify(\"1/3\", \"3/1\") == True\nassert SImPLify(\"1/4\", \"4/1\") == True\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify(\"1/2\", \"2/1\") == True\nassert SImPLify(\"1/3\", \"3/1\") == True\nassert SImPLify(\"1/4\", \"4/1\") == True\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify(\"1/2\", \"2/1\") == True\nassert SImPLify(\"1/3\", \"3/1\") == True\nassert SImPLify(\"1/4\", \"4/1\") == True\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify(\"1/2\", \"2/1\") == True\nassert SImPLify(\"1/3\", \"3/1\") == True\nassert SImPLify(\"1/4\", \"4/1\") == True\nassert SImPLify(\"1/5\", \"5/1\") == True\nassert SImPLify(\"1/6\", \"2/1\") == False\nassert SImPLify(\"7/10\", \"10/2\") == False\nassert SImPLify"], ["def ORdER_by_poInTS(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> ORdER_by_poInTS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> ORdER_by_poInTS([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def SPeCIalFiLtER(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    SPeCIalFiLtER([15, -73, 14, -15]) => 1 \n    SPeCIalFiLtER([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 100) % 2 == 1 and (num % 100) % 2 == 1:\n            count += 1\n    return count\n\nExample:\n\nnums = [15, -73, 14, -15]"], ["def GEt_MAx_triPlES(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\n\"\"\"\n"], ["def BF(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    BF(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    BF(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    BF(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nBF(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nBF(\"Earth\", \"Mercury\") ==> (\"Venus\")\nBF(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def SOrTEd_lisT_sUM(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n\n\nTest:\nassert SOrTEd_lisT_sUM([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert SOrTEd_lisT_sUM([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert SOrTEd_lisT_sUM([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert SOrTEd_lisT_sUM([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert SOrTEd_lisT_sUM([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \""], ["def X_Or_Y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for X_Or_Y(7, 34, 12) == 34\n    for X_Or_Y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def DOuBLe_the_DiFFERence(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    DOuBLe_the_DiFFERence([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    DOuBLe_the_DiFFERence([-1, -2, 0]) == 0\n    DOuBLe_the_DiFFERence([9, -2]) == 81\n    DOuBLe_the_DiFFERence([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x%2 != 0)\n\nDOuBLe_the_DiFFERence([1, 3, 2, 0])\nDOuBLe_the_DiFFERence([-1, -2, 0])\nDOuBLe_the_DiFFERence([9, -2])\nDOuBLe_the_DiFFERence([0])"], ["def COmPAre(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    COmPAre([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    COmPAre([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Write your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\nCOmPAre([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\nCOmPAre([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"], ["def sTrONgest_exTENSion(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for sTrONgest_exTENSion('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return None\n"], ["def CYcPAtterN_cHECK(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    CYcPAtterN_cHECK(\"abcd\",\"abd\") => False\n    CYcPAtterN_cHECK(\"hello\",\"ell\") => True\n    CYcPAtterN_cHECK(\"whassup\",\"psus\") => False\n    CYcPAtterN_cHECK(\"abab\",\"baa\") => True\n    CYcPAtterN_cHECK(\"efef\",\"eeff\") => False\n    CYcPAtterN_cHECK(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def EVeN_Odd_coUnT(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        EVeN_Odd_coUnT(-12) ==> (1, 1)\n        EVeN_Odd_coUnT(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n"], ["def INt_TO_mini_RoMAN(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> INt_TO_mini_RoMAN(19) == 'xix'\n    >>> INt_TO_mini_RoMAN(152) == 'clii'\n    >>> INt_TO_mini_RoMAN(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def RIgHT_anglE_tRIANgle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    RIgHT_anglE_tRIANgle(3, 4, 5) == True\n    RIgHT_anglE_tRIANgle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def FInD_Max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    FInD_Max([\"name\", \"of\", \"string\"]) == \"string\"\n    FInD_Max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    FInD_Max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest.assert_equals(FInD_Max([\"name\", \"of\", \"string\"]), \"string\")\nTest.assert_equals(FInD_Max([\"name\", \"enam\", \"game\"]), \"enam\")\nTest.assert_equals(FInD_Max([\"aaaaaaa\", \"bb\" ,\"cc\"]), \"\")aaaaaaa\"\nTest.assert_equals(FInD_Max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]), \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["def EAt(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have EAten a certain number of carrots,\n    but now you need to EAt more carrots to complete the day's meals.\n    you should return an array of [ total number of EAten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will EAt all remaining carrots, but will still be hungry.\n    \n    Example:\n    * EAt(5, 6, 10) -> [11, 4]\n    * EAt(4, 8, 9) -> [12, 1]\n    * EAt(1, 10, 10) -> [11, 0]\n    * EAt(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have EAten.\n    @need : integer\n        the number of carrots that you need to EAt.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> EAt(5, 6, 10)\n[11, 4]\n>>> EAt(4, 8, 9)\n[12, 1]\n>>> EAt(1, 10, 10)\n[11, 0]\n>>> EAt(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def DO_aLGebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = DO_aLGebra(operator, operand)"], ["def SOlVE(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    SOlVE(\"1234\") = \"4321\"\n    SOlVE(\"ab\") = \"AB\"\n    SOlVE(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    if s == []:\n        return s\n    else:\n        return \"\".join(s)\n"], ["def STrINg_to_mD5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> STrINg_to_mD5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def GEnERate_iNtEGERs(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    GEnERate_iNtEGERs(2, 8) => [2, 4, 6, 8]\n    GEnERate_iNtEGERs(8, 2) => [2, 4, 6, 8]\n    GEnERate_iNtEGERs(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef had_closest_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> had_closest_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> had_closest_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_group(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_group('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zeros(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zeros([1, 2, 3])\n    False\n    >>> below_zeros([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef meaner_absolutes_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meaner_absolutes_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nest_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nest_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_products(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_products([])\n    (0, 1)\n    >>> sum_products([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef made_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> made_palindrome('')\n    ''\n    >>> made_palindrome('cat')\n    'catac'\n    >>> made_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longer(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longer one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longer([])\n\n    >>> longer(['a', 'b', 'c'])\n    'a'\n    >>> longer(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def greater_common_divisors(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greater_common_divisors(3, 5)\n    1\n    >>> greater_common_divisors(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greater_common_divisors(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequences(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequences(0)\n    '0'\n    >>> string_sequences(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distincter_character(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distincter_character('xyzXYZ')\n    3\n    >>> count_distincter_character('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_time(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_time('', 'a')\n    0\n    >>> how_many_time('aaa', 'a')\n    3\n    >>> how_many_time('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sorts_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sorts_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef found_closer_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> found_closer_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> found_closer_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_units(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_units([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def larger_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> larger_divisors(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorizes(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorizes(8)\n    [2, 2, 2]\n    >>> factorizes(25)\n    [5, 5]\n    >>> factorizes(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicate(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicate([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flips_cases(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flips_cases('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def gotten_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> gotten_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> gotten_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef finds_zeros(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    finds_zeros find x such that poly(x) = 0.\n    finds_zeros returns only only zero point, even if there are many.\n    Moreover, finds_zeros only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(finds_zeros([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(finds_zeros([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        return 0\n    return -poly(xs, largest_coeff) / largest_coeff\n\n"], ["def sorts_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sorts_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sorts_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_elements(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_elements([1, 2, 3])\n    3\n    >>> max_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzzes(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzzes(50)\n    0\n    >>> fizz_buzzes(78)\n    2\n    >>> fizz_buzzes(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sorts_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sorts_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sorts_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fibs(n: int):\n    \"\"\"\n    prime_fibs returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fibs(1)\n    2\n    >>> prime_fibs(2)\n    3\n    >>> prime_fibs(3)\n    5\n    >>> prime_fibs(4)\n    13\n    >>> prime_fibs(5)\n    89\n    \"\"\"\n    fibs = [1, 1]\n    for i in range(2, n):\n        fibs.append(fibs[i - 1] + fibs[i - 2])\n    return fibs[n - 1]\n\n"], ["def triples_summing_to_zeroed(l: list):\n    \"\"\"\n    triples_summing_to_zeroed takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_summing_to_zeroed([1, 3, 5, 0])\n    False\n    >>> triples_summing_to_zeroed([1, 3, -2, 1])\n    True\n    >>> triples_summing_to_zeroed([1, 2, 3, 7])\n    False\n    >>> triples_summing_to_zeroed([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_summing_to_zeroed([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def cars_races_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncars_races_collision(1) == 0\ncars_races_collision(2) == 0\ncars_races_collision(3) == 0\ncars_races_collision(4) == 0\ncars_races_collision(5) == 0\ncars_races_collision(6) == 0\ncars_races_collision(7) == 0\ncars_races_collision(8) == 0\ncars_races_collision(9) == 0\ncars_races_collision(10) == 0\ncars_races_collision(11) == 0\ncars_races_collision(12) == 0\ncars_races_collision(13) == 0\ncars_races_collision(14) == 0\ncars_races_collision(15) == 0\ncars_races_collision(16) == 0\ncars_races_collision(17) == 0\ncars_races_collision(18) == 0\ncars_races_collision(19) == 0\ncars_races_collision(20) == 0\ncars_races_collision(21) == 0\ncars_races_collision(22) == 0\ncars_races_collision(23) == 0\ncars_races_collision(24) == 0\ncars_races_collision(25) == 0\ncars_races_collision(26) == 0\ncars_races_collision(27) == 0\ncars_races_collision(28) == 0\ncars_races_collision(29) == 0\ncars_races_collision(30) == 0\ncars_races_collision(31) == 0\ncars_races_collision(32) == 0\ncars_races_collision(33) == 0\ncars_races_collision(34) == 0\ncars_races_collision(35) == 0\ncars_races_collision(36) == 0\ncars_races_collision(37) == 0\ncars_races_collision(38) == 0\ncars_races_collision(39) == 0\ncars_races_collision(40) == 0\ncars_races_collision(41) == 0\ncars_races_collision(42) == 0\ncars_races_collision(43) == 0\ncars_races_collision(44) == 0\ncars_races_collision(45) == 0\ncars_races_collision(46) == 0\ncars_races_collision(47) == 0\ncars_races_collision(48) == 0\ncars_races_collision(49) == 0\ncars_races_collision(50) == 0\ncars_races_collision(51) == 0\ncars_races_collision(52) == 0\ncars_races_collision(53) == 0\ncars_races_collision(54) == 0\ncars_races_collision(55) == 0\ncars_races_collision(56) == 0\ncars_races_collision(57) == 0\ncars_races_collision(58) == 0\ncars_races_collision(59) == 0\ncars_races_collision(60) == 0\ncars_races_collision("], ["def incr_lists(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_lists([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_lists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pair_sums_to_zero(l):\n    \"\"\"\n    pair_sums_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pair_sums_to_zero([1, 3, 5, 0])\n    False\n    >>> pair_sums_to_zero([1, 3, -2, 1])\n    False\n    >>> pair_sums_to_zero([1, 2, 3, 7])\n    False\n    >>> pair_sums_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pair_sums_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def change_bases(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_bases(8, 3)\n    '22'\n    >>> change_bases(8, 2)\n    '1000'\n    >>> change_bases(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return change_bases(x // base, base) + str(x % base)\n\n"], ["def triangles_areas(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangles_areas(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n\nIf you want to test your function, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6."], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowel(text):\n    \"\"\"\n    remove_vowel is a function that takes string and returns string without vowels.\n    >>> remove_vowel('')\n    ''\n    >>> remove_vowel(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowel('abcdef')\n    'bcdf'\n    >>> remove_vowel('aaaaa')\n    ''\n    >>> remove_vowel('aaBAA')\n    'B'\n    >>> remove_vowel('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def below_thresholds(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_thresholds([1, 2, 4, 10], 100)\n    True\n    >>> below_thresholds([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def adding(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> adding(2, 3)\n    5\n    >>> adding(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_char(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_char('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_char('abcd', 'dddddddabc')\n    True\n    >>> same_char('dddddddabc', 'abcd')\n    True\n    >>> same_char('eabcd', 'dddddddabc')\n    False\n    >>> same_char('abcd', 'dddddddabce')\n    False\n    >>> same_char('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fibs(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fibs(10)\n    55\n    >>> fibs(1)\n    1\n    >>> fibs(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibs(n - 1) + fibs(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def larger_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> larger_prime_factor(13195)\n    29\n    >>> larger_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sums_to_n(n: int):\n    \"\"\"sums_to_n is a function that sums numbers from 1 to n.\n    >>> sums_to_n(30)\n    465\n    >>> sums_to_n(100)\n    5050\n    >>> sums_to_n(5)\n    15\n    >>> sums_to_n(10)\n    55\n    >>> sums_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowel_count(s):\n    \"\"\"Write a function vowel_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowel_count(\"abcde\")\n    2\n    >>> vowel_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSums(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSums(\"\") => 0\n        digitSums(\"abAB\") => 131\n        digitSums(\"abcCd\") => 67\n        digitSums(\"helloE\") => 69\n        digitSums(\"woArBld\") => 131\n        digitSums(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def stranger_sorts_lists(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    stranger_sorts_lists([1, 2, 3, 4]) == [1, 4, 2, 3]\n    stranger_sorts_lists([5, 5, 5, 5]) == [5, 5, 5, 5]\n    stranger_sorts_lists([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + [min_val] + stranger_sorts_lists([x for x in lst if x != max_val and x != min_val])\n\n\nExamples:\nstranger_sorts_lists([1, 2, 3, 4]) == [1, 4, 2, 3]\nstranger_sorts_lists([5, 5, 5, 5]) == [5, 5, 5, 5]\nstranger_sorts_lists([]) == []\n"], ["def triangles_areas(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangles_areas(3, 4, 5) == 6.00\n    triangles_areas(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) / 2\n"], ["def will_it_flied(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_flied([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_flied([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_flied([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_flied([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smaller_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smaller_change([1,2,3,5,4,7,9,6]) == 4\n    smaller_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smaller_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\nsmaller_change([1,2,3,5,4,7,9,6]) == 4\nsmaller_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmaller_change([1, 2, 3, 2, 1]) == 0\nsmaller_change([1, 2, 3, 2, 1, 2, 3, 2, 1]) == 1\nsmaller_change([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, "], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_prime(30)\n\nis_multiply_prime(100)\n\nis_multiply_prime(1000)\n\nis_multiply_prime(10000)\n\nis_multiply_prime(100000)\n\nis_multiply_prime(1000000)\n\nis_multiply_prime(10000000)\n\nis_multiply_prime(100000000)\n\nis_multiply_prime(1000000000)\n\nis_multiply_prime(10000000000)\n\nis_multiply_prime(100000000000)\n\nis_multiply_prime(1000000000000)\n\nis_multiply_prime(10000000000000)\n\nis_multiply_prime(100000000000000)\n\nis_multiply_prime(1000000000000000)\n\nis_multiply_prime(10000000000000000)\n\nis_multiply_prime(100000000000000000)\n\nis_multiply_prime(1000000000000000000)\n\nis_multiply_prime(10000000000000000000)\n\nis_multiply_prime(100000000000000000000)\n\nis_multiply_prime(1000000000000000000000)\n\nis_multiply_prime(10000000000000000000000)\n\nis_multiply_prime(100000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000000000000000)\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hexes_keys(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n\nInput:\n\nOutput:\n\nExpected:"], ["def decimals_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimals_to_binary(15)   # returns \"db1111db\"\n    decimals_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n"], ["def is_happiest(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happiest(a) => False\n    is_happiest(aa) => False\n    is_happiest(abcd) => True\n    is_happiest(aabb) => False\n    is_happiest(adb) => True\n    is_happiest(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def start_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def adding(lst):\n    \"\"\"Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n    Examples:\n        adding([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n"], ["def antis_shuffles(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antis_shuffles('Hi') returns 'Hi'\n    antis_shuffles('hello') returns 'ehllo'\n    antis_shuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n\nantis_shuffles('Hello World!!!')\n"], ["def get_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_rows([], 1) == []\n    get_rows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_rows([], 1) == []\nget_rows([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sorts_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sorts_array([]) => []\n    * sorts_array([5]) => [5]\n    * sorts_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sorts_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    return array\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bore(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bore(\"Hello world\")\n    0\n    >>> is_bore(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_cases(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_cases({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_cases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_cases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_cases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_cases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closer_integers(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closer_integers(\"10\")\n    10\n    >>> closer_integers(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closer_integers(\"14.5\") should\n    return 15 and closer_integers(\"-14.5\") should return -15.\n    '''\n    # Your code here\n    return 0\n\n\nTest:\n>>> closer_integers(\"10\")\n10\n>>> closer_integers(\"15.3\")\n15\n>>> closer_integers(\"14.5\")\n15\n>>> closer_integers(\"-14.5\")\n-15\n>>> closer_integers(\"14.4\")\n14\n>>> closer_integers(\"-14.4\")\n-14\n>>> closer_integers(\"14.6\")\n15\n>>> closer_integers(\"-14.6\")\n-15\n>>> closer_integers(\"14.7\")\n15\n>>> closer_integers(\"-14.7\")\n-15\n>>> closer_integers(\"14.8\")\n15\n>>> closer_integers(\"-14.8\")\n-15\n>>> closer_integers(\"14.9\")\n15\n>>> closer_integers(\"-14.9\")\n-15\n>>> closer_integers(\"14.10\")\n15\n>>> closer_integers(\"-14.10\")\n-15\n>>> closer_integers(\"14.11\")\n15\n>>> closer_integers(\"-14.11\")\n-15\n>>> closer_integers(\"14.12\")\n15\n>>> closer_integers(\"-14.12\")\n-15\n>>> closer_integers(\"14.13\")\n15\n>>> closer_integers(\"-14.13\")\n-15\n>>> closer_integers(\"14.14\")\n15\n>>> closer_integers(\"-14.14\")\n-15\n>>> closer_integers(\"14.15\")\n15\n>>> closer_integers(\"-14.15\")\n-15\n>>> closer_integers(\"14.16\")\n15\n>>> closer_integers(\"-14.16\")\n-15\n>>> closer_integers(\"14.17\")\n15\n>>> closer_integers(\"-14.17\")\n-15\n>>> closer_integers(\"14.18\")\n15\n>>> closer_integers(\"-14.18\")\n-15\n>>> closer_integers(\"14.19\")\n15\n>>> closer_integers(\"-14.19\")\n-15\n>>> closer_integers(\"14.20\")\n15\n>>> closer_integers(\"-14.20\")\n-15\n>>> closer_integers(\"14.21\")\n15\n>>> closer_integers(\"-14.21\")\n-15\n>>> closer_integers(\"14.22\")\n15\n>>> closer_integers(\"-14.22\")\n-15\n>>> closer_integers(\"14.23\")\n15\n>>> closer_integers(\"-14.23\")\n-15\n>>> closer_integers(\"14.24\")\n15\n>>> closer_integers(\"-14.24\")\n-15\n>>> closer_integers(\"14.25\")\n15\n>>> closer_integers(\"-14.25\")\n-15\n>>> closer_integers(\"14.26\")\n15\n>>> closer_integers(\"-14.26\")\n-15\n>>> closer_integers(\"14.27\")\n15\n>>> closer_integers(\"-14.27\")\n-15\n>>> closer_integers(\"14.28\")\n15\n>>> closer_integers(\"-14.28\")"], ["def made_a_piles(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> made_a_piles(3)\n    [3, 5, 7]\n    \"\"\"\n    # Your code here\n    return [n]\n\n\nExamples:\n>>> made_a_piles(3)\n[3, 5, 7]\n>>> made_a_piles(4)\n[4, 6, 8]\n>>> made_a_piles(5)\n[5, 9, 11]\n>>> made_a_piles(6)\n[6, 12, 14]\n>>> made_a_piles(7)\n[7, 15, 19]\n>>> made_a_piles(8)\n[8, 16, 22]\n>>> made_a_piles(9)\n[9, 18, 27]\n>>> made_a_piles(10)\n[10, 20, 30]\n>>> made_a_piles(11)\n[11, 22, 33]\n>>> made_a_piles(12)\n[12, 24, 36]\n>>> made_a_piles(13)\n[13, 26, 39]\n>>> made_a_piles(14)\n[14, 28, 42]\n>>> made_a_piles(15)\n[15, 30, 45]\n>>> made_a_piles(16)\n[16, 32, 50]\n>>> made_a_piles(17)\n[17, 34, 53]\n>>> made_a_piles(18)\n[18, 36, 56]\n>>> made_a_piles(19)\n[19, 38, 59]\n>>> made_a_piles(20)\n[20, 40, 62]\n>>> made_a_piles(21)\n[21, 42, 65]\n>>> made_a_piles(22)\n[22, 44, 68]\n>>> made_a_piles(23)\n[23, 46, 71]\n>>> made_a_piles(24)\n[24, 48, 74]\n>>> made_a_piles(25)\n[25, 50, 77]\n>>> made_a_piles(26)\n[26, 52, 80]\n>>> made_a_piles(27)\n[27, 54, 83]\n>>> made_a_piles(28)\n[28, 56, 86]\n>>> made_a_piles(29)\n[29, 58, 89]\n>>> made_a_piles(30)\n[30, 60, 92]\n>>> made_a_piles(31)\n[31, 62, 95]\n>>> made_a_piles(32)\n[32, 64, 98]\n>>> made_a_piles(33)\n[33, 66, 101]\n>>> made_a_piles(34)\n[34, 68, 104]\n>>> made_a_piles(35)\n[35, 70, 107]\n>>> made_a_piles(36)\n[36, 72, 110]\n>>> made_a_piles(37)\n[37, 74, 113]"], ["def word_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    word_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    word_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\n>>> word_string(\"Hi, my name is John\")\n['Hi', 'my', 'name', 'is', 'John']\n>>> word_string(\"One, two, three, four, five, six\")\n['One', 'two', 'three', 'four', 'five', 'six']\n>>> word_string(\"Hi, my name is John, and I live in the city of San Francisco\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco']\n>>> word_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer']\n>>> word_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football']\n>>> word_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football', 'and', 'I', 'like', 'to', 'play', 'volleyball']\n>>> word_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football', 'and', 'I', 'like', 'to', 'play', 'volleyball', 'and', 'I', 'like', 'to', 'play', 'badminton']\n>>> word_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\")\n['Hi', 'my', 'name', 'is', 'John', 'and', 'I', 'live', 'in', 'the', 'city', 'of', 'San', 'Francisco', 'and', 'I', 'like', 'to', 'play', 'soccer', 'and', 'I', 'like', 'to', 'play', 'football', 'and', 'I', 'like', 'to', 'play', 'volleyball', 'and', 'I', 'like', 'to', 'play', 'badminton', 'and', 'I', 'like', 'to', 'play', 'ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounding_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounding_avg(1, 5) => \"0b11\"\n    rounding_avg(7, 5) => -1\n    rounding_avg(10, 20) => \"0b1111\"\n    rounding_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\n>>> rounding_avg(1, 5)\n'0b11'\n>>> rounding_avg(7, 5)\n-1\n>>> rounding_avg(10, 20)\n'0b1111'\n>>> rounding_avg(20, 33)\n'0b11010'\n"], ["def unique_digit(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digit([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digit([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digit([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digit([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odder_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def moving_one_balls(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    moving_one_balls([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moving_one_balls([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchanges(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchanges of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchangesd elements between lst1 and lst2.\n    If it is possible to exchanges elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n'YES'\n>>> exchanges([1, 2, 3, 4], [1, 5, 3, 4])\n'NO'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5])\n'YES'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n'NO'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n'YES'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n'NO'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n'YES'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n'NO'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n'YES'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n'NO'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n'YES'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n'NO'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n'YES'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n'NO'\n>>> exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, "], ["def histograms(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histograms('a b b a') == {'a': 2, 'b': 2}\n    histograms('a b c a b') == {'a': 2, 'b': 2}\n    histograms('b b b b a') == {'b': 4}\n    histograms('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverses_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s, True\n"], ["def odder_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odder_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odder_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [f\"the number of odd elements {len(str(i))}n the str{len(str(i))} of the {len(str(i))}nput.\"]\n\nTest:\n>>> odder_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odder_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\n"], ["def minSubsArraySums(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n    minSubsArraySums([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sum = 0\n            for k in range(i, j):\n                sum += nums[k]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n\n\nAnswer: def minSubsArraySums(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n    minSubsArraySums([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sum = 0\n            for k in range(i, j):\n                sum += nums[k]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sorts_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sorts_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sorts_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sorts_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_word(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_word(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_word(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_word(\"simple white space\", 2) ==> []\n    select_word(\"Hello world\", 4) ==> [\"world\"]\n    select_word(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_word(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_word(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_word(\"simple white space\", 2) ==> []\nselect_word(\"Hello world\", 4) ==> [\"world\"]\nselect_word(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def gotten_closer_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    gotten_closer_vowel(\"yogurt\") ==> \"u\"\n    gotten_closer_vowel(\"FULL\") ==> \"U\"\n    gotten_closer_vowel(\"quick\") ==> \"\"\n    gotten_closer_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ngotten_closer_vowel(\"yogurt\") ==> \"u\"\ngotten_closer_vowel(\"FULL\") ==> \"U\"\ngotten_closer_vowel(\"quick\") ==> \"\"\ngotten_closer_vowel(\"ab\") ==> \"\"\n\nNote:\nThe length of the word is at most 100.\nThe word contains only English letters."], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximums(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximums k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 16), [5, 4, 3, 2"], ["def solutions(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solutions([5, 8, 7, 1]) ==> 12\n    solutions([3, 3, 3, 3, 3]) ==> 9\n    solutions([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1 and x % 2 == 0)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def gotten_odder_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    gotten_odder_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return [n] + gotten_odder_collatz(collatz(n))\n"], ["def valid_dates(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_dates('03-11-2000') => True\n\n    valid_dates('15-01-2012') => False\n\n    valid_dates('04-0-2040') => False\n\n    valid_dates('06-04-2020') => True\n\n    valid_dates('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_dates('03-11-2000')\nvalid_dates('15-01-2012')\nvalid_dates('04-0-2040')\nvalid_dates('06-04-2020')\nvalid_dates('06/04/2020')"], ["def split_word(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_word(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nsplit_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_word(\"abcdef\") == 3"], ["def is_sort(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sort([5]) \u279e True\n    is_sort([1, 2, 3, 4, 5]) \u279e True\n    is_sort([1, 3, 2, 4, 5]) \u279e False\n    is_sort([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sort([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sort([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sort([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sort([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prods_sign(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prods_sign([1, 2, 2, -4]) == -9\n    >>> prods_sign([0, 1]) == 0\n    >>> prods_sign([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prods_sign([1, 2, 2, -4])\n-9\n>>> prods_sign([0, 1])\n0\n>>> prods_sign([])\nNone\n"], ["def minPaths(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 3), [1, 2, 1])\n    Test.assert_equals(minPaths([[5,9,3], [4,1,6], [7,8,2]], 1), [1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 1), [1, 2, 3])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 2), [1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 4), [1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 5), [1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 6), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 7), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 8), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 9), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digit(n):\n    \"\"\"Given a positive integer n, return the product of the odd digit.\n    Return 0 if all digit are even.\n    For example:\n    digit(1)  == 1\n    digit(4)  == 0\n    digit(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 * digit(n // 10)\n"], ["def is_nest(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nest('[[]]') \u279e True\n    is_nest('[]]]]]]][[[[[]') \u279e False\n    is_nest('[][]') \u279e False\n    is_nest('[]') \u279e False\n    is_nest('[[][]]') \u279e True\n    is_nest('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n"], ["def sums_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_chars_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_chars_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_chars_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_chars_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_chars_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n"], ["def can_arranging(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arranging([1,2,4,3,5]) = 3\n    can_arranging([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n\n\nExamples:\ncan_arranging([1,2,4,3,5]) = 3\ncan_arranging([1,2,3]) = -1\n\"\"\"\n"], ["def larger_smaller_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    larger_smaller_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    larger_smaller_integers([]) == (None, None)\n    larger_smaller_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nTest:\n>>> larger_smaller_integers([2, 4, 1, 3, 5, 7])\n(None, 1)\n>>> larger_smaller_integers([])\n(None, None)\n>>> larger_smaller_integers([0])\n(None, None)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6])\n(1, 6)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7])\n(1, 7)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8])\n(1, 8)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n(1, 9)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n(1, 10)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n(1, 11)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n(1, 12)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n(1, 13)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n(1, 14)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n(1, 15)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n(1, 16)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n(1, 17)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n(1, 18)\n>>> larger_smaller_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n(1, 19"], ["def comparing_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    comparing_one(1, 2.5) \u279e 2.5\n    comparing_one(1, \"2,3\") \u279e \"2,3\"\n    comparing_one(\"5,1\", \"6\") \u279e \"6\"\n    comparing_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncomparing_one(1, 2.5) \u279e 2.5\ncomparing_one(1, \"2,3\") \u279e \"2,3\"\ncomparing_one(\"5,1\", \"6\") \u279e \"6\"\ncomparing_one(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two.\n\nIf a and b are both floats, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two"], ["def is_equal_to_summing_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_summing_even(4) == False\n    is_equal_to_summing_even(6) == False\n    is_equal_to_summing_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fixes_space(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fixes_space(\"Example\") == \"Example\"\n    fixes_space(\"Example 1\") == \"Example_1\"\n    fixes_space(\" Example 2\") == \"_Example_2\"\n    fixes_space(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n"], ["def files_names_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    files_names_check(\"example.txt\") # => 'Yes'\n    files_names_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\nfiles_names_check(\"example.txt\") # => 'Yes'\nfiles_names_check(\"1example.dll\") # => 'No'\nfiles_names_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfiles_names_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfiles_names_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfiles_names_check(\"1example.dll.txt\") # => 'Yes' (the file's extension should be one of the allowed ones)\nfiles_names_check(\"1example.dll.exe.txt\") # => 'Yes' (the file's extension should be one of the allowed ones)"], ["def sums_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum([x**2 if (i % 3 == 0) else x**3 for i, x in enumerate(lst)])\n\n\nExample:\n\nlst = [1,2,3]"], ["def word_in_sentences(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.assert_equals(word_in_sentences(\"This is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"lets go for swimming\"), \"go for\")\n    Test.assert_equals(word_in_sentences(\"this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_point(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_point([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_point([]) == []\n    \"\"\"\n    # Your code here\n    return nums\n\nTest:\n>>> order_by_point([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_point([]) == []\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -1"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def gotten_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sort_lists_sums(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Your code here\n    return sorted(lst, key=lambda x: len(x))\n\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) =="], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odder_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odder_count(-12) ==> (1, 1)\n        even_odder_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_triangles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangles(3, 4, 5) == True\n    right_angle_triangles(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def found_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    found_max([\"name\", \"of\", \"string\"]) == \"string\"\n    found_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    found_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef had_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> had_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> had_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_numbers(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_numbers(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zeroes(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zeroes([1, 2, 3])\n    False\n    >>> below_zeroes([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef meanest_absolutes_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanest_absolutes_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nesting_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nesting_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filters_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filters_by_substring([], 'a')\n    []\n    >>> filters_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_products(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_products([])\n    (0, 1)\n    >>> sum_products([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef makes_palindromes(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makes_palindromes('')\n    ''\n    >>> makes_palindromes('cat')\n    'catac'\n    >>> makes_palindromes('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef strung_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> strung_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longer(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longer one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longer([])\n\n    >>> longer(['a', 'b', 'c'])\n    'a'\n    >>> longer(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def greatest_commoner_divisors(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_commoner_divisors(3, 5)\n    1\n    >>> greatest_commoner_divisors(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_commoner_divisors(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def strung_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> strung_sequence(0)\n    '0'\n    >>> strung_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinctest_character(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinctest_character('xyzXYZ')\n    3\n    >>> count_distinctest_character('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_time(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_time('', 'a')\n    0\n    >>> how_many_time('aaa', 'a')\n    3\n    >>> how_many_time('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef finds_closer_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> finds_closer_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> finds_closer_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filters_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filters_integers(['a', 3.14, 5])\n    [5]\n    >>> filters_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def larger_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> larger_divisors(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorizes(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorizes(8)\n    [2, 2, 2]\n    >>> factorizes(25)\n    [5, 5]\n    >>> factorizes(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef removing_duplicate(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removing_duplicate([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filters_by_prefixes(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filters_by_prefixes([], 'a')\n    []\n    >>> filters_by_prefixes(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def gotten_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> gotten_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> gotten_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def was_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> was_prime(6)\n    False\n    >>> was_prime(101)\n    True\n    >>> was_prime(11)\n    True\n    >>> was_prime(13441)\n    True\n    >>> was_prime(61)\n    True\n    >>> was_prime(4)\n    False\n    >>> was_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zeroes(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zeroes find x such that poly(x) = 0.\n    find_zeroes returns only only zero point, even if there are many.\n    Moreover, find_zeroes only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zeroes([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zeroes([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_elements(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_elements([1, 2, 3])\n    3\n    >>> max_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fibs(n: int):\n    \"\"\"\n    prime_fibs returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fibs(1)\n    2\n    >>> prime_fibs(2)\n    3\n    >>> prime_fibs(3)\n    5\n    >>> prime_fibs(4)\n    13\n    >>> prime_fibs(5)\n    89\n    \"\"\"\n    fibs = [1, 1]\n    for i in range(2, n):\n        fibs.append(fibs[i - 1] + fibs[i - 2])\n    return fibs[n - 1]\n\n"], ["def triples_summing_to_zeros(l: list):\n    \"\"\"\n    triples_summing_to_zeros takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_summing_to_zeros([1, 3, 5, 0])\n    False\n    >>> triples_summing_to_zeros([1, 3, -2, 1])\n    True\n    >>> triples_summing_to_zeros([1, 2, 3, 7])\n    False\n    >>> triples_summing_to_zeros([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_summing_to_zeros([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def cars_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncars_race_collision(1) == 0\ncars_race_collision(2) == 0\ncars_race_collision(3) == 0\ncars_race_collision(4) == 0\ncars_race_collision(5) == 0\ncars_race_collision(6) == 0\ncars_race_collision(7) == 0\ncars_race_collision(8) == 0\ncars_race_collision(9) == 0\ncars_race_collision(10) == 0\ncars_race_collision(11) == 0\ncars_race_collision(12) == 0\ncars_race_collision(13) == 0\ncars_race_collision(14) == 0\ncars_race_collision(15) == 0\ncars_race_collision(16) == 0\ncars_race_collision(17) == 0\ncars_race_collision(18) == 0\ncars_race_collision(19) == 0\ncars_race_collision(20) == 0\ncars_race_collision(21) == 0\ncars_race_collision(22) == 0\ncars_race_collision(23) == 0\ncars_race_collision(24) == 0\ncars_race_collision(25) == 0\ncars_race_collision(26) == 0\ncars_race_collision(27) == 0\ncars_race_collision(28) == 0\ncars_race_collision(29) == 0\ncars_race_collision(30) == 0\ncars_race_collision(31) == 0\ncars_race_collision(32) == 0\ncars_race_collision(33) == 0\ncars_race_collision(34) == 0\ncars_race_collision(35) == 0\ncars_race_collision(36) == 0\ncars_race_collision(37) == 0\ncars_race_collision(38) == 0\ncars_race_collision(39) == 0\ncars_race_collision(40) == 0\ncars_race_collision(41) == 0\ncars_race_collision(42) == 0\ncars_race_collision(43) == 0\ncars_race_collision(44) == 0\ncars_race_collision(45) == 0\ncars_race_collision(46) == 0\ncars_race_collision(47) == 0\ncars_race_collision(48) == 0\ncars_race_collision(49) == 0\ncars_race_collision(50) == 0\ncars_race_collision(51) == 0\ncars_race_collision(52) == 0\ncars_race_collision(53) == 0\ncars_race_collision(54) == 0\ncars_race_collision(55) == 0\ncars_race_collision(56) == 0\ncars_race_collision(57) == 0\ncars_race_collision(58) == 0\ncars_race_collision(59) == 0\ncars_race_collision(60) == 0\ncars_race_collision(61) == 0\ncars_race_collision(62) == 0\ncars_race_collision(63) == 0\ncars_race_collision(64) == 0\ncars_race_collision(65) == 0\ncars_race"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pair_sums_to_zero(l):\n    \"\"\"\n    pair_sums_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pair_sums_to_zero([1, 3, 5, 0])\n    False\n    >>> pair_sums_to_zero([1, 3, -2, 1])\n    False\n    >>> pair_sums_to_zero([1, 2, 3, 7])\n    False\n    >>> pair_sums_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pair_sums_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def changes_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changes_base(8, 3)\n    '22'\n    >>> changes_base(8, 2)\n    '1000'\n    >>> changes_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n\n"], ["def triangles_areae(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangles_areae(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    "], ["def was_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> was_palindrome('')\n    True\n    >>> was_palindrome('aba')\n    True\n    >>> was_palindrome('aaaaa')\n    True\n    >>> was_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def adding(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> adding(2, 3)\n    5\n    >>> adding(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_char(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_char('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_char('abcd', 'dddddddabc')\n    True\n    >>> same_char('dddddddabc', 'abcd')\n    True\n    >>> same_char('eabcd', 'dddddddabc')\n    False\n    >>> same_char('abcd', 'dddddddabce')\n    False\n    >>> same_char('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fibs(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fibs(10)\n    55\n    >>> fibs(1)\n    1\n    >>> fibs(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibs(n - 1) + fibs(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def commoner(l1: list, l2: list):\n    \"\"\"Return sorted unique commoner elements for two lists.\n    >>> commoner([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> commoner([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    commoner_list = []\n    for i in l1:\n        if i in l2:\n            commoner_list.append(i)\n    return sorted(set(commoner_list))\n\n"], ["def larger_prime_factors(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> larger_prime_factors(13195)\n    29\n    >>> larger_prime_factors(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 0\n\n"], ["def sums_to_n(n: int):\n    \"\"\"sums_to_n is a function that sums numbers from 1 to n.\n    >>> sums_to_n(30)\n    465\n    >>> sums_to_n(100)\n    5050\n    >>> sums_to_n(5)\n    15\n    >>> sums_to_n(10)\n    55\n    >>> sums_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSums(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSums(\"\") => 0\n        digitSums(\"abAB\") => 131\n        digitSums(\"abcCd\") => 67\n        digitSums(\"helloE\") => 69\n        digitSums(\"woArBld\") => 131\n        digitSums(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distributions(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distributions(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distributions(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distributions(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distributions(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distributions(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distributions(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distributions(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distributions(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def searches(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        searches([4, 1, 2, 2, 3, 1]) == 2\n        searches([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        searches([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n"], ["def stranger_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    stranger_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    stranger_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    stranger_sort_list([]) == []\n    '''\n    lst.sort()\n    lst.reverse()\n    return lst\n\n\nExamples:\nstranger_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstranger_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstranger_sort_list([]) == []\n"], ["def triangles_areae(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangles_areae(3, 4, 5) == 6.00\n    triangles_areae(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def would_it_flied(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    would_it_flied([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    would_it_flied([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    would_it_flied([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    would_it_flied([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_changes(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_changes([1,2,3,5,4,7,9,6]) == 4\n    smallest_changes([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_changes([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 4, 3, 2, 2]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def was_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    was_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n"], ["def was_simpler_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    was_simpler_power(1, 4) => true\n    was_simpler_power(2, 2) => true\n    was_simpler_power(8, 2) => true\n    was_simpler_power(3, 2) => false\n    was_simpler_power(3, 1) => false\n    was_simpler_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nTest cases:\nwas_simpler_power(1, 4) => true\nwas_simpler_power(2, 2) => true\nwas_simpler_power(8, 2) => true\nwas_simpler_power(3, 2) => false\nwas_simpler_power(3, 1) => false\nwas_simpler_power(5, 3) => false\n\n\"\"\"\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hexes_keys(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n\nInput:\n\nOutput:\n\nExpected:"], ["def decimals_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimals_to_binary(15)   # returns \"db1111db\"\n    decimals_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n"], ["def was_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    was_happy(a) => False\n    was_happy(aa) => False\n    was_happy(abcd) => True\n    was_happy(aabb) => False\n    was_happy(adb) => True\n    was_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["def numerical_letters_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_lengths(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_lengths('Hello') == True\n    prime_lengths('abcdcba') == True\n    prime_lengths('kittens') == True\n    prime_lengths('orange') == False\n    \"\"\"\n    # Your code here\n    pass\n\nExamples\nprime_lengths('Hello') == True\nprime_lengths('abcdcba') == True\nprime_lengths('kittens') == True\nprime_lengths('orange') == False"], ["def starting_one_end(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def adding(lst):\n    \"\"\"Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n    Examples:\n        adding([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n"], ["def anti_shuffles(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffles('Hi') returns 'Hi'\n    anti_shuffles('hello') returns 'ehllo'\n    anti_shuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_rows([], 1) == []\n    get_rows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_rows([], 1) == []\nget_rows([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def was_bore(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> was_bore(\"Hello world\")\n    0\n    >>> was_bore(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count(\"I\")\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closer_integers(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closer_integers(\"10\")\n    10\n    >>> closer_integers(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closer_integers(\"14.5\") should\n    return 15 and closer_integers(\"-14.5\") should return -15.\n    '''\n    # Your code here\n    return 0\n\n\nTest:\n>>> closer_integers(\"10\")\n10\n>>> closer_integers(\"15.3\")\n15\n>>> closer_integers(\"14.5\")\n15\n>>> closer_integers(\"-14.5\")\n-15\n>>> closer_integers(\"14.4\")\n14\n>>> closer_integers(\"-14.4\")\n-14\n>>> closer_integers(\"14.6\")\n15\n>>> closer_integers(\"-14.6\")\n-15\n>>> closer_integers(\"14.7\")\n15\n>>> closer_integers(\"-14.7\")\n-15\n>>> closer_integers(\"14.8\")\n15\n>>> closer_integers(\"-14.8\")\n-15\n>>> closer_integers(\"14.9\")\n15\n>>> closer_integers(\"-14.9\")\n-15\n>>> closer_integers(\"14.10\")\n15\n>>> closer_integers(\"-14.10\")\n-15\n>>> closer_integers(\"14.11\")\n15\n>>> closer_integers(\"-14.11\")\n-15\n>>> closer_integers(\"14.12\")\n15\n>>> closer_integers(\"-14.12\")\n-15\n>>> closer_integers(\"14.13\")\n15\n>>> closer_integers(\"-14.13\")\n-15\n>>> closer_integers(\"14.14\")\n15\n>>> closer_integers(\"-14.14\")\n-15\n>>> closer_integers(\"14.15\")\n15\n>>> closer_integers(\"-14.15\")\n-15\n>>> closer_integers(\"14.16\")\n15\n>>> closer_integers(\"-14.16\")\n-15\n>>> closer_integers(\"14.17\")\n15\n>>> closer_integers(\"-14.17\")\n-15\n>>> closer_integers(\"14.18\")\n15\n>>> closer_integers(\"-14.18\")\n-15\n>>> closer_integers(\"14.19\")\n15\n>>> closer_integers(\"-14.19\")\n-15\n>>> closer_integers(\"14.20\")\n15\n>>> closer_integers(\"-14.20\")\n-15\n>>> closer_integers(\"14.21\")\n15\n>>> closer_integers(\"-14.21\")\n-15\n>>> closer_integers(\"14.22\")\n15\n>>> closer_integers(\"-14.22\")\n-15\n>>> closer_integers(\"14.23\")\n15\n>>> closer_integers(\"-14.23\")\n-15\n>>> closer_integers(\"14.24\")\n15\n>>> closer_integers(\"-14.24\")\n-15\n>>> closer_integers(\"14.25\")\n15\n>>> closer_integers(\"-14.25\")\n-15\n>>> closer_integers(\"14.26\")\n15\n>>> closer_integers(\"-14.26\")\n-15\n>>> closer_integers(\"14.27\")\n15\n>>> closer_integers(\"-14.27\")\n-15\n>>> closer_integers(\"14.28\")\n15\n>>> closer_integers(\"-14.28\")"], ["def makes_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makes_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> makes_a_pile(3)\n[3, 5, 7]\n>>> makes_a_pile(4)\n[4, 6, 8]\n>>> makes_a_pile(5)\n[5, 9, 15]\n>>> makes_a_pile(6)\n[6, 12, 20]\n>>> makes_a_pile(7)\n[7, 15, 25]\n>>> makes_a_pile(8)\n[8, 16, 32]\n>>> makes_a_pile(9)\n[9, 19, 39]\n>>> makes_a_pile(10)\n[10, 20, 40]\n>>> makes_a_pile(11)\n[11, 23, 47]\n>>> makes_a_pile(12)\n[12, 26, 52]\n>>> makes_a_pile(13)\n[13, 29, 59]\n>>> makes_a_pile(14)\n[14, 32, 64]\n>>> makes_a_pile(15)\n[15, 35, 71]\n>>> makes_a_pile(16)\n[16, 38, 78]\n>>> makes_a_pile(17)\n[17, 41, 87]\n>>> makes_a_pile(18)\n[18, 44, 96]\n>>> makes_a_pile(19)\n[19, 47, 107]\n>>> makes_a_pile(20)\n[20, 50, 118]\n>>> makes_a_pile(21)\n[21, 53, 131]\n>>> makes_a_pile(22)\n[22, 56, 144]\n>>> makes_a_pile(23)\n[23, 59, 157]\n>>> makes_a_pile(24)\n[24, 62, 170]\n>>> makes_a_pile(25)\n[25, 65, 183]\n>>> makes_a_pile(26)\n[26, 68, 196]\n>>> makes_a_pile(27)\n[27, 71, 209]\n>>> makes_a_pile(28)\n[28, 74, 222]\n>>> makes_a_pile(29)\n[29, 77, 235]\n>>> makes_a_pile(30)\n[30, 80, 248]\n>>> makes_a_pile(31)\n[31, 83, 261]\n>>> makes_a_pile(32)\n[32, 86, 274]\n>>> makes_a_pile(33)\n[33, 89, 287]\n>>> makes_a_pile(34)\n[34, 92, 300]\n>>> makes_a_pile(35)\n[35, 95, 3"], ["def word_strung(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    word_strung(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    word_strung(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounding_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounding_avg(1, 5) => \"0b11\"\n    rounding_avg(7, 5) => -1\n    rounding_avg(10, 20) => \"0b1111\"\n    rounding_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\n>>> rounding_avg(1, 5)\n'0b11'\n>>> rounding_avg(7, 5)\n-1\n>>> rounding_avg(10, 20)\n'0b1111'\n>>> rounding_avg(20, 33)\n'0b11010'\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_lengths(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nassert by_lengths(arr) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n\narr = []\nassert by_lengths(arr) == []\n\narr = [1, -1 , 55]\nassert by_lengths(arr) == ['One']"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odder_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(i*2):\n            even_count += 1\n        elif is_palindrome(i) and not is_palindrome(i*2):\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverses_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s, True\n"], ["def odder_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odder_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odder_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [f\"the number of odd elements {len(str(i))}n the str{len(str(i))} of the {len(str(i))}nput.\"]\n\nTest:\n>>> odder_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odder_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\n"], ["def minSubsArraySums(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n    minSubsArraySums([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sum = 0\n            for k in range(i, j):\n                sum += nums[k]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n\n\nAnswer: def minSubsArraySums(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n    minSubsArraySums([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sum = 0\n            for k in range(i, j):\n                sum += nums[k]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_word(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_word(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_word(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_word(\"simple white space\", 2) ==> []\n    select_word(\"Hello world\", 4) ==> [\"world\"]\n    select_word(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_word(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_word(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_word(\"simple white space\", 2) ==> []\nselect_word(\"Hello world\", 4) ==> [\"world\"]\nselect_word(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def gotten_closer_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    gotten_closer_vowel(\"yogurt\") ==> \"u\"\n    gotten_closer_vowel(\"FULL\") ==> \"U\"\n    gotten_closer_vowel(\"quick\") ==> \"\"\n    gotten_closer_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ngotten_closer_vowel(\"yogurt\") ==> \"u\"\ngotten_closer_vowel(\"FULL\") ==> \"U\"\ngotten_closer_vowel(\"quick\") ==> \"\"\ngotten_closer_vowel(\"ab\") ==> \"\"\n\nNote:\nThe length of the word is at most 100.\nThe word contains only English letters."], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximums(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximums k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximums([1, 2, 3, 4, 5], 16), [5, 4, 3, 2"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def gotten_odder_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    gotten_odder_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return [n] + gotten_odder_collatz(collatz(n))\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_word(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_word(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nsplit_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_word(\"abcdef\") == 3"], ["def was_sorting(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    was_sorting([5]) \u279e True\n    was_sorting([1, 2, 3, 4, 5]) \u279e True\n    was_sorting([1, 3, 2, 4, 5]) \u279e False\n    was_sorting([1, 2, 3, 4, 5, 6]) \u279e True\n    was_sorting([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    was_sorting([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    was_sorting([1, 2, 2, 3, 3, 4]) \u279e True\n    was_sorting([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n\n"], ["def intersections(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersections of these two \n    intervals is a prime number.\n    Example, the intersections of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersections is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersections((1, 2), (2, 3)) ==> \"NO\"\n    intersections((-1, 1), (0, 4)) ==> \"NO\"\n    intersections((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\n(1, 2)\n(2, 3)\n(-1, 1)\n(-3, -1)\n\nSample Output:\nNO\nNO\nYES\nNO\n"], ["def prod_sign(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_sign([1, 2, 2, -4]) == -9\n    >>> prod_sign([0, 1]) == 0\n    >>> prod_sign([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_sign([1, 2, 2, -4])\n-9\n>>> prod_sign([0, 1])\n0\n>>> prod_sign([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def was_nesting(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    was_nesting('[[]]') \u279e True\n    was_nesting('[]]]]]]][[[[[]') \u279e False\n    was_nesting('[][]') \u279e False\n    was_nesting('[]') \u279e False\n    was_nesting('[[][]]') \u279e True\n    was_nesting('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(was_nesting('[[]]'), True)\nTest.assert_equals(was_nesting('[]]]]]]][[[[[]'), False)\nTest.assert_equals(was_nesting('[][]'), False)\nTest.assert_equals(was_nesting('[]'), False)\nTest.assert_equals(was_nesting('[[][]]'), True)\nTest.assert_equals(was_nesting('[[]][['), True)"], ["def sums_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_char_was_a_letters(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_was_a_letters(\"apple pie\") \u279e False\n    check_if_last_char_was_a_letters(\"apple pi e\") \u279e True\n    check_if_last_char_was_a_letters(\"apple pi e \") \u279e False\n    check_if_last_char_was_a_letters(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\ncheck_if_last_char_was_a_letters(\"apple pie\") \u279e False\ncheck_if_last_char_was_a_letters(\"apple pi e\") \u279e True\ncheck_if_last_char_was_a_letters(\"apple pi e \") \u279e False\ncheck_if_last_char_was_a_letters(\"\") \u279e False"], ["def can_arranging(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arranging([1,2,4,3,5]) = 3\n    can_arranging([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n\n\nExamples:\ncan_arranging([1,2,4,3,5]) = 3\ncan_arranging([1,2,3]) = -1\n\"\"\"\n"], ["def larger_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    larger_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    larger_smallest_integers([]) == (None, None)\n    larger_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nTest:\nassert larger_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nassert larger_smallest_integers([]) == (None, None)\nassert larger_smallest_integers([0]) == (None, None)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6]) == (1, 6)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7]) == (1, 7)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 8)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 9)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 10)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (1, 11)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (1, 12)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (1, 13)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (1, 14)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (1, 15)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == (1, 16)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == (1, 17)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == (1, 18)\nassert larger_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1"], ["def comparing_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    comparing_one(1, 2.5) \u279e 2.5\n    comparing_one(1, \"2,3\") \u279e \"2,3\"\n    comparing_one(\"5,1\", \"6\") \u279e \"6\"\n    comparing_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncomparing_one(1, 2.5) \u279e 2.5\ncomparing_one(1, \"2,3\") \u279e \"2,3\"\ncomparing_one(\"5,1\", \"6\") \u279e \"6\"\ncomparing_one(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two.\n\nIf a and b are both floats, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two.\n\nIf a and b are both strings, the function returns the larger of the two"], ["def was_equal_to_summing_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    was_equal_to_summing_even(4) == False\n    was_equal_to_summing_even(6) == False\n    was_equal_to_summing_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fixes_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fixes_spaces(\"Example\") == \"Example\"\n    fixes_spaces(\"Example 1\") == \"Example_1\"\n    fixes_spaces(\" Example 2\") == \"_Example_2\"\n    fixes_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def sums_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum([x**2 if (i % 3 == 0) else x**3 for i, x in enumerate(lst)])\n\n\nExample:\n\nlst = [1,2,3]"], ["def word_in_sentences(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.assert_equals(word_in_sentences(\"This is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"lets go for swimming\"), \"go for\")\n    Test.assert_equals(word_in_sentences(\"this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilters(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilters([15, -73, 14, -15]) => 1 \n    specialFilters([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100 != 10:\n            count += 1\n    return count\n\nspecialFilters([15, -73, 14, -15])\nspecialFilters([33, -2, -3, 45, 21, 109])"], ["def gotten_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorting_list_sums(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Your code here\n    return sorted(lst, key=lambda x: len(x))\n\nTest:\n>>> sorting_list_sums([\"aa\", \"a\", \"aaa\"])\n['aa']\n>>> sorting_list_sums([\"ab\", \"a\", \"aaa\", \"cd\"])\n['ab', 'cd']\n>>> sorting_list_sums([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odder_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odder_count(-12) ==> (1, 1)\n        even_odder_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_triangles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangles(3, 4, 5) == True\n    right_angle_triangles(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def finds_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    finds_max([\"name\", \"of\", \"string\"]) == \"string\"\n    finds_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    finds_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def done_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = done_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def strung_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> strung_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_closer_element(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_closer_element([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_closer_element([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_numbers(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_numbers(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nesting_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nesting_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filters_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filters_by_substring([], 'a')\n    []\n    >>> filters_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_products(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_products([])\n    (0, 1)\n    >>> sum_products([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"], ["from typing import List, Tuple\n\n\ndef rolls_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolls_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindromes(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindromes('')\n    ''\n    >>> make_palindromes('cat')\n    'catac'\n    >>> make_palindromes('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef strung_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> strung_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_commoner_divisors(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_commoner_divisors(3, 5)\n    1\n    >>> greatest_commoner_divisors(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_commoner_divisors(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefix(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefix('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def strung_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> strung_sequence(0)\n    '0'\n    >>> strung_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def counts_distinctest_character(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> counts_distinctest_character('xyzXYZ')\n    3\n    >>> counts_distinctest_character('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_number(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_number('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_element(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_element([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_element([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filters_integer(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filters_integer(['a', 3.14, 5])\n    [5]\n    >>> filters_integer([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisors(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(largest_divisors(n // i) for i in range(2, n + 1) if n % i == 0)\n\n"], ["from typing import List\n\n\ndef factorizes(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorizes(8)\n    [2, 2, 2]\n    >>> factorizes(25)\n    [5, 5]\n    >>> factorizes(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef removing_duplicate(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removing_duplicate([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filters_by_prefixes(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filters_by_prefixes([], 'a')\n    []\n    >>> filters_by_prefixes(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def gets_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> gets_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> gets_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def was_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> was_prime(6)\n    False\n    >>> was_prime(101)\n    True\n    >>> was_prime(11)\n    True\n    >>> was_prime(13441)\n    True\n    >>> was_prime(61)\n    True\n    >>> was_prime(4)\n    False\n    >>> was_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_elements(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_elements([1, 2, 3])\n    3\n    >>> max_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collision(1) == 0\ncar_race_collision(2) == 0\ncar_race_collision(3) == 0\ncar_race_collision(4) == 0\ncar_race_collision(5) == 0\ncar_race_collision(6) == 0\ncar_race_collision(7) == 0\ncar_race_collision(8) == 0\ncar_race_collision(9) == 0\ncar_race_collision(10) == 0\ncar_race_collision(11) == 0\ncar_race_collision(12) == 0\ncar_race_collision(13) == 0\ncar_race_collision(14) == 0\ncar_race_collision(15) == 0\ncar_race_collision(16) == 0\ncar_race_collision(17) == 0\ncar_race_collision(18) == 0\ncar_race_collision(19) == 0\ncar_race_collision(20) == 0\ncar_race_collision(21) == 0\ncar_race_collision(22) == 0\ncar_race_collision(23) == 0\ncar_race_collision(24) == 0\ncar_race_collision(25) == 0\ncar_race_collision(26) == 0\ncar_race_collision(27) == 0\ncar_race_collision(28) == 0\ncar_race_collision(29) == 0\ncar_race_collision(30) == 0\ncar_race_collision(31) == 0\ncar_race_collision(32) == 0\ncar_race_collision(33) == 0\ncar_race_collision(34) == 0\ncar_race_collision(35) == 0\ncar_race_collision(36) == 0\ncar_race_collision(37) == 0\ncar_race_collision(38) == 0\ncar_race_collision(39) == 0\ncar_race_collision(40) == 0\ncar_race_collision(41) == 0\ncar_race_collision(42) == 0\ncar_race_collision(43) == 0\ncar_race_collision(44) == 0\ncar_race_collision(45) == 0\ncar_race_collision(46) == 0\ncar_race_collision(47) == 0\ncar_race_collision(48) == 0\ncar_race_collision(49) == 0\ncar_race_collision(50) == 0\ncar_race_collision(51) == 0\ncar_race_collision(52) == 0\ncar_race_collision(53) == 0\ncar_race_collision(54) == 0\ncar_race_collision(55) == 0\ncar_race_collision(56) == 0\ncar_race_collision(57) == 0\ncar_race_collision(58) == 0\ncar_race_collision(59) == 0\ncar_race_collision(60) == 0\ncar_race_collision(61) == 0\ncar_race_collision(62) == 0\ncar_race_collision(63) == 0\ncar_race_collision(64) == 0\ncar_race_collision(65) == 0\ncar_race"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, "], ["def changes_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changes_base(8, 3)\n    '22'\n    >>> changes_base(8, 2)\n    '1000'\n    >>> changes_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    "], ["def was_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> was_palindrome('')\n    True\n    >>> was_palindrome('aba')\n    True\n    >>> was_palindrome('aaaaa')\n    True\n    >>> was_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shifts(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_thresholds(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_thresholds([1, 2, 4, 10], 100)\n    True\n    >>> below_thresholds([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def commoner(l1: list, l2: list):\n    \"\"\"Return sorted unique commoner elements for two lists.\n    >>> commoner([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> commoner([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    commoner_list = []\n    for i in l1:\n        if i in l2:\n            commoner_list.append(i)\n    return sorted(set(commoner_list))\n\n"], ["def largest_prime_factors(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factors(13195)\n    29\n    >>> largest_prime_factors(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n\nTest:\n>>> largest_prime_factors(13195)\n29\n>>> largest_prime_factors(2048)\n2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_counts(s):\n    \"\"\"Write a function vowels_counts which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_counts(\"abcde\")\n    2\n    >>> vowels_counts(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here.\n    return 0\n"], ["def circular_shifts(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shifts(12, 1)\n    \"21\"\n    >>> circular_shifts(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digitsSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitsSum(\"\") => 0\n        digitsSum(\"abAB\") => 131\n        digitsSum(\"abcCd\") => 67\n        digitsSum(\"helloE\") => 69\n        digitsSum(\"woArBld\") => 131\n        digitsSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n\n"], ["def fruits_distributions(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruits_distributions(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruits_distributions(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruits_distributions(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruits_distributions(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nfruits_distributions(\"5 apples and 6 oranges\", 19)\nfruits_distributions(\"0 apples and 1 oranges\",3)\nfruits_distributions(\"2 apples and 3 oranges\", 100)\nfruits_distributions(\"100 apples and 1 oranges\",120)"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def searches(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        searches([4, 1, 2, 2, 3, 1]) == 2\n        searches([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        searches([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n"], ["def strangest_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangest_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strangest_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strangest_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strangest_sort_list(\n        [x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def would_it_flies(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    would_it_flies([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    would_it_flies([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    would_it_flies([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    would_it_flies([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_changes(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_changes([1,2,3,5,4,7,9,6]) == 4\n    smallest_changes([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_changes([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 4, 3, 2, 2]"], ["def total_matches(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_matches([], []) \u279e []\n    total_matches(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_matches(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_matches(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_matches(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_matches([], []) \u279e []\ntotal_matches(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_matches(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_matches(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_matches(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def was_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    was_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n"], ["def was_simpler_powers(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    was_simpler_powers(1, 4) => true\n    was_simpler_powers(2, 2) => true\n    was_simpler_powers(8, 2) => true\n    was_simpler_powers(3, 2) => false\n    was_simpler_powers(3, 1) => false\n    was_simpler_powers(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nTest cases:\nwas_simpler_powers(1, 4) => true\nwas_simpler_powers(2, 2) => true\nwas_simpler_powers(8, 2) => true\nwas_simpler_powers(3, 2) => false\nwas_simpler_powers(3, 1) => false\nwas_simpler_powers(5, 3) => false\n\n\"\"\"\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimals_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimals_to_binary(15)   # returns \"db1111db\"\n    decimals_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n"], ["def was_happier(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    was_happier(a) => False\n    was_happier(aa) => False\n    was_happier(abcd) => True\n    was_happier(aabb) => False\n    was_happier(adb) => True\n    was_happier(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["def numerical_letters_grades(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [grades[i] for i in range(len(grades)) if grades[i] >= 4]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_lengths(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_lengths('Hello') == True\n    prime_lengths('abcdcba') == True\n    prime_lengths('kittens') == True\n    prime_lengths('orange') == False\n    \"\"\"\n    # Your code here\n    pass\n\nExamples\nprime_lengths('Hello') == True\nprime_lengths('abcdcba') == True\nprime_lengths('kittens') == True\nprime_lengths('orange') == False"], ["def starting_one_end(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffles(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffles('Hi') returns 'Hi'\n    anti_shuffles('hello') returns 'ehllo'\n    anti_shuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_arrays(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_arrays([]) => []\n    * sort_arrays([5]) => [5]\n    * sort_arrays([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_arrays([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    return array\n\nExamples:\n>>> sort_arrays([])\n[]\n>>> sort_arrays([5])\n[5]\n>>> sort_arrays([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_arrays([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def was_boring(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> was_boring(\"Hello world\")\n    0\n    >>> was_boring(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def checking_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    checking_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checking_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checking_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checking_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checking_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def counts_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    counts_up_to(5) => [2,3]\n    counts_up_to(11) => [2,3,5,7]\n    counts_up_to(0) => []\n    counts_up_to(20) => [2,3,5,7,11,13,17,19]\n    counts_up_to(1) => []\n    counts_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint:"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def counts_uppers(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    counts_uppers('aBCdEf') returns 1\n    counts_uppers('abcdefg') returns 0\n    counts_uppers('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s if c.isupper() and c.isalpha() and c.isalnum() and c.islower())\n"], ["def closest_integers(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integers(\"10\")\n    10\n    >>> closest_integers(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integers(\"14.5\") should\n    return 15 and closest_integers(\"-14.5\") should return -15.\n    '''\n    # Your code here\n    return 0\n\n\nTest:\n>>> closest_integers(\"10\")\n10\n>>> closest_integers(\"15.3\")\n15\n>>> closest_integers(\"14.5\")\n15\n>>> closest_integers(\"-14.5\")\n-15\n>>> closest_integers(\"14.4\")\n14\n>>> closest_integers(\"-14.4\")\n-14\n>>> closest_integers(\"14.6\")\n15\n>>> closest_integers(\"-14.6\")\n-15\n>>> closest_integers(\"14.7\")\n15\n>>> closest_integers(\"-14.7\")\n-15\n>>> closest_integers(\"14.8\")\n15\n>>> closest_integers(\"-14.8\")\n-15\n>>> closest_integers(\"14.9\")\n15\n>>> closest_integers(\"-14.9\")\n-15\n>>> closest_integers(\"14.10\")\n15\n>>> closest_integers(\"-14.10\")\n-15\n>>> closest_integers(\"14.11\")\n15\n>>> closest_integers(\"-14.11\")\n-15\n>>> closest_integers(\"14.12\")\n15\n>>> closest_integers(\"-14.12\")\n-15\n>>> closest_integers(\"14.13\")\n15\n>>> closest_integers(\"-14.13\")\n-15\n>>> closest_integers(\"14.14\")\n15\n>>> closest_integers(\"-14.14\")\n-15\n>>> closest_integers(\"14.15\")\n15\n>>> closest_integers(\"-14.15\")\n-15\n>>> closest_integers(\"14.16\")\n15\n>>> closest_integers(\"-14.16\")\n-15\n>>> closest_integers(\"14.17\")\n15\n>>> closest_integers(\"-14.17\")\n-15\n>>> closest_integers(\"14.18\")\n15\n>>> closest_integers(\"-14.18\")\n-15\n>>> closest_integers(\"14.19\")\n15\n>>> closest_integers(\"-14.19\")\n-15\n>>> closest_integers(\"14.20\")\n15\n>>> closest_integers(\"-14.20\")\n-15\n>>> closest_integers(\"14.21\")\n15\n>>> closest_integers(\"-14.21\")\n-15\n>>> closest_integers(\"14.22\")\n15\n>>> closest_integers(\"-14.22\")\n-15\n>>> closest_integers(\"14.23\")\n15\n>>> closest_integers(\"-14.23\")\n-15\n>>> closest_integers(\"14.24\")\n15\n>>> closest_integers(\"-14.24\")\n-15\n>>> closest_integers(\"14.25\")\n15\n>>> closest_integers(\"-14.25\")\n-15\n>>> closest_integers(\"14.26\")\n15\n>>> closest_integers(\"-14.26\")\n-15\n>>> closest_integers(\"14.27\")\n15\n>>> closest_integers(\"-14.27\")\n-15\n>>> closest_integers(\"14.28\")\n15\n>>> closest_integers(\"-14.28\")"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_strung(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_strung(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_strung(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_strung(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_strung(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounds_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounds_avg(1, 5) => \"0b11\"\n    rounds_avg(7, 5) => -1\n    rounds_avg(10, 20) => \"0b1111\"\n    rounds_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\nTest cases:\n>>> rounds_avg(1, 5)\n'0b11'\n>>> rounds_avg(7, 5)\n-1\n>>> rounds_avg(10, 20)\n'0b1111'\n>>> rounds_avg(20, 33)\n'0b11010'"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_lengths(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nassert by_lengths(arr) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n\narr = []\nassert by_lengths(arr) == []\n\narr = [1, -1 , 55]\nassert by_lengths(arr) == ['One']"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_oddest_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(i*2):\n            even_count += 1\n        elif is_palindrome(i) and not is_palindrome(i*2):\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def counts_nums(arr):\n    \"\"\"\n    Write a function counts_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> counts_nums([]) == 0\n    >>> counts_nums([-1, 11, -11]) == 1\n    >>> counts_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histograms(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histograms('a b b a') == {'a': 2, 'b': 2}\n    histograms('a b c a b') == {'a': 2, 'b': 2}\n    histograms('b b b b a') == {'b': 4}\n    histograms('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def oddest_counts(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> oddest_counts(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddest_counts(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [f\"the number of odd elements {len(str(i))}n the str{len(str(i))} of the {len(str(i))}nput.\"]\n\nTest:\n>>> oddest_counts(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> oddest_counts(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\n"], ["def minSubArraysSum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraysSum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraysSum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    return min_sum\n\n\nAnswer: def minSubArraysSum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraysSum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraysSum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_arrays(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_arrays([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_arrays([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_arrays([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def gets_closest_vowels(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    gets_closest_vowels(\"yogurt\") ==> \"u\"\n    gets_closest_vowels(\"FULL\") ==> \"U\"\n    gets_closest_vowels(\"quick\") ==> \"\"\n    gets_closest_vowels(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ngets_closest_vowels(\"yogurt\") ==> \"u\"\ngets_closest_vowels(\"FULL\") ==> \"U\"\ngets_closest_vowels(\"quick\") ==> \"\"\ngets_closest_vowels(\"ab\") ==> \"\"\ngets_closest_vowels(\"abcc\") ==> \"c\"\ngets_closest_vowels(\"abccdd\") ==> \"d\"\ngets_closest_vowels(\"abccddde\") ==> \"e\"\ngets_closest_vowels(\"abccdddeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==> \"e\"\ngets_closest_vowels(\"abccdddeeeeee\") ==>"], ["def matches_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    matches_parens(['()(', ')']) == 'Yes'\n    matches_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\n>>> matches_parens(['()(', ')'])\n'Yes'\n>>> matches_parens([')', ')'])\n'No'\n>>> matches_parens(['(', ')'])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(',"], ["def maxima(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxima k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return arr[-k:]\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.it('Test 1')\n    Test.assert_equals(maxima([-3, -4, 5], 3), [-4, -3, 5])\n    Test.assert_equals(maxima([4, -4, 4], 2), [4, 4])\n    Test.assert_equals(maxima([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    Test.it('Test 2')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n\n    Test.it('Test 3')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1), [10])\n\n    Test.it('Test 4')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), [10, 9])\n\n    Test.it('Test 5')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4), [10, 9, 8, 7])\n\n    Test.it('Test 6')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), [10, 9, 8, 7, 6])\n\n    Test.it('Test 7')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6), [10, 9, 8, 7, 6, 5])\n\n    Test.it('Test 8')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7), [10, 9, 8, 7, 6, 5, 4])\n\n    Test.it('Test 9')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8), [10, 9, 8, 7, 6, 5, 4, 3])\n\n    Test.it('Test 10')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9), [10, 9, 8, 7, 6, 5, 4, 3, 2])\n\n    Test.it('Test 11')\n    Test.assert_equals(maxima([1, 2, 3, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_element(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    for i in range(k):\n        if len(str(arr[i])) == 2:\n            return arr[i]\n    return 0\n\n\nTest Cases:\n    add_element([111,21,3,4000,5,6,7,8,9], 4)\n    add_element([111,21,3,4000,5,6,7,8,9], 5)\n    add_element([111,21,3,4000,5,6,7,8,9], 6)\n    add_element([111,21,3,4000,5,6,7,8,9], 7)\n    add_element([111,21,3,4000,5,6,7,8,9], 8)\n    add_element([111,21,3,4000,5,6,7,8,9], 9)\n    add_element([111,21,3,4000,5,6,7,8,9], 10)\n    add_element([111,21,3,4000,5,6,7,8,9], 11)\n    add_element([111,21,3,4000,5,6,7,8,9], 12)\n    add_element([111,21,3,4000,5,6,7,8,9], 13)\n    add_element([111,21,3,4000,5,6,7,8,9], 14)\n    add_element([111,21,3,4000,5,6,7,8,9], 15)\n    add_element([111,21,3,4000,5,6,7,8,9], 16)\n    add_element([111,21,3,4000,5,6,7,8,9], 17)\n    add_element([111,21,3,4000,5,6,7,8,9], 18)\n    add_element([111,21,3,4000,5,6,7,8,9], 19)\n    add_element([111,21,3,4000,5,6,7,8,9], 20)\n    add_element([111,21,3,4000,5,6,7,8,9], 21)\n    add_element([111,21,3,4000,5,6,7,8,9], 22)\n    add_element([111,21,3,4000,5,6,7,8,9], 23)\n    add_element([111,21,3,4000,5,6,7,8,9], 24)\n    add_element([111,21,3,4000,5,6,7,8,9], 25)\n    add_element([111,21,3,4000,5,6,7,8,9], 26)\n    add_element([111,21,3,4000,5,6,7,8,9], 27)\n    add_element([111,21,3,4000,5,6,7,8,9], 28)\n    add_element([111,21,"], ["def gets_oddest_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    gets_oddest_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_numbers = []\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            odd_numbers.append(n)\n        return sorted(odd_numbers)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def splits_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splits_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    splits_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    splits_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nsplits_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplits_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplits_words(\"abcdef\") == 3"], ["def was_sorting(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    was_sorting([5]) \u279e True\n    was_sorting([1, 2, 3, 4, 5]) \u279e True\n    was_sorting([1, 3, 2, 4, 5]) \u279e False\n    was_sorting([1, 2, 3, 4, 5, 6]) \u279e True\n    was_sorting([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    was_sorting([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    was_sorting([1, 2, 2, 3, 3, 4]) \u279e True\n    was_sorting([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n\n"], ["def intersections(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersections of these two \n    intervals is a prime number.\n    Example, the intersections of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersections is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersections((1, 2), (2, 3)) ==> \"NO\"\n    intersections((-1, 1), (0, 4)) ==> \"NO\"\n    intersections((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\n(1, 2)\n(2, 3)\n(-1, 1)\n(-3, -1)\n\nSample Output:\nNO\nNO\nYES\nNO\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def was_nesting(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    was_nesting('[[]]') \u279e True\n    was_nesting('[]]]]]]][[[[[]') \u279e False\n    was_nesting('[][]') \u279e False\n    was_nesting('[]') \u279e False\n    was_nesting('[[][]]') \u279e True\n    was_nesting('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(was_nesting('[[]]'), True)\nTest.assert_equals(was_nesting('[]]]]]]][[[[[]'), False)\nTest.assert_equals(was_nesting('[][]'), False)\nTest.assert_equals(was_nesting('[]'), False)\nTest.assert_equals(was_nesting('[[][]]'), True)\nTest.assert_equals(was_nesting('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def checks_if_last_char_was_a_letters(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checks_if_last_char_was_a_letters(\"apple pie\") \u279e False\n    checks_if_last_char_was_a_letters(\"apple pi e\") \u279e True\n    checks_if_last_char_was_a_letters(\"apple pi e \") \u279e False\n    checks_if_last_char_was_a_letters(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n"], ["def could_arranges(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    could_arranges([1,2,4,3,5]) = 3\n    could_arranges([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallest_integer(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integer([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integer([]) == (None, None)\n    largest_smallest_integer([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_integer([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integer([]) == (None, None)\nlargest_smallest_integer([0]) == (None, None)\n"], ["def compares_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compares_one(1, 2.5) \u279e 2.5\n    compares_one(1, \"2,3\") \u279e \"2,3\"\n    compares_one(\"5,1\", \"6\") \u279e \"6\"\n    compares_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompares_one(1, 2.5) \u279e 2.5\ncompares_one(1, \"2,3\") \u279e \"2,3\"\ncompares_one(\"5,1\", \"6\") \u279e \"6\"\ncompares_one(\"1\", 1) \u279e None"], ["def was_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    was_equal_to_sum_even(4) == False\n    was_equal_to_sum_even(6) == False\n    was_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_checks(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_checks(\"example.txt\") # => 'Yes'\n    file_name_checks(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\nfile_name_checks(\"example.txt\") # => 'Yes'\nfile_name_checks(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_checks(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_checks(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_checks(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_checks(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_checks(\"1example.dll.exe.txt\") # => 'Yes' (the file's name is valid)"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def orders_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orders_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> orders_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nTest:\n    >>> orders_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> orders_by_points([]) == []\n    >>> orders_by_points([1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12]\n"], ["def specialFilters(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilters([15, -73, 14, -15]) => 1 \n    specialFilters([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100 != 10:\n            count += 1\n    return count\n\nspecialFilters([15, -73, 14, -15])\nspecialFilters([33, -2, -3, 45, 21, 109])"], ["def gets_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTestcase 1:\nInput: n = 5\nOutput: 1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n\nTestcase 2:\nInput: n = 10\nOutput: 2\nExplanation: \na = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43]\nThe valid triples are (1, 7, 13), (3, 13, 21), and (21, 27, 31).\n\nTestcase 3:\nInput: n = 100\nOutput: 10\nExplanation: \na = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorting_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = [x for x in lst if len(x) % 2 == 0]\n    lst = sorted(lst, key=len)\n    lst = sorted(lst, key=lambda x: x)\n    return lst\n\n\nTest:\n\nassert sorting_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorting_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorting_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert sorting_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert sorting_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_checks(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_checks(\"abcd\",\"abd\") => False\n    cycpattern_checks(\"hello\",\"ell\") => True\n    cycpattern_checks(\"whassup\",\"psus\") => False\n    cycpattern_checks(\"abab\",\"baa\") => True\n    cycpattern_checks(\"efef\",\"eeff\") => False\n    cycpattern_checks(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_oddest_counts(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_oddest_counts(-12) ==> (1, 1)\n        even_oddest_counts(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angles_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angles_triangle(3, 4, 5) == True\n    right_angles_triangle(1, 2, 3) == False\n    '''\n    if a == b == c:\n        return True\n    elif a != b != c != 0:\n        return False\n    elif a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n\nTest:\n>>> right_angles_triangle(3, 4, 5)\nTrue\n>>> right_angles_triangle(1, 2, 3)\nFalse\n>>> right_angles_triangle(1, 2, 4)\nFalse\n>>> right_angles_triangle(1, 2, 5)\nFalse\n>>> right_angles_triangle(1, 3, 4)\nFalse\n>>> right_angles_triangle(1, 3, 5)\nFalse\n>>> right_angles_triangle(1, 4, 5)\nFalse\n>>> right_angles_triangle(1, 5, 4)\nFalse\n>>> right_angles_triangle(1, 5, 6)\nFalse\n>>> right_angles_triangle(1, 6, 5)\nFalse\n>>> right_angles_triangle(1, 6, 7)\nFalse\n>>> right_angles_triangle(1, 7, 6)\nFalse\n>>> right_angles_triangle(1, 7, 8)\nFalse\n>>> right_angles_triangle(1, 8, 7)\nFalse\n>>> right_angles_triangle(1, 8, 9)\nFalse\n>>> right_angles_triangle(1, 9, 8)\nFalse\n>>> right_angles_triangle(1, 9, 10)\nFalse\n>>> right_angles_triangle(1, 10, 9)\nFalse\n>>> right_angles_triangle(1, 10, 11)\nFalse\n>>> right_angles_triangle(1, 11, 10)\nFalse\n>>> right_angles_triangle(1, 11, 12)\nFalse\n>>> right_angles_triangle(1, 12, 11)\nFalse\n>>> right_angles_triangle(1, 12, 13)\nFalse\n>>> right_angles_triangle(1, 13, 12)\nFalse\n>>> right_angles_triangle(1, 13, 14)\nFalse\n>>> right_angles_triangle(1, 14, 13)\nFalse\n>>> right_angles_triangle(1, 14, 15)\nFalse\n>>> right_angles_triangle(1, 15, 14)\nFalse\n>>> right_angles_triangle(1, 15, 16)\nFalse\n>>> right_angles_triangle(1, 16, 15)\nFalse\n>>> right_angles_triangle(1, 16, 17)\nFalse\n>>> right_angles_triangle(1, 17, 16)\nFalse\n>>> right_angles_triangle(1, 17, 18)\nFalse\n>>> right_angles_triangle(1, 18, 17)\nFalse\n>>> right_angles_triangle(1, 18, 19)\nFalse\n>>> right_angles_triangle(1, 19, 18)\nFalse\n>>> right_angles_triangle(1, 19, 20)\nFalse\n>>> right_angles_triangle(1, 20, 19)\nFalse\n>>> right_angles_triangle(1, 20, 21)\nFalse\n>>> right_angles_triangle(1, 21, 20)\nFalse\n>>> right_angles_triangle(1, 21, 22)\nFalse\n>>> right_angles_triangle(1, 22, 21)\nFalse\n>>> right_angles_triangle(1, 22, 23)\nFalse\n>>> right_angles_triangle(1, 23, 22)\nFalse\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def done_algebras(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = done_algebras(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def strung_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> strung_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integer(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integer(2, 8) => [2, 4, 6, 8]\n    generate_integer(8, 2) => [2, 4, 6, 8]\n    generate_integer(10, 14) => []\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n\nAnswer: def generate_integer(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integer(2, 8) => [2, 4, 6, 8]\n    generate_integer(8, 2) => [2, 4, 6, 8]\n    generate_integer(10, 14) => []\n    \"\"\"\n    # TODO: Write your code here\n    return [x for x in range(a, b+1) if x%2 == 0]\n"], ["from typing import List\n\n\ndef have_closer_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> have_closer_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> have_closer_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zeros(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zeros([1, 2, 3])\n    False\n    >>> below_zeros([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef meaner_absolutes_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meaner_absolutes_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nests_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nests_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filters_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filters_by_substring([], 'a')\n    []\n    >>> filters_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolls_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolls_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef made_palindromes(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> made_palindromes('')\n    ''\n    >>> made_palindromes('cat')\n    'catac'\n    >>> made_palindromes('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef stringing_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringing_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_commonest_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_commonest_divisor(3, 5)\n    1\n    >>> greatest_commonest_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_commonest_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def stringing_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringing_sequence(0)\n    '0'\n    >>> stringing_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def counts_distinctest_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> counts_distinctest_characters('xyzXYZ')\n    3\n    >>> counts_distinctest_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sorts_number(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sorts_number('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef found_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> found_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> found_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_units(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_units([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filters_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filters_integers(['a', 3.14, 5])\n    [5]\n    >>> filters_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorizes(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorizes(8)\n    [2, 2, 2]\n    >>> factorizes(25)\n    [5, 5]\n    >>> factorizes(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef removes_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removes_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flips_cases(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flips_cases('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filters_by_prefixes(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filters_by_prefixes([], 'a')\n    []\n    >>> filters_by_prefixes(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def been_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> been_prime(6)\n    False\n    >>> been_prime(101)\n    True\n    >>> been_prime(11)\n    True\n    >>> been_prime(13441)\n    True\n    >>> been_prime(61)\n    True\n    >>> been_prime(4)\n    False\n    >>> been_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef finds_zeros(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    finds_zeros find x such that poly(x) = 0.\n    finds_zeros returns only only zero point, even if there are many.\n    Moreover, finds_zeros only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(finds_zeros([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(finds_zeros([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        return 0\n    return -poly(xs, largest_coeff) / largest_coeff\n\n"], ["def sorts_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sorts_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sorts_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzzes(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzzes(50)\n    0\n    >>> fizz_buzzes(78)\n    2\n    >>> fizz_buzzes(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sorts_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sorts_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sorts_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zeroing(l: list):\n    \"\"\"\n    triples_sum_to_zeroing takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zeroing([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zeroing([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zeroing([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zeroing([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zeroing([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_races_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_races_collision(1) == 0\ncar_races_collision(2) == 0\ncar_races_collision(3) == 0\ncar_races_collision(4) == 0\ncar_races_collision(5) == 0\ncar_races_collision(6) == 0\ncar_races_collision(7) == 0\ncar_races_collision(8) == 0\ncar_races_collision(9) == 0\ncar_races_collision(10) == 0\ncar_races_collision(11) == 0\ncar_races_collision(12) == 0\ncar_races_collision(13) == 0\ncar_races_collision(14) == 0\ncar_races_collision(15) == 0\ncar_races_collision(16) == 0\ncar_races_collision(17) == 0\ncar_races_collision(18) == 0\ncar_races_collision(19) == 0\ncar_races_collision(20) == 0\ncar_races_collision(21) == 0\ncar_races_collision(22) == 0\ncar_races_collision(23) == 0\ncar_races_collision(24) == 0\ncar_races_collision(25) == 0\ncar_races_collision(26) == 0\ncar_races_collision(27) == 0\ncar_races_collision(28) == 0\ncar_races_collision(29) == 0\ncar_races_collision(30) == 0\ncar_races_collision(31) == 0\ncar_races_collision(32) == 0\ncar_races_collision(33) == 0\ncar_races_collision(34) == 0\ncar_races_collision(35) == 0\ncar_races_collision(36) == 0\ncar_races_collision(37) == 0\ncar_races_collision(38) == 0\ncar_races_collision(39) == 0\ncar_races_collision(40) == 0\ncar_races_collision(41) == 0\ncar_races_collision(42) == 0\ncar_races_collision(43) == 0\ncar_races_collision(44) == 0\ncar_races_collision(45) == 0\ncar_races_collision(46) == 0\ncar_races_collision(47) == 0\ncar_races_collision(48) == 0\ncar_races_collision(49) == 0\ncar_races_collision(50) == 0\ncar_races_collision(51) == 0\ncar_races_collision(52) == 0\ncar_races_collision(53) == 0\ncar_races_collision(54) == 0\ncar_races_collision(55) == 0\ncar_races_collision(56) == 0\ncar_races_collision(57) == 0\ncar_races_collision(58) == 0\ncar_races_collision(59) == 0\ncar_races_collision(60) == 0\ncar_races_collision("], ["def incr_lists(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_lists([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_lists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, "], ["def change_bases(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_bases(8, 3)\n    '22'\n    >>> change_bases(8, 2)\n    '1000'\n    >>> change_bases(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return change_bases(x // base, base) + str(x % base)\n\n"], ["def triangles_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangles_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    3\n    >>> medians([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\nAnswer: def medians(l: list):\n    \"\"\"Return medians of elements in the list l.\n    >>> medians([3, 1, 2, 4, 5])\n    "], ["def been_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> been_palindrome('')\n    True\n    >>> been_palindrome('aba')\n    True\n    >>> been_palindrome('aaaaa')\n    True\n    >>> been_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shifts(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_thresholds(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_thresholds([1, 2, 4, 10], 100)\n    True\n    >>> below_thresholds([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def commonest(l1: list, l2: list):\n    \"\"\"Return sorted unique commonest elements for two lists.\n    >>> commonest([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> commonest([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    return sorted(set(common))\n\n"], ["def largest_prime_factors(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factors(13195)\n    29\n    >>> largest_prime_factors(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n\nTest:\n>>> largest_prime_factors(13195)\n29\n>>> largest_prime_factors(2048)\n2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_counts(s):\n    \"\"\"Write a function vowels_counts which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_counts(\"abcde\")\n    2\n    >>> vowels_counts(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here.\n    return 0\n"], ["def circular_shifts(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shifts(12, 1)\n    \"21\"\n    >>> circular_shifts(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digitsSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitsSum(\"\") => 0\n        digitsSum(\"abAB\") => 131\n        digitsSum(\"abcCd\") => 67\n        digitsSum(\"helloE\") => 69\n        digitsSum(\"woArBld\") => 131\n        digitsSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n\n"], ["def fruits_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruits_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruits_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruits_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruits_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nfruits_distribution(\"5 apples and 6 oranges\", 19)\nfruits_distribution(\"0 apples and 1 oranges\",3)\nfruits_distribution(\"2 apples and 3 oranges\", 100)\nfruits_distribution(\"100 apples and 1 oranges\",120)"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def searches(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        searches([4, 1, 2, 2, 3, 1]) == 2\n        searches([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        searches([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n"], ["def strangest_sorts_lists(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangest_sorts_lists([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strangest_sorts_lists([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strangest_sorts_lists([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strangest_sorts_lists([x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangles_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangles_area(3, 4, 5) == 6.00\n    triangles_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_matches(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_matches([], []) \u279e []\n    total_matches(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_matches(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_matches(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_matches(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_matches([], []) \u279e []\ntotal_matches(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_matches(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_matches(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_matches(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def been_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    been_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        elif a % 3 == 0:\n            return been_multiply_prime(a/3)\n        elif a % 5 == 0:\n            return been_multiply_prime(a/5)\n        else:\n            return been_multiply_prime(a-1)\n    else:\n        return True\n"], ["def been_simplest_powers(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    been_simplest_powers(1, 4) => true\n    been_simplest_powers(2, 2) => true\n    been_simplest_powers(8, 2) => true\n    been_simplest_powers(3, 2) => false\n    been_simplest_powers(3, 1) => false\n    been_simplest_powers(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nTest cases:\nbeen_simplest_powers(1, 4) => true\nbeen_simplest_powers(2, 2) => true\nbeen_simplest_powers(8, 2) => true\nbeen_simplest_powers(3, 2) => false\nbeen_simplest_powers(3, 1) => false\nbeen_simplest_powers(5, 3) => false\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'dbdef been_happier(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    been_happier(a) => False\n    been_happier(aa) => False\n    been_happier(abcd) => True\n    been_happier(aabb) => False\n    been_happier(adb) => True\n    been_happier(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letters_grades(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [grades[i] for i in range(len(grades)) if grades[i] >= 4]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def antis_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antis_shuffle('Hi') returns 'Hi'\n    antis_shuffle('hello') returns 'ehllo'\n    antis_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n\nantis_shuffle('Hello World!!!')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sorts_arrays(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sorts_arrays([]) => []\n    * sorts_arrays([5]) => [5]\n    * sorts_arrays([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sorts_arrays([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    return array\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def been_boring(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> been_boring(\"Hello world\")\n    0\n    >>> been_boring(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count(\"I\")\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def checking_dict_cases(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    checking_dict_cases({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checking_dict_cases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checking_dict_cases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checking_dict_cases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checking_dict_cases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def counts_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    counts_up_to(5) => [2,3]\n    counts_up_to(11) => [2,3,5,7]\n    counts_up_to(0) => []\n    counts_up_to(20) => [2,3,5,7,11,13,17,19]\n    counts_up_to(1) => []\n    counts_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function len() to get the length of the list\n    # Hint: Use the built-in function append() to add numbers to the list\n    # Hint: Use the built-in function sorted() to sort the list\n    # Hint: Use the built-in function reversed() to reverse the list\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint:"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def counts_uppers(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    counts_uppers('aBCdEf') returns 1\n    counts_uppers('abcdefg') returns 0\n    counts_uppers('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s if c.isupper() and c.isalpha() and c.isalnum() and c.islower())\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def made_a_piles(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> made_a_piles(3)\n    [3, 5, 7]\n    \"\"\"\n    # Your code here\n    return [n]\n\n\nExamples:\n>>> made_a_piles(3)\n[3, 5, 7]\n>>> made_a_piles(4)\n[4, 6, 8]\n>>> made_a_piles(5)\n[5, 9, 11]\n>>> made_a_piles(6)\n[6, 12, 14]\n>>> made_a_piles(7)\n[7, 15, 19]\n>>> made_a_piles(8)\n[8, 16, 22]\n>>> made_a_piles(9)\n[9, 18, 27]\n>>> made_a_piles(10)\n[10, 20, 30]\n>>> made_a_piles(11)\n[11, 22, 33]\n>>> made_a_piles(12)\n[12, 24, 36]\n>>> made_a_piles(13)\n[13, 26, 39]\n>>> made_a_piles(14)\n[14, 28, 42]\n>>> made_a_piles(15)\n[15, 30, 45]\n>>> made_a_piles(16)\n[16, 32, 50]\n>>> made_a_piles(17)\n[17, 34, 53]\n>>> made_a_piles(18)\n[18, 36, 56]\n>>> made_a_piles(19)\n[19, 38, 59]\n>>> made_a_piles(20)\n[20, 40, 62]\n>>> made_a_piles(21)\n[21, 42, 65]\n>>> made_a_piles(22)\n[22, 44, 68]\n>>> made_a_piles(23)\n[23, 46, 71]\n>>> made_a_piles(24)\n[24, 48, 74]\n>>> made_a_piles(25)\n[25, 50, 77]\n>>> made_a_piles(26)\n[26, 52, 80]\n>>> made_a_piles(27)\n[27, 54, 83]\n>>> made_a_piles(28)\n[28, 56, 86]\n>>> made_a_piles(29)\n[29, 58, 89]\n>>> made_a_piles(30)\n[30, 60, 92]\n>>> made_a_piles(31)\n[31, 62, 95]\n>>> made_a_piles(32)\n[32, 64, 98]\n>>> made_a_piles(33)\n[33, 66, 101]\n>>> made_a_piles(34)\n[34, 68, 104]\n>>> made_a_piles(35)\n[35, 70, 107]\n>>> made_a_piles(36)\n[36, 72, 110]\n>>> made_a_piles(37)\n[37, 74, 113]"], ["def words_stringing(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_stringing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_stringing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_stringing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_stringing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_stringing(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_stringing(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_stringing(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_stringing(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_stringing(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_stringing(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\","], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounds_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounds_avg(1, 5) => \"0b11\"\n    rounds_avg(7, 5) => -1\n    rounds_avg(10, 20) => \"0b1111\"\n    rounds_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\nTest cases:\n>>> rounds_avg(1, 5)\n'0b11'\n>>> rounds_avg(7, 5)\n-1\n>>> rounds_avg(10, 20)\n'0b1111'\n>>> rounds_avg(20, 33)\n'0b11010'"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def counts_nums(arr):\n    \"\"\"\n    Write a function counts_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> counts_nums([]) == 0\n    >>> counts_nums([-1, 11, -11]) == 1\n    >>> counts_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def moving_one_balls(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    moving_one_balls([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moving_one_balls([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histograms(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histograms('a b b a') == {'a': 2, 'b': 2}\n    histograms('a b c a b') == {'a': 2, 'b': 2}\n    histograms('b b b b a') == {'b': 4}\n    histograms('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_counts(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_counts(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_counts(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [f\"the number of odd elements {len(str(i))}n the str{len(str(i))} of the {len(str(i))}nput.\"]\n\nTest:\n>>> odd_counts(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_counts(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\n"], ["def minSubArraysSum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraysSum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraysSum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    return min_sum\n\n\nAnswer: def minSubArraysSum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraysSum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraysSum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sorts_arrays(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sorts_arrays([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sorts_arrays([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sorts_arrays([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vowels(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowels(\"yogurt\") ==> \"u\"\n    get_closest_vowels(\"FULL\") ==> \"U\"\n    get_closest_vowels(\"quick\") ==> \"\"\n    get_closest_vowels(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vowels(\"yogurt\") ==> \"u\"\nget_closest_vowels(\"FULL\") ==> \"U\"\nget_closest_vowels(\"quick\") ==> \"\"\nget_closest_vowels(\"ab\") ==> \"\"\n\"\"\"\n"], ["def matches_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    matches_parens(['()(', ')']) == 'Yes'\n    matches_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\n>>> matches_parens(['()(', ')'])\n'Yes'\n>>> matches_parens([')', ')'])\n'No'\n>>> matches_parens(['(', ')'])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(',"], ["def maxima(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxima k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return arr[-k:]\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.it('Test 1')\n    Test.assert_equals(maxima([-3, -4, 5], 3), [-4, -3, 5])\n    Test.assert_equals(maxima([4, -4, 4], 2), [4, 4])\n    Test.assert_equals(maxima([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    Test.it('Test 2')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n\n    Test.it('Test 3')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1), [10])\n\n    Test.it('Test 4')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), [10, 9])\n\n    Test.it('Test 5')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4), [10, 9, 8, 7])\n\n    Test.it('Test 6')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), [10, 9, 8, 7, 6])\n\n    Test.it('Test 7')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6), [10, 9, 8, 7, 6, 5])\n\n    Test.it('Test 8')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7), [10, 9, 8, 7, 6, 5, 4])\n\n    Test.it('Test 9')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8), [10, 9, 8, 7, 6, 5, 4, 3])\n\n    Test.it('Test 10')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9), [10, 9, 8, 7, 6, 5, 4, 3, 2])\n\n    Test.it('Test 11')\n    Test.assert_equals(maxima([1, 2, 3, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = get_odd_collatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n\n"], ["def valid_dates(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_dates('03-11-2000') => True\n\n    valid_dates('15-01-2012') => False\n\n    valid_dates('04-0-2040') => False\n\n    valid_dates('06-04-2020') => True\n\n    valid_dates('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_dates('03-11-2000')\nvalid_dates('15-01-2012')\nvalid_dates('04-0-2040')\nvalid_dates('06-04-2020')\nvalid_dates('06/04/2020')"], ["def splits_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splits_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    splits_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    splits_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nsplits_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplits_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplits_words(\"abcdef\") == 3"], ["def been_sorts(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    been_sorts([5]) \u279e True\n    been_sorts([1, 2, 3, 4, 5]) \u279e True\n    been_sorts([1, 3, 2, 4, 5]) \u279e False\n    been_sorts([1, 2, 3, 4, 5, 6]) \u279e True\n    been_sorts([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    been_sorts([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    been_sorts([1, 2, 2, 3, 3, 4]) \u279e True\n    been_sorts([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) == 1:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    elif lst[0] == lst[1]:\n        return been_sorts(lst[2:])\n    else:\n        return been_sorts(lst[1:])\n\n\nbeen_sorts([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prods_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prods_signs([1, 2, 2, -4]) == -9\n    >>> prods_signs([0, 1]) == 0\n    >>> prods_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest:\n>>> prods_signs([1, 2, 2, -4])\n-9\n>>> prods_signs([0, 1])\n0\n>>> prods_signs([])\nNone\n\"\"\"\n"], ["def minPaths(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 3), [1, 2, 1])\n    Test.assert_equals(minPaths([[5,9,3], [4,1,6], [7,8,2]], 1), [1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 1), [1, 2, 3])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 2), [1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 4), [1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 5), [1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 6), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 7), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 8), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 9), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def been_nests(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    been_nests('[[]]') \u279e True\n    been_nests('[]]]]]]][[[[[]') \u279e False\n    been_nests('[][]') \u279e False\n    been_nests('[]') \u279e False\n    been_nests('[[][]]') \u279e True\n    been_nests('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(been_nests('[[]]'), True)\nTest.assert_equals(been_nests('[]]]]]]][[[[[]'), False)\nTest.assert_equals(been_nests('[][]'), False)\nTest.assert_equals(been_nests('[]'), False)\nTest.assert_equals(been_nests('[[][]]'), True)\nTest.assert_equals(been_nests('[[]][['), True)"], ["def sum_square(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def checks_if_last_chars_been_a_letters(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checks_if_last_chars_been_a_letters(\"apple pie\") \u279e False\n    checks_if_last_chars_been_a_letters(\"apple pi e\") \u279e True\n    checks_if_last_chars_been_a_letters(\"apple pi e \") \u279e False\n    checks_if_last_chars_been_a_letters(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n"], ["def could_arranges(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    could_arranges([1,2,4,3,5]) = 3\n    could_arranges([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n"], ["def compares_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compares_one(1, 2.5) \u279e 2.5\n    compares_one(1, \"2,3\") \u279e \"2,3\"\n    compares_one(\"5,1\", \"6\") \u279e \"6\"\n    compares_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompares_one(1, 2.5) \u279e 2.5\ncompares_one(1, \"2,3\") \u279e \"2,3\"\ncompares_one(\"5,1\", \"6\") \u279e \"6\"\ncompares_one(\"1\", 1) \u279e None"], ["def been_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    been_equal_to_sum_even(4) == False\n    been_equal_to_sum_even(6) == False\n    been_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78:\n        return True\n    if n == 79:\n        return True\n    if n == 80:\n        return True\n    if n == 81:\n        return True\n    if n == 82:\n        return True\n    if n == 83:\n        return True\n    if n == 84:\n        return"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_space(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_space(\"Example\") == \"Example\"\n    fix_space(\"Example 1\") == \"Example_1\"\n    fix_space(\" Example 2\") == \"_Example_2\"\n    fix_space(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n\n"], ["def files_names_checks(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    files_names_checks(\"example.txt\") # => 'Yes'\n    files_names_checks(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\nfiles_names_checks(\"example.txt\") # => 'Yes'\nfiles_names_checks(\"1example.dll\") # => 'No'\nfiles_names_checks(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfiles_names_checks(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfiles_names_checks(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfiles_names_checks(\"1example.dll.txt\") # => 'Yes' (the file's extension should be one of the allowed ones)"], ["def sum_square(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126"], ["def words_in_sentences(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def orders_by_point(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orders_by_point([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> orders_by_point([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nTest:\n    >>> orders_by_point([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> orders_by_point([]) == []\n    >>> orders_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12]\n"], ["def specialFilters(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilters([15, -73, 14, -15]) => 1 \n    specialFilters([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100 != 10:\n            count += 1\n    return count\n\nspecialFilters([15, -73, 14, -15])\nspecialFilters([33, -2, -3, 45, 21, 109])"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorts_lists_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=lambda x: len(x))\n\nassert sorts_lists_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorts_lists_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorts_lists_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert sorts_lists_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert sorts_lists_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_differences(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_differences([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_differences([-1, -2, 0]) == 0\n    double_the_differences([9, -2]) == 81\n    double_the_differences([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x % 2 == 1)\n\ndouble_the_differences([1, 3, 2, 0])\ndouble_the_differences([-1, -2, 0])\ndouble_the_differences([9, -2])\ndouble_the_differences([0])"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_checks(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_checks(\"abcd\",\"abd\") => False\n    cycpattern_checks(\"hello\",\"ell\") => True\n    cycpattern_checks(\"whassup\",\"psus\") => False\n    cycpattern_checks(\"abab\",\"baa\") => True\n    cycpattern_checks(\"efef\",\"eeff\") => False\n    cycpattern_checks(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_counts(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_counts(-12) ==> (1, 1)\n        even_odd_counts(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angles_triangles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angles_triangles(3, 4, 5) == True\n    right_angles_triangles(1, 2, 3) == False\n    '''\n    if a == b == c:\n        return True\n    elif a != b != c != 0:\n        return False\n    elif a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"], ["def found_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    found_max([\"name\", \"of\", \"string\"]) == \"string\"\n    found_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    found_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def does_algebras(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = does_algebras(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def stringing_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> stringing_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef had_closest_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> had_closest_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> had_closest_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_group(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_group('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zeros(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zeros([1, 2, 3])\n    False\n    >>> below_zeros([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef meaner_absolutes_deviations(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meaner_absolutes_deviations([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nests_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nests_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_products(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_products([])\n    (0, 1)\n    >>> sum_products([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"], ["from typing import List, Tuple\n\n\ndef rolls_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolls_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef made_palindromes(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> made_palindromes('')\n    ''\n    >>> made_palindromes('cat')\n    'catac'\n    >>> made_palindromes('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef strings_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> strings_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_commonest_divisors(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_commonest_divisors(3, 5)\n    1\n    >>> greatest_commonest_divisors(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_commonest_divisors(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def strings_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> strings_sequence(0)\n    '0'\n    >>> strings_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinctest_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinctest_characters('xyzXYZ')\n    3\n    >>> count_distinctest_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_time(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_time('', 'a')\n    0\n    >>> how_many_time('aaa', 'a')\n    3\n    >>> how_many_time('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sorts_number(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sorts_number('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef found_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> found_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> found_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_units(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_units([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisors(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(largest_divisors(n // i) for i in range(2, n + 1) if n % i == 0)\n\n"], ["from typing import List\n\n\ndef factorizing(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorizing(8)\n    [2, 2, 2]\n    >>> factorizing(25)\n    [5, 5]\n    >>> factorizing(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef removes_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removes_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flips_cases(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flips_cases('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def gotten_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> gotten_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> gotten_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def are_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> are_prime(6)\n    False\n    >>> are_prime(101)\n    True\n    >>> are_prime(11)\n    True\n    >>> are_prime(13441)\n    True\n    >>> are_prime(61)\n    True\n    >>> are_prime(4)\n    False\n    >>> are_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef finds_zeros(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    finds_zeros find x such that poly(x) = 0.\n    finds_zeros returns only only zero point, even if there are many.\n    Moreover, finds_zeros only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(finds_zeros([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(finds_zeros([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        return 0\n    return -poly(xs, largest_coeff) / largest_coeff\n\n"], ["def sorts_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sorts_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sorts_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_elements(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_elements([1, 2, 3])\n    3\n    >>> max_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzzes(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzzes(50)\n    0\n    >>> fizz_buzzes(78)\n    2\n    >>> fizz_buzzes(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sorts_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sorts_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sorts_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fibs(n: int):\n    \"\"\"\n    prime_fibs returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fibs(1)\n    2\n    >>> prime_fibs(2)\n    3\n    >>> prime_fibs(3)\n    5\n    >>> prime_fibs(4)\n    13\n    >>> prime_fibs(5)\n    89\n    \"\"\"\n    fibs = [1, 1]\n    for i in range(2, n):\n        fibs.append(fibs[i - 1] + fibs[i - 2])\n    return fibs[n - 1]\n\n"], ["def triples_summing_to_zeroed(l: list):\n    \"\"\"\n    triples_summing_to_zeroed takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_summing_to_zeroed([1, 3, 5, 0])\n    False\n    >>> triples_summing_to_zeroed([1, 3, -2, 1])\n    True\n    >>> triples_summing_to_zeroed([1, 2, 3, 7])\n    False\n    >>> triples_summing_to_zeroed([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_summing_to_zeroed([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def cars_races_collisions(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncars_races_collisions(1) == 0\ncars_races_collisions(2) == 0\ncars_races_collisions(3) == 0\ncars_races_collisions(4) == 0\ncars_races_collisions(5) == 0\ncars_races_collisions(6) == 0\ncars_races_collisions(7) == 0\ncars_races_collisions(8) == 0\ncars_races_collisions(9) == 0\ncars_races_collisions(10) == 0\ncars_races_collisions(11) == 0\ncars_races_collisions(12) == 0\ncars_races_collisions(13) == 0\ncars_races_collisions(14) == 0\ncars_races_collisions(15) == 0\ncars_races_collisions(16) == 0\ncars_races_collisions(17) == 0\ncars_races_collisions(18) == 0\ncars_races_collisions(19) == 0\ncars_races_collisions(20) == 0\ncars_races_collisions(21) == 0\ncars_races_collisions(22) == 0\ncars_races_collisions(23) == 0\ncars_races_collisions(24) == 0\ncars_races_collisions(25) == 0\ncars_races_collisions(26) == 0\ncars_races_collisions(27) == 0\ncars_races_collisions(28) == 0\ncars_races_collisions(29) == 0\ncars_races_collisions(30) == 0\ncars_races_collisions(31) == 0\ncars_races_collisions(32) == 0\ncars_races_collisions(33) == 0\ncars_races_collisions(34) == 0\ncars_races_collisions(35) == 0\ncars_races_collisions(36) == 0\ncars_races_collisions(37) == 0\ncars_races_collisions(38) == 0\ncars_races_collisions(39) == 0\ncars_races_collisions(40) == 0\ncars_races_collisions(41) == 0\ncars_races_collisions(42) == 0\ncars_races_collisions(43) == 0\ncars_races_collisions(44) == 0\ncars_races_collisions(45) == 0\ncars_races_collisions(46) == 0\ncars_races_collisions(47) == 0\ncars_races_collisions(48) == 0\ncars_races_collisions(49) == 0\ncars_races_collisions(50) == 0\ncars_races_collisions(51) == 0\ncars_races_collisions(52) == 0\ncars_races_collisions(53) == 0\ncars_races_collisions(54) == 0\ncars_races_collisions(55) == 0\ncars_races_collisions(56) == 0\ncars_races_coll"], ["def incr_lists(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_lists([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_lists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pair_sums_to_zero(l):\n    \"\"\"\n    pair_sums_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pair_sums_to_zero([1, 3, 5, 0])\n    False\n    >>> pair_sums_to_zero([1, 3, -2, 1])\n    False\n    >>> pair_sums_to_zero([1, 2, 3, 7])\n    False\n    >>> pair_sums_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pair_sums_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def change_bases(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_bases(8, 3)\n    '22'\n    >>> change_bases(8, 2)\n    '1000'\n    >>> change_bases(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return change_bases(x // base, base) + str(x % base)\n\n"], ["def triangles_areas(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangles_areas(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n\nIf you want to test your function, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6.0\n>>> triangles_areas(3, 3)\n3.0\n>>> triangles_areas(2, 2)\n1.0\n\nIf you want to test your function with different inputs, you can do it like this:\n>>> triangles_areas(5, 3)\n7.5\n>>> triangles_areas(4, 4)\n6."], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def are_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> are_palindrome('')\n    True\n    >>> are_palindrome('aba')\n    True\n    >>> are_palindrome('aaaaa')\n    True\n    >>> are_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shifts(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowel(text):\n    \"\"\"\n    remove_vowel is a function that takes string and returns string without vowels.\n    >>> remove_vowel('')\n    ''\n    >>> remove_vowel(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowel('abcdef')\n    'bcdf'\n    >>> remove_vowel('aaaaa')\n    ''\n    >>> remove_vowel('aaBAA')\n    'B'\n    >>> remove_vowel('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def below_thresholds(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_thresholds([1, 2, 4, 10], 100)\n    True\n    >>> below_thresholds([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def adding(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> adding(2, 3)\n    5\n    >>> adding(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_char(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_char('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_char('abcd', 'dddddddabc')\n    True\n    >>> same_char('dddddddabc', 'abcd')\n    True\n    >>> same_char('eabcd', 'dddddddabc')\n    False\n    >>> same_char('abcd', 'dddddddabce')\n    False\n    >>> same_char('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fibs(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fibs(10)\n    55\n    >>> fibs(1)\n    1\n    >>> fibs(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibs(n - 1) + fibs(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def commonest(l1: list, l2: list):\n    \"\"\"Return sorted unique commonest elements for two lists.\n    >>> commonest([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> commonest([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    return sorted(set(common))\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sums_to_n(n: int):\n    \"\"\"sums_to_n is a function that sums numbers from 1 to n.\n    >>> sums_to_n(30)\n    465\n    >>> sums_to_n(100)\n    5050\n    >>> sums_to_n(5)\n    15\n    >>> sums_to_n(10)\n    55\n    >>> sums_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowel_count(s):\n    \"\"\"Write a function vowel_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowel_count(\"abcde\")\n    2\n    >>> vowel_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shifts(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shifts(12, 1)\n    \"21\"\n    >>> circular_shifts(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def digitsSums(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitsSums(\"\") => 0\n        digitsSums(\"abAB\") => 131\n        digitsSums(\"abcCd\") => 67\n        digitsSums(\"helloE\") => 69\n        digitsSums(\"woArBld\") => 131\n        digitsSums(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strangest_sorts_lists(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangest_sorts_lists([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strangest_sorts_lists([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strangest_sorts_lists([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strangest_sorts_lists([x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangles_areas(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangles_areas(3, 4, 5) == 6.00\n    triangles_areas(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) / 2\n"], ["def will_it_flown(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_flown([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_flown([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_flown([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_flown([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_matches(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_matches([], []) \u279e []\n    total_matches(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_matches(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_matches(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_matches(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_matches([], []) \u279e []\ntotal_matches(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_matches(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_matches(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_matches(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def are_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    are_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nare_multiply_prime(30)\n"], ["def are_simplest_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    are_simplest_power(1, 4) => true\n    are_simplest_power(2, 2) => true\n    are_simplest_power(8, 2) => true\n    are_simplest_power(3, 2) => false\n    are_simplest_power(3, 1) => false\n    are_simplest_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hexes_keys(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n\nInput:\n\nOutput:\n\nExpected:"], ["def decimals_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimals_to_binary(15)   # returns \"db1111db\"\n    decimals_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n"], ["def are_happiest(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    are_happiest(a) => False\n    are_happiest(aa) => False\n    are_happiest(abcd) => True\n    are_happiest(aabb) => False\n    are_happiest(adb) => True\n    are_happiest(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grades(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def adding(lst):\n    \"\"\"Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n    Examples:\n        adding([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n"], ["def antis_shuffles(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antis_shuffles('Hi') returns 'Hi'\n    antis_shuffles('hello') returns 'ehllo'\n    antis_shuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n\nantis_shuffles('Hello World!!!')\n"], ["def get_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_rows([], 1) == []\n    get_rows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_rows([], 1) == []\nget_rows([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sorts_arrays(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sorts_arrays([]) => []\n    * sorts_arrays([5]) => [5]\n    * sorts_arrays([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sorts_arrays([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    return array\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def are_bores(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> are_bores(\"Hello world\")\n    0\n    >>> are_bores(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count(\"I\")\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def checks_dict_cases(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    checks_dict_cases({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checks_dict_cases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checks_dict_cases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checks_dict_cases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checks_dict_cases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_uppers(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_uppers('aBCdEf') returns 1\n    count_uppers('abcdefg') returns 0\n    count_uppers('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integers(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integers(\"10\")\n    10\n    >>> closest_integers(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integers(\"14.5\") should\n    return 15 and closest_integers(\"-14.5\") should return -15.\n    '''\n    # Your code here\n    return 0\n\n\nTest:\n>>> closest_integers(\"10\")\n10\n>>> closest_integers(\"15.3\")\n15\n>>> closest_integers(\"14.5\")\n15\n>>> closest_integers(\"-14.5\")\n-15\n>>> closest_integers(\"14.4\")\n14\n>>> closest_integers(\"-14.4\")\n-14\n>>> closest_integers(\"14.6\")\n15\n>>> closest_integers(\"-14.6\")\n-15\n>>> closest_integers(\"14.7\")\n15\n>>> closest_integers(\"-14.7\")\n-15\n>>> closest_integers(\"14.8\")\n15\n>>> closest_integers(\"-14.8\")\n-15\n>>> closest_integers(\"14.9\")\n15\n>>> closest_integers(\"-14.9\")\n-15\n>>> closest_integers(\"14.10\")\n15\n>>> closest_integers(\"-14.10\")\n-15\n>>> closest_integers(\"14.11\")\n15\n>>> closest_integers(\"-14.11\")\n-15\n>>> closest_integers(\"14.12\")\n15\n>>> closest_integers(\"-14.12\")\n-15\n>>> closest_integers(\"14.13\")\n15\n>>> closest_integers(\"-14.13\")\n-15\n>>> closest_integers(\"14.14\")\n15\n>>> closest_integers(\"-14.14\")\n-15\n>>> closest_integers(\"14.15\")\n15\n>>> closest_integers(\"-14.15\")\n-15\n>>> closest_integers(\"14.16\")\n15\n>>> closest_integers(\"-14.16\")\n-15\n>>> closest_integers(\"14.17\")\n15\n>>> closest_integers(\"-14.17\")\n-15\n>>> closest_integers(\"14.18\")\n15\n>>> closest_integers(\"-14.18\")\n-15\n>>> closest_integers(\"14.19\")\n15\n>>> closest_integers(\"-14.19\")\n-15\n>>> closest_integers(\"14.20\")\n15\n>>> closest_integers(\"-14.20\")\n-15\n>>> closest_integers(\"14.21\")\n15\n>>> closest_integers(\"-14.21\")\n-15\n>>> closest_integers(\"14.22\")\n15\n>>> closest_integers(\"-14.22\")\n-15\n>>> closest_integers(\"14.23\")\n15\n>>> closest_integers(\"-14.23\")\n-15\n>>> closest_integers(\"14.24\")\n15\n>>> closest_integers(\"-14.24\")\n-15\n>>> closest_integers(\"14.25\")\n15\n>>> closest_integers(\"-14.25\")\n-15\n>>> closest_integers(\"14.26\")\n15\n>>> closest_integers(\"-14.26\")\n-15\n>>> closest_integers(\"14.27\")\n15\n>>> closest_integers(\"-14.27\")\n-15\n>>> closest_integers(\"14.28\")\n15\n>>> closest_integers(\"-14.28\")"], ["def made_a_piles(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> made_a_piles(3)\n    [3, 5, 7]\n    \"\"\"\n    # Your code here\n    return [n]\n\n\nExamples:\n>>> made_a_piles(3)\n[3, 5, 7]\n>>> made_a_piles(4)\n[4, 6, 8]\n>>> made_a_piles(5)\n[5, 9, 11]\n>>> made_a_piles(6)\n[6, 12, 14]\n>>> made_a_piles(7)\n[7, 15, 19]\n>>> made_a_piles(8)\n[8, 16, 22]\n>>> made_a_piles(9)\n[9, 18, 27]\n>>> made_a_piles(10)\n[10, 20, 30]\n>>> made_a_piles(11)\n[11, 22, 33]\n>>> made_a_piles(12)\n[12, 24, 36]\n>>> made_a_piles(13)\n[13, 26, 39]\n>>> made_a_piles(14)\n[14, 28, 42]\n>>> made_a_piles(15)\n[15, 30, 45]\n>>> made_a_piles(16)\n[16, 32, 50]\n>>> made_a_piles(17)\n[17, 34, 53]\n>>> made_a_piles(18)\n[18, 36, 56]\n>>> made_a_piles(19)\n[19, 38, 59]\n>>> made_a_piles(20)\n[20, 40, 62]\n>>> made_a_piles(21)\n[21, 42, 65]\n>>> made_a_piles(22)\n[22, 44, 68]\n>>> made_a_piles(23)\n[23, 46, 71]\n>>> made_a_piles(24)\n[24, 48, 74]\n>>> made_a_piles(25)\n[25, 50, 77]\n>>> made_a_piles(26)\n[26, 52, 80]\n>>> made_a_piles(27)\n[27, 54, 83]\n>>> made_a_piles(28)\n[28, 56, 86]\n>>> made_a_piles(29)\n[29, 58, 89]\n>>> made_a_piles(30)\n[30, 60, 92]\n>>> made_a_piles(31)\n[31, 62, 95]\n>>> made_a_piles(32)\n[32, 64, 98]\n>>> made_a_piles(33)\n[33, 66, 101]\n>>> made_a_piles(34)\n[34, 68, 104]\n>>> made_a_piles(35)\n[35, 70, 107]\n>>> made_a_piles(36)\n[36, 72, 110]\n>>> made_a_piles(37)\n[37, 74, 113]"], ["def word_strings(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    word_strings(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    word_strings(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounds_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounds_avg(1, 5) => \"0b11\"\n    rounds_avg(7, 5) => -1\n    rounds_avg(10, 20) => \"0b1111\"\n    rounds_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\nTest cases:\n>>> rounds_avg(1, 5)\n'0b11'\n>>> rounds_avg(7, 5)\n-1\n>>> rounds_avg(10, 20)\n'0b1111'\n>>> rounds_avg(20, 33)\n'0b11010'"], ["def unique_digit(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digit([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digit([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digit([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digit([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odder_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(i*2):\n            even_count += 1\n        elif is_palindrome(i) and not is_palindrome(i*2):\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def moving_one_balls(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    moving_one_balls([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moving_one_balls([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histograms(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histograms('a b b a') == {'a': 2, 'b': 2}\n    histograms('a b c a b') == {'a': 2, 'b': 2}\n    histograms('b b b b a') == {'b': 4}\n    histograms('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odder_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odder_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odder_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [f\"the number of odd elements {len(str(i))}n the str{len(str(i))} of the {len(str(i))}nput.\"]\n\nTest:\n>>> odder_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odder_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\n"], ["def minSubsArraysSums(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubsArraysSums([2, 3, 4, 1, 2, 4]) == 1\n    minSubsArraysSums([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    sums = [0]\n    for i in range(len(nums)):\n        sums.append(sums[i] + nums[i])\n    min_sum = sums[0]\n    for i in range(1, len(sums)):\n        if sums[i] < min_sum:\n            min_sum = sums[i]\n    return min_sum\n\n\nAnswer: def minSubsArraysSums(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubsArraysSums([2, 3, 4, 1, 2, 4]) == 1\n    minSubsArraysSums([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    sums = [0]\n    for i in range(len(nums)):\n        sums.append(sums[i] + nums[i])\n    min_sum = sums[0]\n    for i in range(1, len(sums)):\n        if sums[i] < min_sum:\n            min_sum = sums[i]\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sorts_arrays(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sorts_arrays([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sorts_arrays([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sorts_arrays([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_word(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_word(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_word(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_word(\"simple white space\", 2) ==> []\n    select_word(\"Hello world\", 4) ==> [\"world\"]\n    select_word(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_word(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_word(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_word(\"simple white space\", 2) ==> []\nselect_word(\"Hello world\", 4) ==> [\"world\"]\nselect_word(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def gotten_closest_vowels(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    gotten_closest_vowels(\"yogurt\") ==> \"u\"\n    gotten_closest_vowels(\"FULL\") ==> \"U\"\n    gotten_closest_vowels(\"quick\") ==> \"\"\n    gotten_closest_vowels(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ngotten_closest_vowels(\"yogurt\") ==> \"u\"\ngotten_closest_vowels(\"FULL\") ==> \"U\"\ngotten_closest_vowels(\"quick\") ==> \"\"\ngotten_closest_vowels(\"ab\") ==> \"\"\n\nNote:\nThe length of the word is at most 100.\nThe word contains only English letters."], ["def matches_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    matches_parens(['()(', ')']) == 'Yes'\n    matches_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\n>>> matches_parens(['()(', ')'])\n'Yes'\n>>> matches_parens([')', ')'])\n'No'\n>>> matches_parens(['(', ')'])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(', ')('])\n'No'\n>>> matches_parens(['(',"], ["def maxima(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxima k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return arr[-k:]\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.it('Test 1')\n    Test.assert_equals(maxima([-3, -4, 5], 3), [-4, -3, 5])\n    Test.assert_equals(maxima([4, -4, 4], 2), [4, 4])\n    Test.assert_equals(maxima([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n\n    Test.it('Test 2')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n\n    Test.it('Test 3')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1), [10])\n\n    Test.it('Test 4')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), [10, 9])\n\n    Test.it('Test 5')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4), [10, 9, 8, 7])\n\n    Test.it('Test 6')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), [10, 9, 8, 7, 6])\n\n    Test.it('Test 7')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6), [10, 9, 8, 7, 6, 5])\n\n    Test.it('Test 8')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7), [10, 9, 8, 7, 6, 5, 4])\n\n    Test.it('Test 9')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8), [10, 9, 8, 7, 6, 5, 4, 3])\n\n    Test.it('Test 10')\n    Test.assert_equals(maxima([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9), [10, 9, 8, 7, 6, 5, 4, 3, 2])\n\n    Test.it('Test 11')\n    Test.assert_equals(maxima([1, 2, 3, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def gotten_odder_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    gotten_odder_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return [n] + gotten_odder_collatz(collatz(n))\n"], ["def valid_dates(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_dates('03-11-2000') => True\n\n    valid_dates('15-01-2012') => False\n\n    valid_dates('04-0-2040') => False\n\n    valid_dates('06-04-2020') => True\n\n    valid_dates('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_dates('03-11-2000')\nvalid_dates('15-01-2012')\nvalid_dates('04-0-2040')\nvalid_dates('06-04-2020')\nvalid_dates('06/04/2020')"], ["def splits_word(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splits_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    splits_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    splits_word(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nsplits_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplits_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplits_word(\"abcdef\") == 3"], ["def are_sorts(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    are_sorts([5]) \u279e True\n    are_sorts([1, 2, 3, 4, 5]) \u279e True\n    are_sorts([1, 3, 2, 4, 5]) \u279e False\n    are_sorts([1, 2, 3, 4, 5, 6]) \u279e True\n    are_sorts([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    are_sorts([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    are_sorts([1, 2, 2, 3, 3, 4]) \u279e True\n    are_sorts([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prods_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prods_signs([1, 2, 2, -4]) == -9\n    >>> prods_signs([0, 1]) == 0\n    >>> prods_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest:\n>>> prods_signs([1, 2, 2, -4])\n-9\n>>> prods_signs([0, 1])\n0\n>>> prods_signs([])\nNone\n\"\"\"\n"], ["def minPaths(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 3), [1, 2, 1])\n    Test.assert_equals(minPaths([[5,9,3], [4,1,6], [7,8,2]], 1), [1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 1), [1, 2, 3])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 2), [1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 4), [1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 5), [1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 6), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 7), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 8), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5,6], [7,8,9]], 9), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])\n    Test.assert_equals(minPaths([[1,2,3], [4,5"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digit(n):\n    \"\"\"Given a positive integer n, return the product of the odd digit.\n    Return 0 if all digit are even.\n    For example:\n    digit(1)  == 1\n    digit(4)  == 0\n    digit(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 * digit(n // 10)\n"], ["def are_nests(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    are_nests('[[]]') \u279e True\n    are_nests('[]]]]]]][[[[[]') \u279e False\n    are_nests('[][]') \u279e False\n    are_nests('[]') \u279e False\n    are_nests('[[][]]') \u279e True\n    are_nests('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid(string):\n    '''\n    Create a function that takes a string as input and returns True if and only if \n    the string is a valid parentheses sequence.\n\n    is_valid('()') \u279e True\n    is_valid('(())') \u279e True\n    is_valid('()[]{}') \u279e True\n    is_valid('(]') \u279e False\n    is_valid('([)]') \u279e False\n    '''\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid(string):\n    '''\n    Create a function that takes a string as input and returns True if and only if \n    the string is a valid parentheses sequence.\n\n    is_valid('()') \u279e True\n    is_valid('(())') \u279e True\n    is_valid('()[]{}') \u279e True\n    is_valid('(]') \u279e False\n    is_valid('([)]') \u279e False\n    '''\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid(string):\n    '''\n    Create a function that takes a string as input and returns True if and only if \n    the string is a valid parentheses sequence.\n\n    is_valid('()') \u279e True\n    is_valid('(())') \u279e True\n    is_valid('()[]{}') \u279e True\n    is_valid('(]') \u279e False\n    is_valid('([)]') \u279e False\n    '''\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid(string):\n    '''\n    Create a function that takes a string as input and returns True if and only if \n    the string is a valid parentheses sequence.\n\n    is_valid('()') \u279e True\n    is_valid('(())') \u279e True\n    is_valid('()[]{}') \u279e True\n    is_valid('(]') \u279e False\n    is_valid('([)]') \u279e False\n    '''\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid(string):\n    '''\n    Create a function that takes a string as input and returns True if and only if \n    the string is a valid parentheses sequence.\n\n    is_valid('()') \u279e True\n    is_valid('(())') \u279e True\n    is_valid('()[]{}') \u279e True\n    is_valid('(]') \u279e False\n    is_valid('([)]') \u279e False\n    '''\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def is_valid(string):\n    '''\n    Create a function that takes a string as input and returns True if and only"], ["def sums_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_chars_are_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_chars_are_a_letter(\"apple pie\") \u279e False\n    check_if_last_chars_are_a_letter(\"apple pi e\") \u279e True\n    check_if_last_chars_are_a_letter(\"apple pi e \") \u279e False\n    check_if_last_chars_are_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\ncheck_if_last_chars_are_a_letter(\"apple pie\") \u279e False\ncheck_if_last_chars_are_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_chars_are_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_chars_are_a_letter(\"\") \u279e False"], ["def can_arranges(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arranges([1,2,4,3,5]) = 3\n    can_arranges([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n"], ["def compares_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compares_one(1, 2.5) \u279e 2.5\n    compares_one(1, \"2,3\") \u279e \"2,3\"\n    compares_one(\"5,1\", \"6\") \u279e \"6\"\n    compares_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompares_one(1, 2.5) \u279e 2.5\ncompares_one(1, \"2,3\") \u279e \"2,3\"\ncompares_one(\"5,1\", \"6\") \u279e \"6\"\ncompares_one(\"1\", 1) \u279e None"], ["def are_equal_to_summing_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    are_equal_to_summing_even(4) == False\n    are_equal_to_summing_even(6) == False\n    are_equal_to_summing_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fixes_space(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fixes_space(\"Example\") == \"Example\"\n    fixes_space(\"Example 1\") == \"Example_1\"\n    fixes_space(\" Example 2\") == \"_Example_2\"\n    fixes_space(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n"], ["def files_names_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    files_names_check(\"example.txt\") # => 'Yes'\n    files_names_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\nfiles_names_check(\"example.txt\") # => 'Yes'\nfiles_names_check(\"1example.dll\") # => 'No'\nfiles_names_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfiles_names_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfiles_names_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfiles_names_check(\"1example.dll.txt\") # => 'Yes' (the file's extension should be one of the allowed ones)\nfiles_names_check(\"1example.dll.exe.txt\") # => 'Yes' (the file's extension should be one of the allowed ones)"], ["def sums_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum([x**2 if (i % 3 == 0) else x**3 for i, x in enumerate(lst)])\n\n\nExample:\n\nlst = [1,2,3]"], ["def word_in_sentences(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest Cases:\n    Test.describe('Basic tests')\n    Test.assert_equals(word_in_sentences(\"This is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"lets go for swimming\"), \"go for\")\n    Test.assert_equals(word_in_sentences(\"this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this\"), \"is\")\n    Test.assert_equals(word_in_sentences(\"this is a test this is a test this is a test this is a test this is a test this is a test this is a test this is a\"), \"is\")\n    Test.assert"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_point(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_point([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_point([]) == []\n    \"\"\"\n    # Your code here\n    return nums\n\nTest:\n>>> order_by_point([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_point([]) == []\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12]) == [-1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12, 1, 1, 11, -1, -11, -12]\n>>> order_by_point([1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -11, -12, 1, 11, -1, -1"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def gotten_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorts_lists_sums(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(lst, key=lambda x: (len(x), x))\n\n\nTest:\n>>> sorts_lists_sums([\"aa\", \"a\", \"aaa\"])\n['aa']\n>>> sorts_lists_sums([\"ab\", \"a\", \"aaa\", \"cd\"])\n['ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\"])\n['a', 'aa', 'ab', 'cd']\n>>> sorts_lists_sums([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\", \"a\", \"aa\"])\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_differences(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_differences([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_differences([-1, -2, 0]) == 0\n    double_the_differences([9, -2]) == 81\n    double_the_differences([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x % 2 == 1)\n\ndouble_the_differences([1, 3, 2, 0])\ndouble_the_differences([-1, -2, 0])\ndouble_the_differences([9, -2])\ndouble_the_differences([0])"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Stronger_Extensions(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Stronger_Extensions('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: len(x) - len(x.lower()))\n\nStronger_Extensions('my_class', ['AA', 'Be', 'CC'])\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odder_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odder_count(-12) ==> (1, 1)\n        even_odder_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angles_triangles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angles_triangles(3, 4, 5) == True\n    right_angles_triangles(1, 2, 3) == False\n    '''\n    if a == b == c:\n        return True\n    elif a != b != c != 0:\n        return False\n    elif a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"], ["def found_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    found_max([\"name\", \"of\", \"string\"]) == \"string\"\n    found_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    found_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebras(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebras(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def strings_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> strings_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\nTest:\n>>> strings_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nTrue\n>>> strings_to_md5('Hello') == '5d41402abc4b2a76b9719d911017c592'\nTrue\n>>> strings_to_md5('') is None\nTrue\n\"\"\"\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_eleemnts(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_eleemnts([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_eleemnts([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zreo(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zreo([1, 2, 3])\n    False\n    >>> below_zreo([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_asbolute_deviaiton(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_asbolute_deviaiton([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef interpserse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> interpserse([], 4)\n    []\n    >>> interpserse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] == delimeter:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_porduct(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_porduct([])\n    (0, 1)\n    >>> sum_porduct([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def rgeatest_ocmmon_diviosr(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> rgeatest_ocmmon_diviosr(3, 5)\n    1\n    >>> rgeatest_ocmmon_diviosr(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return rgeatest_ocmmon_diviosr(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_msuic(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_msuic('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filetr_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filetr_integers(['a', 3.14, 5])\n    [5]\n    >>> filetr_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_udplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_udplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_caes(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_caes('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef conactenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> conactenate([])\n    ''\n    >>> conactenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef fliter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> fliter_by_prefix([], 'a')\n    []\n    >>> fliter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_priem(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_priem(6)\n    False\n    >>> is_priem(101)\n    True\n    >>> is_priem(11)\n    True\n    >>> is_priem(13441)\n    True\n    >>> is_priem(61)\n    True\n    >>> is_priem(4)\n    False\n    >>> is_priem(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def srot_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> srot_third([1, 2, 3])\n    [1, 2, 3]\n    >>> srot_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n    l_new.sort()\n    return l_new\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_elenmet(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_elenmet([1, 2, 3])\n    3\n    >>> max_elenmet([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_evne(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_evne([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_evne([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n        else:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef deocde_cyclci(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def tripels_sum_to_zero(l: list):\n    \"\"\"\n    tripels_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> tripels_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> tripels_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> tripels_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> tripels_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> tripels_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collision(1) == 0\ncar_race_collision(2) == 0\ncar_race_collision(3) == 0\ncar_race_collision(4) == 0\ncar_race_collision(5) == 0\ncar_race_collision(6) == 0\ncar_race_collision(7) == 0\ncar_race_collision(8) == 0\ncar_race_collision(9) == 0\ncar_race_collision(10) == 0\ncar_race_collision(11) == 0\ncar_race_collision(12) == 0\ncar_race_collision(13) == 0\ncar_race_collision(14) == 0\ncar_race_collision(15) == 0\ncar_race_collision(16) == 0\ncar_race_collision(17) == 0\ncar_race_collision(18) == 0\ncar_race_collision(19) == 0\ncar_race_collision(20) == 0\ncar_race_collision(21) == 0\ncar_race_collision(22) == 0\ncar_race_collision(23) == 0\ncar_race_collision(24) == 0\ncar_race_collision(25) == 0\ncar_race_collision(26) == 0\ncar_race_collision(27) == 0\ncar_race_collision(28) == 0\ncar_race_collision(29) == 0\ncar_race_collision(30) == 0\ncar_race_collision(31) == 0\ncar_race_collision(32) == 0\ncar_race_collision(33) == 0\ncar_race_collision(34) == 0\ncar_race_collision(35) == 0\ncar_race_collision(36) == 0\ncar_race_collision(37) == 0\ncar_race_collision(38) == 0\ncar_race_collision(39) == 0\ncar_race_collision(40) == 0\ncar_race_collision(41) == 0\ncar_race_collision(42) == 0\ncar_race_collision(43) == 0\ncar_race_collision(44) == 0\ncar_race_collision(45) == 0\ncar_race_collision(46) == 0\ncar_race_collision(47) == 0\ncar_race_collision(48) == 0\ncar_race_collision(49) == 0\ncar_race_collision(50) == 0\ncar_race_collision(51) == 0\ncar_race_collision(52) == 0\ncar_race_collision(53) == 0\ncar_race_collision(54) == 0\ncar_race_collision(55) == 0\ncar_race_collision(56) == 0\ncar_race_collision(57) == 0\ncar_race_collision(58) == 0\ncar_race_collision(59) == 0\ncar_race_collision(60) == 0\ncar_race_collision(61) == 0\ncar_race_collision(62) == 0\ncar_race_collision(63) == 0\ncar_race_collision(64) == 0\ncar_race_collision(65) == 0\ncar_race"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def piars_sum_to_zreo(l):\n    \"\"\"\n    piars_sum_to_zreo takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> piars_sum_to_zreo([1, 3, 5, 0])\n    False\n    >>> piars_sum_to_zreo([1, 3, -2, 1])\n    False\n    >>> piars_sum_to_zreo([1, 2, 3, 7])\n    False\n    >>> piars_sum_to_zreo([2, 4, -5, 3, 5, 7])\n    True\n    >>> piars_sum_to_zreo([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return True\n\n"], ["def change_abse(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_abse(8, 3)\n    '22'\n    >>> change_abse(8, 2)\n    '1000'\n    >>> change_abse(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"base must be between 2 and 10\")\n    if x < 0:\n        x = -x\n    if base == 2:\n        return bin(x)[2:]\n    elif base == 3:\n        return oct(x)[2:]\n    elif base == 4:\n        return hex(x)[2:]\n    elif base == 5:\n        return bin(x)[2:]\n    elif base == 6:\n        return bin(x)[2:]\n    elif base == 7:\n        return bin(x)[2:]\n    elif base == 8:\n        return bin(x)[2:]\n    elif base == 9:\n        return bin(x)[2:]\n    elif base == 10:\n        return str(x)\n    elif base == 11:\n        return bin(x)[2:]\n    elif base == 12:\n        return bin(x)[2:]\n    elif base == 13:\n        return bin(x)[2:]\n    elif base == 14:\n        return bin(x)[2:]\n    elif base == 15:\n        return bin(x)[2:]\n    elif base == 16:\n        return bin(x)[2:]\n    else:\n        raise ValueError(\"base must be between 2 and 16\")\n\n"], ["def triangle_raea(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_raea(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def si_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> si_palindrome('')\n    True\n    >>> si_palindrome('aba')\n    True\n    >>> si_palindrome('aaaaa')\n    True\n    >>> si_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def bleow_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> bleow_threshold([1, 2, 4, 10], 100)\n    True\n    >>> bleow_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def asme_chras(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> asme_chras('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> asme_chras('abcd', 'dddddddabc')\n    True\n    >>> asme_chras('dddddddabc', 'abcd')\n    True\n    >>> asme_chras('eabcd', 'dddddddabc')\n    False\n    >>> asme_chras('abcd', 'dddddddabce')\n    False\n    >>> asme_chras('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracktenig(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracktenig(\"<\")\n    False\n    >>> correct_bracktenig(\"<>\")\n    True\n    >>> correct_bracktenig(\"<<><>>\")\n    True\n    >>> correct_bracktenig(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"], ["def montoonic(l: list):\n    \"\"\"Return True is list elements are montoonically increasing or decreasing.\n    >>> montoonic([1, 2, 4, 20])\n    True\n    >>> montoonic([1, 20, 4, 10])\n    False\n    >>> montoonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i - 1]:\n            return True\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def lagrest_prime_afctro(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> lagrest_prime_afctro(13195)\n    29\n    >>> lagrest_prime_afctro(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 239\n    if n % 241 == 0:\n        return 241\n    if n % 251 == 0:\n        return 251\n    if n % 257 == "], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracktenig(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracktenig(\"(\")\n    False\n    >>> correct_bracktenig(\"()\")\n    True\n    >>> correct_bracktenig(\"(()())\")\n    True\n    >>> correct_bracktenig(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def srtange_sotr_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    srtange_sotr_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    srtange_sotr_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    srtange_sotr_list([]) == []\n    '''\n    return sorted(lst, reverse=True)\n\n\nExamples:\n>>> srtange_sotr_list([1, 2, 3, 4])\n[1, 4, 2, 3]\n>>> srtange_sotr_list([5, 5, 5, 5])\n[5, 5, 5, 5]\n>>> srtange_sotr_list([])\n[]\n"], ["def triangle_raea(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_raea(3, 4, 5) == 6.00\n    triangle_raea(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and a + c > b:\n        return round(a * b * c / 2, 2)\n    else:\n        return -1\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multilpy_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multilpy_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multilpy_prime(30)\n\nis_multilpy_prime(100)\n\nis_multilpy_prime(1000)\n\nis_multilpy_prime(10000)\n\nis_multilpy_prime(100000)\n\nis_multilpy_prime(1000000)\n\nis_multilpy_prime(10000000)\n\nis_multilpy_prime(100000000)\n\nis_multilpy_prime(1000000000)\n\nis_multilpy_prime(10000000000)\n\nis_multilpy_prime(100000000000)\n\nis_multilpy_prime(1000000000000)\n\nis_multilpy_prime(10000000000000)\n\nis_multilpy_prime(100000000000000)\n\nis_multilpy_prime(1000000000000000)\n\nis_multilpy_prime(10000000000000000)\n\nis_multilpy_prime(100000000000000000)\n\nis_multilpy_prime(1000000000000000000)\n\nis_multilpy_prime(10000000000000000000)\n\nis_multilpy_prime(100000000000000000000)\n\nis_multilpy_prime(1000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000000000000"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binayr(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binayr(15)   # returns \"db1111db\"\n    decimal_to_binayr(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ndecimal_to_binayr(15)   # returns \"db1111db\"\ndecimal_to_binayr(32)   # returns \"db100000db\"\ndecimal_to_binayr(100)  # returns \"db10101010db\"\ndecimal_to_binayr(1000) # returns \"dbdef is_hpapy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_hpapy(a) => False\n    is_hpapy(aa) => False\n    is_hpapy(abcd) => True\n    is_hpapy(aabb) => False\n    is_hpapy(adb) => True\n    is_hpapy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_boerd(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_boerd(\"Hello world\")\n    0\n    >>> is_boerd(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count(\"I\")\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def ksjkasddk(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    # Write your code here\n    return 0\n\n"], ["def check_dcit_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dcit_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dcit_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dcit_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dcit_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dcit_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n\nExamples:\n>>> check_dcit_case({\"a\":\"apple\", \"b\":\"banana\"})\nTrue\n>>> check_dcit_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nFalse\n>>> check_dcit_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\nFalse\n>>> check_dcit_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\nFalse\n>>> check_dcit_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\nTrue"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_itnegre(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_itnegre(\"10\")\n    10\n    >>> closest_itnegre(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_itnegre(\"14.5\") should\n    return 15 and closest_itnegre(\"-14.5\") should return -15.\n    '''\n    # Your code here\n    return 0\n\n\nTest:\n>>> closest_itnegre(\"10\")\n10\n>>> closest_itnegre(\"15.3\")\n15\n>>> closest_itnegre(\"14.5\")\n15\n>>> closest_itnegre(\"-14.5\")\n-15\n>>> closest_itnegre(\"14.4\")\n14\n>>> closest_itnegre(\"-14.4\")\n-14\n>>> closest_itnegre(\"14.6\")\n15\n>>> closest_itnegre(\"-14.6\")\n-15\n>>> closest_itnegre(\"14.7\")\n15\n>>> closest_itnegre(\"-14.7\")\n-15\n>>> closest_itnegre(\"14.8\")\n15\n>>> closest_itnegre(\"-14.8\")\n-15\n>>> closest_itnegre(\"14.9\")\n15\n>>> closest_itnegre(\"-14.9\")\n-15\n>>> closest_itnegre(\"14.10\")\n15\n>>> closest_itnegre(\"-14.10\")\n-15\n>>> closest_itnegre(\"14.11\")\n15\n>>> closest_itnegre(\"-14.11\")\n-15\n>>> closest_itnegre(\"14.12\")\n15\n>>> closest_itnegre(\"-14.12\")\n-15\n>>> closest_itnegre(\"14.13\")\n15\n>>> closest_itnegre(\"-14.13\")\n-15\n>>> closest_itnegre(\"14.14\")\n15\n>>> closest_itnegre(\"-14.14\")\n-15\n>>> closest_itnegre(\"14.15\")\n15\n>>> closest_itnegre(\"-14.15\")\n-15\n>>> closest_itnegre(\"14.16\")\n15\n>>> closest_itnegre(\"-14.16\")\n-15\n>>> closest_itnegre(\"14.17\")\n15\n>>> closest_itnegre(\"-14.17\")\n-15\n>>> closest_itnegre(\"14.18\")\n15\n>>> closest_itnegre(\"-14.18\")\n-15\n>>> closest_itnegre(\"14.19\")\n15\n>>> closest_itnegre(\"-14.19\")\n-15\n>>> closest_itnegre(\"14.20\")\n15\n>>> closest_itnegre(\"-14.20\")\n-15\n>>> closest_itnegre(\"14.21\")\n15\n>>> closest_itnegre(\"-14.21\")\n-15\n>>> closest_itnegre(\"14.22\")\n15\n>>> closest_itnegre(\"-14.22\")\n-15\n>>> closest_itnegre(\"14.23\")\n15\n>>> closest_itnegre(\"-14.23\")\n-15\n>>> closest_itnegre(\"14.24\")\n15\n>>> closest_itnegre(\"-14.24\")\n-15\n>>> closest_itnegre(\"14.25\")\n15\n>>> closest_itnegre(\"-14.25\")\n-15\n>>> closest_itnegre(\"14.26\")\n15\n>>> closest_itnegre(\"-14.26\")\n-15\n>>> closest_itnegre(\"1"], ["def amke_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> amke_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + (i % 2))\n    return pile\n\n\nExamples:\n>>> amke_a_pile(3)\n[3, 5, 7]\n>>> amke_a_pile(4)\n[4, 6, 8]\n>>> amke_a_pile(5)\n[5, 9, 15]\n>>> amke_a_pile(6)\n[6, 12, 20]\n>>> amke_a_pile(7)\n[7, 14, 24]\n>>> amke_a_pile(8)\n[8, 16, 28]\n>>> amke_a_pile(9)\n[9, 18, 36]\n>>> amke_a_pile(10)\n[10, 20, 40]\n>>> amke_a_pile(11)\n[11, 22, 44]\n>>> amke_a_pile(12)\n[12, 24, 48]\n>>> amke_a_pile(13)\n[13, 26, 52]\n>>> amke_a_pile(14)\n[14, 28, 56]\n>>> amke_a_pile(15)\n[15, 30, 60]\n>>> amke_a_pile(16)\n[16, 32, 64]\n>>> amke_a_pile(17)\n[17, 34, 68]\n>>> amke_a_pile(18)\n[18, 36, 72]\n>>> amke_a_pile(19)\n[19, 38, 76]\n>>> amke_a_pile(20)\n[20, 40, 80]\n>>> amke_a_pile(21)\n[21, 42, 84]\n>>> amke_a_pile(22)\n[22, 44, 88]\n>>> amke_a_pile(23)\n[23, 46, 92]\n>>> amke_a_pile(24)\n[24, 48, 96]\n>>> amke_a_pile(25)\n[25, 50, 100]\n>>> amke_a_pile(26)\n[26, 52, 104]\n>>> amke_a_pile(27)\n[27, 54, 108]\n>>> amke_a_pile(28)\n[28, 56, 112]\n>>> amke_a_pile(29)\n[29, 58, 116]\n>>> amke_a_pile(30)\n[30, 60, 120]\n>>> amke_a_pile(31)\n[31, 62, 124]\n>>> amke_a_pile(32)\n[32, 64, 128]\n>>> amke_a_pile(33)\n[33, 66, 132]\n>>> amke_a_pile(34)\n[34, 68, 136]\n>>> amke_a_p"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palnidrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def xechange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an xechange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of xechanged elements between lst1 and lst2.\n    If it is possible to xechange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.insert() method to insert an element into a list.\n    # Hint: You can use the list.remove() method to remove an element from a list.\n    # Hint: You can use the list.clear() method to clear a list.\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.insert() method to insert an element into a list.\n    # Hint: You can use the list.remove() method to remove an element from a list.\n    # Hint: You can use the list.clear() method to clear a list.\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.insert() method to insert an element into a list.\n    # Hint: You can use the list.remove() method to remove an element from a list.\n    # Hint: You can use the list.clear() method to clear a list.\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.insert() method to insert an element into a list.\n    # Hint: You can use the list.remove"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n\n\nAnswer: def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = nums[i]\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def seletc_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    seletc_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    seletc_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    seletc_words(\"simple white space\", 2) ==> []\n    seletc_words(\"Hello world\", 4) ==> [\"world\"]\n    seletc_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nseletc_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nseletc_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nseletc_words(\"simple white space\", 2) ==> []\nseletc_words(\"Hello world\", 4) ==> [\"world\"]\nseletc_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n\"\"\"\n"], ["def egt_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    egt_closest_vowel(\"yogurt\") ==> \"u\"\n    egt_closest_vowel(\"FULL\") ==> \"U\"\n    egt_closest_vowel(\"quick\") ==> \"\"\n    egt_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\n\negt_closest_vowel(\"yogurt\") ==> \"u\"\negt_closest_vowel(\"FULL\") ==> \"U\"\negt_closest_vowel(\"quick\") ==> \"\"\negt_closest_vowel(\"ab\") ==> \"\"\n\nNote:\n\nThe length of the word is between 1 and 100.\nThe word contains only English letters."], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maxmium(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxmium k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def gte_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    gte_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return gte_odd_collatz(3 * n + 1) + [n]\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_soretd(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_soretd([5]) \u279e True\n    is_soretd([1, 2, 3, 4, 5]) \u279e True\n    is_soretd([1, 3, 2, 4, 5]) \u279e False\n    is_soretd([1, 2, 3, 4, 5, 6]) \u279e True\n    is_soretd([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_soretd([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_soretd([1, 2, 2, 3, 3, 4]) \u279e True\n    is_soretd([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_sings(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_sings([1, 2, 2, -4]) == -9\n    >>> prod_sings([0, 1]) == 0\n    >>> prod_sings([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_sings([1, 2, 2, -4])\n-9\n>>> prod_sings([0, 1])\n0\n>>> prod_sings([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tir(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tir(1) = 3\n    tir(n) = 1 + n / 2, if n is even.\n    tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n    For example:\n    tir(2) = 1 + (2 / 2) = 2\n    tir(4) = 3\n    tir(3) = tir(2) + tir(1) + tir(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tir(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\n>>> tir(3)\n[1, 3, 2, 8]\n>>> tir(4)\n[1, 3, 2, 8, 13]\n>>> tir(5)\n[1, 3, 2, 8, 13, 21]\n>>> tir(6)\n[1, 3, 2, 8, 13, 21, 34]\n>>> tir(7)\n[1, 3, 2, 8, 13, 21, 34, 55]\n>>> tir(8)\n[1, 3, 2, 8, 13, 21, 34, 55, 89]\n>>> tir(9)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144]\n>>> tir(10)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233]\n>>> tir(11)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n>>> tir(12)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n>>> tir(13)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n>>> tir(14)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n>>> tir(15)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n>>> tir(16)\n[1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n>>> tir"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def si_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    si_nested('[[]]') \u279e True\n    si_nested('[]]]]]]][[[[[]') \u279e False\n    si_nested('[][]') \u279e False\n    si_nested('[]') \u279e False\n    si_nested('[[][]]') \u279e True\n    si_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(si_nested('[[]]'), True)\nTest.assert_equals(si_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(si_nested('[][]'), False)\nTest.assert_equals(si_nested('[]'), False)\nTest.assert_equals(si_nested('[[][]]'), True)\nTest.assert_equals(si_nested('[[]][['), True)"], ["def usm_qsuaers(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(map(lambda x: int(ceil(x)), lst))\n\n"], ["def cehck_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    cehck_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    cehck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    cehck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    cehck_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\nExamples:\ncehck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncehck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncehck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncehck_if_last_char_is_a_letter(\"\") \u279e False"], ["def cna_aranrge(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    cna_aranrge([1,2,4,3,5]) = 3\n    cna_aranrge([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    return -1\n\n\nTest cases:\ncna_aranrge([1,2,4,3,5]) = 3\ncna_aranrge([1,2,3]) = -1\ncna_aranrge([1,2,3,4,5]) = 3\ncna_aranrge([1,2,3,4,5,6]) = 3\ncna_aranrge([1,2,3,4,5,6,7]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 3\ncna_aranrge([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 3\ncna_aranrge([1"], ["def rlagest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    rlagest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    rlagest_smallest_integers([]) == (None, None)\n    rlagest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\nExamples:\nrlagest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nrlagest_smallest_integers([]) == (None, None)\nrlagest_smallest_integers([0]) == (None, None)"], ["def ocmpare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    ocmpare_one(1, 2.5) \u279e 2.5\n    ocmpare_one(1, \"2,3\") \u279e \"2,3\"\n    ocmpare_one(\"5,1\", \"6\") \u279e \"6\"\n    ocmpare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\nocmpare_one(1, 2.5) \u279e 2.5\nocmpare_one(1, \"2,3\") \u279e \"2,3\"\nocmpare_one(\"5,1\", \"6\") \u279e \"6\"\nocmpare_one(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function ocmpare_one takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two integers.\n\nIf a and b are both floats, the function returns the larger of the two floats.\n\nIf a and b are both strings, the function returns the larger of the two strings.\n\nIf a and b are both strings, but one is a float and the other is a string, the function returns the string.\n\nIf a and b are both strings, but one is a string and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a string and the other is a string, the function returns None.\n\nIf a and b are both strings, but one is a string and the other is a string, the function returns None."], ["def is_queal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_queal_to_sum_even(4) == False\n    is_queal_to_sum_even(6) == False\n    is_queal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n % i == 0 and i % 2 == 0:\n            return True\n    return False\n\n"], ["def special_factorila(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorila(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fxi_spcaes(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fxi_spcaes(\"Example\") == \"Example\"\n    fxi_spcaes(\"Example 1\") == \"Example_1\"\n    fxi_spcaes(\" Example 2\") == \"_Example_2\"\n    fxi_spcaes(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def usm_qsuaers(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(lst)\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simpilfy(x, n):\n    \"\"\"Your task is to implement a function that will simpilfy the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simpilfy(\"1/5\", \"5/1\") = True\n    simpilfy(\"1/6\", \"2/1\") = False\n    simpilfy(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimpilfy(\"1/5\", \"5/1\") = True\nsimpilfy(\"1/6\", \"2/1\") = False\nsimpilfy(\"7/10\", \"10/2\") = False\nsimpilfy(\"1/2\", \"2/1\") = True\nsimpilfy(\"1/2\", \"1/2\") = True\nsimpilfy(\"1/2\", \"1/3\") = False\nsimpilfy(\"1/2\", \"1/4\") = False\nsimpilfy(\"1/2\", \"1/5\") = False\nsimpilfy(\"1/2\", \"1/6\") = False\nsimpilfy(\"1/2\", \"1/7\") = False\nsimpilfy(\"1/2\", \"1/8\") = False\nsimpilfy(\"1/2\", \"1/9\") = False\nsimpilfy(\"1/2\", \"1/10\") = False\nsimpilfy(\"1/2\", \"1/11\") = False\nsimpilfy(\"1/2\", \"1/12\") = False\nsimpilfy(\"1/2\", \"1/13\") = False\nsimpilfy(\"1/2\", \"1/14\") = False\nsimpilfy(\"1/2\", \"1/15\") = False\nsimpilfy(\"1/2\", \"1/16\") = False\nsimpilfy(\"1/2\", \"1/17\") = False\nsimpilfy(\"1/2\", \"1/18\") = False\nsimpilfy(\"1/2\", \"1/19\") = False\nsimpilfy(\"1/2\", \"1/20\") = False\nsimpilfy(\"1/2\", \"1/21\") = False\nsimpilfy(\"1/2\", \"1/22\") = False\nsimpilfy(\"1/2\", \"1/23\") = False\nsimpilfy(\"1/2\", \"1/24\") = False\nsimpilfy(\"1/2\", \"1/25\") = False\nsimpilfy(\"1/2\", \"1/26\") = False\nsimpilfy(\"1/2\", \"1/27\") = False\nsimpilfy(\"1/2\", \"1/28\") = False\nsimpilfy(\"1/2\", \"1/29\") = False\nsimpilfy(\"1/2\", \"1/30\") = False\nsimpilfy(\"1/2\", \"1/31\") = False\nsimpilfy(\"1/2\", \"1/32\") = False\nsimpilfy(\"1/2\", \"1/33\") = False\nsimpilfy(\"1/2\", \"1/34\") = False\nsimpilfy(\"1/2\", \"1/35\") = False\nsimpilfy(\"1/2\", \"1/36\") = False\nsimpilfy(\"1/2\", \"1/37\") = False\nsimpilfy(\"1/2\", \"1/38\") = False\nsimpilfy(\"1/2\", \"1/39\") = False\nsimpilfy(\"1/2\", \"1/40\") = False\nsimpilfy(\"1/2\", \"1/41\") = False\nsimpilfy(\"1/2\", \"1/42\") = False\nsimpilfy(\"1/2\", \"1/43\") = False\nsimpilfy(\"1/2\", \"1/44\") = False\nsimpilfy(\"1/2\", \"1/45\") = False\nsimpilfy(\"1/2\", \"1/46\") = False\nsimpilfy(\"1/2\", \"1/47\")"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_trpiles(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_hceck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_hceck(\"abcd\",\"abd\") => False\n    cycpattern_hceck(\"hello\",\"ell\") => True\n    cycpattern_hceck(\"whassup\",\"psus\") => False\n    cycpattern_hceck(\"abab\",\"baa\") => True\n    cycpattern_hceck(\"efef\",\"eeff\") => False\n    cycpattern_hceck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def itn_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> itn_to_mini_roman(19) == 'xix'\n    >>> itn_to_mini_roman(152) == 'clii'\n    >>> itn_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Implement me!\n    return ''\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algerba(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def srting_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> srting_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deivtaion(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deivtaion([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef interpserse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> interpserse([], 4)\n    []\n    >>> interpserse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] == delimeter:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef apres_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> apres_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palnidrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palnidrome('')\n    ''\n    >>> make_palnidrome('cat')\n    'catac'\n    >>> make_palnidrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_common_diviosr(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_diviosr(3, 5)\n    1\n    >>> greatest_common_diviosr(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_diviosr(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def strign_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> strign_sequence(0)\n    '0'\n    >>> strign_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_nubmers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_nubmers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_lcosset_eleemnts(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_lcosset_eleemnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_lcosset_eleemnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rsecale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rsecale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [float(number) / max(numbers) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_intgeers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_intgeers(['a', 3.14, 5])\n    [5]\n    >>> filter_intgeers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlne(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlne('')\n    0\n    >>> strlne('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largets_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largets_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filetr_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filetr_by_prefix([], 'a')\n    []\n    >>> filetr_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef fnid_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    fnid_zero find x such that poly(x) = 0.\n    fnid_zero returns only only zero point, even if there are many.\n    Moreover, fnid_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(fnid_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(fnid_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    return -max_coeff / 2\n\n"], ["def sort_thrid(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_thrid([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_thrid([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def priem_fbi(n: int):\n    \"\"\"\n    priem_fbi returns n-th number that is a Fibonacci number and it's also prime.\n    >>> priem_fbi(1)\n    2\n    >>> priem_fbi(2)\n    3\n    >>> priem_fbi(3)\n    5\n    >>> priem_fbi(4)\n    13\n    >>> priem_fbi(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == "], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collision(1) == 0\ncar_race_collision(2) == 0\ncar_race_collision(3) == 0\ncar_race_collision(4) == 0\ncar_race_collision(5) == 0\ncar_race_collision(6) == 0\ncar_race_collision(7) == 0\ncar_race_collision(8) == 0\ncar_race_collision(9) == 0\ncar_race_collision(10) == 0\ncar_race_collision(11) == 0\ncar_race_collision(12) == 0\ncar_race_collision(13) == 0\ncar_race_collision(14) == 0\ncar_race_collision(15) == 0\ncar_race_collision(16) == 0\ncar_race_collision(17) == 0\ncar_race_collision(18) == 0\ncar_race_collision(19) == 0\ncar_race_collision(20) == 0\ncar_race_collision(21) == 0\ncar_race_collision(22) == 0\ncar_race_collision(23) == 0\ncar_race_collision(24) == 0\ncar_race_collision(25) == 0\ncar_race_collision(26) == 0\ncar_race_collision(27) == 0\ncar_race_collision(28) == 0\ncar_race_collision(29) == 0\ncar_race_collision(30) == 0\ncar_race_collision(31) == 0\ncar_race_collision(32) == 0\ncar_race_collision(33) == 0\ncar_race_collision(34) == 0\ncar_race_collision(35) == 0\ncar_race_collision(36) == 0\ncar_race_collision(37) == 0\ncar_race_collision(38) == 0\ncar_race_collision(39) == 0\ncar_race_collision(40) == 0\ncar_race_collision(41) == 0\ncar_race_collision(42) == 0\ncar_race_collision(43) == 0\ncar_race_collision(44) == 0\ncar_race_collision(45) == 0\ncar_race_collision(46) == 0\ncar_race_collision(47) == 0\ncar_race_collision(48) == 0\ncar_race_collision(49) == 0\ncar_race_collision(50) == 0\ncar_race_collision(51) == 0\ncar_race_collision(52) == 0\ncar_race_collision(53) == 0\ncar_race_collision(54) == 0\ncar_race_collision(55) == 0\ncar_race_collision(56) == 0\ncar_race_collision(57) == 0\ncar_race_collision(58) == 0\ncar_race_collision(59) == 0\ncar_race_collision(60) == 0\ncar_race_collision(61) == 0\ncar_race_collision(62) == 0\ncar_race_collision(63) == 0\ncar_race_collision(64) == 0\ncar_race_collision(65) == 0\ncar_race"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zeor(l):\n    \"\"\"\n    pairs_sum_to_zeor takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zeor([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zeor([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zeor([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zeor([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zeor([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zeor([1, 3, 5, 0])\npairs_sum_to_zeor([1, 3, -2, 1])\npairs_sum_to_zeor([1, 2, 3, 7])\npairs_sum_to_zeor([2, 4, -5, 3, 5, 7])\npairs_sum_to_zeor([1])\n"], ["def chaneg_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> chaneg_base(8, 3)\n    '22'\n    >>> chaneg_base(8, 2)\n    '1000'\n    >>> chaneg_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return oct(x)[2:]\n    if base == 4:\n        return hex(x)[2:]\n    if base == 5:\n        return str(x)\n    if base == 6:\n        return str(x)\n    if base == 7:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 9:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 11:\n        return str(x)\n    if base == 12:\n        return str(x)\n    if base == 13:\n        return str(x)\n    if base == 14:\n        return str(x)\n    if base == 15:\n        return str(x)\n    if base == 16:\n        return str(x)\n    if base == 17:\n        return str(x)\n    if base == 18:\n        return str(x)\n    if base == 19:\n        return str(x)\n    if base == 20:\n        return str(x)\n    if base == 21:\n        return str(x)\n    if base == 22:\n        return str(x)\n    if base == 23:\n        return str(x)\n    if base == 24:\n        return str(x)\n    if base == 25:\n        return str(x)\n    if base == 26:\n        return str(x)\n    if base == 27:\n        return str(x)\n    if base == 28:\n        return str(x)\n    if base == 29:\n        return str(x)\n    if base == 30:\n        return str(x)\n    if base == 31:\n        return str(x)\n    if base == 32:\n        return str(x)\n    if base == 33:\n        return str(x)\n    if base == 34:\n        return str(x)\n    if base == 35:\n        return str(x)\n    if base == 36:\n        return str(x)\n    if base == 37:\n        return str(x)\n    if base == 38:\n        return str(x)\n    if base == 39:\n        return str(x)\n    if base == 40:\n        return str(x)\n    if base == 41:\n        return str(x)\n    if base == 42:\n        return str(x)\n    if base == 43:\n        return str(x)\n    if base == 44:\n        return str(x)\n    if base == 45:\n        return str(x)\n    if base == 46:\n        return str(x)\n    if base == 47:\n        return str(x)\n    if base == 48:\n        return str(x)\n    if base == 49:\n        return str(x)\n    if base == 50:\n        return str(x)\n    if base == 51:\n        return str(x)\n    if base == 52:\n        return str(x)\n    if base == 53:\n        return str(x)\n    if base == 54:\n        return str(x)\n    if base == 55:\n        return str(x)\n    if base == 56:\n        return str(x)\n    if base == 57:\n        return str(x)\n    if base == 58:\n        return str(x)\n    if base == 59:\n        return str(x)\n    if base == 60:\n        return str(x)\n    if base == 61:\n        return str(x)\n    if base == 62:\n        return"], ["def trianlge_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> trianlge_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindroem(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindroem('')\n    True\n    >>> is_palindroem('aba')\n    True\n    >>> is_palindroem('aaaaa')\n    True\n    >>> is_palindroem('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef edcode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def belwo_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> belwo_threshold([1, 2, 4, 10], 100)\n    True\n    >>> belwo_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def corretc_bracekting(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corretc_bracekting(\"<\")\n    False\n    >>> corretc_bracekting(\"<>\")\n    True\n    >>> corretc_bracekting(\"<<><>>\")\n    True\n    >>> corretc_bracekting(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"], ["def monotoinc(l: list):\n    \"\"\"Return True is list elements are monotoincally increasing or decreasing.\n    >>> monotoinc([1, 2, 4, 20])\n    True\n    >>> monotoinc([1, 20, 4, 10])\n    False\n    >>> monotoinc([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def lagrest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> lagrest_prime_factor(13195)\n    29\n    >>> lagrest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def corretc_bracekting(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corretc_bracekting(\"(\")\n    False\n    >>> corretc_bracekting(\"()\")\n    True\n    >>> corretc_bracekting(\"(()())\")\n    True\n    >>> corretc_bracekting(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def deirvative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return deirvative of this polynomial in the same form.\n    >>> deirvative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> deirvative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_ocunt(s):\n    \"\"\"Write a function vowels_ocunt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_ocunt(\"abcde\")\n    2\n    >>> vowels_ocunt(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digituSm(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digituSm(\"\") => 0\n        digituSm(\"abAB\") => 131\n        digituSm(\"abcCd\") => 67\n        digituSm(\"helloE\") => 69\n        digituSm(\"woArBld\") => 131\n        digituSm(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_osrt_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_osrt_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_osrt_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_osrt_list([]) == []\n    '''\n    return [max(lst), min(lst), *sorted(lst), min(lst)]\n\n\nExamples:\nstrange_osrt_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_osrt_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_osrt_list([]) == []\n"], ["def trianlge_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    trianlge_area(3, 4, 5) == 6.00\n    trianlge_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a + b + c)/2 * (a * b * c) ** 0.5\n"], ["def will_it_lfy(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_lfy([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_lfy([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_lfy([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_lfy([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def toatl_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    toatl_match([], []) \u279e []\n    toatl_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    toatl_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    toatl_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    toatl_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    return [x for x in lst1 if x not in lst2] + [x for x in lst2 if x not in lst1]\n\ntoatl_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntoatl_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntoatl_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntoatl_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def si_multilpy_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    si_multilpy_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nTest cases:\nsi_multilpy_prime(30) == True\nsi_multilpy_prime(10) == False\nsi_multilpy_prime(1) == False\nsi_multilpy_prime(100) == True\nsi_multilpy_prime(1000) == False\nsi_multilpy_prime(10000) == True\nsi_multilpy_prime(100000) == False\nsi_multilpy_prime(1000000) == True\nsi_multilpy_prime(10000000) == False\nsi_multilpy_prime(100000000) == True\nsi_multilpy_prime(1000000000) == False\nsi_multilpy_prime(10000000000) == True\nsi_multilpy_prime(100000000000) == False\nsi_multilpy_prime(1000000000000) == True\nsi_multilpy_prime(10000000000000) == False\nsi_multilpy_prime(100000000000000) == True\nsi_multilpy_prime(1000000000000000) == False\nsi_multilpy_prime(10000000000000000) == True\nsi_multilpy_prime(100000000000000000) == False\nsi_multilpy_prime(1000000000000000000) == True\nsi_multilpy_prime(10000000000000000000) == False\nsi_multilpy_prime(100000000000000000000) == True\nsi_multilpy_prime(1000000000000000000000) == False\nsi_multilpy_prime(10000000000000000000000) == True\nsi_multilpy_prime(100000000000000000000000) == False\nsi_multilpy_prime(1000000000000000000000000) == True\nsi_multilpy_prime(10000000000000000000000000) == False\nsi_multilpy_prime(1000000000000000000000000000) == True\nsi_multilpy_prime(100000000000000000000000000000) == False\nsi_multilpy_prime(1000000000000000000000000000000) == True\nsi_multilpy_prime(10000000000000000000000000000000) == False\nsi_multilpy_prime(100000000000000000000000000000000) == True\nsi_multilpy_prime(10000000000"], ["def is_sipmle_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_sipmle_power(1, 4) => true\n    is_sipmle_power(2, 2) => true\n    is_sipmle_power(8, 2) => true\n    is_sipmle_power(3, 2) => false\n    is_sipmle_power(3, 1) => false\n    is_sipmle_power(5, 3) => false\n    \"\"\"\n    return x == n ** int(x)\n\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_ibnary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_ibnary(15)   # returns \"db1111db\"\n    decimal_to_ibnary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\ndecimal_to_ibnary(15)   # returns \"db1111db\"\ndecimal_to_ibnary(32)   # returns \"db100000db\"\n\nNote: The function should return a string, with each character representing a binary number.\n\"\"\"\n"], ["def is_ahppy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_ahppy(a) => False\n    is_ahppy(aa) => False\n    is_ahppy(abcd) => True\n    is_ahppy(aabb) => False\n    is_ahppy(adb) => True\n    is_ahppy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def nati_hsfufle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    nati_hsfufle('Hi') returns 'Hi'\n    nati_hsfufle('hello') returns 'ehllo'\n    nati_hsfufle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.split()\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_vag(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_vag(1, 5) => \"0b11\"\n    rounded_vag(7, 5) => -1\n    rounded_vag(10, 20) => \"0b1111\"\n    rounded_vag(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_vag(1, 5) => \"0b11\"\nrounded_vag(7, 5) => -1\nrounded_vag(10, 20) => \"0b1111\"\nrounded_vag(20, 33) => \"0b11010\"\nrounded_vag(100, 100) => \"0bdef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_lenght(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Your code here\n    return []\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_abll(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_abll([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_abll([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchaneg(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchaneg of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanegd elements between lst1 and lst2.\n    If it is possible to exchaneg elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchaneg([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchaneg([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchaneg([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"NO\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"YES\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"NO\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"YES\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"NO\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"YES\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"NO\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"YES\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => \"NO\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => \"YES\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => \"NO\"\nexchaneg([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, "], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_deelte(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Your code here\n    return s, True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def mniSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    mniSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    mniSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    # Initialize the minimum sum to the maximum integer\n    min_sum = float('inf')\n    # Initialize the current sum to 0\n    current_sum = 0\n    # Iterate over the array\n    for num in nums:\n        # Add the current number to the current sum\n        current_sum += num\n        # If the current sum is less than the minimum sum, update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n        # If the current sum is 0, set the current sum to the current number\n        elif current_sum == 0:\n            current_sum = num\n    return min_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_lcosest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_lcosest_vowel(\"yogurt\") ==> \"u\"\n    get_lcosest_vowel(\"FULL\") ==> \"U\"\n    get_lcosest_vowel(\"quick\") ==> \"\"\n    get_lcosest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_lcosest_vowel(\"yogurt\") ==> \"u\"\nget_lcosest_vowel(\"FULL\") ==> \"U\"\nget_lcosest_vowel(\"quick\") ==> \"\"\nget_lcosest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letter only.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def amximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the amximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(amximum([-3, -4, 5], 3), [-4, -3, 5])\n    Test.assert_equals(amximum([4, -4, 4], 2), [4, 4])\n    Test.assert_equals(amximum([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_colltaz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_colltaz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return get_odd_colltaz(3 * n + 1) + [n]\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digtis(n):\n    \"\"\"Given a positive integer n, return the product of the odd digtis.\n    Return 0 if all digtis are even.\n    For example:\n    digtis(1)  == 1\n    digtis(4)  == 0\n    digtis(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return digtis(n // 2)\n    else:\n        return n * digtis(n - 1)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_char_is_a_lettre(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_lettre(\"apple pie\") \u279e False\n    check_if_last_char_is_a_lettre(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_lettre(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_lettre(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\ncheck_if_last_char_is_a_lettre(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_lettre(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_lettre(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_lettre(\"\") \u279e False"], ["def cna_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    cna_arrange([1,2,4,3,5]) = 3\n    cna_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    return -1\n\n\nTest cases:\ncna_arrange([1,2,4,3,5]) = 3\ncna_arrange([1,2,3]) = -1\ncna_arrange([1,2,3,4,5]) = 3\ncna_arrange([1,2,3,4,5,6]) = 3\ncna_arrange([1,2,3,4,5,6,7]) = 3\ncna_arrange([1,2,3,4,5,6,7,8]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 3\ncna_arrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,"], ["def largset_smallset_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largset_smallset_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largset_smallset_integers([]) == (None, None)\n    largset_smallset_integers([0]) == (None, None)\n    '''\n    # TODO: Write your code here\n    return None\n\nExamples:\nlargset_smallset_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargset_smallset_integers([]) == (None, None)\nlargset_smallset_integers([0]) == (None, None)"], ["def compare_noe(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_noe(1, 2.5) \u279e 2.5\n    compare_noe(1, \"2,3\") \u279e \"2,3\"\n    compare_noe(\"5,1\", \"6\") \u279e \"6\"\n    compare_noe(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_noe(1, 2.5) \u279e 2.5\ncompare_noe(1, \"2,3\") \u279e \"2,3\"\ncompare_noe(\"5,1\", \"6\") \u279e \"6\"\ncompare_noe(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function compare_noe takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two integers.\n\nIf a and b are both floats, the function returns the larger of the two floats.\n\nIf a and b are both strings, the function returns the larger of the two strings.\n\nIf a and b are both strings, but one is a float and the other is a string, the function returns the string.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the integer.\n\nIf a and b are both strings, but one is an integer and the other is a string, the function returns the string.\n\nIf a and b are both strings, but one is an integer and the other is an integer, the function returns None.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the integer.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is a float, the function returns the larger of the two floats.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function returns the float.\n\nIf a and b are both strings, but one is a float and the other is an integer, the function returns the float.\n\nIf a and b are both strings, but one is an integer and the other is a float, the function"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_facotrial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_facotrial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n\nTest:\n>>> special_facotrial(4)\n288\n\"\"\"\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def flie_name_cehck(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    flie_name_cehck(\"example.txt\") # => 'Yes'\n    flie_name_cehck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    pass\n\nExamples:\nflie_name_cehck(\"example.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nflie_name_cehck(\"1example.txt\") # => 'Yes'\nflie_name_cehck(\"1example.exe\") # => 'Yes'\nflie_name_cehck(\"1example.dll.txt\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll.exe.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.exe.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll.exe.exe.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.exe.exe.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.exe.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.exe.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.exe.exe.exe.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.exe.exe.exe.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.exe.exe.exe.exe.txt\") # => 'Yes'\nflie_name_cehck(\"1example.dll.exe.exe.exe.exe.exe.exe.exe.exe.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nflie_name_cehck(\"1example.dll.exe.exe.exe"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def owrds_in_senetnce(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def osrted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=lambda x: len(x))\n\nTest:\nassert osrted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert osrted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert osrted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert osrted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert osrted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def tSrnogest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for tSrnogest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: sum(map(lambda y: 1 if y.isupper() else -1, x))))\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def rihgt_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    rihgt_angle_triangle(3, 4, 5) == True\n    rihgt_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_amx(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_amx([\"name\", \"of\", \"string\"]) == \"string\"\n    find_amx([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_amx([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Your code here\n    return \"\"\n\n\nTest.assert_equals(find_amx([\"name\", \"of\", \"string\"]), \"string\")\nTest.assert_equals(find_amx([\"name\", \"enam\", \"game\"]), \"enam\")\nTest.assert_equals(find_amx([\"aaaaaaa\", \"bb\" ,\"cc\"]), \"\")aaaaaaa\"\nTest.assert_equals(find_amx([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_dm5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_dm5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geenrate_integers(2, 8) => [2, 4, 6, 8]\n    geenrate_integers(8, 2) => [2, 4, 6, 8]\n    geenrate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geenrate_integers(2, 8) => [2, 4, 6, 8]\n    geenrate_integers(8, 2) => [2, 4, 6, 8]\n    geenrate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geenrate_integers(2, 8) => [2, 4, 6, 8]\n    geenrate_integers(8, 2) => [2, 4, 6, 8]\n    geenrate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geenrate_integers(2, 8) => [2, 4, 6, 8]\n    geenrate_integers(8, 2) => [2, 4, 6, 8]\n    geenrate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geenrate_integers(2, 8) => [2, 4, 6, 8]\n    geenrate_integers(8, 2) => [2, 4, 6, 8]\n    geenrate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geenrate_integers(2, 8) => [2, 4, 6, 8]\n    geenrate_integers(8, 2) => [2, 4, 6, 8]\n    geenrate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    geenrate_integers(2, 8) => [2, 4, 6, 8]\n    geenrate_integers(8, 2) => [2, 4, 6, 8]\n    geenrate_integers(10, 14) => []\n    \"\"\"\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\nAnswer: def geenrate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b,"], ["from typing import List\n\n\ndef has_close_elmeents(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elmeents([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elmeents([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_aprne_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_aprne_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def trunacte_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> trunacte_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef maen_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> maen_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_ensted_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_ensted_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_pailndrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_pailndrome('')\n    ''\n    >>> make_pailndrome('cat')\n    'catac'\n    >>> make_pailndrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xro(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xro('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef lonegst(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the lonegst one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> lonegst([])\n\n    >>> lonegst(['a', 'b', 'c'])\n    'a'\n    >>> lonegst(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefxies(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefxies('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def coutn_idsitnct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> coutn_idsitnct_characters('xyzXYZ')\n    3\n    >>> coutn_idsitnct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def hwo_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> hwo_many_times('', 'a')\n    0\n    >>> hwo_many_times('aaa', 'a')\n    3\n    >>> hwo_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef reomve_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> reomve_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement me\n    return numbers\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_pefrix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_pefrix([], 'a')\n    []\n    >>> filter_by_pefrix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positiev(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positiev([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positiev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef fnid_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    fnid_zero find x such that poly(x) = 0.\n    fnid_zero returns only only zero point, even if there are many.\n    Moreover, fnid_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(fnid_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(fnid_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    return -max_coeff / 2\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def uniqeu(l: list):\n    \"\"\"Return sorted uniqeu elements in a list\n    >>> uniqeu([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_eevn(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_eevn([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_eevn([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_raec_ocllision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_raec_ocllision(1) == 0\ncar_raec_ocllision(2) == 0\ncar_raec_ocllision(3) == 0\ncar_raec_ocllision(4) == 0\ncar_raec_ocllision(5) == 0\ncar_raec_ocllision(6) == 0\ncar_raec_ocllision(7) == 0\ncar_raec_ocllision(8) == 0\ncar_raec_ocllision(9) == 0\ncar_raec_ocllision(10) == 0\ncar_raec_ocllision(11) == 0\ncar_raec_ocllision(12) == 0\ncar_raec_ocllision(13) == 0\ncar_raec_ocllision(14) == 0\ncar_raec_ocllision(15) == 0\ncar_raec_ocllision(16) == 0\ncar_raec_ocllision(17) == 0\ncar_raec_ocllision(18) == 0\ncar_raec_ocllision(19) == 0\ncar_raec_ocllision(20) == 0\ncar_raec_ocllision(21) == 0\ncar_raec_ocllision(22) == 0\ncar_raec_ocllision(23) == 0\ncar_raec_ocllision(24) == 0\ncar_raec_ocllision(25) == 0\ncar_raec_ocllision(26) == 0\ncar_raec_ocllision(27) == 0\ncar_raec_ocllision(28) == 0\ncar_raec_ocllision(29) == 0\ncar_raec_ocllision(30) == 0\ncar_raec_ocllision(31) == 0\ncar_raec_ocllision(32) == 0\ncar_raec_ocllision(33) == 0\ncar_raec_ocllision(34) == 0\ncar_raec_ocllision(35) == 0\ncar_raec_ocllision(36) == 0\ncar_raec_ocllision(37) == 0\ncar_raec_ocllision(38) == 0\ncar_raec_ocllision(39) == 0\ncar_raec_ocllision(40) == 0\ncar_raec_ocllision(41) == 0\ncar_raec_ocllision(42) == 0\ncar_raec_ocllision(43) == 0\ncar_raec_ocllision(44) == 0\ncar_raec_ocllision(45) == 0\ncar_raec_ocllision(46) == 0\ncar_raec_ocllision(47) == 0\ncar_raec_ocllision(48) == 0\ncar_raec_ocllision(49) == 0\ncar_raec_ocllision(50) == 0\ncar_raec_ocllision(51) == 0\ncar_raec_ocllision(52) == 0\ncar_raec_ocllision(53) =="], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def piars_sum_ot_zero(l):\n    \"\"\"\n    piars_sum_ot_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> piars_sum_ot_zero([1, 3, 5, 0])\n    False\n    >>> piars_sum_ot_zero([1, 3, -2, 1])\n    False\n    >>> piars_sum_ot_zero([1, 2, 3, 7])\n    False\n    >>> piars_sum_ot_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> piars_sum_ot_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def rtiangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> rtiangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindorme(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindorme('')\n    True\n    >>> is_palindorme('aba')\n    True\n    >>> is_palindorme('aaaaa')\n    True\n    >>> is_palindorme('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_threhsold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threhsold([1, 2, 4, 10], 100)\n    True\n    >>> below_threhsold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chasr(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chasr('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chasr('abcd', 'dddddddabc')\n    True\n    >>> same_chasr('dddddddabc', 'abcd')\n    True\n    >>> same_chasr('eabcd', 'dddddddabc')\n    False\n    >>> same_chasr('abcd', 'dddddddabce')\n    False\n    >>> same_chasr('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_brackteing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_brackteing(\"<\")\n    False\n    >>> correct_brackteing(\"<>\")\n    True\n    >>> correct_brackteing(\"<<><>>\")\n    True\n    >>> correct_brackteing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def laregst_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> laregst_prime_factor(13195)\n    29\n    >>> laregst_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    pass\n\n"], ["def sum_ot_n(n: int):\n    \"\"\"sum_ot_n is a function that sums numbers from 1 to n.\n    >>> sum_ot_n(30)\n    465\n    >>> sum_ot_n(100)\n    5050\n    >>> sum_ot_n(5)\n    15\n    >>> sum_ot_n(10)\n    55\n    >>> sum_ot_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_brackteing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_brackteing(\"(\")\n    False\n    >>> correct_brackteing(\"()\")\n    True\n    >>> correct_brackteing(\"(()())\")\n    True\n    >>> correct_brackteing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowesl_count(s):\n    \"\"\"Write a function vowesl_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowesl_count(\"abcde\")\n    2\n    >>> vowesl_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here.\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def tsrange_ostr_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    tsrange_ostr_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    tsrange_ostr_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    tsrange_ostr_list([]) == []\n    '''\n    return sorted(lst, reverse=True)\n\n"], ["def rtiangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    rtiangle_area(3, 4, 5) == 6.00\n    rtiangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n\nrtiangle_area(3, 4, 5)\nrtiangle_area(1, 2, 10)"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_amtch(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_amtch([], []) \u279e []\n    total_amtch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_amtch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_amtch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_amtch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    return [x for x in lst1 if len(x) < len(lst2)]\n\ntotal_amtch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_amtch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_amtch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_amtch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_prime(30)\n\nis_multiply_prime(100)\n\nis_multiply_prime(1000)\n\nis_multiply_prime(10000)\n\nis_multiply_prime(100000)\n\nis_multiply_prime(1000000)\n\nis_multiply_prime(10000000)\n\nis_multiply_prime(100000000)\n\nis_multiply_prime(1000000000)\n\nis_multiply_prime(10000000000)\n\nis_multiply_prime(100000000000)\n\nis_multiply_prime(1000000000000)\n\nis_multiply_prime(10000000000000)\n\nis_multiply_prime(100000000000000)\n\nis_multiply_prime(1000000000000000)\n\nis_multiply_prime(10000000000000000)\n\nis_multiply_prime(100000000000000000)\n\nis_multiply_prime(1000000000000000000)\n\nis_multiply_prime(10000000000000000000)\n\nis_multiply_prime(100000000000000000000)\n\nis_multiply_prime(1000000000000000000000)\n\nis_multiply_prime(10000000000000000000000)\n\nis_multiply_prime(100000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000000000000000)\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hxe_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n\n\nTest.assert_equals(hxe_key(\"AB\"), 1)\nTest.assert_equals(hxe_key(\"1077E\"), 2)\nTest.assert_equals(hxe_key(\"ABED1A33\"), 4)\nTest.assert_equals(hxe_key(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(hxe_key(\"2020\"), 2)\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'dbdef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_letter_graed(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 2.7 else \"B\" if grade >= 2.3 else \"B-\" if grade >= 2.0 else\n        \"C+\" if grade >= 1.7 else \"C\" if grade >= 1.3 else \"C-\" if grade >= 1.0 else\n        \"D+\" if grade >= 0.7 else \"D\" if grade >= 0.0 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_legnth(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_legnth('Hello') == True\n    prime_legnth('abcdcba') == True\n    prime_legnth('kittens') == True\n    prime_legnth('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def starst_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def slove(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def atni_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    atni_shuffle('Hi') returns 'Hi'\n    atni_shuffle('hello') returns 'ehllo'\n    atni_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_arrya(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_arrya([]) => []\n    * sort_arrya([5]) => [5]\n    * sort_arrya([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_arrya([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    return array\n\nExamples:\n>>> sort_arrya([])\n[]\n>>> sort_arrya([5])\n[5]\n>>> sort_arrya([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_arrya([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrpyt(s):\n    \"\"\"Create a function encrpyt that takes a string as an argument and\n    returns a string encrpyted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrpyt('hi') returns 'lm'\n    encrpyt('asdfghjkl') returns 'ewhjklnop'\n    encrpyt('gf') returns 'kj'\n    encrpyt('et') returns 'ix'\n    \"\"\"\n    return ''.join(chr(ord(c) + 2) for c in s)\n"], ["def next_smallste(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallste() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallste([1, 2, 3, 4, 5]) == 2\n    next_smallste([5, 1, 4, 3, 2]) == 2\n    next_smallste([]) == None\n    next_smallste([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def cehck_dict_acse(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    cehck_dict_acse({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    cehck_dict_acse({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    cehck_dict_acse({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    cehck_dict_acse({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    cehck_dict_acse({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\nExamples:\ncehck_dict_acse({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncehck_dict_acse({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncehck_dict_acse({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncehck_dict_acse({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncehck_dict_acse({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True."], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef uniuqe_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniuqe_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> uniuqe_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> uniuqe_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> uniuqe_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def yb_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Your code here\n    return []\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def omve_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    omve_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    omve_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def excahnge(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an excahnge of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of excahnged elements between lst1 and lst2.\n    If it is possible to excahnge elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    excahnge([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    excahnge([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.remove() method to remove an element from a list.\n    # Hint: You can use the list.insert() method to insert an element into a list.\n    # Hint: You can use the list.clear() method to clear a list.\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.remove() method to remove an element from a list.\n    # Hint: You can use the list.insert() method to insert an element into a list.\n    # Hint: You can use the list.clear() method to clear a list.\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.remove() method to remove an element from a list.\n    # Hint: You can use the list.insert() method to insert an element into a list.\n    # Hint: You can use the list.clear() method to clear a list.\n    # Hint: You can use the list.index() method to find the index of an element\n    # in a list.\n    # Hint: You can use the list.pop() method to remove an element from a list.\n    # Hint: You can use the list.append() method to add an element to a list.\n    # Hint: You can use the list.sort() method to sort a list.\n    # Hint: You can use the list.reverse() method to reverse a list.\n    # Hint: You can use the list.count() method to count the number of elements\n    # in a list.\n    # Hint: You can use the list.extend() method to extend a list.\n    # Hint: You can use the list.remove() method to remove an element from a list.\n    # Hint: You"], ["def historgam(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    historgam('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    historgam('a b b a') == {'a': 2, 'b': 2}\n    historgam('a b c a b') == {'a': 2, 'b': 2}\n    historgam('b b b b a') == {'b': 4}\n    historgam('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSbuArraySmu(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSbuArraySmu([2, 3, 4, 1, 2, 4]) == 1\n    minSbuArraySmu([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    if len(nums) == 3:\n        return min(nums[0], nums[1], nums[2])\n    if len(nums) == 4:\n        return min(nums[0], nums[1], nums[2], nums[3])\n    if len(nums) == 5:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n    if len(nums) == 6:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n    if len(nums) == 7:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n    if len(nums) == 8:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])\n    if len(nums) == 9:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])\n    if len(nums) == 10:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])\n    if len(nums) == 11:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])\n    if len(nums) == 12:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11])\n    if len(nums) == 13:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12])\n    if len(nums) == 14:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13])\n    if len(nums) == 15:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14])\n    if len(nums) == 16:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15])\n    if len(nums) == 17:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15], nums[16])\n    if len(nums) == 18:\n        return min(nums[0], nums[1], nums[2], nums[3"], ["def amx_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Iterate over the grid\n    for row in grid:\n        # Iterate over the columns of the row\n        for col in row:\n            # If the column is 1, then we need to lower the bucket\n            if col == 1:\n                # Increment the number of times you need to lower the bucket\n                times += 1\n                # If the bucket is full, then we need to lower the bucket\n                if times * capacity >= 1:\n                    # Decrement the number of times you need to lower the bucket\n                    times -= 1\n                    # If the bucket is empty, then we need to lower the bucket\n                    if times * capacity == 0:\n                        # Increment the number of times you need to lower the bucket\n                        times += 1\n    # Return the number of times you need to lower the buckets\n    return times\n"], ["def sort_arrya(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_arrya([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_arrya([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_arrya([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letters only.\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = get_odd_collatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersetcion(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersetcion of these two \n    intervals is a prime number.\n    Example, the intersetcion of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersetcion is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersetcion((1, 2), (2, 3)) ==> \"NO\"\n    intersetcion((-1, 1), (0, 4)) ==> \"NO\"\n    intersetcion((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"NO\"\n\nintersetcion((1, 2), (2, 3))\nintersetcion((-1, 1), (0, 4))\nintersetcion((-3, -1), (-5, 5))"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def alrgest_samllset_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    alrgest_samllset_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    alrgest_samllset_integers([]) == (None, None)\n    alrgest_samllset_integers([0]) == (None, None)\n    '''\n    # TODO: Write your code here\n    return None\n\nTest cases:\nalrgest_samllset_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nalrgest_samllset_integers([]) == (None, None)\nalrgest_samllset_integers([0]) == (None, None)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6]) == (1, 6)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7]) == (1, 7)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 8)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 9)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 10)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (1, 11)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (1, 12)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (1, 13)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (1, 14)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (1, 15)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == (1, 16)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == (1, 17)\nalrgest_samllset_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == (1, 18)\nalrgest_samllset_integers([1,"], ["def comprae_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    comprae_one(1, 2.5) \u279e 2.5\n    comprae_one(1, \"2,3\") \u279e \"2,3\"\n    comprae_one(\"5,1\", \"6\") \u279e \"6\"\n    comprae_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncomprae_one(1, 2.5) \u279e 2.5\ncomprae_one(1, \"2,3\") \u279e \"2,3\"\ncomprae_one(\"5,1\", \"6\") \u279e \"6\"\ncomprae_one(\"1\", 1) \u279e None"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFliter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFliter([15, -73, 14, -15]) => 1 \n    specialFliter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_amx_trpiles(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongset_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongset_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: len(x) - len(x.lower()))\n\nStrongset_Extension('my_class', ['AA', 'Be', 'CC'])\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def nit_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> nit_to_mini_roman(19) == 'xix'\n    >>> nit_to_mini_roman(152) == 'clii'\n    >>> nit_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Implement me!\n    return ''\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebar(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebar(operator, operand)"], ["def slove(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    slove(\"1234\") = \"4321\"\n    slove(\"ab\") = \"AB\"\n    slove(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    if s == []:\n        return s\n    else:\n        return \"\".join(s)\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def genreate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    genreate_integers(2, 8) => [2, 4, 6, 8]\n    genreate_integers(8, 2) => [2, 4, 6, 8]\n    genreate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return []\n\n\nAnswer: def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return []\n"], ["from typing import List\n\n\ndef has_close_elemetns(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elemetns([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elemetns([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef eman_absoluet_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> eman_absoluet_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef pares_nestde_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> pares_nestde_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef fitler_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> fitler_by_substring([], 'a')\n    []\n    >>> fitler_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef usm_rpodcut(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> usm_rpodcut([])\n    (0, 1)\n    >>> usm_rpodcut([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_amx(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_amx([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(result[i - 1], numbers[i]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef olngest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the olngest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> olngest([])\n\n    >>> olngest(['a', 'b', 'c'])\n    'a'\n    >>> olngest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n\n"], ["def greatest_comomn_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_comomn_divisor(3, 5)\n    1\n    >>> greatest_comomn_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_comomn_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prfeixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prfeixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def coutn_distinct_hcaractres(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> coutn_distinct_hcaractres('xyzXYZ')\n    3\n    >>> coutn_distinct_hcaractres('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n"], ["from typing import List\n\n\ndef rescale_to_nuit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_nuit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [number / max(numbers) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filtre_intgeers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filtre_intgeers(['a', 3.14, 5])\n    [5]\n    >>> filtre_intgeers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factroize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factroize(8)\n    [2, 2, 2]\n    >>> factroize(25)\n    [5, 5]\n    >>> factroize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplictase(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplictase([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef ocncatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> ocncatenate([])\n    ''\n    >>> ocncatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_psotiive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_psotiive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_psotiive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_elmeent(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_elmeent([1, 2, 3])\n    3\n    >>> max_elmeent([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_colliison(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> car_race_colliison(1)\n0\n>>> car_race_colliison(2)\n0\n>>> car_race_colliison(3)\n0\n>>> car_race_colliison(4)\n0\n>>> car_race_colliison(5)\n0\n>>> car_race_colliison(6)\n0\n>>> car_race_colliison(7)\n0\n>>> car_race_colliison(8)\n0\n>>> car_race_colliison(9)\n0\n>>> car_race_colliison(10)\n0\n>>> car_race_colliison(11)\n0\n>>> car_race_colliison(12)\n0\n>>> car_race_colliison(13)\n0\n>>> car_race_colliison(14)\n0\n>>> car_race_colliison(15)\n0\n>>> car_race_colliison(16)\n0\n>>> car_race_colliison(17)\n0\n>>> car_race_colliison(18)\n0\n>>> car_race_colliison(19)\n0\n>>> car_race_colliison(20)\n0\n>>> car_race_colliison(21)\n0\n>>> car_race_colliison(22)\n0\n>>> car_race_colliison(23)\n0\n>>> car_race_colliison(24)\n0\n>>> car_race_colliison(25)\n0\n>>> car_race_colliison(26)\n0\n>>> car_race_colliison(27)\n0\n>>> car_race_colliison(28)\n0\n>>> car_race_colliison(29)\n0\n>>> car_race_colliison(30)\n0\n>>> car_race_colliison(31)\n0\n>>> car_race_colliison(32)\n0\n>>> car_race_colliison(33)\n0\n>>> car_race_colliison(34)\n0\n>>> car_race_colliison(35)\n0\n>>> car_race_colliison(36)\n0\n>>> car_race_colliison(37)\n0\n>>> car_race_colliison(38)\n0\n>>> car_race_colliison(39)\n0\n>>> car_race_colliison(40)\n0\n>>> car_race_colliison(41)\n0\n>>> car_race_colliison(42)\n0\n>>> car_race_colliison(43)\n0\n>>> car_race_colliison(44)\n0\n>>> car_race_colliison(45)\n0\n>>> car_race_colliison(46)\n0\n>>> car_race_colliison(47)\n0\n>>> car_race_colliison(48)\n0\n>>> car_race_colliison(49)\n0\n>>> car_race_colliison(50)\n0\n>>> car_race_colliison(51)\n0\n>>> car_race_colliison(52)\n0\n>>> car_race_colliison(53)\n0\n>>> car_race_colliison(54)\n0\n>>> car_race_colliison(55)\n0\n>>> car_race_colliison(56)\n0\n>>> car_race_col"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, "], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrmoe(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrmoe('')\n    True\n    >>> is_palindrmoe('aba')\n    True\n    >>> is_palindrmoe('aaaaa')\n    True\n    >>> is_palindrmoe('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decoed_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def rmeove_vowels(text):\n    \"\"\"\n    rmeove_vowels is a function that takes string and returns string without vowels.\n    >>> rmeove_vowels('')\n    ''\n    >>> rmeove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> rmeove_vowels('abcdef')\n    'bcdf'\n    >>> rmeove_vowels('aaaaa')\n    ''\n    >>> rmeove_vowels('aaBAA')\n    'B'\n    >>> rmeove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fifbib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fifbib(0) == 0\n    fifbib(1) == 0\n    fifbib(2) == 1\n    fifbib(n) == fifbib(n-1) + fifbib(n-2) + fifbib(n-3).\n    Please write a function to efficiently compute the n-th element of the fifbib number sequence.\n    >>> fifbib(1)\n    0\n    >>> fifbib(5)\n    4\n    >>> fifbib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fifbib(n-1) + fifbib(n-2) + fifbib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_idstribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_idstribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_idstribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_idstribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_idstribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def serach(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        serach([4, 1, 2, 2, 3, 1]) == 2\n        serach([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        serach([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\n\nTest:\n>>> serach([4, 1, 2, 2, 3, 1])\n2\n>>> serach([1, 2, 2, 3, 3, 3, 4, 4, 4])\n3\n>>> serach([5, 5, 4, 4, 4])\n-1\n>>> serach([1, 2, 3, 4, 5])\n5\n>>> serach([1, 2, 3, 4, 5, 6])\n6\n>>> serach([1, 2, 3, 4, 5, 6, 7])\n7\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8])\n8\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9])\n9\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n10\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n11\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n12\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n13\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n14\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n15\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n16\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n17\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n18\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n19\n>>> serach([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strange_sort_list(\n        [x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multilpy_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multilpy_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multilpy_prime(30)\n\nis_multilpy_prime(100)\n\nis_multilpy_prime(1000)\n\nis_multilpy_prime(10000)\n\nis_multilpy_prime(100000)\n\nis_multilpy_prime(1000000)\n\nis_multilpy_prime(10000000)\n\nis_multilpy_prime(100000000)\n\nis_multilpy_prime(1000000000)\n\nis_multilpy_prime(10000000000)\n\nis_multilpy_prime(100000000000)\n\nis_multilpy_prime(1000000000000)\n\nis_multilpy_prime(10000000000000)\n\nis_multilpy_prime(100000000000000)\n\nis_multilpy_prime(1000000000000000)\n\nis_multilpy_prime(10000000000000000)\n\nis_multilpy_prime(100000000000000000)\n\nis_multilpy_prime(1000000000000000000)\n\nis_multilpy_prime(10000000000000000000)\n\nis_multilpy_prime(100000000000000000000)\n\nis_multilpy_prime(1000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000000000000"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def ehx_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    return 0\n\n\nTest.assert_equals(ehx_key(\"AB\"), 1)\nTest.assert_equals(ehx_key(\"1077E\"), 2)\nTest.assert_equals(ehx_key(\"ABED1A33\"), 4)\nTest.assert_equals(ehx_key(\"123456789ABCDEF0\"), 6)\nTest.assert_equals(ehx_key(\"2020\"), 2)\n"], ["def decimal_to_ibnary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_ibnary(15)   # returns \"db1111db\"\n    decimal_to_ibnary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\ndecimal_to_ibnary(15)   # returns \"db1111db\"\ndecimal_to_ibnary(32)   # returns \"db100000db\"\n\nNote: The function should return a string, with each character representing a binary number.\n\"\"\"\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numericla_lettre_rgade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return []\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_elngth(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_elngth('Hello') == True\n    prime_elngth('abcdcba') == True\n    prime_elngth('kittens') == True\n    prime_elngth('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuflfe(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuflfe('Hi') returns 'Hi'\n    anti_shuflfe('hello') returns 'ehllo'\n    anti_shuflfe('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasddk(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closset_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closset_integer(\"10\")\n    10\n    >>> closset_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closset_integer(\"14.5\") should\n    return 15 and closset_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closset_integer(\"10\")\n10\n>>> closset_integer(\"15.3\")\n15\n>>> closset_integer(\"14.5\")\n15\n>>> closset_integer(\"-14.5\")\n-15\n>>> closset_integer(\"14.4\")\n14\n>>> closset_integer(\"-14.4\")\n-14\n>>> closset_integer(\"14.6\")\n15\n>>> closset_integer(\"-14.6\")\n-15\n>>> closset_integer(\"14.7\")\n15\n>>> closset_integer(\"-14.7\")\n-15\n>>> closset_integer(\"14.8\")\n15\n>>> closset_integer(\"-14.8\")\n-15\n>>> closset_integer(\"14.9\")\n15\n>>> closset_integer(\"-14.9\")\n-15\n>>> closset_integer(\"14.10\")\n15\n>>> closset_integer(\"-14.10\")\n-15\n>>> closset_integer(\"14.11\")\n15\n>>> closset_integer(\"-14.11\")\n-15\n>>> closset_integer(\"14.12\")\n15\n>>> closset_integer(\"-14.12\")\n-15\n>>> closset_integer(\"14.13\")\n15\n>>> closset_integer(\"-14.13\")\n-15\n>>> closset_integer(\"14.14\")\n15\n>>> closset_integer(\"-14.14\")\n-15\n>>> closset_integer(\"14.15\")\n15\n>>> closset_integer(\"-14.15\")\n-15\n>>> closset_integer(\"14.16\")\n15\n>>> closset_integer(\"-14.16\")\n-15\n>>> closset_integer(\"14.17\")\n15\n>>> closset_integer(\"-14.17\")\n-15\n>>> closset_integer(\"14.18\")\n15\n>>> closset_integer(\"-14.18\")\n-15\n>>> closset_integer(\"14.19\")\n15\n>>> closset_integer(\"-14.19\")\n-15\n>>> closset_integer(\"14.20\")\n15\n>>> closset_integer(\"-14.20\")\n-15\n>>> closset_integer(\"14.21\")\n15\n>>> closset_integer(\"-14.21\")\n-15\n>>> closset_integer(\"14.22\")\n15\n>>> closset_integer(\"-14.22\")\n-15\n>>> closset_integer(\"14.23\")\n15\n>>> closset_integer(\"-14.23\")\n-15\n>>> closset_integer(\"14.24\")\n15\n>>> closset_integer(\"-14.24\")\n-15\n>>> closset_integer(\"14.25\")\n15\n>>> closset_integer(\"-14.25\")\n-15\n>>> closset_integer(\"14.26\")\n15\n>>> closset_integer(\"-14.26\")\n-15\n>>> closset_"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def ronuded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    ronuded_avg(1, 5) => \"0b11\"\n    ronuded_avg(7, 5) => -1\n    ronuded_avg(10, 20) => \"0b1111\"\n    ronuded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\n\nronuded_avg(1, 5) => \"0b11\"\nronuded_avg(7, 5) => -1\nronuded_avg(10, 20) => \"0b1111\"\nronuded_avg(20, 33) => \"0b11010\"\n\nExplanation:\n\nThe average of the integers from 1 to 5 is 3, so the answer is \"0b11\".\nThe average of the integers from 7 to 5 is -1, so the answer is -1.\nThe average of the integers from 10 to 20 is 15, so the answer is \"0b1111\".\nThe average of the integers from 20 to 33 is 21, so the answer is \"0b11010\"."], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def omve_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    omve_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    omve_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogrma(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogrma('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogrma('a b b a') == {'a': 2, 'b': 2}\n    histogrma('a b c a b') == {'a': 2, 'b': 2}\n    histogrma('b b b b a') == {'b': 4}\n    histogrma('') == {}\n\n    \"\"\"\n    # TODO: Write your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n\n\nAnswer: def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = nums[i]\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def eslect_worsd(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    eslect_worsd(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    eslect_worsd(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    eslect_worsd(\"simple white space\", 2) ==> []\n    eslect_worsd(\"Hello world\", 4) ==> [\"world\"]\n    eslect_worsd(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n"], ["def get_closest_voewl(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_voewl(\"yogurt\") ==> \"u\"\n    get_closest_voewl(\"FULL\") ==> \"U\"\n    get_closest_voewl(\"quick\") ==> \"\"\n    get_closest_voewl(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_voewl(\"yogurt\") ==> \"u\"\nget_closest_voewl(\"FULL\") ==> \"U\"\nget_closest_voewl(\"quick\") ==> \"\"\nget_closest_voewl(\"ab\") ==> \"\"\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = get_odd_collatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPtah(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPtah(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPtah(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def chekc_if_lats_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    chekc_if_lats_char_is_a_letter(\"apple pie\") \u279e False\n    chekc_if_lats_char_is_a_letter(\"apple pi e\") \u279e True\n    chekc_if_lats_char_is_a_letter(\"apple pi e \") \u279e False\n    chekc_if_lats_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and not txt[-1].isalpha() in txt.split()\n\nchekc_if_lats_char_is_a_letter(\"apple pie\") \u279e False\nchekc_if_lats_char_is_a_letter(\"apple pi e\") \u279e True\nchekc_if_lats_char_is_a_letter(\"apple pi e \") \u279e False\nchekc_if_lats_char_is_a_letter(\"\") \u279e False"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_fcaotrial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_fcaotrial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n"], ["def fix_spacse(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spacse(\"Example\") == \"Example\"\n    fix_spacse(\"Example 1\") == \"Example_1\"\n    fix_spacse(\" Example 2\") == \"_Example_2\"\n    fix_spacse(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_yb_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_yb_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_yb_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_tirplse(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_differnece(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_differnece([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_differnece([-1, -2, 0]) == 0\n    double_the_differnece([9, -2]) == 81\n    double_the_differnece([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x > 0 and x % 2 == 1, lst)))\n\ndouble_the_differnece([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_differnece([-1, -2, 0]) == 0\ndouble_the_differnece([9, -2]) == 81\ndouble_the_differnece([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strnogest_xEtension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strnogest_xEtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: len(x) - len(x.lower()))\n\nStrnogest_xEtension('my_class', ['AA', 'Be', 'CC'])\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_cuont(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_cuont(-12) ==> (1, 1)\n        even_odd_cuont(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_romna(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_romna(19) == 'xix'\n    >>> int_to_mini_romna(152) == 'clii'\n    >>> int_to_mini_romna(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_integres(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integres(2, 8) => [2, 4, 6, 8]\n    generate_integres(8, 2) => [2, 4, 6, 8]\n    generate_integres(10, 14) => []\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n\nAnswer: def generate_integres(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integres(2, 8) => [2, 4, 6, 8]\n    generate_integres(8, 2) => [2, 4, 6, 8]\n    generate_integres(10, 14) => []\n    \"\"\"\n    # TODO: Write your code here\n    return [x for x in range(a, b+1) if x%2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_apren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_apren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def trunctae_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> trunctae_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_edviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_edviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef nitesrpesre(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> nitesrpesre([], 4)\n    []\n    >>> nitesrpesre([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif i == len(numbers) - 1:\n            result.append(delimeter)\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_praens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_praens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filetr_by_substrnig(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filetr_by_substrnig([], 'a')\n    []\n    >>> filetr_by_substrnig(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def rgeatste_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> rgeatste_common_divisor(3, 5)\n    1\n    >>> rgeatste_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return rgeatste_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinct_hcaracters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_hcaracters('xyzXYZ')\n    3\n    >>> count_distinct_hcaracters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_muisc(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_muisc('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef ifnd_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> ifnd_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> ifnd_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_inetgesr(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_inetgesr(['a', 3.14, 5])\n    [5]\n    >>> filter_inetgesr([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorzie(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorzie(8)\n    [2, 2, 2]\n    >>> factorzie(25)\n    [5, 5]\n    >>> factorzie(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatentae(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatentae([])\n    ''\n    >>> concatentae(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef dceode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collision(1) == 0\ncar_race_collision(2) == 0\ncar_race_collision(3) == 0\ncar_race_collision(4) == 0\ncar_race_collision(5) == 0\ncar_race_collision(6) == 0\ncar_race_collision(7) == 0\ncar_race_collision(8) == 0\ncar_race_collision(9) == 0\ncar_race_collision(10) == 0\ncar_race_collision(11) == 0\ncar_race_collision(12) == 0\ncar_race_collision(13) == 0\ncar_race_collision(14) == 0\ncar_race_collision(15) == 0\ncar_race_collision(16) == 0\ncar_race_collision(17) == 0\ncar_race_collision(18) == 0\ncar_race_collision(19) == 0\ncar_race_collision(20) == 0\ncar_race_collision(21) == 0\ncar_race_collision(22) == 0\ncar_race_collision(23) == 0\ncar_race_collision(24) == 0\ncar_race_collision(25) == 0\ncar_race_collision(26) == 0\ncar_race_collision(27) == 0\ncar_race_collision(28) == 0\ncar_race_collision(29) == 0\ncar_race_collision(30) == 0\ncar_race_collision(31) == 0\ncar_race_collision(32) == 0\ncar_race_collision(33) == 0\ncar_race_collision(34) == 0\ncar_race_collision(35) == 0\ncar_race_collision(36) == 0\ncar_race_collision(37) == 0\ncar_race_collision(38) == 0\ncar_race_collision(39) == 0\ncar_race_collision(40) == 0\ncar_race_collision(41) == 0\ncar_race_collision(42) == 0\ncar_race_collision(43) == 0\ncar_race_collision(44) == 0\ncar_race_collision(45) == 0\ncar_race_collision(46) == 0\ncar_race_collision(47) == 0\ncar_race_collision(48) == 0\ncar_race_collision(49) == 0\ncar_race_collision(50) == 0\ncar_race_collision(51) == 0\ncar_race_collision(52) == 0\ncar_race_collision(53) == 0\ncar_race_collision(54) == 0\ncar_race_collision(55) == 0\ncar_race_collision(56) == 0\ncar_race_collision(57) == 0\ncar_race_collision(58) == 0\ncar_race_collision(59) == 0\ncar_race_collision(60) == 0\ncar_race_collision(61) == 0\ncar_race_collision(62) == 0\ncar_race_collision(63) == 0\ncar_race_collision(64) == 0\ncar_race_collision(65) == 0\ncar_race"], ["def incr_lsit(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_lsit([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_lsit([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def apirs_sum_ot_zero(l):\n    \"\"\"\n    apirs_sum_ot_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> apirs_sum_ot_zero([1, 3, 5, 0])\n    False\n    >>> apirs_sum_ot_zero([1, 3, -2, 1])\n    False\n    >>> apirs_sum_ot_zero([1, 2, 3, 7])\n    False\n    >>> apirs_sum_ot_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> apirs_sum_ot_zero([1])\n    False\n    \"\"\"\n    # TODO: Implement this function\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n    \"\"\"Return emdian of elements in the list l.\n    >>> emdian([3, 1, 2, 4, 5])\n    3\n    >>> emdian([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) - min(l)\n\n\nAnswer: def emdian(l: list):\n   "], ["def is_palinrdome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palinrdome('')\n    True\n    >>> is_palinrdome('aba')\n    True\n    >>> is_palinrdome('aaaaa')\n    True\n    >>> is_palinrdome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_htrehsold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_htrehsold([1, 2, 4, 10], 100)\n    True\n    >>> below_htrehsold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracekting(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracekting(\"<\")\n    False\n    >>> correct_bracekting(\"<>\")\n    True\n    >>> correct_bracekting(\"<<><>>\")\n    True\n    >>> correct_bracekting(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_pirme_facotr(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_pirme_facotr(13195)\n    29\n    >>> largest_pirme_facotr(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracekting(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracekting(\"(\")\n    False\n    >>> correct_bracekting(\"()\")\n    True\n    >>> correct_bracekting(\"(()())\")\n    True\n    >>> correct_bracekting(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derviative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derviative of this polynomial in the same form.\n    >>> derviative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derviative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def furit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    furit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    furit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    furit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    furit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n"], ["def plukc(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to plukc one of the nodes and return it.\n    The plukced node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plukced node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]\n\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_osrt_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_osrt_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_osrt_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_osrt_list([]) == []\n    '''\n    return [max(lst), min(lst), *sorted(lst), min(lst)]\n\n\nExamples:\nstrange_osrt_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_osrt_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_osrt_list([]) == []\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def samllset_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    samllset_change([1,2,3,5,4,7,9,6]) == 4\n    samllset_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    samllset_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\nsamllset_change([1,2,3,5,4,7,9,6]) == 4\nsamllset_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsamllset_change([1, 2, 3, 2, 1]) == 0\nsamllset_change([1, 2, 3, 2, 1, 2, 3, 2, 1]) == 1\nsamllset_change([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, "], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multilpy_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multilpy_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multilpy_prime(30)\n\nis_multilpy_prime(100)\n\nis_multilpy_prime(1000)\n\nis_multilpy_prime(10000)\n\nis_multilpy_prime(100000)\n\nis_multilpy_prime(1000000)\n\nis_multilpy_prime(10000000)\n\nis_multilpy_prime(100000000)\n\nis_multilpy_prime(1000000000)\n\nis_multilpy_prime(10000000000)\n\nis_multilpy_prime(100000000000)\n\nis_multilpy_prime(1000000000000)\n\nis_multilpy_prime(10000000000000)\n\nis_multilpy_prime(100000000000000)\n\nis_multilpy_prime(1000000000000000)\n\nis_multilpy_prime(10000000000000000)\n\nis_multilpy_prime(100000000000000000)\n\nis_multilpy_prime(1000000000000000000)\n\nis_multilpy_prime(10000000000000000000)\n\nis_multilpy_prime(100000000000000000000)\n\nis_multilpy_prime(1000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000)\n\nis_multilpy_prime(10000000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000000)\n\nis_multilpy_prime(100000000000000000000000000000000)\n\nis_multilpy_prime(1000000000000000000000000000000000"], ["def is_simlpe_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simlpe_power(1, 4) => true\n    is_simlpe_power(2, 2) => true\n    is_simlpe_power(8, 2) => true\n    is_simlpe_power(3, 2) => false\n    is_simlpe_power(3, 1) => false\n    is_simlpe_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simlpe_power(1, 4)\nis_simlpe_power(2, 2)\nis_simlpe_power(8, 2)\nis_simlpe_power(3, 2)\nis_simlpe_power(3, 1)\nis_simlpe_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decmial_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decmial_to_binary(15)   # returns \"db1111db\"\n    decmial_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numeriacl_letter_garde(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    grades = sorted(grades)\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def pirme_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    pirme_length('Hello') == True\n    pirme_length('abcdcba') == True\n    pirme_length('kittens') == True\n    pirme_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuflfe(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuflfe('Hi') returns 'Hi'\n    anti_shuflfe('hello') returns 'ehllo'\n    anti_shuflfe('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_msallets(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_msallets() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_msallets([1, 2, 3, 4, 5]) == 2\n    next_msallets([5, 1, 4, 3, 2]) == 2\n    next_msallets([]) == None\n    next_msallets([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n"], ["def is_broed(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_broed(\"Hello world\")\n    0\n    >>> is_broed(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def necode(message):\n    \"\"\"\n    Write a function that takes a message, and necodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> necode('test')\n    'TGST'\n    >>> necode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Your code here\n    return message\n\nTest:\n>>> necode('test')\n'TGST'\n>>> necode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def ksjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    # your code here\n    return 0\n\n\nInput:\n[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\n[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n[0,724,32,71,99,32,6,0,5,91,83,0,5,6]\n[0,81,12,3,1,21]\n[0,8,1,2,1,7]\n\nOutput:\n10\n25\n13\n11\n3\n7\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def ocunt_upepr(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    ocunt_upepr('aBCdEf') returns 1\n    ocunt_upepr('abcdefg') returns 0\n    ocunt_upepr('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_srting(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_srting(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_srting(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_srting(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_srting(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef uinque_dgiits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uinque_dgiits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> uinque_dgiits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\nTest:\n>>> uinque_dgiits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> uinque_dgiits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchagne(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchagne of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchagned elements between lst1 and lst2.\n    If it is possible to exchagne elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchagne([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchagne([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\nexchagne([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchagne([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"NO\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"YES\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"NO\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"YES\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"NO\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"YES\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"NO\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"YES\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => \"NO\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => \"YES\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => \"NO\"\nexchagne([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def imnSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    imnSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    imnSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    if len(nums) == 3:\n        return min(nums[0], nums[1], nums[2])\n    if len(nums) == 4:\n        return min(nums[0], nums[1], nums[2], nums[3])\n    if len(nums) == 5:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n    if len(nums) == 6:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n    if len(nums) == 7:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n    if len(nums) == 8:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])\n    if len(nums) == 9:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])\n    if len(nums) == 10:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])\n    if len(nums) == 11:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])\n    if len(nums) == 12:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11])\n    if len(nums) == 13:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12])\n    if len(nums) == 14:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13])\n    if len(nums) == 15:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14])\n    if len(nums) == 16:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15])\n    if len(nums) == 17:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15], nums[16])\n    if len(nums) == 18:\n        return min(nums[0], nums[1"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letters only.\n\"\"\"\n"], ["def amtch_praens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    amtch_praens(['()(', ')']) == 'Yes'\n    amtch_praens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\namtch_praens(['()(', ')']) == 'Yes'\namtch_praens([')', ')']) == 'No'\namtch_praens(['(', ')']) == 'No'\namtch_praens(['(', '(', ')']) == 'No'\namtch_praens(['(', '(', '(', ')']) == 'No'\namtch_praens(['(', '(', '(', '(', ')']) == 'No'\namtch_praens(['(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'Yes'\namtch_praens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')'])"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def dad_eleemnts(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)) if i+1 < len(arr) and arr[i] == arr[i+1])\n\nTest Cases:\n    Test.describe('Test 1')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 4), 24)\n\n    Test.describe('Test 2')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 5), 24)\n\n    Test.describe('Test 3')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 6), 24)\n\n    Test.describe('Test 4')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 7), 24)\n\n    Test.describe('Test 5')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 8), 24)\n\n    Test.describe('Test 6')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 9), 24)\n\n    Test.describe('Test 7')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 10), 24)\n\n    Test.describe('Test 8')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 11), 24)\n\n    Test.describe('Test 9')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 12), 24)\n\n    Test.describe('Test 10')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 13), 24)\n\n    Test.describe('Test 11')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 14), 24)\n\n    Test.describe('Test 12')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 15), 24)\n\n    Test.describe('Test 13')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 16), 24)\n\n    Test.describe('Test 14')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 17), 24)\n\n    Test.describe('Test 15')\n    Test.assert_equals(dad_eleemnts([111,21,3,4000,5,6,7,8,9], 18), 2"], ["def get_odd_ocllazt(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_ocllazt(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return get_odd_ocllazt(3 * n + 1) + [n]\n\n"], ["def avlid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    avlid_date('03-11-2000') => True\n\n    avlid_date('15-01-2012') => False\n\n    avlid_date('04-0-2040') => False\n\n    avlid_date('06-04-2020') => True\n\n    avlid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\navlid_date('03-11-2000') => True\navlid_date('15-01-2012') => False\navlid_date('04-0-2040') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-04-2020') => True\navlid_date('06/04/2020') => False\navlid_date('06-"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sotred(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sotred([5]) \u279e True\n    is_sotred([1, 2, 3, 4, 5]) \u279e True\n    is_sotred([1, 3, 2, 4, 5]) \u279e False\n    is_sotred([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sotred([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sotred([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sotred([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sotred([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def chekc_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    chekc_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    chekc_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    chekc_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    chekc_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\nchekc_if_last_char_is_a_letter(\"apple pie\") \u279e False\nchekc_if_last_char_is_a_letter(\"apple pi e\") \u279e True\nchekc_if_last_char_is_a_letter(\"apple pi e \") \u279e False\nchekc_if_last_char_is_a_letter(\"\") \u279e False"], ["def cna_arragne(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    cna_arragne([1,2,4,3,5]) = 3\n    cna_arragne([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n\n\nExamples:\ncna_arragne([1,2,4,3,5]) = 3\ncna_arragne([1,2,3]) = -1\n\"\"\"\n"], ["def largest_smallest_integres(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integres([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integres([]) == (None, None)\n    largest_smallest_integres([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = i\n            else:\n                a = max(a, i)\n        else:\n            if b is None:\n                b = i\n            else:\n                b = min(b, i)\n    return (a, b)\n\n\nExamples:\nlargest_smallest_integres([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integres([]) == (None, None)\nlargest_smallest_integres([0]) == (None, None)\n"], ["def ocmpare_noe(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    ocmpare_noe(1, 2.5) \u279e 2.5\n    ocmpare_noe(1, \"2,3\") \u279e \"2,3\"\n    ocmpare_noe(\"5,1\", \"6\") \u279e \"6\"\n    ocmpare_noe(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str and type(b) == str:\n        return a if a.split(\",\") > b.split(\",\") else b\n    elif type(a) == str and type(b) == float:\n        return a if a.split(\",\") > b else b\n    elif type(a) == float and type(b) == str:\n        return b if a > b.split(\",\") else a\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    else:\n        return None\n\n\nocmpare_noe(1, 2.5) \u279e 2.5\nocmpare_noe(1, \"2,3\") \u279e \"2,3\"\nocmpare_noe(\"5,1\", \"6\") \u279e \"6\"\nocmpare_noe(\"1\", 1) \u279e None\n\nExplanation:\n\nThe function ocmpare_noe takes two arguments, a and b.\n\nIf a and b are both integers, the function returns the larger of the two integers.\n\nIf a and b are both floats, the function returns the larger of the two floats.\n\nIf a and b are both strings, the function returns the larger of the two strings.\n\nIf a and b are both strings, but a is a string and b is a float, the function returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b.\n\nIf a and b are both strings, but a is a float and b is a float, the function returns a if a is larger than b, otherwise it returns b.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than b, otherwise it returns a.\n\nIf a and b are both strings, but a is a float and b is a string, the function returns b if a is larger than"], ["def is_equal_to_usm_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_usm_even(4) == False\n    is_equal_to_usm_even(6) == False\n    is_equal_to_usm_even(8) == True\n    \"\"\"\n    return n == sum(filter(lambda x: x % 2 == 0, range(1, n + 1, 2)))\n\n"], ["def speical_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> speical_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * speical_factorial(n-1)\n"], ["def ifx_saepcs(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    ifx_saepcs(\"Example\") == \"Example\"\n    ifx_saepcs(\"Example 1\") == \"Example_1\"\n    ifx_saepcs(\" Example 2\") == \"_Example_2\"\n    ifx_saepcs(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def wodrs_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            new_sentence += word + \" \"\n    return new_sentence.strip()\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_ro_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_ro_y(7, 34, 12) == 34\n    for x_ro_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, 1000000):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Exetsnion(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Exetsnion('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def yccpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    yccpattern_check(\"abcd\",\"abd\") => False\n    yccpattern_check(\"hello\",\"ell\") => True\n    yccpattern_check(\"whassup\",\"psus\") => False\n    yccpattern_check(\"abab\",\"baa\") => True\n    yccpattern_check(\"efef\",\"eeff\") => False\n    yccpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angel_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angel_triangle(3, 4, 5) == True\n    right_angel_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_aglebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '/']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def genreate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    genreate_integers(2, 8) => [2, 4, 6, 8]\n    genreate_integers(8, 2) => [2, 4, 6, 8]\n    genreate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return []\n\n\nAnswer: def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return []\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collision(1) == 0\ncar_race_collision(2) == 0\ncar_race_collision(3) == 0\ncar_race_collision(4) == 0\ncar_race_collision(5) == 0\ncar_race_collision(6) == 0\ncar_race_collision(7) == 0\ncar_race_collision(8) == 0\ncar_race_collision(9) == 0\ncar_race_collision(10) == 0\ncar_race_collision(11) == 0\ncar_race_collision(12) == 0\ncar_race_collision(13) == 0\ncar_race_collision(14) == 0\ncar_race_collision(15) == 0\ncar_race_collision(16) == 0\ncar_race_collision(17) == 0\ncar_race_collision(18) == 0\ncar_race_collision(19) == 0\ncar_race_collision(20) == 0\ncar_race_collision(21) == 0\ncar_race_collision(22) == 0\ncar_race_collision(23) == 0\ncar_race_collision(24) == 0\ncar_race_collision(25) == 0\ncar_race_collision(26) == 0\ncar_race_collision(27) == 0\ncar_race_collision(28) == 0\ncar_race_collision(29) == 0\ncar_race_collision(30) == 0\ncar_race_collision(31) == 0\ncar_race_collision(32) == 0\ncar_race_collision(33) == 0\ncar_race_collision(34) == 0\ncar_race_collision(35) == 0\ncar_race_collision(36) == 0\ncar_race_collision(37) == 0\ncar_race_collision(38) == 0\ncar_race_collision(39) == 0\ncar_race_collision(40) == 0\ncar_race_collision(41) == 0\ncar_race_collision(42) == 0\ncar_race_collision(43) == 0\ncar_race_collision(44) == 0\ncar_race_collision(45) == 0\ncar_race_collision(46) == 0\ncar_race_collision(47) == 0\ncar_race_collision(48) == 0\ncar_race_collision(49) == 0\ncar_race_collision(50) == 0\ncar_race_collision(51) == 0\ncar_race_collision(52) == 0\ncar_race_collision(53) == 0\ncar_race_collision(54) == 0\ncar_race_collision(55) == 0\ncar_race_collision(56) == 0\ncar_race_collision(57) == 0\ncar_race_collision(58) == 0\ncar_race_collision(59) == 0\ncar_race_collision(60) == 0\ncar_race_collision(61) == 0\ncar_race_collision(62) == 0\ncar_race_collision(63) == 0\ncar_race_collision(64) == 0\ncar_race_collision(65) == 0\ncar_race"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, "], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strange_sort_list(\n        [x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_prime(30)\n\nis_multiply_prime(100)\n\nis_multiply_prime(1000)\n\nis_multiply_prime(10000)\n\nis_multiply_prime(100000)\n\nis_multiply_prime(1000000)\n\nis_multiply_prime(10000000)\n\nis_multiply_prime(100000000)\n\nis_multiply_prime(1000000000)\n\nis_multiply_prime(10000000000)\n\nis_multiply_prime(100000000000)\n\nis_multiply_prime(1000000000000)\n\nis_multiply_prime(10000000000000)\n\nis_multiply_prime(100000000000000)\n\nis_multiply_prime(1000000000000000)\n\nis_multiply_prime(10000000000000000)\n\nis_multiply_prime(100000000000000000)\n\nis_multiply_prime(1000000000000000000)\n\nis_multiply_prime(10000000000000000000)\n\nis_multiply_prime(100000000000000000000)\n\nis_multiply_prime(1000000000000000000000)\n\nis_multiply_prime(10000000000000000000000)\n\nis_multiply_prime(100000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000000000000000)\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'db100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n\n\nAnswer: def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = nums[i]\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letters only.\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = get_odd_collatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef induce_close_element(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> induce_close_element([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> induce_close_element([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n\n"], ["from typing import List\n\n\ndef freestanding_paren_group(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> freestanding_paren_group('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef entail_absolute_diversion(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> entail_absolute_diversion([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef kernel_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> kernel_product([])\n    (0, 1)\n    >>> kernel_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolled_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolled_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef reach_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> reach_palindrome('')\n    ''\n    >>> reach_palindrome('cat')\n    'catac'\n    >>> reach_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef bowed_stringed_instrument_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> bowed_stringed_instrument_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef long(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the long one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> long([])\n\n    >>> long(['a', 'b', 'c'])\n    'a'\n    >>> long(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def capital_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> capital_common_divisor(3, 5)\n    1\n    >>> capital_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return capital_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefix(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefix('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def bowed_stringed_instrument_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> bowed_stringed_instrument_sequence(0)\n    '0'\n    >>> bowed_stringed_instrument_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n\n"], ["def consider_distinct_character(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> consider_distinct_character('xyzXYZ')\n    3\n    >>> consider_distinct_character('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_time(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_time('', 'a')\n    0\n    >>> how_many_time('aaa', 'a')\n    3\n    >>> how_many_time('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef recover_close_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> recover_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> recover_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def big_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> big_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef get_rid_of_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> get_rid_of_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def impudent_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> impudent_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def catch_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> catch_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> catch_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_premier(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_premier(6)\n    False\n    >>> is_premier(101)\n    True\n    >>> is_premier(11)\n    True\n    >>> is_premier(13441)\n    True\n    >>> is_premier(61)\n    True\n    >>> is_premier(4)\n    False\n    >>> is_premier(1)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef recover_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    recover_zero find x such that poly(x) = 0.\n    recover_zero returns only only zero point, even if there are many.\n    Moreover, recover_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(recover_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(recover_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def alone(l: list):\n    \"\"\"Return sorted alone elements in a list\n    >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l) - set(l[1:]))\n\n"], ["def soap_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> soap_element([1, 2, 3])\n    3\n    >>> soap_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def premier_fib(n: int):\n    \"\"\"\n    premier_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> premier_fib(1)\n    2\n    >>> premier_fib(2)\n    3\n    >>> premier_fib(3)\n    5\n    >>> premier_fib(4)\n    13\n    >>> premier_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 89\n    if n % 2 == 0:\n        return 2 * premier_fib(n // 2)\n    else:\n        return 3 * premier_fib(n // 3) + 2\n\n"], ["def triple_sum_to_zero(l: list):\n    \"\"\"\n    triple_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triple_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triple_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triple_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triple_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triple_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def cable_car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> cable_car_race_collision(1)\n0\n>>> cable_car_race_collision(2)\n0\n>>> cable_car_race_collision(3)\n0\n>>> cable_car_race_collision(4)\n0\n>>> cable_car_race_collision(5)\n0\n>>> cable_car_race_collision(6)\n0\n>>> cable_car_race_collision(7)\n0\n>>> cable_car_race_collision(8)\n0\n>>> cable_car_race_collision(9)\n0\n>>> cable_car_race_collision(10)\n0\n>>> cable_car_race_collision(11)\n0\n>>> cable_car_race_collision(12)\n0\n>>> cable_car_race_collision(13)\n0\n>>> cable_car_race_collision(14)\n0\n>>> cable_car_race_collision(15)\n0\n>>> cable_car_race_collision(16)\n0\n>>> cable_car_race_collision(17)\n0\n>>> cable_car_race_collision(18)\n0\n>>> cable_car_race_collision(19)\n0\n>>> cable_car_race_collision(20)\n0\n>>> cable_car_race_collision(21)\n0\n>>> cable_car_race_collision(22)\n0\n>>> cable_car_race_collision(23)\n0\n>>> cable_car_race_collision(24)\n0\n>>> cable_car_race_collision(25)\n0\n>>> cable_car_race_collision(26)\n0\n>>> cable_car_race_collision(27)\n0\n>>> cable_car_race_collision(28)\n0\n>>> cable_car_race_collision(29)\n0\n>>> cable_car_race_collision(30)\n0\n>>> cable_car_race_collision(31)\n0\n>>> cable_car_race_collision(32)\n0\n>>> cable_car_race_collision(33)\n0\n>>> cable_car_race_collision(34)\n0\n>>> cable_car_race_collision(35)\n0\n>>> cable_car_race_collision(36)\n0\n>>> cable_car_race_collision(37)\n0\n>>> cable_car_race_collision(38)\n0\n>>> cable_car_race_collision(39)\n0\n>>> cable_car_race_collision(40)\n0\n>>> cable_car_race_collision(41)\n0\n>>> cable_car_race_collision(42)\n0\n>>> cable_car_race_collision(43)\n0\n>>> cable_car_race_collision(44)\n0\n>>> cable_car_race_collision(45)\n0\n>>> cable_car_race_collision(46)\n0\n>>> cable_car_race_collision(47)\n0\n>>> cable_car_race_collision(48)\n0\n>>> cable_car_race_collision(49)\n0\n>>> cable_car_race_collision(50)\n0\n>>> cable_car_race_collision(51)\n0\n>>> cable_car_race_collision(52)\n0\n>>> cable_car_race_collision(53)"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def copulate_sum_to_zero(l):\n    \"\"\"\n    copulate_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> copulate_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> copulate_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> copulate_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> copulate_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> copulate_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\nTest:\n>>> copulate_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> copulate_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> copulate_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> copulate_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> copulate_sum_to_zero([1])\nFalse\n\"\"\"\n"], ["def variety_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> variety_base(8, 3)\n    '22'\n    >>> variety_base(8, 2)\n    '1000'\n    >>> variety_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be less than 10\")\n    if base == 10:\n        return str(x)\n    return variety_base(x // base, base) + str(x % base)\n\n"], ["def triangulum_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangulum_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def get_rid_of_vowels(text):\n    \"\"\"\n    get_rid_of_vowels is a function that takes string and returns string without vowels.\n    >>> get_rid_of_vowels('')\n    ''\n    >>> get_rid_of_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> get_rid_of_vowels('abcdef')\n    'bcdf'\n    >>> get_rid_of_vowels('aaaaa')\n    ''\n    >>> get_rid_of_vowels('aaBAA')\n    'B'\n    >>> get_rid_of_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n    return text\n"], ["def below_doorway(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_doorway([1, 2, 4, 10], 100)\n    True\n    >>> below_doorway([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def lend(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> lend(2, 3)\n    5\n    >>> lend(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def like_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> like_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> like_chars('abcd', 'dddddddabc')\n    True\n    >>> like_chars('dddddddabc', 'abcd')\n    True\n    >>> like_chars('eabcd', 'dddddddabc')\n    False\n    >>> like_chars('abcd', 'dddddddabce')\n    False\n    >>> like_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def right_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> right_bracketing(\"<\")\n    False\n    >>> right_bracketing(\"<>\")\n    True\n    >>> right_bracketing(\"<<><>>\")\n    True\n    >>> right_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def flat(l: list):\n    \"\"\"Return True is list elements are flatally increasing or decreasing.\n    >>> flat([1, 2, 4, 20])\n    True\n    >>> flat([1, 20, 4, 10])\n    False\n    >>> flat([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"], ["def coarse(l1: list, l2: list):\n    \"\"\"Return sorted unique coarse elements for two lists.\n    >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> coarse([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            yield l1[i]\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n"], ["def big_prime_divisor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> big_prime_divisor(13195)\n    29\n    >>> big_prime_divisor(2048)\n    2\n    \"\"\"\n    # TODO: Implement me!\n    return 2\n"], ["def summarize_to_n(n: int):\n    \"\"\"summarize_to_n is a function that sums numbers from 1 to n.\n    >>> summarize_to_n(30)\n    465\n    >>> summarize_to_n(100)\n    5050\n    >>> summarize_to_n(5)\n    15\n    >>> summarize_to_n(10)\n    55\n    >>> summarize_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def right_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> right_bracketing(\"(\")\n    False\n    >>> right_bracketing(\"()\")\n    True\n    >>> right_bracketing(\"(()())\")\n    True\n    >>> right_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowel_count(s):\n    \"\"\"Write a function vowel_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowel_count(\"abcde\")\n    2\n    >>> vowel_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def round_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> round_shift(12, 1)\n    \"21\"\n    >>> round_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) - shift)\n\n"], ["def fingerSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        fingerSum(\"\") => 0\n        fingerSum(\"abAB\") => 131\n        fingerSum(\"abcCd\") => 67\n        fingerSum(\"helloE\") => 69\n        fingerSum(\"woArBld\") => 131\n        fingerSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def yield_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    yield_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    yield_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    yield_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    yield_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n"], ["def hustle(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to hustle one of the nodes and return it.\n    The hustleed node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The hustleed node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Write your code here\n    if not arr:\n        return []\n    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]\n\n\nTest Cases:\n    Test.describe('Test 1'):\n        Test.it('should return [2, 1]'):\n            Test.assertEqual(hustle([4, 2, 3]), [2, 1])\n        Test.it('should return [2, 1]'):\n            Test.assertEqual(hustle([1, 2, 3]), [2, 1])\n        Test.it('should return []'):\n            Test.assertEqual(hustle([]), [])\n        Test.it('should return [0, 1]'):\n            Test.assertEqual(hustle([5, 0, 3, 0, 4, 2]), [0, 1])\n"], ["def research(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        research([4, 1, 2, 2, 3, 1]) == 2\n        research([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        research([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\n"], ["def foreign_sort_tilt(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    foreign_sort_tilt([1, 2, 3, 4]) == [1, 4, 2, 3]\n    foreign_sort_tilt([5, 5, 5, 5]) == [5, 5, 5, 5]\n    foreign_sort_tilt([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + foreign_sort_tilt([x for x in lst if x != max_val]) + [min_val]\n\n\nforeign_sort_tilt([1, 2, 3, 4])\nforeign_sort_tilt([5, 5, 5, 5])\nforeign_sort_tilt([])\n"], ["def triangulum_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangulum_area(3, 4, 5) == 6.00\n    triangulum_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * (a * b * c), 2)\n    else:\n        return -1\n"], ["def will_it_flee(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_flee([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_flee([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_flee([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_flee([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def modest_variety(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    modest_variety([1,2,3,5,4,7,9,6]) == 4\n    modest_variety([1, 2, 3, 4, 3, 2, 2]) == 1\n    modest_variety([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    # Hint: Use a for loop to iterate over the array.\n    # Hint: Use a while loop to iterate over the array.\n    # Hint: Use a dictionary to store the frequencies of each element.\n    # Hint: Use a set to store the unique elements.\n    # Hint: Use a list to store the elements that need to be changed.\n    # Hint: Use a counter to count the number of changes.\n    #"], ["def entire_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    entire_match([], []) \u279e []\n    entire_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    entire_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    entire_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    entire_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    return [x for x in lst1 if x not in lst2] + [x for x in lst2 if x not in lst1]\n\nentire_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\nentire_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\nentire_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\nentire_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_prime(30)\n\nis_multiply_prime(100)\n\nis_multiply_prime(1000)\n\nis_multiply_prime(10000)\n\nis_multiply_prime(100000)\n\nis_multiply_prime(1000000)\n\nis_multiply_prime(10000000)\n\nis_multiply_prime(100000000)\n\nis_multiply_prime(1000000000)\n\nis_multiply_prime(10000000000)\n\nis_multiply_prime(100000000000)\n\nis_multiply_prime(1000000000000)\n\nis_multiply_prime(10000000000000)\n\nis_multiply_prime(100000000000000)\n\nis_multiply_prime(1000000000000000)\n\nis_multiply_prime(10000000000000000)\n\nis_multiply_prime(100000000000000000)\n\nis_multiply_prime(1000000000000000000)\n\nis_multiply_prime(10000000000000000000)\n\nis_multiply_prime(100000000000000000000)\n\nis_multiply_prime(1000000000000000000000)\n\nis_multiply_prime(10000000000000000000000)\n\nis_multiply_prime(100000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000000000000000)\n\n"], ["def is_elementary_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_elementary_power(1, 4) => true\n    is_elementary_power(2, 2) => true\n    is_elementary_power(8, 2) => true\n    is_elementary_power(3, 2) => false\n    is_elementary_power(3, 1) => false\n    is_elementary_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_elementary_power(1, 4)\nis_elementary_power(2, 2)\nis_elementary_power(8, 2)\nis_elementary_power(3, 2)\nis_elementary_power(3, 1)\nis_elementary_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'dbdef is_felicitous(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_felicitous(a) => False\n    is_felicitous(aa) => False\n    is_felicitous(abcd) => True\n    is_felicitous(aabb) => False\n    is_felicitous(adb) => True\n    is_felicitous(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numeric_letter_grad(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return []\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def premier_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    premier_length('Hello') == True\n    premier_length('abcdcba') == True\n    premier_length('kittens') == True\n    premier_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def begin_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def resolve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(int(x) for x in bin(N)[2:])\n\n"], ["def lend(lst):\n    \"\"\"Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n    Examples:\n        lend([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0]\n\n\nExamples:\n    lend([4, 2, 6, 7]) ==> 2\n    lend([1, 2, 3, 4, 5]) ==> 1, 3, 5\n    lend([1, 3, 5, 7, 9]) ==> 1, 3, 5, 7, 9\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def catch_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    catch_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    catch_row([], 1) == []\n    catch_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\ncatch_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\ncatch_row([], 1) == []\ncatch_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_blase(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_blase(\"Hello world\")\n    0\n    >>> is_blase(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def determine_dict_sheath(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    determine_dict_sheath({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    determine_dict_sheath({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    determine_dict_sheath({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    determine_dict_sheath({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    determine_dict_sheath({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            return False\n        if key.isupper():\n            return False\n    return True\n"], ["def consider_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    consider_up_to(5) => [2,3]\n    consider_up_to(11) => [2,3,5,7]\n    consider_up_to(0) => []\n    consider_up_to(20) => [2,3,5,7,11,13,17,19]\n    consider_up_to(1) => []\n    consider_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n\nAnswer: def consider_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    consider_up_to(5) => [2,3]\n    consider_up_to(11) => [2,3,5,7]\n    consider_up_to(0) => []\n    consider_up_to(20) => [2,3,5,7,11,13,17,19]\n    consider_up_to(1) => []\n    consider_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    return [2,3]\n"], ["def breed(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    breed(148, 412) should return 16.\n    breed(19, 28) should return 72.\n    breed(2020, 1851) should return 0.\n    breed(14,-15) should return 20.\n    \"\"\"\n    return a * b\n"], ["def consider_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    consider_upper('aBCdEf') returns 1\n    consider_upper('abcdefg') returns 0\n    consider_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s if c in 'AEIOU')\n\nConsider_upper('aBCdEf')\nConsider_upper('abcdefg')\nConsider_upper('dBBE')"], ["def close_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> close_integer(\"10\")\n    10\n    >>> close_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example close_integer(\"14.5\") should\n    return 15 and close_integer(\"-14.5\") should return -15.\n    '''\n    return int(round(value))\n\nExamples\n>>> close_integer(\"10\")\n10\n>>> close_integer(\"15.3\")\n15\n>>> close_integer(\"14.5\")\n15\n>>> close_integer(\"-14.5\")\n-15\n"], ["def reach_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> reach_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n, n + 1]\n\n\nExamples:\n>>> reach_a_pile(3)\n[3, 5, 7]\n>>> reach_a_pile(4)\n[4, 5, 7, 9]\n>>> reach_a_pile(5)\n[5, 7, 9, 11, 13]\n>>> reach_a_pile(6)\n[6, 8, 10, 12, 14, 16]\n>>> reach_a_pile(7)\n[7, 9, 11, 13, 15, 17, 19]\n>>> reach_a_pile(8)\n[8, 10, 12, 14, 16, 18, 20, 22]\n>>> reach_a_pile(9)\n[9, 11, 13, 15, 17, 19, 21, 23, 25]\n>>> reach_a_pile(10)\n[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n>>> reach_a_pile(11)\n[11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n>>> reach_a_pile(12)\n[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n>>> reach_a_pile(13)\n[13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]\n>>> reach_a_pile(14)\n[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n>>> reach_a_pile(15)\n[15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]\n>>> reach_a_pile(16)\n[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]\n>>> reach_a_pile(17)\n[17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]\n>>> reach_a_pile(18)\n[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 4"], ["def bible_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    bible_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    bible_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n\n\nAnswer: def bible_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    bible_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    bible_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef alone_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> alone_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> alone_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(set(x) - set(str(x).replace('0', '')))\n"], ["def by_duration(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Your code here\n    return []\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def consider_nums(arr):\n    \"\"\"\n    Write a function consider_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> consider_nums([]) == 0\n    >>> consider_nums([-1, 11, -11]) == 1\n    >>> consider_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n\nConsider the following test cases:\n>>> consider_nums([])\n0\n>>> consider_nums([-1, 11, -11])\n1\n>>> consider_nums([1, 1, 2])\n3\n\nNote: The input array will be a non-empty array of integers.\n"], ["def affect_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    affect_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    affect_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def central(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an central of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of centrald elements between lst1 and lst2.\n    If it is possible to central elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # TODO: Write your code here\n    return \"YES\" if len(set(lst1) & set(lst2)) == 0 else \"NO\"\n\n\nTest cases:\n>>> central([1, 2, 3, 4], [1, 2, 3, 4])\n'YES'\n>>> central([1, 2, 3, 4], [1, 5, 3, 4])\n'NO'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5])\n'YES'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n'NO'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n'YES'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n'NO'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n'YES'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n'NO'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n'YES'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n'NO'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n'YES'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n'NO'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n'YES'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n'NO'\n>>> central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n'YES'\n>>> central([1"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def invert_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return result, result == s[::-1]\n"], ["def curious_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> curious_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> curious_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i).replace('n', '')))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minuteSubArrayUnion(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minuteSubArrayUnion([2, 3, 4, 1, 2, 4]) == 1\n    minuteSubArrayUnion([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    if len(nums) == 3:\n        return min(nums[0], nums[1], nums[2])\n    if len(nums) == 4:\n        return min(nums[0], nums[1], nums[2], nums[3])\n    if len(nums) == 5:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n    if len(nums) == 6:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n    if len(nums) == 7:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n    if len(nums) == 8:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])\n    if len(nums) == 9:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])\n    if len(nums) == 10:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])\n    if len(nums) == 11:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])\n    if len(nums) == 12:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11])\n    if len(nums) == 13:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12])\n    if len(nums) == 14:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13])\n    if len(nums) == 15:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14])\n    if len(nums) == 16:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15])\n    if len(nums) == 17:\n        return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12], nums[13], nums[14], nums[15], nums[16])\n    if len(nums) == 18:\n        return min(nums[0], nums[1], nums["], ["def soap_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Iterate over the grid\n    for row in grid:\n        # Iterate over the columns of the row\n        for col in row:\n            # If the column is 1, then we need to lower the bucket\n            if col == 1:\n                # Get the bucket index\n                bucket_index = math.floor(col / capacity)\n                # Get the bucket capacity\n                bucket_capacity = capacity\n                # Get the bucket value\n                bucket_value = col % capacity\n                # If the bucket value is greater than 0, then we need to lower the bucket\n                if bucket_value > 0:\n                    # Increment the number of times you need to lower the buckets\n                    times += 1\n                    # Set the bucket value to 0\n                    bucket_value = 0\n                    # If the bucket index is greater than 0, then we need to lower the bucket\n                    if bucket_index > 0:\n                        # Increment the number of times you need to lower the buckets\n                        times += 1\n                        # Set the bucket index to 0\n                        bucket_index = 0\n                # If the bucket value is greater than 0, then we need to lower the bucket\n                if bucket_value > 0:\n                    # Increment the number of times you need to lower the buckets\n                    times += 1\n                    # Set the bucket value to 0\n                    bucket_value = 0\n                    # If the bucket index is greater than 0, then we need to lower the bucket\n                    if bucket_index > 0:\n                        # Increment the number of times you need to lower the buckets\n                        times += 1\n                        # Set the bucket index to 0\n                        bucket_index = 0\n    # Return the number of times you need to lower the buckets\n    return times\n\n"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def choice_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    choice_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    choice_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    choice_words(\"simple white space\", 2) ==> []\n    choice_words(\"Hello world\", 4) ==> [\"world\"]\n    choice_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nchoice_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nchoice_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nchoice_words(\"simple white space\", 2) ==> []\nchoice_words(\"Hello world\", 4) ==> [\"world\"]\nchoice_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nchoice_words(\"\", 3) ==> []\nchoice_words(\" \", 3) ==> []\nchoice_words(\" \", 0) ==> []\nchoice_words(\" \", 1) ==> []\nchoice_words(\" \", 2) ==> []\nchoice_words(\" \", 3) ==> []\nchoice_words(\" \", 4) ==> []\nchoice_words(\" \", 5) ==> []\nchoice_words(\" \", 6) ==> []\nchoice_words(\" \", 7) ==> []\nchoice_words(\" \", 8) ==> []\nchoice_words(\" \", 9) ==> []\nchoice_words(\" \", 10) ==> []\nchoice_words(\" \", 11) ==> []\nchoice_words(\" \", 12) ==> []\nchoice_words(\" \", 13) ==> []\nchoice_words(\" \", 14) ==> []\nchoice_words(\" \", 15) ==> []\nchoice_words(\" \", 16) ==> []\nchoice_words(\" \", 17) ==> []\nchoice_words(\" \", 18) ==> []\nchoice_words(\" \", 19) ==> []\nchoice_words(\" \", 20) ==> []\nchoice_words(\" \", 21) ==> []\nchoice_words(\" \", 22) ==> []\nchoice_words(\" \", 23) ==> []\nchoice_words(\" \", 24) ==> []\nchoice_words(\" \", 25) ==> []\nchoice_words(\" \", 26) ==> []\nchoice_words(\" \", 27) ==> []\nchoice_words(\" \", 28) ==> []\nchoice_words(\" \", 29) ==> []\nchoice_words(\" \", 30) ==> []\nchoice_words(\" \", 31) ==> []\nchoice_words(\" \", 32) ==> []\nchoice_words(\" \", 33) ==> []\nchoice_words(\" \", 34) ==> []\nchoice_words(\" \", 35) ==> []\nchoice_words(\" \", 36) ==> []\nchoice_words(\" \", 37) ==> []\nchoice_words(\" \", 38) ==> []\nchoice_words(\" \", 39) ==> []\nchoice_words(\" \", 40) ==> []\nchoice_words(\" \", 41) ==> []\nchoice_words(\" \", 42) ==> []\nchoice_words(\" \", 43) ==> []\nchoice_words(\" \", 44) ==> []\nchoice_words(\" \", 45) ==> []\nchoice_words(\" \", 46) ==> []\nchoice_words(\" \", 47) ==> []\nchoice_words(\" \", 48) ==> []\nchoice_words(\" \", 49) ==> []\nchoice_words(\" \", 50) ==> []\nchoice_words(\" \", 51) ==> []\nchoice_words(\" \", 52) ==> []\nchoice_words(\" \", 53) ==> []\nchoice_words(\" \", 54) ==> []\nchoice_words(\" \", 55) ==> []\nchoice_words(\" \", 56) ==> []\nchoice_words(\" \", 57) ==> []\nchoice_words(\" \", 58) ==> []\nchoice_words(\" \","], ["def catch_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    catch_closest_vowel(\"yogurt\") ==> \"u\"\n    catch_closest_vowel(\"FULL\") ==> \"U\"\n    catch_closest_vowel(\"quick\") ==> \"\"\n    catch_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ncatch_closest_vowel(\"yogurt\") ==> \"u\"\ncatch_closest_vowel(\"FULL\") ==> \"U\"\ncatch_closest_vowel(\"quick\") ==> \"\"\ncatch_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letter only.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n"], ["def catch_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    catch_parens(['()(', ')']) == 'Yes'\n    catch_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n"], ["def maximal(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximal k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximal([-3, -4, 5], 3), [-4, -3, 5])\n    Test.assert_equals(maximal([4, -4, 4], 2), [4, 4])\n    Test.assert_equals(maximal([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def lend_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[:k]) + sum(arr[k:])\n\n\nTest cases:\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 4), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 5), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 6), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 7), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 8), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 9), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 10), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 11), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 12), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 13), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 14), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 15), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 16), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 17), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 18), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 19), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 20), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 21), 24)\n    Test.assert_equals(lend_elements([111,21,3,4000,5,6,7,8,9], 22), 24)\n    Test.assert_equals(lend_elements([111,21,3,400"], ["def catch_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    catch_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = []\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            odd_collatz.append(n)\n        return sorted(odd_collatz)\n\n\nExample:\n\nInput: 5\n\nOutput: [1, 5]\n\nExplanation: The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5."], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def disconnected_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    disconnected_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    disconnected_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    disconnected_words(\"abcdef\") == 3 \n    '''\n    return [word for word in txt.split() if word]\n\ndisconnected_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\ndisconnected_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\ndisconnected_words(\"abcdef\") == 3"], ["def is_screen(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_screen([5]) \u279e True\n    is_screen([1, 2, 3, 4, 5]) \u279e True\n    is_screen([1, 3, 2, 4, 5]) \u279e False\n    is_screen([1, 2, 3, 4, 5, 6]) \u279e True\n    is_screen([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_screen([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_screen([1, 2, 2, 3, 3, 4]) \u279e True\n    is_screen([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n"], ["def overlap(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of overlap of these two \n    intervals is a prime number.\n    Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the overlap is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    overlap((1, 2), (2, 3)) ==> \"NO\"\n    overlap((-1, 1), (0, 4)) ==> \"NO\"\n    overlap((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"NO\"\n"], ["def goad_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> goad_signs([1, 2, 2, -4]) == -9\n    >>> goad_signs([0, 1]) == 0\n    >>> goad_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x) * (1 if x > 0 else -1) for x in arr)\n\n\nTest:\n>>> goad_signs([1, 2, 2, -4])\n-9\n>>> goad_signs([0, 1])\n0\n>>> goad_signs([])\nNone\n\"\"\"\n"], ["def minutePath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def find_path(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def find_path(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B ("], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digit(n):\n    \"\"\"Given a positive integer n, return the product of the odd digit.\n    Return 0 if all digit are even.\n    For example:\n    digit(1)  == 1\n    digit(4)  == 0\n    digit(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 * digit(n // 10)\n"], ["def is_nest(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nest('[[]]') \u279e True\n    is_nest('[]]]]]]][[[[[]') \u279e False\n    is_nest('[][]') \u279e False\n    is_nest('[]') \u279e False\n    is_nest('[[][]]') \u279e True\n    is_nest('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n"], ["def summarize_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def determine_if_last_charwoman_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    determine_if_last_charwoman_is_a_letter(\"apple pie\") \u279e False\n    determine_if_last_charwoman_is_a_letter(\"apple pi e\") \u279e True\n    determine_if_last_charwoman_is_a_letter(\"apple pi e \") \u279e False\n    determine_if_last_charwoman_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\ndetermine_if_last_charwoman_is_a_letter(\"apple pie\") \u279e False\ndetermine_if_last_charwoman_is_a_letter(\"apple pi e\") \u279e True\ndetermine_if_last_charwoman_is_a_letter(\"apple pi e \") \u279e False\ndetermine_if_last_charwoman_is_a_letter(\"\") \u279e False"], ["def can_stage(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_stage([1,2,4,3,5]) = 3\n    can_stage([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n\n"], ["def big_smallest_integer(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    big_smallest_integer([2, 4, 1, 3, 5, 7]) == (None, 1)\n    big_smallest_integer([]) == (None, None)\n    big_smallest_integer([0]) == (None, None)\n    '''\n    # Your code here\n    return None, None\n\n\nExamples:\nbig_smallest_integer([2, 4, 1, 3, 5, 7]) == (None, 1)\nbig_smallest_integer([]) == (None, None)\nbig_smallest_integer([0]) == (None, None)\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_adequate_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_adequate_to_sum_even(4) == False\n    is_adequate_to_sum_even(6) == False\n    is_adequate_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def extra_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> extra_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def repair_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    repair_spaces(\"Example\") == \"Example\"\n    repair_spaces(\"Example 1\") == \"Example_1\"\n    repair_spaces(\" Example 2\") == \"_Example_2\"\n    repair_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n\n"], ["def file_name_check_mark(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check_mark(\"example.txt\") # => 'Yes'\n    file_name_check_mark(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check_mark(\"example.txt\") # => 'Yes'\nfile_name_check_mark(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check_mark(\"1example.txt\") # => 'Yes'\nfile_name_check_mark(\"1example.exe\") # => 'Yes'\nfile_name_check_mark(\"1example.dll.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nfile_name_check_mark(\"1example.dll.txt\") # => 'No' (the substring before the dot should not be empty, and it starts with a latin alphapet letter)\nfile_name_check_mark(\"1example.dll.exe.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt\") # => 'No' (the file's name should not contain more than three digits)\nfile_name_check_mark(\"1example.dll.exe.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt\") # => 'No' (the file"], ["def summarize_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return 0\n\n\nExamples:\nsummarize_squares([1,2,3]) \u279e 6\n\nsummarize_squares([]) \u279e 0\n\nsummarize_squares([-1,-5,2,-1,-5]) \u279e -126\nNotes:\n- The function should return 0 if the list is empty.\n- The function should return the sum of all entries in the list if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying the rules described above if the list contains only integers.\n- The function should return the sum of all entries in the list after applying"], ["def bible_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def holy_order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> holy_order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> holy_order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def extraFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    extraFilter([15, -73, 14, -15]) => 1 \n    extraFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100 != 10:\n            count += 1\n    return count\n\nnums = [15, -73, 14, -15]"], ["def catch_max_trio(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def screen_list_union(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=lambda x: len(x))\n\n\nTest:\n>>> screen_list_union([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n>>> screen_list_union([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n>>> screen_list_union([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \""], ["def x_or_yttrium(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_yttrium(7, 34, 12) == 34\n    for x_or_yttrium(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, 1000000):\n        return x\n    else:\n        return y\n"], ["def double_the_deviation(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_deviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_deviation([-1, -2, 0]) == 0\n    double_the_deviation([9, -2]) == 81\n    double_the_deviation([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 == 1, lst)))\n\ndouble_the_deviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_deviation([-1, -2, 0]) == 0\ndouble_the_deviation([9, -2]) == 81\ndouble_the_deviation([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def strong_annex(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for strong_annex('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return None\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def good_angle_triangulum(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    good_angle_triangulum(3, 4, 5) == True\n    good_angle_triangulum(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\nIf you have any questions, please feel free to contact me at <EMAIL>."], ["def recover_soap(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    recover_soap([\"name\", \"of\", \"string\"]) == \"string\"\n    recover_soap([\"name\", \"enam\", \"game\"]) == \"enam\"\n    recover_soap([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    return \"\"\n\n\nTest:\n\nassert recover_soap([\"name\", \"of\", \"string\"]) == \"string\"\nassert recover_soap([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert recover_soap([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n"], ["def feed(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have feeden a certain number of carrots,\n    but now you need to feed more carrots to complete the day's meals.\n    you should return an array of [ total number of feeden carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n    \n    Example:\n    * feed(5, 6, 10) -> [11, 4]\n    * feed(4, 8, 9) -> [12, 1]\n    * feed(1, 10, 10) -> [11, 0]\n    * feed(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have feeden.\n    @need : integer\n        the number of carrots that you need to feed.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Your code here\n    return [number + need, remaining - need]\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(feed(5, 6, 10), [11, 4])\nTest.assert_equals(feed(4, 8, 9), [12, 1])\nTest.assert_equals(feed(1, 10, 10), [11, 0])\nTest.assert_equals(feed(2, 11, 5), [7, 0])\n\nTest.describe('Test 2')\nTest.assert_equals(feed(1, 10, 10), [11, 0])\nTest.assert_equals(feed(2, 11, 5), [7, 0])\nTest.assert_equals(feed(3, 11, 5), [8, 0])\nTest.assert_equals(feed(4, 11, 5), [9, 0])\nTest.assert_equals(feed(5, 11, 5), [10, 0])\nTest.assert_equals(feed(6, 11, 5), [11, 0])\nTest.assert_equals(feed(7, 11, 5), [12, 0])\nTest.assert_equals(feed(8, 11, 5), [13, 0])\nTest.assert_equals(feed(9, 11, 5), [14, 0])\nTest.assert_equals(feed(10, 11, 5), [15, 0])\nTest.assert_equals(feed(11, 11, 5), [16, 0])\nTest.assert_equals(feed(12, 11, 5), [17, 0])\nTest.assert_equals(feed(13, 11, 5), [18, 0])\nTest.assert_equals(feed(14, 11, 5), [19, 0])\nTest.assert_equals(feed(15, 11, 5), [20, 0])\nTest.assert_equals(feed(16, 11, 5), [21, 0])\nTest.assert_equals(feed(17, 11, 5), [22, 0])\nTest.assert_equals(feed(18, 11, 5), [23, 0])\nTest.assert_equals(feed(19, 11, 5), [24, 0])\nTest.assert_equals(feed(20, 11, 5), [25, 0])\nTest.assert_equals(feed(21, 11, 5), [26, 0])\nTest.assert_equals(feed(22, 11, 5), [27, 0])\nTest.assert"], ["def suffice_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = suffice_algebra(operator, operand)"], ["def resolve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    resolve(\"1234\") = \"4321\"\n    resolve(\"ab\") = \"AB\"\n    resolve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    return resolve(res)\n"], ["def bowed_stringed_instrument_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> bowed_stringed_instrument_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def render_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    render_integers(2, 8) => [2, 4, 6, 8]\n    render_integers(8, 2) => [2, 4, 6, 8]\n    render_integers(10, 14) => []\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n\nAnswer: def render_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    render_integers(2, 8) => [2, 4, 6, 8]\n    render_integers(8, 2) => [2, 4, 6, 8]\n    render_integers(10, 14) => []\n    \"\"\"\n    # TODO: Write your code here\n    return [x for x in range(a, b+1) if x%2 == 0]\n"], ["from typing import List\n\n\ndef accept_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> accept_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> accept_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n\n"], ["from typing import List\n\n\ndef disjoined_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> disjoined_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_numeral(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_numeral(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef intend_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> intend_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_cuddle_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_cuddle_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef union_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> union_product([])\n    (0, 1)\n    >>> union_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolled_soap(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolled_soap([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if not result or result[-1] < number:\n            result.append(number)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef lay_down_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> lay_down_palindrome('')\n    ''\n    >>> lay_down_palindrome('cat')\n    'catac'\n    >>> lay_down_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_postfix = string[i:]\n            break\n    return string + longest_postfix[::-1]\n\n"], ["from typing import List\n\n\ndef drawstring_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> drawstring_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef long(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the long one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> long([])\n\n    >>> long(['a', 'b', 'c'])\n    'a'\n    >>> long(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def big_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> big_common_divisor(3, 5)\n    1\n    >>> big_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return big_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefix(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefix('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def drawstring_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> drawstring_sequence(0)\n    '0'\n    >>> drawstring_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def reckon_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> reckon_distinct_characters('xyzXYZ')\n    3\n    >>> reckon_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_issue(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_issue('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef recover_closest_component(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> recover_closest_component([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> recover_closest_component([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unit_of_measurement(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit_of_measurement([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return [number / (max_value - min_value) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integer(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integer(['a', 3.14, 5])\n    [5]\n    >>> filter_integer([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def large_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> large_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef take_out_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> take_out_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n"], ["def impudent_shell(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> impudent_shell('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def catch_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> catch_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> catch_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_choice(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_choice(6)\n    False\n    >>> is_choice(101)\n    True\n    >>> is_choice(11)\n    True\n    >>> is_choice(13441)\n    True\n    >>> is_choice(61)\n    True\n    >>> is_choice(4)\n    False\n    >>> is_choice(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef recover_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    recover_zero find x such that poly(x) = 0.\n    recover_zero returns only only zero point, even if there are many.\n    Moreover, recover_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(recover_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(recover_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def singular(l: list):\n    \"\"\"Return sorted singular elements in a list\n    >>> singular([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l) - {x for x in l if l.count(x) > 1})\n\n"], ["def soap_chemical_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> soap_chemical_element([1, 2, 3])\n    3\n    >>> soap_chemical_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def choice_fib(n: int):\n    \"\"\"\n    choice_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> choice_fib(1)\n    2\n    >>> choice_fib(2)\n    3\n    >>> choice_fib(3)\n    5\n    >>> choice_fib(4)\n    13\n    >>> choice_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return choice_fib(n - 1) + choice_fib(n - 2)\n\n"], ["def trio_sum_to_zero(l: list):\n    \"\"\"\n    trio_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> trio_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> trio_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> trio_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> trio_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> trio_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def cable_car_raceway_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\n>>> cable_car_raceway_collision(1)\n0\n>>> cable_car_raceway_collision(2)\n0\n>>> cable_car_raceway_collision(3)\n0\n>>> cable_car_raceway_collision(4)\n0\n>>> cable_car_raceway_collision(5)\n0\n>>> cable_car_raceway_collision(6)\n0\n>>> cable_car_raceway_collision(7)\n0\n>>> cable_car_raceway_collision(8)\n0\n>>> cable_car_raceway_collision(9)\n0\n>>> cable_car_raceway_collision(10)\n0\n>>> cable_car_raceway_collision(11)\n0\n>>> cable_car_raceway_collision(12)\n0\n>>> cable_car_raceway_collision(13)\n0\n>>> cable_car_raceway_collision(14)\n0\n>>> cable_car_raceway_collision(15)\n0\n>>> cable_car_raceway_collision(16)\n0\n>>> cable_car_raceway_collision(17)\n0\n>>> cable_car_raceway_collision(18)\n0\n>>> cable_car_raceway_collision(19)\n0\n>>> cable_car_raceway_collision(20)\n0\n>>> cable_car_raceway_collision(21)\n0\n>>> cable_car_raceway_collision(22)\n0\n>>> cable_car_raceway_collision(23)\n0\n>>> cable_car_raceway_collision(24)\n0\n>>> cable_car_raceway_collision(25)\n0\n>>> cable_car_raceway_collision(26)\n0\n>>> cable_car_raceway_collision(27)\n0\n>>> cable_car_raceway_collision(28)\n0\n>>> cable_car_raceway_collision(29)\n0\n>>> cable_car_raceway_collision(30)\n0\n>>> cable_car_raceway_collision(31)\n0\n>>> cable_car_raceway_collision(32)\n0\n>>> cable_car_raceway_collision(33)\n0\n>>> cable_car_raceway_collision(34)\n0\n>>> cable_car_raceway_collision(35)\n0\n>>> cable_car_raceway_collision(36)\n0\n>>> cable_car_raceway_collision(37)\n0\n>>> cable_car_raceway_collision(38)\n0\n>>> cable_car_raceway_collision(39)\n0\n>>> cable_car_raceway_collision(40)\n0\n>>> cable_car_raceway_collision(41)\n0\n>>> cable_car_raceway_collision(42)\n0\n>>> cable_car_raceway_collision(43)\n0\n>>> cable_car_raceway_collision(44)\n0\n>>> cable_car_raceway_collision(45)\n0\n>>> cable_car_raceway_collision(46)\n0\n>>> cable_car_raceway_collision(47)"], ["def incr_tilt(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_tilt([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_tilt([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pair_sum_to_zero(l):\n    \"\"\"\n    pair_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pair_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pair_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pair_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pair_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pair_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\nTest.assert_equals(pair_sum_to_zero([1, 3, 5, 0]), False)\nTest.assert_equals(pair_sum_to_zero([1, 3, -2, 1]), False)\nTest.assert_equals(pair_sum_to_zero([1, 2, 3, 7]), False)\nTest.assert_equals(pair_sum_to_zero([2, 4, -5, 3, 5, 7]), True)\nTest.assert_equals(pair_sum_to_zero([1]), False)\n"], ["def variety_root(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> variety_root(8, 3)\n    '22'\n    >>> variety_root(8, 2)\n    '1000'\n    >>> variety_root(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be less than 10\")\n    if base == 1:\n        return str(x)\n    elif base == 2:\n        return str(bin(x)[2:])\n    elif base == 3:\n        return str(oct(x)[2:])\n    elif base == 4:\n        return str(hex(x)[2:])\n    elif base == 5:\n        return str(bin(x)[2:])\n    elif base == 6:\n        return str(bin(x)[2:])\n    elif base == 7:\n        return str(bin(x)[2:])\n    elif base == 8:\n        return str(bin(x)[2:])\n    elif base == 9:\n        return str(bin(x)[2:])\n    elif base == 10:\n        return str(bin(x)[2:])\n    elif base == 11:\n        return str(bin(x)[2:])\n    elif base == 12:\n        return str(bin(x)[2:])\n    elif base == 13:\n        return str(bin(x)[2:])\n    elif base == 14:\n        return str(bin(x)[2:])\n    elif base == 15:\n        return str(bin(x)[2:])\n    elif base == 16:\n        return str(bin(x)[2:])\n    elif base == 17:\n        return str(bin(x)[2:])\n    elif base == 18:\n        return str(bin(x)[2:])\n    elif base == 19:\n        return str(bin(x)[2:])\n    elif base == 20:\n        return str(bin(x)[2:])\n    elif base == 21:\n        return str(bin(x)[2:])\n    elif base == 22:\n        return str(bin(x)[2:])\n    elif base == 23:\n        return str(bin(x)[2:])\n    elif base == 24:\n        return str(bin(x)[2:])\n    elif base == 25:\n        return str(bin(x)[2:])\n    elif base == 26:\n        return str(bin(x)[2:])\n    elif base == 27:\n        return str(bin(x)[2:])\n    elif base == 28:\n        return str(bin(x)[2:])\n    elif base == 29:\n        return str(bin(x)[2:])\n    elif base == 30:\n        return str(bin(x)[2:])\n    elif base == 31:\n        return str(bin(x)[2:])\n    elif base == 32:\n        return str(bin(x)[2:])\n    elif base == 33:\n        return str(bin(x)[2:])\n    elif base == 34:\n        return str(bin(x)[2:])\n    elif base == 35:\n        return str(bin(x)[2:])\n    elif base == 36:\n        return str(bin(x)[2:])\n    elif base == 37:\n        return str(bin(x)[2:])\n    elif base == 38:\n        return str(bin(x)[2:])\n    elif base == 39:\n        return str(bin(x)[2:])\n    elif base == 40:\n        return str(bin(x)[2:])\n    elif base == 41:\n        return str(bin(x)[2:])\n    elif base == 42:\n        return str(bin(x)[2:])\n    elif base == 43:\n        return str(bin(x)[2:])\n    elif base == 44:\n        return str(bin(x)[2:])\n    elif base == 45:\n        return str(bin(x)[2:])\n    elif base == 46:\n        return str(bin(x)[2:])\n    elif base == 47:\n        return str(bin(x)[2:])\n    elif base == 48:\n        return str(bin(x)[2:])\n    elif base == 49:\n        return str(bin(x)[2:])\n    elif base == 50:\n        return str(bin(x)[2:])\n    elif base == 5"], ["def triangulum_sphere(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangulum_sphere(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift_key(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def take_out_vowels(text):\n    \"\"\"\n    take_out_vowels is a function that takes string and returns string without vowels.\n    >>> take_out_vowels('')\n    ''\n    >>> take_out_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> take_out_vowels('abcdef')\n    'bcdf'\n    >>> take_out_vowels('aaaaa')\n    ''\n    >>> take_out_vowels('aaBAA')\n    'B'\n    >>> take_out_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(c for c in text if c not in vowels)\n\n\nThis is a function that takes a string and returns a string without vowels.\n\nThe function takes an empty string as an input and returns an empty string.\n\nThe function takes a string with vowels as an input and returns a string without vowels.\n\nThe function takes a string with no vowels as an input and returns the same string.\n\nThe function takes a string with multiple vowels as an input and returns a string without the vowels.\n\nThe function takes a string with multiple characters as an input and returns a string without the characters.\n\nThe function takes a string with multiple spaces as an input and returns a string without the spaces.\n\nThe function takes a string with multiple tabs as an input and returns a string without the tabs.\n\nThe function takes a string with multiple newlines as an input and returns a string without the newlines.\n\nThe function takes a string with multiple line breaks as an input and returns a string without the line breaks.\n\nThe function takes a string with multiple carriage returns as an input and returns a string without the carriage returns.\n\nThe function takes a string with multiple tabs as an input and returns a string without the tabs.\n\nThe function takes a string with multiple spaces as an input and returns a string without the spaces.\n\nThe function takes a string with multiple newlines as an input and returns a string without the newlines.\n\nThe function takes a string with multiple line breaks as an input and returns a string without the line breaks.\n\nThe function takes a string with multiple carriage returns as an input and returns a string without the carriage returns.\n\nThe function takes a string with multiple tabs as an input and returns a string without the tabs.\n\nThe function takes a string with multiple spaces as an input and returns a string without the spaces.\n\nThe function takes a string with multiple newlines as an input and returns a string without the newlines.\n\nThe function takes a string with multiple line breaks as an input and returns a string without the line breaks.\n\nThe function takes a string with multiple carriage returns as an input and returns a string without the carriage returns.\n\nThe function takes a string with multiple tabs as an input and returns a string without the tabs.\n\nThe function takes a string with multiple spaces as an input and returns a string without the spaces.\n\nThe function takes a string with multiple newlines as an input and returns a string without the newlines.\n\nThe function takes a string with multiple line breaks as an input and returns a string without the line breaks.\n\nThe function takes a string with multiple carriage returns as an input and returns a string without the carriage returns.\n\nThe function takes a string with multiple tabs as an input and returns a string without the tabs.\n\nThe function takes a string with multiple spaces as an input and returns a string without the spaces.\n\nThe function takes a string with multiple newlines as an input and returns a string without the newlines.\n\nThe function takes a string with multiple line breaks as an input and returns a string without the line breaks.\n\nThe function takes a string with multiple carriage returns as an input and returns a string without the carriage returns.\n\nThe function takes a string with multiple tabs as an input and returns a string without the tabs.\n\nThe function takes a string with multiple spaces as an input and returns a string without the spaces.\n\nThe function takes a string with multiple newlines as an input and returns a string without the newlines.\n\nThe function takes a string with multiple line breaks as an input and returns a string without the line breaks.\n\nThe function takes a string with multiple carriage returns as an input and returns a string without the carriage returns.\n\nThe function takes a string with multiple tabs as an input and returns a string without the tabs.\n\nThe function takes a string with multiple spaces as an input"], ["def below_doorsill(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_doorsill([1, 2, 4, 10], 100)\n    True\n    >>> below_doorsill([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def total(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> total(2, 3)\n    5\n    >>> total(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def like_char(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> like_char('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> like_char('abcd', 'dddddddabc')\n    True\n    >>> like_char('dddddddabc', 'abcd')\n    True\n    >>> like_char('eabcd', 'dddddddabc')\n    False\n    >>> like_char('abcd', 'dddddddabce')\n    False\n    >>> like_char('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def right_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> right_bracketing(\"<\")\n    False\n    >>> right_bracketing(\"<>\")\n    True\n    >>> right_bracketing(\"<<><>>\")\n    True\n    >>> right_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def flat(l: list):\n    \"\"\"Return True is list elements are flatally increasing or decreasing.\n    >>> flat([1, 2, 4, 20])\n    True\n    >>> flat([1, 20, 4, 10])\n    False\n    >>> flat([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"], ["def coarse(l1: list, l2: list):\n    \"\"\"Return sorted unique coarse elements for two lists.\n    >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> coarse([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            yield l1[i]\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n"], ["def large_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> large_prime_factor(13195)\n    29\n    >>> large_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def total_to_n(n: int):\n    \"\"\"total_to_n is a function that sums numbers from 1 to n.\n    >>> total_to_n(30)\n    465\n    >>> total_to_n(100)\n    5050\n    >>> total_to_n(5)\n    15\n    >>> total_to_n(10)\n    55\n    >>> total_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def right_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> right_bracketing(\"(\")\n    False\n    >>> right_bracketing(\"()\")\n    True\n    >>> right_bracketing(\"(()())\")\n    True\n    >>> right_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowel_count(s):\n    \"\"\"Write a function vowel_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowel_count(\"abcde\")\n    2\n    >>> vowel_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def round_shift_key(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> round_shift_key(12, 1)\n    \"21\"\n    >>> round_shift_key(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n"], ["def fingerKernel(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        fingerKernel(\"\") => 0\n        fingerKernel(\"abAB\") => 131\n        fingerKernel(\"abcCd\") => 67\n        fingerKernel(\"helloE\") => 69\n        fingerKernel(\"woArBld\") => 131\n        fingerKernel(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def yield_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    yield_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    yield_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    yield_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    yield_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n"], ["def overcharge(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to overcharge one of the nodes and return it.\n    The overchargeed node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The overchargeed node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    min_value = min(arr)\n    if min_value % 2 == 0:\n        return [min_value, arr.index(min_value)]\n    else:\n        return [min_value, arr.index(min_value)]\n\n"], ["def research(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        research([4, 1, 2, 2, 3, 1]) == 2\n        research([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        research([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\n"], ["def foreign_kind_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    foreign_kind_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    foreign_kind_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    foreign_kind_list([]) == []\n    '''\n    return sorted(lst, reverse=True)\n\n\nforeign_kind_list([1, 2, 3, 4])"], ["def triangulum_sphere(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangulum_sphere(3, 4, 5) == 6.00\n    triangulum_sphere(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n\nExample:\ntriangulum_sphere(3, 4, 5) == 6.00\ntriangulum_sphere(1, 2, 10) == -1"], ["def will_it_vanish(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_vanish([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_vanish([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_vanish([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_vanish([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def modest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    modest_change([1,2,3,5,4,7,9,6]) == 4\n    modest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    modest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count\n\n\nTest cases:\n\nmodest_change([1,2,3,5,4,7,9,6]) == 4\nmodest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nmodest_change([1, 2, 3, 2, 1]) == 0\nmodest_change([1, 2, 3, 2, 1, 2, 3, 2, 1]) == 0\nmodest_change([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2"], ["def full_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    full_match([], []) \u279e []\n    full_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    full_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    full_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    full_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    return [x for x in lst1 if x not in lst2]\n\nfull_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\nfull_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\nfull_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\nfull_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_premier(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_premier(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_premier(30)\n\nis_multiply_premier(100)\n\nis_multiply_premier(101)\n\nis_multiply_premier(102)\n\nis_multiply_premier(103)\n\nis_multiply_premier(104)\n\nis_multiply_premier(105)\n\nis_multiply_premier(106)\n\nis_multiply_premier(107)\n\nis_multiply_premier(108)\n\nis_multiply_premier(109)\n\nis_multiply_premier(110)\n\nis_multiply_premier(111)\n\nis_multiply_premier(112)\n\nis_multiply_premier(113)\n\nis_multiply_premier(114)\n\nis_multiply_premier(115)\n\nis_multiply_premier(116)\n\nis_multiply_premier(117)\n\nis_multiply_premier(118)\n\nis_multiply_premier(119)\n\nis_multiply_premier(120)\n\nis_multiply_premier(121)\n\nis_multiply_premier(122)\n\nis_multiply_premier(123)\n\nis_multiply_premier(124)\n\nis_multiply_premier(125)\n\nis_multiply_premier(126)\n\nis_multiply_premier(127)\n\nis_multiply_premier(128)\n\nis_multiply_premier(129)\n\nis_multiply_premier(130)\n\nis_multiply_premier(131)\n\nis_multiply_premier(132)\n\nis_multiply_premier(133)\n\nis_multiply_premier(134)\n\nis_multiply_premier(135)\n\nis_multiply_premier(136)\n\nis_multiply_premier(137)\n\nis_multiply_premier(138)\n\nis_multiply_premier(139)\n\nis_multiply_premier(140)\n\nis_multiply_premier(141)\n\nis_multiply_premier(142)\n\nis_multiply_premier(143)\n\nis_multiply_premier(144)\n\nis_multiply_premier(145)\n\nis_multiply_premier(146)\n\nis_multiply_premier(147)\n\nis_multiply_premier(148)\n\nis_multiply_premier(149)\n\nis_multiply_premier(150)\n\nis_multiply_premier(151)\n\nis_multiply_premier(152)\n\nis_multiply_premier(153)\n\nis_multiply_premier(154)\n\nis_multiply_premier(155)\n\nis_multiply_premier(156)\n\nis_multiply_premier(157)\n\nis_multiply_premier(158)\n\nis_multiply_premier(159)\n\nis_multiply_premier(160)\n\nis_multiply_premier(161)\n\nis_multiply_premier(162)\n\nis_multiply_premier(163)\n\nis_multiply_premier(164)\n\nis_multiply_premier(165)\n\nis_multiply_premier(166)\n\nis_multiply_premier(167)\n\nis_multiply_premier(168)\n\nis_multiply_premier("], ["def is_bare_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_bare_power(1, 4) => true\n    is_bare_power(2, 2) => true\n    is_bare_power(8, 2) => true\n    is_bare_power(3, 2) => false\n    is_bare_power(3, 1) => false\n    is_bare_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_bare_power(1, 4)\nis_bare_power(2, 2)\nis_bare_power(8, 2)\nis_bare_power(3, 2)\nis_bare_power(3, 1)\nis_bare_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_cardinal(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_cardinal(\"AB\")\n1\n>>> hex_cardinal(\"1077E\")\n2\n>>> hex_cardinal(\"ABED1A33\")\n4\n>>> hex_cardinal(\"123456789ABCDEF0\")\n6\n>>> hex_cardinal(\"2020\")\n2\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'dbdef is_glad(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_glad(a) => False\n    is_glad(aa) => False\n    is_glad(abcd) => True\n    is_glad(aabb) => False\n    is_glad(adb) => True\n    is_glad(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numeral_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def choice_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    choice_length('Hello') == True\n    choice_length('abcdcba') == True\n    choice_length('kittens') == True\n    choice_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n"], ["def start_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"], ["def clear(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\nExamples:\n    clear(1000) \u279e \"1\"\n    clear(150) \u279e \"110\"\n    clear(147) \u279e \"1100\"\n\nNotes:\n    - The input will always be a positive integer.\n    - The output should be a string of binary number.\n    - The digits of the binary number should be separated by a space.\n    - The digits of the binary number should be in reverse order.\n    - The digits of the binary number should be in the range of 0 to 15.\n\"\"\"\n"], ["def total(lst):\n    \"\"\"Given a non-empty list of integers lst. total the even elements that are at odd indices..\n\n\n    Examples:\n        total([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 != 0:\n            total += lst[i]\n    return total\n\n\nExamples:\n    total([4, 2, 6, 7]) ==> 2\n    total([1, 2, 3, 4, 5]) ==> 15\n    total([1, 3, 5, 7, 9]) ==> 25"], ["def anti_shamble(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shamble('Hi') returns 'Hi'\n    anti_shamble('hello') returns 'ehllo'\n    anti_shamble('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def catch_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    catch_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    catch_row([], 1) == []\n    catch_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\ncatch_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\ncatch_row([], 1) == []\ncatch_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_little(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_little() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_little([1, 2, 3, 4, 5]) == 2\n    next_little([5, 1, 4, 3, 2]) == 2\n    next_little([]) == None\n    next_little([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n"], ["def is_blase(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_blase(\"Hello world\")\n    0\n    >>> is_blase(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def crack_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    crack_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    crack_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    crack_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    crack_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    crack_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n\nExamples:\ncrack_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncrack_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncrack_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncrack_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncrack_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True."], ["def reckon_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    reckon_up_to(5) => [2,3]\n    reckon_up_to(11) => [2,3,5,7]\n    reckon_up_to(0) => []\n    reckon_up_to(20) => [2,3,5,7,11,13,17,19]\n    reckon_up_to(1) => []\n    reckon_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        if i in primes:\n            continue\n        for j in range(i*i, n+1, i):\n            primes.append(j)\n    return primes\n"], ["def reproduce(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    reproduce(148, 412) should return 16.\n    reproduce(19, 28) should return 72.\n    reproduce(2020, 1851) should return 0.\n    reproduce(14,-15) should return 20.\n    \"\"\"\n    # Your code here\n    return a * b\n"], ["def reckon_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    reckon_upper('aBCdEf') returns 1\n    reckon_upper('abcdefg') returns 0\n    reckon_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s if c in 'AEIOU')\n"], ["def cheeseparing_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> cheeseparing_integer(\"10\")\n    10\n    >>> cheeseparing_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example cheeseparing_integer(\"14.5\") should\n    return 15 and cheeseparing_integer(\"-14.5\") should return -15.\n    '''\n    # Your code here\n    return 0\n"], ["def lay_down_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> lay_down_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest cases:\n>>> lay_down_a_pile(3)\n[3, 5, 7]\n>>> lay_down_a_pile(4)\n[4, 6, 8]\n>>> lay_down_a_pile(5)\n[5, 9, 11]\n>>> lay_down_a_pile(6)\n[6, 10, 12]\n>>> lay_down_a_pile(7)\n[7, 15, 19]\n>>> lay_down_a_pile(8)\n[8, 16, 22]\n>>> lay_down_a_pile(9)\n[9, 18, 27]\n>>> lay_down_a_pile(10)\n[10, 20, 30]\n>>> lay_down_a_pile(11)\n[11, 22, 33]\n>>> lay_down_a_pile(12)\n[12, 24, 36]\n>>> lay_down_a_pile(13)\n[13, 26, 39]\n>>> lay_down_a_pile(14)\n[14, 28, 42]\n>>> lay_down_a_pile(15)\n[15, 30, 45]\n>>> lay_down_a_pile(16)\n[16, 32, 50]\n>>> lay_down_a_pile(17)\n[17, 34, 53]\n>>> lay_down_a_pile(18)\n[18, 36, 56]\n>>> lay_down_a_pile(19)\n[19, 38, 59]\n>>> lay_down_a_pile(20)\n[20, 40, 62]\n>>> lay_down_a_pile(21)\n[21, 42, 65]\n>>> lay_down_a_pile(22)\n[22, 44, 68]\n>>> lay_down_a_pile(23)\n[23, 46, 71]\n>>> lay_down_a_pile(24)\n[24, 48, 74]\n>>> lay_down_a_pile(25)\n[25, 50, 77]\n>>> lay_down_a_pile(26)\n[26, 52, 80]\n>>> lay_down_a_pile(27)\n[27, 54, 83]\n>>> lay_down_a_pile(28)\n[28, 56, 86]\n>>> lay_down_a_pile(29)\n[29, 58, 89]\n>>> lay_down_a_pile(30)\n[30, 60, 92]\n>>> lay_down_a_pile(31)\n[31, 62, 95]\n>>> lay_down_a_pile(32)\n[32, 64, 98]\n>>> lay_down_a_pile(33)\n[33, 66, 101]\n>>> lay_down_a_pile(34)\n[34, 68, 104]\n>>> lay_down_a_pile("], ["def parole_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    parole_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    parole_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n\nparole_string(\"Hi, my name is John\")\nparole_string(\"One, two, three, four, five, six\")"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef singular_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> singular_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> singular_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return sorted(set(x) - set(str(x).strip('0')))\n\nExamples:\n>>> singular_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> singular_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_distance(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n\nTest:\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nassert by_distance(arr) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n\narr = []\nassert by_distance(arr) == []\n\narr = [1, -1 , 55]\nassert by_distance(arr) == ['One']"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_curious_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def reckon_nums(arr):\n    \"\"\"\n    Write a function reckon_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> reckon_nums([]) == 0\n    >>> reckon_nums([-1, 11, -11]) == 1\n    >>> reckon_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def motivate_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    motivate_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    motivate_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # Your code here\n    return True\n\n"], ["def rally(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an rally of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of rallyd elements between lst1 and lst2.\n    If it is possible to rally elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    rally([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    rally([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4])\n'YES'\n>>> rally([1, 2, 3, 4], [1, 5, 3, 4])\n'NO'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5])\n'YES'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n'NO'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n'YES'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n'NO'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n'YES'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n'NO'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n'YES'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n'NO'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n'YES'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n'NO'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n'YES'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n'NO'\n>>> rally([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def change_by_reversal_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return (result, result == s[::-1])\n\n"], ["def leftover_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> leftover_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> leftover_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minuteBomberArrayUnion(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minuteBomberArrayUnion([2, 3, 4, 1, 2, 4]) == 1\n    minuteBomberArrayUnion([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    nums.sort()\n    sum = 0\n    for i in range(len(nums)):\n        if i == 0:\n            sum += nums[i]\n        else:\n            sum += nums[i] - nums[i-1]\n    return sum\n"], ["def soap_filling(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Iterate over the grid\n    for row in grid:\n        # Iterate over the columns of the row\n        for col in row:\n            # If the column is 1, then we need to lower the bucket\n            if col == 1:\n                # Get the index of the column\n                index = row.index(col)\n                # Get the bucket capacity\n                bucket_capacity = grid[index][0]\n                # Get the amount of water in the bucket\n                amount_in_bucket = grid[index][1]\n                # Calculate the amount of water we can extract\n                amount_to_extract = math.ceil(amount_in_bucket / bucket_capacity)\n                # Update the number of times we need to lower the bucket\n                times += amount_to_extract\n                # Update the amount of water in the bucket\n                grid[index][1] -= amount_to_extract * bucket_capacity\n    # Return the number of times you need to lower the buckets\n    return times\n\n"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def blueribbon_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    blueribbon_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    blueribbon_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    blueribbon_words(\"simple white space\", 2) ==> []\n    blueribbon_words(\"Hello world\", 4) ==> [\"world\"]\n    blueribbon_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nblueribbon_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nblueribbon_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nblueribbon_words(\"simple white space\", 2) ==> []\nblueribbon_words(\"Hello world\", 4) ==> [\"world\"]\nblueribbon_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n^2)\nSpace complexity: O(n)"], ["def catch_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    catch_closest_vowel(\"yogurt\") ==> \"u\"\n    catch_closest_vowel(\"FULL\") ==> \"U\"\n    catch_closest_vowel(\"quick\") ==> \"\"\n    catch_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\ncatch_closest_vowel(\"yogurt\") ==> \"u\"\ncatch_closest_vowel(\"FULL\") ==> \"U\"\ncatch_closest_vowel(\"quick\") ==> \"\"\ncatch_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letter only.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n"], ["def peer_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    peer_parens(['()(', ')']) == 'Yes'\n    peer_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\npeer_parens(['()(', ')']) == 'Yes'\npeer_parens([')', ')']) == 'No'\npeer_parens(['(', ')']) == 'No'\npeer_parens(['(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\npeer_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '"], ["def maximal(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximal k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximal([-3, -4, 5], 3), [-4, -3, 5])\n    Test.assert_equals(maximal([4, -4, 4], 2), [4, 4])\n    Test.assert_equals(maximal([-3, 2, 1, 2, -1, -2, 1], 1), [2])\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def total_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total\n\n\nTest cases:\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 4)\n    24\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 5)\n    21\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 6)\n    3\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 7)\n    4\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 8)\n    5\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 9)\n    6\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 10)\n    7\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 11)\n    8\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 12)\n    9\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 13)\n    10\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 14)\n    11\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 15)\n    12\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 16)\n    13\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 17)\n    14\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 18)\n    15\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 19)\n    16\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 20)\n    17\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 21)\n    18\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 22)\n    19\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 23)\n    20\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 24)\n    21\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 25)\n    22\n    >>> total_elements([111,21,3,4000,5,6,7,8,9], 26)\n    23\n    >>> total"], ["def catch_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    catch_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = []\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            odd_collatz.append(n)\n        return sorted(odd_collatz)\n\n\nExample:\n\nInput: 5\n\nOutput: [1, 5]\n\nExplanation: The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5."], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def disconnected_word(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    disconnected_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    disconnected_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    disconnected_word(\"abcdef\") == 3 \n    '''\n    return [word for word in txt.split() if word]\n\ndisconnected_word(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\ndisconnected_word(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\ndisconnected_word(\"abcdef\") == 3"], ["def is_classify(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_classify([5]) \u279e True\n    is_classify([1, 2, 3, 4, 5]) \u279e True\n    is_classify([1, 3, 2, 4, 5]) \u279e False\n    is_classify([1, 2, 3, 4, 5, 6]) \u279e True\n    is_classify([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_classify([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_classify([1, 2, 2, 3, 3, 4]) \u279e True\n    is_classify([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) == 1:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    elif lst[0] == lst[1]:\n        return is_classify(lst[2:])\n    else:\n        return is_classify(lst[1:])\n\n\nis_classify([1, 2, 3, 4, 5, 6, 7])"], ["def overlap(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of overlap of these two \n    intervals is a prime number.\n    Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the overlap is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    overlap((1, 2), (2, 3)) ==> \"NO\"\n    overlap((-1, 1), (0, 4)) ==> \"NO\"\n    overlap((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # Your code here\n    return \"NO\"\n"], ["def goad_polarity(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> goad_polarity([1, 2, 2, -4]) == -9\n    >>> goad_polarity([0, 1]) == 0\n    >>> goad_polarity([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> goad_polarity([1, 2, 2, -4])\n-9\n>>> goad_polarity([0, 1])\n0\n>>> goad_polarity([])\nNone\n\"\"\"\n"], ["def minuteWay(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minuteWay(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minuteWay(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def finger(n):\n    \"\"\"Given a positive integer n, return the product of the odd finger.\n    Return 0 if all finger are even.\n    For example:\n    finger(1)  == 1\n    finger(4)  == 0\n    finger(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n * (n - 1) // 2\n"], ["def is_nest(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nest('[[]]') \u279e True\n    is_nest('[]]]]]]][[[[[]') \u279e False\n    is_nest('[][]') \u279e False\n    is_nest('[]') \u279e False\n    is_nest('[[][]]') \u279e True\n    is_nest('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n"], ["def total_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def crack_if_last_char_be_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    crack_if_last_char_be_a_letter(\"apple pie\") \u279e False\n    crack_if_last_char_be_a_letter(\"apple pi e\") \u279e True\n    crack_if_last_char_be_a_letter(\"apple pi e \") \u279e False\n    crack_if_last_char_be_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha() in txt:\n        else:\n            return False\n\n\nExamples:\ncrack_if_last_char_be_a_letter(\"apple pie\") \u279e False\ncrack_if_last_char_be_a_letter(\"apple pi e\") \u279e True\ncrack_if_last_char_be_a_letter(\"apple pi e \") \u279e False\ncrack_if_last_char_be_a_letter(\"\") \u279e False"], ["def can_format(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_format([1,2,4,3,5]) = 3\n    can_format([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    return -1\n\nExamples:\ncan_format([1,2,4,3,5]) = 3\ncan_format([1,2,3]) = -1\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"], ["def large_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    large_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    large_smallest_integers([]) == (None, None)\n    large_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlarge_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlarge_smallest_integers([]) == (None, None)\nlarge_smallest_integers([0]) == (None, None)\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_adequate_to_summarize_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_adequate_to_summarize_even(4) == False\n    is_adequate_to_summarize_even(6) == False\n    is_adequate_to_summarize_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def particular_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> particular_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def localization_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    localization_spaces(\"Example\") == \"Example\"\n    localization_spaces(\"Example 1\") == \"Example_1\"\n    localization_spaces(\" Example 2\") == \"_Example_2\"\n    localization_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def total_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total\n\nExamples:\ntotal_squares([1,2,3]) \u279e 6\n\ntotal_squares([]) \u279e 0\n\ntotal_squares([-1,-5,2,-1,-5]) \u279e -126"], ["def parole_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def ordering_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> ordering_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> ordering_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def particularFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    particularFilter([15, -73, 14, -15]) => 1 \n    particularFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def catch_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def classify_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=lambda x: len(x))\n\n"], ["def x_or_yttrium(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_yttrium(7, 34, 12) == 34\n    for x_or_yttrium(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, 1000000):\n        return x\n    else:\n        return y\n"], ["def double_the_dispute(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_dispute([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_dispute([-1, -2, 0]) == 0\n    double_the_dispute([9, -2]) == 81\n    double_the_dispute([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x % 2 == 1)\n\ndouble_the_dispute([1, 3, 2, 0])\ndouble_the_dispute([-1, -2, 0])\ndouble_the_dispute([9, -2])\ndouble_the_dispute([0])"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def strong_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for strong_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    return class_name + '.' + max(extensions, key=lambda x: len(x) - len(x.lower()))\n"], ["def cycpattern_check_mark(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check_mark(\"abcd\",\"abd\") => False\n    cycpattern_check_mark(\"hello\",\"ell\") => True\n    cycpattern_check_mark(\"whassup\",\"psus\") => False\n    cycpattern_check_mark(\"abab\",\"baa\") => True\n    cycpattern_check_mark(\"efef\",\"eeff\") => False\n    cycpattern_check_mark(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n\ncycpattern_check_mark(\"abcd\",\"abd\") => False\ncycpattern_check_mark(\"hello\",\"ell\") => True\ncycpattern_check_mark(\"whassup\",\"psus\") => False\ncycpattern_check_mark(\"abab\",\"baa\") => True\ncycpattern_check_mark(\"efef\",\"eeff\") => False\ncycpattern_check_mark(\"himenss\",\"simen\") => True"], ["def even_curious_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_curious_count(-12) ==> (1, 1)\n        even_curious_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def veracious_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    veracious_angle_triangle(3, 4, 5) == True\n    veracious_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True\n"], ["def recover_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    recover_max([\"name\", \"of\", \"string\"]) == \"string\"\n    recover_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    recover_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in set(word):\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def consume(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have consumeen a certain number of carrots,\n    but now you need to consume more carrots to complete the day's meals.\n    you should return an array of [ total number of consumeen carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will consume all remaining carrots, but will still be hungry.\n    \n    Example:\n    * consume(5, 6, 10) -> [11, 4]\n    * consume(4, 8, 9) -> [12, 1]\n    * consume(1, 10, 10) -> [11, 0]\n    * consume(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have consumeen.\n    @need : integer\n        the number of carrots that you need to consume.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    pass\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def consume(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have consumeen a certain number of carrots,\n    but now you need to consume more carrots to complete the day's meals.\n    you should return an array of [ total number of consumeen carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will consume all remaining carrots, but will still be hungry.\n    \n    Example:\n    * consume(5, 6, 10) -> [11, 4]\n    * consume(4, 8, 9) -> [12, 1]\n    * consume(1, 10, 10) -> [11, 0]\n    * consume(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have consumeen.\n    @need : integer\n        the number of carrots that you need to consume.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    pass\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def consume(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have consumeen a certain number of carrots,\n    but now you need to consume more carrots to complete the day's meals.\n    you should return an array of [ total number of consumeen carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will consume all remaining carrots, but will still be hungry.\n    \n    Example:\n    * consume(5, 6, 10) -> [11, 4]\n    * consume(4, 8, 9) -> [12, 1]\n    * consume(1, 10, 10) -> [11, 0]\n    * consume(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have consumeen.\n    @need : integer\n        the number of carrots that you need to consume.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    pass\n\n\nQuestion: Create a Python script for this problem.\n\nAnswer: def consume(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have consumeen a certain number of carrots,\n    but now you need to consume"], ["def act_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = act_algebra(operator, operand)"], ["def clear(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    clear(\"1234\") = \"4321\"\n    clear(\"ab\") = \"AB\"\n    clear(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    if not any(s):\n        s = s[::-1]\n    return ''.join(s)\n"], ["def drawstring_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> drawstring_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def beget_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    beget_integers(2, 8) => [2, 4, 6, 8]\n    beget_integers(8, 2) => [2, 4, 6, 8]\n    beget_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return []\n\n\nAnswer: def beget_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    beget_integers(2, 8) => [2, 4, 6, 8]\n    beget_integers(8, 2) => [2, 4, 6, 8]\n    beget_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return [x for x in range(a, b+1) if x%2 == 0]\n"], ["from typing import List\n\n\ndef has_close_component(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_component([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_component([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_group(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_group('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_diversion(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_diversion([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement this function\n    return 0.0\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinct_fictional_character(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_fictional_character('xyzXYZ')\n    3\n    >>> count_distinct_fictional_character('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_multiplication(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_multiplication('', 'a')\n    0\n    >>> how_many_multiplication('aaa', 'a')\n    3\n    >>> how_many_multiplication('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_component(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_component([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_component([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO: Implement this function.\n    return None\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collision(1) == 0\ncar_race_collision(2) == 0\ncar_race_collision(3) == 0\ncar_race_collision(4) == 0\ncar_race_collision(5) == 0\ncar_race_collision(6) == 0\ncar_race_collision(7) == 0\ncar_race_collision(8) == 0\ncar_race_collision(9) == 0\ncar_race_collision(10) == 0\ncar_race_collision(11) == 0\ncar_race_collision(12) == 0\ncar_race_collision(13) == 0\ncar_race_collision(14) == 0\ncar_race_collision(15) == 0\ncar_race_collision(16) == 0\ncar_race_collision(17) == 0\ncar_race_collision(18) == 0\ncar_race_collision(19) == 0\ncar_race_collision(20) == 0\ncar_race_collision(21) == 0\ncar_race_collision(22) == 0\ncar_race_collision(23) == 0\ncar_race_collision(24) == 0\ncar_race_collision(25) == 0\ncar_race_collision(26) == 0\ncar_race_collision(27) == 0\ncar_race_collision(28) == 0\ncar_race_collision(29) == 0\ncar_race_collision(30) == 0\ncar_race_collision(31) == 0\ncar_race_collision(32) == 0\ncar_race_collision(33) == 0\ncar_race_collision(34) == 0\ncar_race_collision(35) == 0\ncar_race_collision(36) == 0\ncar_race_collision(37) == 0\ncar_race_collision(38) == 0\ncar_race_collision(39) == 0\ncar_race_collision(40) == 0\ncar_race_collision(41) == 0\ncar_race_collision(42) == 0\ncar_race_collision(43) == 0\ncar_race_collision(44) == 0\ncar_race_collision(45) == 0\ncar_race_collision(46) == 0\ncar_race_collision(47) == 0\ncar_race_collision(48) == 0\ncar_race_collision(49) == 0\ncar_race_collision(50) == 0\ncar_race_collision(51) == 0\ncar_race_collision(52) == 0\ncar_race_collision(53) == 0\ncar_race_collision(54) == 0\ncar_race_collision(55) == 0\ncar_race_collision(56) == 0\ncar_race_collision(57) == 0\ncar_race_collision(58) == 0\ncar_race_collision(59) == 0\ncar_race_collision(60) == 0\ncar_race_collision(61) == 0\ncar_race_collision(62) == 0\ncar_race_collision(63) == 0\ncar_race_collision(64) == 0\ncar_race_collision(65) == 0\ncar_race"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, "], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_prime_component(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_component(13195)\n    29\n    >>> largest_prime_component(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n\nTest:\n>>> largest_prime_component(13195)\n29\n>>> largest_prime_component(2048)\n2\n\"\"\"\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_sort_tilt(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_tilt([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_tilt([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_tilt([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + [min_val] + strange_sort_tilt([x for x in lst if x != max_val and x != min_val])\n\n\nExamples:\nstrange_sort_tilt([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_tilt([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_tilt([]) == []\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_prime(30)\n\nis_multiply_prime(100)\n\nis_multiply_prime(1000)\n\nis_multiply_prime(10000)\n\nis_multiply_prime(100000)\n\nis_multiply_prime(1000000)\n\nis_multiply_prime(10000000)\n\nis_multiply_prime(100000000)\n\nis_multiply_prime(1000000000)\n\nis_multiply_prime(10000000000)\n\nis_multiply_prime(100000000000)\n\nis_multiply_prime(1000000000000)\n\nis_multiply_prime(10000000000000)\n\nis_multiply_prime(100000000000000)\n\nis_multiply_prime(1000000000000000)\n\nis_multiply_prime(10000000000000000)\n\nis_multiply_prime(100000000000000000)\n\nis_multiply_prime(1000000000000000000)\n\nis_multiply_prime(10000000000000000000)\n\nis_multiply_prime(100000000000000000000)\n\nis_multiply_prime(1000000000000000000000)\n\nis_multiply_prime(10000000000000000000000)\n\nis_multiply_prime(100000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000000000000000)\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'dbdef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_letter_class(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 2.7 else \"B\" if grade >= 2.3 else \"B-\" if grade >= 2.0 else\n        \"C+\" if grade >= 1.7 else \"C\" if grade >= 1.3 else \"C-\" if grade >= 1.0 else\n        \"D+\" if grade >= 0.7 else \"D\" if grade >= 0.0 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_event(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_event({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_event({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_event({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_event({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_event({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            return False\n        if key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n\n\nAnswer: def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = nums[i]\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letters only.\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = get_odd_collatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_charwoman_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_charwoman_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_charwoman_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_charwoman_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_charwoman_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n\ncheck_if_last_charwoman_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_charwoman_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_charwoman_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_charwoman_is_a_letter(\"\") \u279e False"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallest_integer(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integer([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integer([]) == (None, None)\n    largest_smallest_integer([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_integer([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integer([]) == (None, None)\nlargest_smallest_integer([0]) == (None, None)\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_assay(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_assay(\"example.txt\") # => 'Yes'\n    file_name_assay(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # TODO: Write your code here\n    pass\n\n\nTest cases:\nfile_name_assay(\"example.txt\") # => 'Yes'\nfile_name_assay(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_assay(\"1example.txt\") # => 'Yes'\nfile_name_assay(\"1example.exe\") # => 'Yes'\nfile_name_assay(\"1example.dll.exe\") # => 'No' (the substring after the dot should be one of these: ['txt', 'exe', 'dll'])\nfile_name_assay(\"1example.dll.txt\") # => 'No' (the substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'))\nfile_name_assay(\"1example.dll.exe.txt\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe\") # => 'No' (the file's name should not contain more than three digits ('0'-'9'))\nfile_name_assay(\"1example.dll.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe\") # => 'No' ("], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_triple(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTestcase 1:\nInput: n = 5\nOutput: 1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n\nTestcase 2:\nInput: n = 10\nOutput: 2\nExplanation: \na = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43]\nThe valid triples are (1, 7, 13), (3, 13, 21), and (21, 27, 31).\n\nTestcase 3:\nInput: n = 100\nOutput: 10\nExplanation: \na = [1, 3, 7, 13, 21, 27, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_kernel(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Your code here\n    return sorted(lst, key=lambda x: len(x))\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\"]) == [\"a\", \"aa\", \"ab\", \"cd\"]\nassert list_sort([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\"]) == [\"a\", \"aa\", \"ab\", \"cd\", \"aaa\"]\nassert list_sort([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\"]) == [\"a\", \"aa\", \"ab\", \"cd\", \"aaa\"]\nassert list_sort([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\"]) == [\"a\", \"aa\", \"ab\", \"cd\", \"aaa\"]\nassert list_sort([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\"]) == [\"a\", \"aa\", \"ab\", \"cd\", \"aaa\"]\nassert list_sort([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\"]) == [\"a\", \"aa\", \"ab\", \"cd\", \"aaa\"]\nassert list_sort([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \"cd\", \"aaa\", \"ab\", \""], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_triangulum(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangulum(3, 4, 5) == True\n    right_angle_triangulum(1, 2, 3) == False\n    '''\n    if a == b == c:\n        return True\n    elif a != b != c != 0:\n        return False\n    elif a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n\nTest Cases:\n>>> right_angle_triangulum(3, 4, 5)\nTrue\n>>> right_angle_triangulum(1, 2, 3)\nFalse\n>>> right_angle_triangulum(1, 2, 4)\nFalse\n>>> right_angle_triangulum(1, 2, 5)\nFalse\n>>> right_angle_triangulum(1, 2, 6)\nFalse\n>>> right_angle_triangulum(1, 2, 7)\nFalse\n>>> right_angle_triangulum(1, 2, 8)\nFalse\n>>> right_angle_triangulum(1, 2, 9)\nFalse\n>>> right_angle_triangulum(1, 2, 10)\nFalse\n>>> right_angle_triangulum(1, 2, 11)\nFalse\n>>> right_angle_triangulum(1, 2, 12)\nFalse\n>>> right_angle_triangulum(1, 2, 13)\nFalse\n>>> right_angle_triangulum(1, 2, 14)\nFalse\n>>> right_angle_triangulum(1, 2, 15)\nFalse\n>>> right_angle_triangulum(1, 2, 16)\nFalse\n>>> right_angle_triangulum(1, 2, 17)\nFalse\n>>> right_angle_triangulum(1, 2, 18)\nFalse\n>>> right_angle_triangulum(1, 2, 19)\nFalse\n>>> right_angle_triangulum(1, 2, 20)\nFalse\n>>> right_angle_triangulum(1, 2, 21)\nFalse\n>>> right_angle_triangulum(1, 2, 22)\nFalse\n>>> right_angle_triangulum(1, 2, 23)\nFalse\n>>> right_angle_triangulum(1, 2, 24)\nFalse\n>>> right_angle_triangulum(1, 2, 25)\nFalse\n>>> right_angle_triangulum(1, 2, 26)\nFalse\n>>> right_angle_triangulum(1, 2, 27)\nFalse\n>>> right_angle_triangulum(1, 2, 28)\nFalse\n>>> right_angle_triangulum(1, 2, 29)\nFalse\n>>> right_angle_triangulum(1, 2, 30)\nFalse\n>>> right_angle_triangulum(1, 2, 31)\nFalse\n>>> right_angle_triangulum(1, 2, 32)\nFalse\n>>> right_angle_triangulum(1, 2, 33)\nFalse\n>>> right_angle_triangulum(1, 2, 34)\nFalse\n>>> right_angle_triangulum(1, 2, 35)\nFalse\n>>> right_angle_triangulum(1, 2, 36)\nFalse\n>>> right_angle_triangulum(1, 2, 37)\nFalse\n>>> right_angle_triangulum(1, 2, 38)\nFalse\n>>> right_angle_triangulum(1, 2, 39)\nFalse\n>>> right_angle_triangulum(1, 2, 40)\nFalse\n>>> right_angle_triangulum(1, 2, 41)\nFalse\n>>> right_angle_tri"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:]\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome = string[i:]\n            break\n    return string + longest_palindrome[::-1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(len(string) + 1)]\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return []\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n    return ' '.join(str(number) for number in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [float(number - min_val) / (max_val - min_val) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n //= i\n                    factors.append(i)\n                    factors.append(n // i)\n                    break\n    return factors\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: Implement this function\n    return []\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    l_.sort()\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_.append(l[i])\n    return l_\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_.append(sorted(l[i])[0])\n    return l_\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n\n\nTest cases:\n\ncar_race_collision(1) == 0\ncar_race_collision(2) == 0\ncar_race_collision(3) == 0\ncar_race_collision(4) == 0\ncar_race_collision(5) == 0\ncar_race_collision(6) == 0\ncar_race_collision(7) == 0\ncar_race_collision(8) == 0\ncar_race_collision(9) == 0\ncar_race_collision(10) == 0\ncar_race_collision(11) == 0\ncar_race_collision(12) == 0\ncar_race_collision(13) == 0\ncar_race_collision(14) == 0\ncar_race_collision(15) == 0\ncar_race_collision(16) == 0\ncar_race_collision(17) == 0\ncar_race_collision(18) == 0\ncar_race_collision(19) == 0\ncar_race_collision(20) == 0\ncar_race_collision(21) == 0\ncar_race_collision(22) == 0\ncar_race_collision(23) == 0\ncar_race_collision(24) == 0\ncar_race_collision(25) == 0\ncar_race_collision(26) == 0\ncar_race_collision(27) == 0\ncar_race_collision(28) == 0\ncar_race_collision(29) == 0\ncar_race_collision(30) == 0\ncar_race_collision(31) == 0\ncar_race_collision(32) == 0\ncar_race_collision(33) == 0\ncar_race_collision(34) == 0\ncar_race_collision(35) == 0\ncar_race_collision(36) == 0\ncar_race_collision(37) == 0\ncar_race_collision(38) == 0\ncar_race_collision(39) == 0\ncar_race_collision(40) == 0\ncar_race_collision(41) == 0\ncar_race_collision(42) == 0\ncar_race_collision(43) == 0\ncar_race_collision(44) == 0\ncar_race_collision(45) == 0\ncar_race_collision(46) == 0\ncar_race_collision(47) == 0\ncar_race_collision(48) == 0\ncar_race_collision(49) == 0\ncar_race_collision(50) == 0\ncar_race_collision(51) == 0\ncar_race_collision(52) == 0\ncar_race_collision(53) == 0\ncar_race_collision(54) == 0\ncar_race_collision(55) == 0\ncar_race_collision(56) == 0\ncar_race_collision(57) == 0\ncar_race_collision(58) == 0\ncar_race_collision(59) == 0\ncar_race_collision(60) == 0\ncar_race_collision(61) == 0\ncar_race_collision(62) == 0\ncar_race_collision(63) == 0\ncar_race_collision(64) == 0\ncar_race_collision(65) == 0\ncar_race"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code here\n    return False\n\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, "], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base must be less than 10\")\n    if base == 10:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p) % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(c in s0 for c in s1) and all(c in s1 for c in s0)\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(set(common_elements))\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: Implement this function.\n    return 2\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x) + shift) if shift > len(str(x)) else str(int(x) + shift)[-len(str(x)):]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) - 64 for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # your code here\n    return 0\n\nTest cases:\n\nfruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\nfruit_distribution(\"100 apples and 1 oranges\", "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index."], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Write your code here\n    return max(lst, key=lst.count)\n\nExamples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n\n'''"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [max_val] + strange_sort_list(\n        [x for x in lst if x != max_val]) + [min_val]\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** (1/2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Write your code here.\n    return True if sum(q) <= w and is_balanced(q) else False\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Write your code here.\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            return i+1\n    return 0\n\n\nTest cases:\n\narr = [1, 2, 3, 5, 4, 7, 9, 6]"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Write your code here.\n    return [x for x in lst1 if x not in lst2]\n\nExamples:\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # TODO: Write your code here\n    return False\n\nis_multiply_prime(30)\n\nis_multiply_prime(100)\n\nis_multiply_prime(1000)\n\nis_multiply_prime(10000)\n\nis_multiply_prime(100000)\n\nis_multiply_prime(1000000)\n\nis_multiply_prime(10000000)\n\nis_multiply_prime(100000000)\n\nis_multiply_prime(1000000000)\n\nis_multiply_prime(10000000000)\n\nis_multiply_prime(100000000000)\n\nis_multiply_prime(1000000000000)\n\nis_multiply_prime(10000000000000)\n\nis_multiply_prime(100000000000000)\n\nis_multiply_prime(1000000000000000)\n\nis_multiply_prime(10000000000000000)\n\nis_multiply_prime(100000000000000000)\n\nis_multiply_prime(1000000000000000000)\n\nis_multiply_prime(10000000000000000000)\n\nis_multiply_prime(100000000000000000000)\n\nis_multiply_prime(1000000000000000000000)\n\nis_multiply_prime(10000000000000000000000)\n\nis_multiply_prime(100000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000)\n\nis_multiply_prime(10000000000000000000000000000000000000)\n\nis_multiply_prime(100000000000000000000000000000000000000)\n\nis_multiply_prime(1000000000000000000000000000000000000000)\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(8, 2)\nis_simple_power(3, 2)\nis_simple_power(3, 1)\nis_simple_power(5, 3)"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a//2)\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n\nExamples:\n\n>>> decimal_to_binary(15)\n'db1111db'\n>>> decimal_to_binary(32)\n'db100000db'\n>>> decimal_to_binary(100)\n'db10101010db'\n>>> decimal_to_binary(1000)\n'dbdef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Your code here\n    return [\n        \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else\n        \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else\n        \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else\n        \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n        for grade in grades\n    ]\n\ngrades = [4.0, 3, 1.7, 2, 3.5]"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    return True\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n\n\nAnswer: def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return sum(map(int, bin(N)[2:]))\n\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2 != 0)\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2\n    add([1, 2, 3, 4, 5]) ==> 15\n    add([1, 3, 5, 7, 9]) ==> 25\n\n\n\"\"\"\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return s.replace(' ', '')\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    return []\n\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: Write your code here\n    return array\n\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code here\n    return s\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:], key=lambda x: lst.count(x))\n\n\nTest cases:\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n\n\"\"\"\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([w for w in S.split() if w.startswith(\"I\")])\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n\nany_int(3, 2, 2) \u279e True\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: Write your code here\n    return message\n\nTest:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    lst = sorted(lst)\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i not in [2, 3]]\n    lst = [i for i in lst if i not in [5, 7]]\n    lst = [i for i in lst if i not in [11, 13]]\n    lst = [i for i in lst if i not in [17, 19]]\n    lst = [i for i in lst if i not in [23, 29]]\n    lst = [i for i in lst if i not in [31, 37]]\n    lst = [i for i in lst if i not in [41, 43]]\n    lst = [i for i in lst if i not in [47, 53]]\n    lst = [i for i in lst if i not in [59, 61]]\n    lst = [i for i in lst if i not in [67, 71]]\n    lst = [i for i in lst if i not in [73, 79]]\n    lst = [i for i in lst if i not in [83, 89]]\n    lst = [i for i in lst if i not in [97, 101]]\n    lst = [i for i in lst if i not in [103, 107]]\n    lst = [i for i in lst if i not in [109, 113]]\n    lst = [i for i in lst if i not in [127, 131]]\n    lst = [i for i in lst if i not in [137, 139]]\n    lst = [i for i in lst if i not in [149, 151]]\n    lst = [i for i in lst if i not in [157, 163]]\n    lst = [i for i in lst if i not in [167, 173]]\n    lst = [i for i in lst if i not in [179, 181]]\n    lst = [i for i in lst if i not in [191, 193]]\n    lst = [i for i in lst if i not in [197, 199]]\n    lst = [i for i in lst if i not in [211, 223]]\n    lst = [i for i in lst if i not in [227, 229]]\n    lst = [i for i in lst if i not in [233, 239]]\n    lst = [i for i in lst if i not in [241, 251]]\n    lst = [i for i in lst if i not in [257, 263]]\n    lst = [i for i in lst if i not in [269, 271]]\n    lst = [i for i in lst if i not in [277, 28"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # TODO: Implement this function\n    # Hint: Use the Sieve of Eratosthenes to find prime numbers\n    # Hint: Use the built-in function range() to generate a list of numbers from 0 to n-1\n    # Hint: Use the built-in function all() to check if a number is prime\n    # Hint: Use the built-in function filter() to filter out non-prime numbers\n    # Hint: Use the built-in function map() to apply a function to each element of the list\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list of prime numbers\n    # Hint: Use the built-in function min() to get the minimum value in the list of prime numbers\n    # Hint: Use the built-in function max() to get the maximum value in the list of prime numbers\n    # Hint: Use the built-in function zip() to combine the lists of prime numbers and the numbers\n    #       that are not prime\n    # Hint: Use the built-in function sorted() to sort the list of prime numbers\n    # Hint: Use the built-in function reversed() to reverse the list of prime numbers\n    # Hint: Use the built-in function len() to get the length of the list of prime numbers\n    # Hint: Use the built-in function sum() to get the sum of the list"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b % 10\n\nTest cases:\nmultiply(148, 412) should return 16\nmultiply(19, 28) should return 72\nmultiply(2020, 1851) should return 0\nmultiply(14,-15) should return 20"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # TODO: Write your code here\n    return 0\n\n\nTest:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n>>> closest_integer(\"14.4\")\n14\n>>> closest_integer(\"-14.4\")\n-14\n>>> closest_integer(\"14.6\")\n15\n>>> closest_integer(\"-14.6\")\n-15\n>>> closest_integer(\"14.7\")\n15\n>>> closest_integer(\"-14.7\")\n-15\n>>> closest_integer(\"14.8\")\n15\n>>> closest_integer(\"-14.8\")\n-15\n>>> closest_integer(\"14.9\")\n15\n>>> closest_integer(\"-14.9\")\n-15\n>>> closest_integer(\"15.0\")\n15\n>>> closest_integer(\"-15.0\")\n-15\n>>> closest_integer(\"15.1\")\n15\n>>> closest_integer(\"-15.1\")\n-15\n>>> closest_integer(\"15.2\")\n15\n>>> closest_integer(\"-15.2\")\n-15\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"-15.3\")\n-15\n>>> closest_integer(\"15.4\")\n15\n>>> closest_integer(\"-15.4\")\n-15\n>>> closest_integer(\"15.5\")\n15\n>>> closest_integer(\"-15.5\")\n-15\n>>> closest_integer(\"15.6\")\n15\n>>> closest_integer(\"-15.6\")\n-15\n>>> closest_integer(\"15.7\")\n15\n>>> closest_integer(\"-15.7\")\n-15\n>>> closest_integer(\"15.8\")\n15\n>>> closest_integer(\"-15.8\")\n-15\n>>> closest_integer(\"15.9\")\n15\n>>> closest_integer(\"-15.9\")\n-15\n>>> closest_integer(\"16.0\")\n16\n>>> closest_integer(\"-16.0\")\n-16\n>>> closest_integer(\"16.1\")\n16\n>>> closest_integer(\"-16.1\")\n-16\n>>> closest_integer(\"16.2\")\n16\n>>> closest_integer(\"-16.2\")\n-16\n>>> closest_integer(\"16.3\")\n16\n>>> closest_integer(\"-16.3\")\n-16\n>>> closest_integer(\"16.4\")\n16\n>>> closest_integer(\"-16.4\")\n-16\n>>> closest_integer(\"16.5\")\n16\n>>> closest_integer(\"-16.5\")\n-16\n>>> closest_integer(\"16.6\")\n16\n>>> closest_integer(\"-16.6\")\n-16\n>>> closest_integer(\"16.7\")\n16\n>>> closest_integer(\"-16.7\")\n-16\n>>> closest_integer(\"16.8\")\n16\n>>> closest_integer(\"-16.8\")\n-16\n>>> closest_integer(\"16.9\")\n16\n>>> closest_integer(\"-16.9\")\n-16\n>>> closest_integer(\"17.0\")\n17\n>>> closest_integer(\"-17.0\")\n-17\n>>> closest_integer(\"17.1\")\n17\n>>> closest_integer(\"-17.1\")\n-17\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [1]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*i if i % 2 else pile[i-1] + i)\n    return pile\n\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n>>> make_a_pile(4)\n[4, 6, 8]\n>>> make_a_pile(5)\n[5, 9, 15]\n>>> make_a_pile(6)\n[6, 12, 20]\n>>> make_a_pile(7)\n[7, 14, 24]\n>>> make_a_pile(8)\n[8, 16, 28]\n>>> make_a_pile(9)\n[9, 18, 36]\n>>> make_a_pile(10)\n[10, 20, 40]\n>>> make_a_pile(11)\n[11, 22, 44]\n>>> make_a_pile(12)\n[12, 24, 48]\n>>> make_a_pile(13)\n[13, 26, 52]\n>>> make_a_pile(14)\n[14, 28, 56]\n>>> make_a_pile(15)\n[15, 30, 60]\n>>> make_a_pile(16)\n[16, 32, 64]\n>>> make_a_pile(17)\n[17, 34, 68]\n>>> make_a_pile(18)\n[18, 36, 72]\n>>> make_a_pile(19)\n[19, 38, 76]\n>>> make_a_pile(20)\n[20, 40, 80]\n>>> make_a_pile(21)\n[21, 42, 84]\n>>> make_a_pile(22)\n[22, 44, 88]\n>>> make_a_pile(23)\n[23, 46, 92]\n>>> make_a_pile(24)\n[24, 48, 96]\n>>> make_a_pile(25)\n[25, 50, 100]\n>>> make_a_pile(26)\n[26, 52, 104]\n>>> make_a_pile(27)\n[27, 54, 108]\n>>> make_a_pile(28)\n[28, 56, 112]\n>>> make_a_pile(29)\n[29, 58, 116]\n>>> make_a_pile(30)\n[30, 60, 120]\n>>> make_a_pile(31)\n[31, 62, 124]\n>>> make_a_pile(32)\n[32, 64, 128]\n>>> make_a_pile(33)\n[33, 66, 132]\n>>> make_a_pile(34)\n[34, 68, 136]\n>>> make_a_pile(35)\n[35, 70, 140]\n>>> make"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\nTest:\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\"]\nassert words_string(\"Hi, my name is John, and I live in the city of San Francisco, and I like to play soccer, and I like to play football, and I like to play volleyball, and I like to play badminton, and I like to play tennis\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"live\", \"in\", \"the\", \"city\", \"of\", \"San\", \"Francisco\", \"and\", \"I\", \"like\", \"to\", \"play\", \"soccer\", \"and\", \"I\", \"like\", \"to\", \"play\", \"football\", \"and\", \"I\", \"like\", \"to\", \"play\", \"volleyball\", \"and\", \"I\", \"like\", \"to\", \"play\", \"badminton\", \"and\", \"I\", \"like\", \"to\", \"play\", \"ten"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code here\n    return -1\n\n\nTest cases:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\nchoose_num(1, 10) = 2\nchoose_num(1, 1) = 1\nchoose_num(1, 2) = 1\nchoose_num(1, 3) = 1\nchoose_num(1, 4) = 1\nchoose_num(1, 5) = 1\nchoose_num(1, 6) = 1\nchoose_num(1, 7) = 1\nchoose_num(1, 8) = 1\nchoose_num(1, 9) = 1\nchoose_num(1, 10) = 2\nchoose_num(1, 11) = 2\nchoose_num(1, 12) = 2\nchoose_num(1, 13) = 2\nchoose_num(1, 14) = 2\nchoose_num(1, 15) = 2\nchoose_num(1, 16) = 2\nchoose_num(1, 17) = 2\nchoose_num(1, 18) = 2\nchoose_num(1, 19) = 2\nchoose_num(1, 20) = 2\nchoose_num(1, 21) = 2\nchoose_num(1, 22) = 2\nchoose_num(1, 23) = 2\nchoose_num(1, 24) = 2\nchoose_num(1, 25) = 2\nchoose_num(1, 26) = 2\nchoose_num(1, 27) = 2\nchoose_num(1, 28) = 2\nchoose_num(1, 29) = 2\nchoose_num(1, 30) = 2\nchoose_num(1, 31) = 2\nchoose_num(1, 32) = 2\nchoose_num(1, 33) = 2\nchoose_num(1, 34) = 2\nchoose_num(1, 35) = 2\nchoose_num(1, 36) = 2\nchoose_num(1, 37) = 2\nchoose_num(1, 38) = 2\nchoose_num(1, 39) = 2\nchoose_num(1, 40) = 2\nchoose_num(1, 41) = 2\nchoose_num(1, 42) = 2\nchoose_num(1, 43) = 2\nchoose_num(1, 44) = 2\nchoose_num(1, 45) = 2\nchoose_num(1, 46) = 2\nchoose_num(1, 47) = 2\nchoose_num(1, 48) = 2\nchoose_num(1, 49) = 2\nchoose_num(1, 50) = 2\nchoose_num(1, 51) = 2\nchoose_num(1, 52) = 2\nchoose_num(1, 53) = 2\nchoose_num(1, 54) = 2\nchoose_num(1, 55) = 2\nchoose_num(1, 56) = 2\nchoose_num(1, 57) = 2\nchoose_num(1, 58) = 2\nchoose_num(1, 59) = 2\nchoose_num(1, 60) = 2\nchoose_num(1, 61) = 2\nchoose_num(1, 62) = "], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m)/2))[2:]\n\nTest cases:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\nrounded_avg(100, 100) => \"0bdef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    return []\n\n\nTest:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n\"\"\"\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1) // 2)\n        else:\n            result.append(sum(range(1, i)))\n    return result\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([i for i in arr if sum(map(int, str(i))) > 0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n\n\nTest cases:\n\nTest.describe('Test 1')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 5, 3, 4]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'YES')\nTest.assert_equals(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 'NO')\nTest.assert_equals(exchange([1, 2, 3, 4], ["], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\ntest = 'a b c'"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Write your code here\n    return s.replace(c,''),True\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Your code here\n    return [str(len(set(str(i)))) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n\n\nAnswer: def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = nums[i]\n    return min_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    times = 0\n    # Initialize the number of buckets\n    buckets = 0\n    # Initialize the number of rows\n    rows = len(grid)\n    # Initialize the number of columns\n    columns = len(grid[0])\n    # Initialize the number of buckets\n    buckets = capacity\n    # Initialize the number of buckets\n    buckets = buckets * rows\n    # Initialize the number of buckets\n    buckets = buckets * columns\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the number of buckets\n    buckets = buckets * 2\n    # Initialize the"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Write your code here\n    return sorted(arr, key=lambda x: (x.bit_length(), x))\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\nTest cases:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code here\n    pass\n\n\nTest cases:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\nNote:\nYou may assume that the given string contains English letters only.\n\"\"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n\n\nTest cases:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\nmatch_parens(['(', ')']) == 'No'\nmatch_parens(['(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == 'No'\nmatch_parens(['(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', ')']) == '"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\n\nTest cases:\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 2), [3, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 3), [4, 5, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 4), [5, 4, 3, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 6), [5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 7), [5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 8), [5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 9), [5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 10), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 11), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 12), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 13), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 14), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 15), [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1])\n    Test.assert_equals(maximum([1, 2, 3, 4, 5], 16), [5, 4, 3, 2, 1, 5, 4, 3, 2, "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n\nTest.assert_equals(solution([5, 8, 7, 1]), 12)\nTest.assert_equals(solution([3, 3, 3, 3, 3]), 9)\nTest.assert_equals(solution([30, 13, 24, 321]), 0)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 15)\nTest.assert_equals(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]), 15)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 30)\nTest.assert_equals(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 14"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+2] for i in range(len(arr)-k+1))\n\n\nTest Cases:\n    add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    add_elements([111,21,3,4000,5,6,7,8,9], 5)\n    add_elements([111,21,3,4000,5,6,7,8,9], 6)\n    add_elements([111,21,3,4000,5,6,7,8,9], 7)\n    add_elements([111,21,3,4000,5,6,7,8,9], 8)\n    add_elements([111,21,3,4000,5,6,7,8,9], 9)\n    add_elements([111,21,3,4000,5,6,7,8,9], 10)\n    add_elements([111,21,3,4000,5,6,7,8,9], 11)\n    add_elements([111,21,3,4000,5,6,7,8,9], 12)\n    add_elements([111,21,3,4000,5,6,7,8,9], 13)\n    add_elements([111,21,3,4000,5,6,7,8,9], 14)\n    add_elements([111,21,3,4000,5,6,7,8,9], 15)\n    add_elements([111,21,3,4000,5,6,7,8,9], 16)\n    add_elements([111,21,3,4000,5,6,7,8,9], 17)\n    add_elements([111,21,3,4000,5,6,7,8,9], 18)\n    add_elements([111,21,3,4000,5,6,7,8,9], 19)\n    add_elements([111,21,3,4000,5,6,7,8,9], 20)\n    add_elements([111,21,3,4000,5,6,7,8,9], 21)\n    add_elements([111,21,3,4000,5,6,7,8,9], 22)\n    add_elements([111,21,3,4000,5,6,7,8,9], 23)\n    add_elements([111,21,3,4000,5,6,7,8,9], 24)\n    add_elements([111,21,3,4000,5,6,7,8,9], 25)\n    add_elements([111,21,3,4000,5,6,7,8,9], 26)\n    add_elements([111,21,3,4000,5,6,7,8,9], 27)\n    add_elements([111,21,3,4000,5,6,7,8,9], 28)\n    add_elements([111,21,3,4000,"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = get_odd_collatz(n // 2)\n        odd_collatz.append(n)\n        return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Your code here\n    return True\n\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Write your code here.\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return is_sorted(lst[1:])\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # write your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    return \"NO\"\n\n\nSample Input:\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))\n\nSample Output:\nNO\nNO\nYES"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code here\n    return None\n\n\nTest cases:\n>>> prod_signs([1, 2, 2, -4])\n-9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nNone\n\"\"\"\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    pass\n\n\nTest:\n\nAnswer: def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n\nExamples:\ntri(3) = [1, 3, 2, 8]\ntri(4) = [1, 3, 2, 8, 10]\ntri(5) = [1, 3, 2, 8, 10, 5]\ntri(6) = [1, 3, 2, 8, 10, 5, 16]\ntri(7) = [1, 3, 2, 8, 10, 5, 16, 49]\ntri(8) = [1, 3, 2, 8, 10, 5, 16, 49, 41]\ntri(9) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87]\ntri(10) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138]\ntri(11) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210]\ntri(12) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344]\ntri(13) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593]\ntri(14) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093]\ntri(15) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034]\ntri(16) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 1093, 2034, 3555]\ntri(17) = [1, 3, 2, 8, 10, 5, 16, 49, 41, 87, 138, 210, 344, 593, 109"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -digits(-n)\n    else:\n        return n % 10 * digits(n // 10)\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False\n\n\nTest.assert_equals(is_nested('[[]]'), True)\nTest.assert_equals(is_nested('[]]]]]]][[[[[]'), False)\nTest.assert_equals(is_nested('[][]'), False)\nTest.assert_equals(is_nested('[]'), False)\nTest.assert_equals(is_nested('[[][]]'), True)\nTest.assert_equals(is_nested('[[]][['), True)"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(ceil(x))**2 for x in lst])\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return True if txt[-1].isalpha() and not txt[-1].isalpha().isspace() else False\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    return None\n\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        return a\n    elif type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    else:\n        return None\n\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n\nNotes:\n\n- The function should return None if the values are equal.\n- The function should return the larger variable in its given variable type.\n- The function should take two arguments.\n- The function should take integers, floats, or strings representing real numbers.\n- The function should return the larger variable in its given variable type.\n- The function should return None if the values are equal."], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"  \", \"-\")\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes' if len(file_name) <= 3 and '.' in file_name and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\") # => 'No' (the name should not contain more than three digits)\nfile_name_check(\"1example.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.txt\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.exe\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll\") # => 'No' (the file's extension should be one of the allowed ones)\nfile_name_check(\"1example.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll.dll."], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Write your code here\n    return sum(x**2 if (i % 3 == 0 or i % 4 == 0 and i % 3 != 0) else x for i, x in enumerate(lst))\n\n\nExamples:\nsum_squares([1,2,3]) = 6\nsum_squares([]) = 0\nsum_squares([-1,-5,2,-1,-5]) = -126"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code here\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    return True\n\n\nTest cases:\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/2\", \"1/2\") = True\nsimplify(\"1/2\", \"1/3\") = False\nsimplify(\"1/2\", \"1/4\") = False\nsimplify(\"1/2\", \"1/5\") = False\nsimplify(\"1/2\", \"1/6\") = False\nsimplify(\"1/2\", \"1/7\") = False\nsimplify(\"1/2\", \"1/8\") = False\nsimplify(\"1/2\", \"1/9\") = False\nsimplify(\"1/2\", \"1/10\") = False\nsimplify(\"1/2\", \"1/11\") = False\nsimplify(\"1/2\", \"1/12\") = False\nsimplify(\"1/2\", \"1/13\") = False\nsimplify(\"1/2\", \"1/14\") = False\nsimplify(\"1/2\", \"1/15\") = False\nsimplify(\"1/2\", \"1/16\") = False\nsimplify(\"1/2\", \"1/17\") = False\nsimplify(\"1/2\", \"1/18\") = False\nsimplify(\"1/2\", \"1/19\") = False\nsimplify(\"1/2\", \"1/20\") = False\nsimplify(\"1/2\", \"1/21\") = False\nsimplify(\"1/2\", \"1/22\") = False\nsimplify(\"1/2\", \"1/23\") = False\nsimplify(\"1/2\", \"1/24\") = False\nsimplify(\"1/2\", \"1/25\") = False\nsimplify(\"1/2\", \"1/26\") = False\nsimplify(\"1/2\", \"1/27\") = False\nsimplify(\"1/2\", \"1/28\") = False\nsimplify(\"1/2\", \"1/29\") = False\nsimplify(\"1/2\", \"1/30\") = False\nsimplify(\"1/2\", \"1/31\") = False\nsimplify(\"1/2\", \"1/32\") = False\nsimplify(\"1/2\", \"1/33\") = False\nsimplify(\"1/2\", \"1/34\") = False\nsimplify(\"1/2\", \"1/35\") = False\nsimplify(\"1/2\", \"1/36\") = False\nsimplify(\"1/2\", \"1/37\") = False\nsimplify(\"1/2\", \"1/38\") = False\nsimplify(\"1/2\", \"1/39\") = False\nsimplify(\"1/2\", \"1/40\") = False\nsimplify(\"1/2\", \"1/41\") = False\nsimplify(\"1/2\", \"1/42\") = False\nsimplify(\"1/2\", \"1/43\") = False\nsimplify(\"1/2\", \"1/44\") = False\nsimplify(\"1/2\", \"1/45\") = False\nsimplify(\"1/2\", \"1/46\") = False\nsimplify(\"1/2\", \"1/47\") = False\nsimplify(\"1/2\", \"1/48\") = False\nsimplify(\"1/2\", \"1/49\") = False\nsimplify(\"1/2\", \"1/50\") = False\nsimplify(\"1/2\", \"1/51\") = False\nsimplify(\"1/2\", \"1/52\") = False\nsimplify(\"1/2\", \"1/53\") = False\nsimplify(\"1/2\", \"1/54\") = False\nsimplify(\""], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nTest Cases:\n    Test.test_case_1:\n        Input: n = 5\n        Output: 1\n    Test.test_case_2:\n        Input: n = 10\n        Output: 2\n    Test.test_case_3:\n        Input: n = 15\n        Output: 3\n    Test.test_case_4:\n        Input: n = 20\n        Output: 4\n    Test.test_case_5:\n        Input: n = 25\n        Output: 5\n    Test.test_case_6:\n        Input: n = 30\n        Output: 6\n    Test.test_case_7:\n        Input: n = 35\n        Output: 7\n    Test.test_case_8:\n        Input: n = 40\n        Output: 8\n    Test.test_case_9:\n        Input: n = 45\n        Output: 9\n    Test.test_case_10:\n        Input: n = 50\n        Output: 10\n    Test.test_case_11:\n        Input: n = 55\n        Output: 11\n    Test.test_case_12:\n        Input: n = 60\n        Output: 12\n    Test.test_case_13:\n        Input: n = 65\n        Output: 13\n    Test.test_case_14:\n        Input: n = 70\n        Output: 14\n    Test.test_case_15:\n        Input: n = 75\n        Output: 15\n    Test.test_case_16:\n        Input: n = 80\n        Output: 16\n    Test.test_case_17:\n        Input: n = 85\n        Output: 17\n    Test.test_case_18:\n        Input: n = 90\n        Output: 18\n    Test.test_case_19:\n        Input: n = 95\n        Output: 19\n    Test.test_case_20:\n        Input: n = 100\n        Output: 20\n\nTime complexity: O(n^3)\nSpace complexity: O(n)"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Your code here\n    return ()\n\nExamples:\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(set(lst), key=len)\n\nTest:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert list_sort([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\","], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n in range(2, n):\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    return sum(map(lambda x: x**2, filter(lambda x: x >= 0 and x % 2 != 0, lst)))\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Your code here\n    return [abs(g-s) for g,s in zip(guess,game)]\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: Write your code here\n    return ''\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # write your code here\n    return [number + need, remaining - need]\n\n\nTest:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\n\"\"\"\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    pass\n\n\nExample:\noperator = ['+', '-', '*', '//', '**']\noperand = [2, 3, 4, 5, 6]\nresult = do_algebra(operator, operand)"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        else:\n            s = s[:i] + s[i] + s[i+1:]\n    return s\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n"]]