[["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Check if in given list of numbers, are any two numbers closer to each other than\n    # given threshold.\n    # >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    # False\n    # >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    # True\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance <= threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    # separate those group into separate strings and return the list of those.\n    # Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    # Ignore any spaces in the input string.\n    # >>> separate_paren_groups('( ) (( )) (( )( ))')\n    # ['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n        elif c == ' ':\n            pass\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses')\n\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    # Given a positive floating point number, it can be decomposed into\n    # and integer part (largest integer smaller than given number) and decimals\n    # (leftover part always smaller than 1).\n\n    # Return the decimal part of the number.\n    # >>> truncate_number(3.5)\n    # 0.5\n    # >>> truncate_number(3.55)\n    # 3.5\n    # >>> truncate_number(3.555)\n    # 3.55\n    # >>> truncate_number(3.5555)\n    # 3.555\n    # >>> truncate_number(3.55555)\n    # 3.5555\n    # >>> truncate_number(3.555555)\n    # 3.55555\n    # >>> truncate_number(3.5555555)\n    # 3.555555\n    # >>> truncate_number(3.55555555)\n    # 3.5555555\n    # >>> truncate_number(3.555555555)\n    # 3.55555555\n    # >>> truncate_number(3.5555555555)\n    # 3.555555555\n    # >>> truncate_number(3.55555555555)\n    # 3.5555555555\n    # >>> truncate_number(3.555555555555)\n    # 3.55555555555\n    # >>> truncate_number(3.5555555555555)\n    # 3.555555555555\n    # >>> truncate_number(3.55555555555555)\n    # 3.5555555555555\n    # >>> truncate_number(3.555555555555555)\n    # 3.55555555555555\n    # >>> truncate_number(3.5555555555555555)\n    # 3.555555555555555\n    # >>> truncate_number(3.55555555555555555)\n    # 3.5555555555555555\n    # >>> truncate_number(3.555555555555555555)\n    # 3.5555555555555555\n    # >>> truncate_number(3.5555555555555555555)\n    # 3.55555555555555555\n    # >>> truncate_number(3.555555555555555555555)\n    # 3.555555555555555555\n    # >>> truncate_number(3.5555555555555555555555)\n    # 3.5555555555555555555\n    # >>> truncate_number(3.55555555555555555555555)\n    # 3.55555555555555555555\n    # >>> truncate_number(3.555555555555555555555555)\n    # 3.555555555555555555555\n    # >>> truncate_number(3.5555555555555555555555555)\n    # 3.5555555555555555555555\n    # >>> truncate_number(3."], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    # You're given a list of deposit and withdrawal operations on a bank account that starts with\n    # zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    # at that point function should return True. Otherwise it should return False.\n    # >>> below_zero([1, 2, 3])\n    # False\n    # >>> below_zero([1, 2, -4, 5])\n    # True\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # For a given list of input numbers, calculate Mean Absolute Deviation\n    # around the mean of this dataset.\n    # Mean Absolute Deviation is the average absolute difference between each\n    # element and a centerpoint (mean in this case):\n    # MAD = average | x - x_mean |\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    # 1.0\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    # >>> intersperse([], 4)\n    # []\n    # >>> intersperse([1, 2, 3], 4)\n    # [1, 4, 2, 4, 3]\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    # For each of the group, output the deepest level of nesting of parentheses.\n    # E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    # >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    # [2, 3, 1, 3]\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n                max_depth = max(max_depth, depth)\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Filter an input list of strings only for ones that contain given substring\n    # >>> filter_by_substring([], 'a')\n    # []\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n    # ['cde', 'array']\n    # >>> filter_by_substring"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    # Empty sum should be equal to 0 and empty product should be equal to 1.\n    # >>> sum_product([])\n    # (0, 1)\n    # >>> sum_product([1, 2, 3, 4])\n    # (10, 24)\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # From a given list of integers, generate a list of rolling maximum element found until given moment\n    # in the sequence.\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    # [1, 2, 3, 3, 3, 4, 4]\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    # Find the shortest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome('')\n    # ''\n    # >>> make_palindrome('cat')\n    # 'catac'\n    # >>> make_palindrome('cata')\n    # 'catac'\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if not is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n            continue\n        else:\n            break\n\n    return string[beginning_of_suffix:beginning_of_suffix + 1] + string[::-1][beginning_of_suffix:beginning_of_suffix + 1]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    # Input are two strings a and b consisting only of 1s and 0s.\n    # Perform binary XOR on these inputs and return result also as a string.\n    # >>> string_xor('010', '110')\n    # '100'\n    def xor(i, j):\n        if i == j:\n            return '0'\n        elif i == '0':\n            return '1'\n        elif j == '0':\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Out of list of strings, return the longest one. Return the first one in case of multiple\n    # strings of the same length. Return None in case the input list is empty.\n    # >>> longest([])\n\n    # >>> longest(['a', 'b', 'c'])\n    # 'a'\n    # >>> longest(['a', 'bb', 'ccc'])\n    # 'ccc'\n    if not strings:\n        return None\n\n    # >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n    # 'z'\n\n    # >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n    # 'z'\n\n    # >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    # Return a greatest common divisor of two integers a and b\n    # >>> greatest_common_divisor(3, 5)\n    # 1\n    # >>> greatest_common_divisor(25, 15)\n    # 5\n    while b:\n        a, b = b, a % b\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    # Return list of all prefixes from shortest to longest of the input string\n    # >>> all_prefixes('abc')\n    # ['a', 'ab', 'abc']\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    # Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    # >>> string_sequence(0)\n    # '0'\n    # >>> string_sequence(5)\n    # '0 1 2 3 4 5'\n    # >>> string_sequence(10)\n    # '0 1 2 3 4 5 6 7 8 9'\n    # >>> string_sequence(100)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\n    # >>> string_sequence(1000)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 17"], ["def count_distinct_characters(string: str) -> int:\n    # Given a string, find out how many distinct characters (regardless of case) does it consist of\n    # >>> count_distinct_characters('xyzXYZ')\n    # 3\n    # >>> count_distinct_characters('Jerry')\n    # 4\n    # >>> count_distinct_characters('abc')\n    # 3\n    # >>> count_distinct_characters('abcABC')\n    # 6\n    # >>> count_distinct_characters('abcAbc')\n    # 4\n    # >>> count_distinct_characters('abcAbcAbc')\n    # 8\n    # >>> count_distinct_characters('abcAbcAbcAbc')\n    # 12\n    # >>> count_distinct_characters('abcAbcAbcAbcAbc')\n    # 16\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbc')\n    # 20\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbc')\n    # 24\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbc')\n    # 28\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbcAbc')\n    # 32\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbcAbcAbc')\n    # 36\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbc')\n    # 40\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbc')\n    # 44\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbc')\n    # 48\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbc')\n    # 52\n    # >>> count_distinct_characters('abcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbcAbc"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    # Input to this function is a string representing musical notes in a special ASCII format.\n    # Your task is to parse this string and return list of integers corresponding to how many beats does each\n    # not last.\n\n    # Here is a legend:\n    # 'o' - whole note, lasts four beats\n    # 'o|' - half note, lasts two beats\n    # '.|' - quater note, lasts one beat\n\n    # >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    note_count = 0\n    for note in music_string:\n        note_count += note_map[note]\n    return note_count\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    # Find how many times a given substring can be found in the original string. Count overlaping cases.\n    # >>> how_many_times('', 'a')\n    # 0\n    # >>> how_many_times('aaa', 'a')\n    # 3\n    # >>> how_many_times('aaaa', 'aa')\n    # 3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    # Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    # Return the string with numbers sorted from smallest to largest\n    # >>> sort_numbers('three one five')\n    # 'one three five'\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    # other and return them in order (smaller number, larger number).\n    # >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    # (2.0, 2.2)\n    # >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    # (2.0, 2.0)\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n                else:\n                    if abs(elem - elem2) < distance:\n                        closest_pair = (elem, elem2)\n                        distance = abs(elem - elem2)\n\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Given list of numbers (of at least two elements), apply a linear transform to that list,\n    # such that the smallest number will become 0 and the largest will become 1\n    # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    # [0.0, 0.25, 0.5, 0.75, 1.0]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Filter given list of any python values only for integers\n    # >>> filter_integers(['a', 3.14, 5])\n    # [5]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    # [1, 2, 3]\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    # Return length of given string\n    # >>> strlen('')\n    # 0\n    # >>> strlen('abc')\n    # 3\n    # >>> strlen('abcde')\n    # 5\n    # >>> strlen('abcdeabcde')\n    # 10\n    # >>> strlen('abcdeabcdeabcde')\n    # 15\n    # >>> strlen('abcdeabcdeabcdeabcde')\n    # 20\n    # >>> strlen('abcdeabcdeabcdeabcdeabcde')\n    # 25\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcde')\n    # 30\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 35\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 40\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 45\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 50\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 55\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 60\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 65\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 70\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 75\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 80\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 85\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 90\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 95\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 100\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 105\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    # 110\n    # >>> strlen('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde"], ["def largest_divisor(n: int) -> int:\n    # For a given number n, find the largest number that divides n evenly, smaller than n\n    # >>> largest_divisor(15)\n    # 5\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    # Return list of prime factors of given integer in the order from smallest to largest.\n    # Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    # Input number should be equal to the product of all factors\n    # >>> factorize(8)\n    # [2, 2, 2]\n    # >>> factorize(25)\n    # [5, 5]\n    # >>> factorize(70)\n    # [2, 5, 7]\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # From a list of integers, remove all elements that occur more than once.\n    # Keep order of elements left the same as in the input.\n    # >>> remove_duplicates([1, 2, 3, 2, 4])\n    # [1, 3, 4]\n    import collections\n    seen = collections.Counter()\n    return [x for x in numbers if x not in seen and seen[x] == 1]\n\n"], ["def flip_case(string: str) -> str:\n    # For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    # >>> flip_case('Hello')\n    # 'hELLO'\n    # >>> flip_case('Hello World')\n    # 'HellO wORLD'\n    # >>> flip_case('Hello World!')\n    # 'HellO WORLD!'\n    # >>> flip_case('Hello World!!')\n    # 'HellO WORLD!!'\n    # >>> flip_case('Hello World!!!!')\n    # 'HellO WORLD!!!!'\n    # >>> flip_case('Hello World!!!!!!')\n    # 'HellO WORLD!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!')\n    # 'HellO WORLD!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n    # >>> flip_case('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n    # 'HellO WORLD!!!!!!!!!!!!!!!!!!!!!"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    # Concatenate list of strings into a single string\n    # >>> concatenate([])\n    # ''\n    # >>> concatenate(['a', 'b', 'c'])\n    # 'abc'\n    # >>> concatenate(['a', 'b', 'c', 'd'])\n    # 'abcd'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e'])\n    # 'abcdde'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f'])\n    # 'abcddef'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n    # 'abcddefg'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n    # 'abcddefgh'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n    # 'abcddefghi'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n    # 'abcddefghij'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n    # 'abcddefghijk'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n    # 'abcddefghijkl'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'])\n    # 'abcddefghijklm'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'])\n    # 'abcddefghijklmn'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'])\n    # 'abcddefghijklmnop'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'])\n    # 'abcddefghijklmnopq'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'])\n    # 'abcddefghijklmnopqr'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r'])\n    # 'abcddefghijklmnopqrs'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's'])\n    # 'abcddefghijklmnopqrts'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't'])\n    # 'abcddefghijklmnopqrtsu'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u'])\n    # 'abcddefghijklmnopqrtsuv'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Filter an input list of strings only for ones that start with a given prefix.\n    # >>> filter_by_prefix([], 'a')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    # ['abc', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n    # ['bcd', 'cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'e')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'f')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'g')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'h')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'i')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'j')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'k')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'l')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'm')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'n')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'o')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'p')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'q')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'r')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 's')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 't')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'u')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'v')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'w')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'x')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'y')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'z')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'aa')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ab')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ac')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ad')\n    # ['cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde"], ["def get_positive(l: list):\n    # Return only positive numbers in the list.\n    # >>> get_positive([-1, 2, -4, 5, 6])\n    # [2, 5, 6]\n    # >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    # [5, 3, 2, 3, 9, 123, 1]\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    # Return true if a given number is prime, and false otherwise.\n    # >>> is_prime(6)\n    # False\n    # >>> is_prime(101)\n    # True\n    # >>> is_prime(11)\n    # True\n    # >>> is_prime(13441)\n    # True\n    # >>> is_prime(61)\n    # True\n    # >>> is_prime(4)\n    # False\n    # >>> is_prime(1)\n    # False\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    # >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    # -0.5\n    # >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    # 1.0\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) * poly(xs, end) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    # This function takes a list l and returns a list l' such that\n    # l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    # to the values of the corresponding indicies of l, but sorted.\n    # >>> sort_third([1, 2, 3])\n    # [1, 2, 3]\n    # >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    # [2, 6, 3, 4, 8, 9, 5]\n    l = list(l)\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l[i], l[i + 1], l[i + 2] = l[i + 2], l[i + 1], l[i]\n    return l\n\n"], ["def unique(l: list):\n    # Return sorted unique elements in a list\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    # [0, 2, 3, 5, 9, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123, 123, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123, 123, 123, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123, 123, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123, 123, 123, 123, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123, 123, 123, 123, 123, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123, 123, 123, 123, 123, 123, 123, 123]\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123])\n    # [0, 2, 3, 5, 9, 123, 123"], ["def max_element(l: list):\n    # Return maximum element in the list.\n    # >>> max_element([1, 2, 3])\n    # 3\n    # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    # 123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    # Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    # >>> fizz_buzz(50)\n    # 0\n    # >>> fizz_buzz(78)\n    # 2\n    # >>> fizz_buzz(79)\n    # 3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    # This function takes a list l and returns a list l' such that\n    # l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    # to the values of the even indicies of l, but sorted.\n    # >>> sort_even([1, 2, 3])\n    # [1, 2, 3]\n    # >>> sort_even([5, 6, 3, 4])\n    # [3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n    ans.extend(odds)\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    # takes as input string encoded with encode_cyclic function. Returns decoded string.\n    return \"\".join([s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])\n\n"], ["def prime_fib(n: int):\n    # prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    # >>> prime_fib(1)\n    # 2\n    # >>> prime_fib(2)\n    # 3\n    # >>> prime_fib(3)\n    # 5\n    # >>> prime_fib(4)\n    # 13\n    # >>> prime_fib(5)\n    # 89\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n):\n            if is_prime(i):\n                yield i\n\n"], ["def triples_sum_to_zero(l: list):\n    # triples_sum_to_zero takes a list of integers as an input.\n    # it returns True if there are three distinct elements in the list that\n    # sum to zero, and False otherwise.\n\n    # >>> triples_sum_to_zero([1, 3, 5, 0])\n    # False\n    # >>> triples_sum_to_zero([1, 3, -2, 1])\n    # True\n    # >>> triples_sum_to_zero([1, 2, 3, 7])\n    # False\n    # >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    # True\n    # >>> triples_sum_to_zero([1])\n    # False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["def car_race_collision(n: int):\n    # Imagine a road that's a perfectly straight infinitely long line.\n    # n cars are driving left to right;  simultaneously, a different set of n cars\n    # are driving right to left.   The two sets of cars start out being very far from\n    # each other.  All cars move in the same speed.  Two cars are said to collide\n    # when a car that's moving left to right hits a car that's moving right to left.\n    # However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    # in their trajectory as if they did not collide.\n\n    # This function outputs the number of such collisions.\n    #\n    # Example:\n    # car_race_collision(3) \u2192 0\n    # car_race_collision(4) \u2192 1\n    # car_race_collision(5) \u2192 2\n    # car_race_collision(6) \u2192 3\n    # car_race_collision(7) \u2192 4\n    # car_race_collision(8) \u2192 5\n    # car_race_collision(9) \u2192 6\n    # car_race_collision(10) \u2192 7\n    # car_race_collision(11) \u2192 8\n    # car_race_collision(12) \u2192 9\n    # car_race_collision(13) \u2192 10\n    # car_race_collision(14) \u2192 11\n    # car_race_collision(15) \u2192 12\n    # car_race_collision(16) \u2192 13\n    # car_race_collision(17) \u2192 14\n    # car_race_collision(18) \u2192 15\n    # car_race_collision(19) \u2192 16\n    # car_race_collision(20) \u2192 17\n    # car_race_collision(21) \u2192 18\n    # car_race_collision(22) \u2192 19\n    # car_race_collision(23) \u2192 20\n    # car_race_collision(24) \u2192 21\n    # car_race_collision(25) \u2192 22\n    # car_race_collision(26) \u2192 23\n    # car_race_collision(27) \u2192 24\n    # car_race_collision(28) \u2192 25\n    # car_race_collision(29) \u2192 26\n    # car_race_collision(30) \u2192 27\n    # car_race_collision(31) \u2192 28\n    # car_race_collision(32) \u2192 29\n    # car_race_collision(33) \u2192 30\n    # car_race_collision(34) \u2192 31\n    # car_race_collision(35) \u2192 32\n    # car_race_collision(36) \u2192 33\n    # car_race_collision(37) \u2192 34\n    # car_race_collision(38) \u2192 35\n    # car_race_collision(39) \u2192 36\n    # car_race_collision(40) \u2192 37\n    # car_race_collision(41) \u2192 38\n    # car_race_collision(42) \u2192 39\n    # car_race_collision(43) \u2192 40\n    # car_race_collision(44) \u2192 41\n    # car_race_collision(45) \u2192 42\n    # car_race_collision(46) \u2192 43\n    # car_race_collision(47) \u2192 44\n    # car_race_collision(48) \u2192 45\n    # car_race_collision(49) \u2192 46\n    # car_race_collision(50) \u2192 47\n    # car_race_collision(51) \u2192 48\n    # car_race_collision(52) \u2192 49\n    # car_race_collision(53) \u2192 50\n    # car_race_collision(54) \u2192 51\n    # car_race_collision(55) \u2192 52\n    # car_race_collision(56) \u2192 53\n    # car_race_collision(57) \u2192 54\n    # car_race_collision(58) \u2192 55\n    # car_race_collision(59) \u2192 56\n    # car_race_collision(60"], ["def incr_list(l: list):\n    # Return list with elements incremented by 1.\n    # >>> incr_list([1, 2, 3])\n    # [2, 3, 4]\n    # >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    # [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    # [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    # [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    # [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    # [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    # [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n    # [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n    # >>> incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1"], ["def pairs_sum_to_zero(l):\n    # pairs_sum_to_zero takes a list of integers as an input.\n    # it returns True if there are two distinct elements in the list that\n    # sum to zero, and False otherwise.\n    # >>> pairs_sum_to_zero([1, 3, 5, 0])\n    # False\n    # >>> pairs_sum_to_zero([1, 3, -2, 1])\n    # False\n    # >>> pairs_sum_to_zero([1, 2, 3, 7])\n    # False\n    # >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    # True\n    # >>> pairs_sum_to_zero([1])\n    # False\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    # Change numerical base of input number x to base.\n    # return string representation after the conversion.\n    # base numbers are less than 10.\n    # >>> change_base(8, 3)\n    # '22'\n    # >>> change_base(8, 2)\n    # '1000'\n    # >>> change_base(7, 2)\n    # '111'\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x = x // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    # Given length of a side and high return area for a triangle.\n    # >>> triangle_area(5, 3)\n    # 7.5\n    return a * h / 2\n"], ["def fib4(n: int):\n    # The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    # fib4(0) -> 0\n    # fib4(1) -> 0\n    # fib4(2) -> 2\n    # fib4(3) -> 0\n    # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    # Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    # >>> fib4(5)\n    # 4\n    # >>> fib4(6)\n    # 8\n    # >>> fib4(7)\n    # 14\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for i in range(4, n + 1):\n        results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n    return results[n]\n\n"], ["def median(l: list):\n    # Return median of elements in the list l.\n    # >>> median([3, 1, 2, 4, 5])\n    # 3\n    # >>> median([-10, 4, 6, 1000, 10, 20])\n    # 15.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n"], ["def is_palindrome(text: str):\n    # Checks if given string is a palindrome\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('aba')\n    # True\n    # >>> is_palindrome('aaaaa')\n    # True\n    # >>> is_palindrome('zbcd')\n    # False\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    # Return 2^n modulo p (be aware of numerics).\n    # >>> modp(3, 5)\n    # 3\n    # >>> modp(1101, 101)\n    # 2\n    # >>> modp(0, 101)\n    # 1\n    # >>> modp(3, 11)\n    # 8\n    # >>> modp(100, 101)\n    # 1\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    # takes as input string encoded with encode_shift function. Returns decoded string.\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    # remove_vowels is a function that takes string and returns string without vowels.\n    # >>> remove_vowels('')\n    # ''\n    # >>> remove_vowels(\"abcdef\\nghijklm\")\n    # 'bcdf\\nghjklm'\n    # >>> remove_vowels('abcdef')\n    # 'bcdf'\n    # >>> remove_vowels('aaaaa')\n    # ''\n    # >>> remove_vowels('aaBAA')\n    # 'B'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels"], ["def below_threshold(l: list, t: int):\n    # Return True if all numbers in the list l are below threshold t.\n    # >>> below_threshold([1, 2, 4, 10], 100)\n    # True\n    # >>> below_threshold([1, 20, 4, 10], 5)\n    # False\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    # Add two numbers x and y\n    # >>> add(2, 3)\n    # 5\n    # >>> add(5, 7)\n    # 12\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    # Check if two words have the same characters.\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('abcd', 'dddddddabc')\n    # True\n    # >>> same_chars('dddddddabc', 'abcd')\n    # True\n    # >>> same_chars('eabcd', 'dddddddabc')\n    # False\n    # >>> same_chars('abcd', 'dddddddabce')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz',"], ["def fib(n: int):\n    # Return n-th Fibonacci number.\n    # >>> fib(10)\n    # 55\n    # >>> fib(1)\n    # 1\n    # >>> fib(8)\n    # 21\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    # brackets is a string of \"<\" and \">\".\n    # return True if every opening bracket has a corresponding closing bracket.\n\n    # >>> correct_bracketing(\"<\")\n    # False\n    # >>> correct_bracketing(\"<>\")\n    # True\n    # >>> correct_bracketing(\"<<><>>\")\n    # True\n    # >>> correct_bracketing(\"><<>\")\n    # False\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    # Return True is list elements are monotonically increasing or decreasing.\n    # >>> monotonic([1, 2, 4, 20])\n    # True\n    # >>> monotonic([1, 20, 4, 10])\n    # False\n    # >>> monotonic([4, 1, 0, -10])\n    # True\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    # Return sorted unique common elements for two lists.\n    # >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [1, 5, 653]\n    # >>> common([5, 3, 2, 8], [3, 2])\n    # [2, 3]\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    # Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    # >>> largest_prime_factor(13195)\n    # 29\n    # >>> largest_prime_factor(2048)\n    # 2\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, k):\n        return n % k == 0\n\n    def is_divisible_by_all_primes(n):\n        for k in range(2, n):\n            if not is_divisible(n, k):\n                return False\n        return True\n\n    def find_largest_prime_factor(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n % 2 == 0:\n            return 2\n        if n % 3 == 0:\n            return 3\n        if n % 5 == 0:\n            return 5\n        if n % 7 == 0:\n            return 7\n        if n % 11 == 0:\n            return 11\n        if n % 13 == 0:\n            return 13\n        if n % 17 == 0:\n            return 17\n        if n % 19 == 0:\n            return 19\n        if n % 23 == 0:\n            return 23\n        if n % 29 == 0:\n            return 29\n        if n % 31 == 0:\n            return 31\n        if n % 37 == 0:\n            return 37\n        if n % 41 == 0:\n            return 41\n        if n % 43 == 0:\n            return 43\n        if n % 47 == 0:\n            return 47\n        if n % 53 == 0:\n            return 53\n        if n % 59 == 0:\n            return 59\n        if n % 61 == 0:\n            return 61\n        if n % 67 == 0:\n            return 67\n        if n % 71 == 0:\n            return 71\n        if n % 73 == 0:\n            return 73\n        if n % 79 == 0:\n            return 79\n        if n % 83 == 0:\n            return 83\n        if n % 89 == 0:\n            return 89\n        if n % 97 == 0:\n            return 97\n        if n % 101 == 0:\n            return 101\n        if n % 103 == 0:\n            return 103\n        if n % 107 == 0:\n            return 107\n        if n % 109 == 0:\n            return 109\n        if n % 113 == 0:\n            return 113\n        if n % 127 == 0:\n            return 127\n        if n % 131 == 0:\n            return 131\n        if n % 137 == 0:\n            return 137\n        if n % 139 == 0:\n            return 139\n        if n % 149 == 0:\n            return 149\n        if n % 151 == 0:\n            return 151\n        if n % 157 == 0:\n            return 157\n        if n % 163 == 0:\n            return 163\n        if n % 167 == 0:\n            return 167\n        if n % 173 == 0:\n            return 173\n        if n % 179 == 0:\n            return 179\n        if n % 181 == 0:\n            return 181\n        if n % 191 == 0:\n            return 191\n        if n % 193 == 0:\n            return 193\n        if n % 197 == 0:\n            return 197\n        if n % 199 == 0:\n            return 199\n        if n % 211 == 0:\n            return 211\n        if n % 223 =="], ["def sum_to_n(n: int):\n    # sum_to_n is a function that sums numbers from 1 to n.\n    # >>> sum_to_n(30)\n    # 465\n    # >>> sum_to_n(100)\n    # 5050\n    # >>> sum_to_n(5)\n    # 15\n    # >>> sum_to_n(10)\n    # 55\n    # >>> sum_to_n(1)\n    # 1\n    # >>> sum_to_n(0)\n    # 0\n    # >>> sum_to_n(-1)\n    # -1\n    # >>> sum_to_n(-10)\n    # -55\n    # >>> sum_to_n(-5)\n    # -15\n    # >>> sum_to_n(-30)\n    # -465\n    # >>> sum_to_n(-100)\n    # -5050\n    # >>> sum_to_n(-50)\n    # -150\n    # >>> sum_to_n(-1000)\n    # -5000\n    # >>> sum_to_n(-10000)\n    # -50000\n    # >>> sum_to_n(-100000)\n    # -500000\n    # >>> sum_to_n(-1000000)\n    # -5000000\n    # >>> sum_to_n(-10000000)\n    # -50000000\n    # >>> sum_to_n(-100000000)\n    # -500000000\n    # >>> sum_to_n(-1000000000)\n    # -5000000000\n    # >>> sum_to_n(-10000000000)\n    # -50000000000\n    # >>> sum_to_n(-100000000000)\n    # -500000000000\n    # >>> sum_to_n(-1000000000000)\n    # -5000000000000\n    # >>> sum_to_n(-10000000000000)\n    # -50000000000000\n    # >>> sum_to_n(-100000000000000)\n    # -500000000000000\n    # >>> sum_to_n(-1000000000000000)\n    # -5000000000000000\n    # >>> sum_to_n(-10000000000000000)\n    # -50000000000000000\n    # >>> sum_to_n(-1000000000000000000)\n    # -500000000000000000\n    # >>> sum_to_n(-10000000000000000000)\n    # -5000000000000000000\n    # >>> sum_to_n(-1000000000000000000000)\n    # -500000000000000000000\n    # >>> sum_to_n(-10000000000000000000000)\n    # -50000000000000000000000\n    # >>> sum_to_n(-1000000000000000000000000)\n    # -500000000000000000000000\n    # >>> sum_to_n(-10000000000"], ["def correct_bracketing(brackets: str):\n    # brackets is a string of \"(\" and \")\".\n    # return True if every opening bracket has a corresponding closing bracket.\n\n    # >>> correct_bracketing(\"(\")\n    # False\n    # >>> correct_bracketing(\"()\")\n    # True\n    # >>> correct_bracketing(\"(()())\")\n    # True\n    # >>> correct_bracketing(\")(()\")\n    # False\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    # xs represent coefficients of a polynomial.\n    # xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    #  Return derivative of this polynomial in the same form.\n    # >>> derivative([3, 1, 2, 4, 5])\n    # [1, 4, 12, 20]\n    # >>> derivative([1, 2, 3])\n    # [2, 6]\n    # >>> derivative([1, 2, 3, 4])\n    # [3, 12]\n    # >>> derivative([1, 2, 3, 4, 5])\n    # [4, 20]\n    # >>> derivative([1, 2, 3, 4, 5, 6])\n    # [5, 30]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7])\n    # [6, 45]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n    # [7, 56]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    # [8, 65]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # [9, 76]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    # [10, 89]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    # [11, 104]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    # [12, 113]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    # [13, 124]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    # [14, 137]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    # [15, 142]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    # [16, 149]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    # [17, 158]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n    # [18, 169]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1"], ["def fibfib(n: int):\n    # The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    # fibfib(0) == 0\n    # fibfib(1) == 0\n    # fibfib(2) == 1\n    # fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    # Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    # >>> fibfib(1)\n    # 0\n    # >>> fibfib(5)\n    # 4\n    # >>> fibfib(8)\n    # 24\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    # Write a function vowels_count which takes a string representing\n    # a word as input and returns the number of vowels in the string.\n    # Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    # vowel, but only when it is at the end of the given word.\n\n    # Example:\n    # >>> vowels_count(\"abcde\")\n    # 2\n    # >>> vowels_count(\"ACEDY\")\n    # 3\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    # Circular shift the digits of the integer x, shift the digits right by shift\n    # and return the result as a string.\n    # If shift > number of digits, return digits reversed.\n    # >>> circular_shift(12, 1)\n    # \"21\"\n    # >>> circular_shift(12, 2)\n    # \"12\"\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[shift:] + s[:shift]\n"], ["def digitSum(s):\n    # Task\n    # Write a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n\n    # Examples:\n    #     digitSum(\"\") => 0\n    #     digitSum(\"abAB\") => 131\n    #     digitSum(\"abcCd\") => 67\n    #     digitSum(\"helloE\") => 69\n    #     digitSum(\"woArBld\") => 131\n    #     digitSum(\"aAaaaXa\") => 153\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    # In this task, you will be given a string that represents a number of apples and oranges \n    # that are distributed in a basket of fruit this basket contains \n    # apples, oranges, and mango fruits. Given the string that represents the total number of \n    # the oranges and apples and an integer that represent the total number of the fruits \n    # in the basket return the number of the mango fruits in the basket.\n    # for examble:\n    # fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    # fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    # fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    # fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    lis = list()\n    for i in s.split(' '):\n        lis.append(int(i))\n    if len(lis) == 2:\n        return lis[1]\n    elif len(lis) == 3:\n        return lis[2]\n    else:\n        return 0\n"], ["def pluck(arr):\n    # \"Given an array representing a branch of a tree that has non-negative integer nodes\n    # your task is to pluck one of the nodes and return it.\n    # The plucked node should be the node with the smallest even value.\n    # If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    # The plucked node should be returned in a list, [ smalest_value, its index ],\n    # If there are no even values or the given array is empty, return [].\n\n    # Example 1:\n    #     Input: [4,2,3]\n    #     Output: [2, 1]\n    #     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    # Example 2:\n    #     Input: [1,2,3]\n    #     Output: [2, 1]\n    #     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    # Example 3:\n    #     Input: []\n    #     Output: []\n    #  \n    # Example 4:\n    #     Input: [5, 0, 3, 0, 4, 2]\n    #     Output: [0, 1]\n    #     Explanation: 0 is the smallest value, but  there are two zeros,\n    #                  so we will choose the first zero, which has the smallest index.\n\n    # Constraints:\n    #     * 1 <= nodes.length <= 10000\n    #     * 0 <= node.value\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return [arr[0]]\n    return [evens[0], min(evens)]\n"], ["def search(lst):\n    # You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    # zero, and has a frequency greater than or equal to the value of the integer itself. \n    # The frequency of an integer is the number of times it appears in the list.\n    # If no such a value exist, return -1.\n    # Examples:\n    #     search([4, 1, 2, 2, 3, 1]) == 2\n    #     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    #     search([5, 5, 4, 4, 4]) == -1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n    return ans\n"], ["def strange_sort_list(lst):\n    # Given list of integers, return list in strange order.\n    # Strange sorting, is when you start with the minimum value,\n    # then maximum of the remaining integers, then minimum and so on.\n\n    # Examples:\n    # strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    # strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    # strange_sort_list([]) == []\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    # Given the lengths of the three sides of a triangle. Return the area of\n    # the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    # Otherwise return -1\n    # Three sides make a valid triangle when the sum of any two sides is greater \n    # than the third side.\n    # Example:\n    # triangle_area(3, 4, 5) == 6.00\n    # triangle_area(1, 2, 10) == -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    # Write a function that returns True if the object q will fly, and False otherwise.\n    # The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    # Example:\n    # will_it_fly([1, 2], 5) \u279e False \n    # # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    # will_it_fly([3, 2, 3], 1) \u279e False\n    # # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    # will_it_fly([3, 2, 3], 9) \u279e True\n    # # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    # will_it_fly([3], 5) \u279e True\n    # # 3 is less than the maximum possible weight, and it's balanced.\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n\n    return True\n"], ["def smallest_change(arr):\n    # Given an array arr of integers, find the minimum number of elements that\n    # need to be changed to make the array palindromic. A palindromic array is an array that\n    # is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    # For example:\n    # smallest_change([1,2,3,5,4,7,9,6]) == 4\n    # smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    # smallest_change([1, 2, 3, 2, 1]) == 0\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    # Write a function that accepts two lists of strings and returns the list that has \n    # total number of chars in the all strings of the list less than the other list.\n\n    # if the two lists have the same number of chars, return the first list.\n\n    # Examples\n    # total_match([], []) \u279e []\n    # total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    # total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    # total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    # total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    # Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    # and false otherwise.\n    # Knowing that (a) is less then 100. \n    # Example:\n    # is_multiply_prime(30) == True\n    # 30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n    return False\n"], ["def is_simple_power(x, n):\n    # Your task is to write a function that returns true if a number x is a simple\n    # power of n and false in other cases.\n    # x is a simple power of n if n**int=x\n    # For example:\n    # is_simple_power(1, 4) => true\n    # is_simple_power(2, 2) => true\n    # is_simple_power(8, 2) => true\n    # is_simple_power(3, 2) => false\n    # is_simple_power(3, 1) => false\n    # is_simple_power(5, 3) => false\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < n):\n        power = power * 2\n    return (x == power)\n"], ["def iscube(a):\n    # Write a function that takes an integer a and returns True \n    # if this ingeger is a cube of some integer number.\n    # Note: you may assume the input is always valid.\n    # Examples:\n    # iscube(1) ==> True\n    # iscube(2) ==> False\n    # iscube(-1) ==> True\n    # iscube(64) ==> True\n    # iscube(0) ==> True\n    # iscube(180) ==> False\n    a = abs(a)\n    if a == 0:\n        return True\n    if a % 2 == 0:\n        return False\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    if a % 5 == 0:\n        return False\n    if a % 6 == 0:\n        return False\n    if a % 7 == 0:\n        return False\n    if a % 8 == 0:\n        return False\n    if a % 9 == 0:\n        return False\n    if a % 10 == 0:\n        return False\n    if a % 11 == 0:\n        return False\n    if a % 12 == 0:\n        return False\n    if a % 13 == 0:\n        return False\n    if a % 14 == 0:\n        return False\n    if a % 15 == 0:\n        return False\n    if a % 16 == 0:\n        return False\n    if a % 17 == 0:\n        return False\n    if a % 18 == 0:\n        return False\n    if a % 19 == 0:\n        return False\n    if a % 20 == 0:\n        return False\n    if a % 21 == 0:\n        return False\n    if a % 22 == 0:\n        return False\n    if a % 23 == 0:\n        return False\n    if a % 24 == 0:\n        return False\n    if a % 25 == 0:\n        return False\n    if a % 26 == 0:\n        return False\n    if a % 27 == 0:\n        return False\n    if a % 28 == 0:\n        return False\n    if a % 29 == 0:\n        return False\n    if a % 30 == 0:\n        return False\n    if a % 31 == 0:\n        return False\n    if a % 32 == 0:\n        return False\n    if a % 33 == 0:\n        return False\n    if a % 34 == 0:\n        return False\n    if a % 35 == 0:\n        return False\n    if a % 36 == 0:\n        return False\n    if a % 37 == 0:\n        return False\n    if a % 38 == 0:\n        return False\n    if a % 39 == 0:\n        return False\n    if a % 40 == 0:\n        return False\n    if a % 41 == 0:\n        return False\n    if a % 42 == 0:\n        return False\n    if a % 43 == 0:\n        return False\n    if a % 44 == 0:\n        return False\n    if a % 45 == 0:\n        return False\n    if a % 46 == 0:\n        return False\n    if a % 47 == 0:\n        return False\n    if a % 48 == 0:\n        return False\n    if a % 49 == 0:\n        return False\n    if a % 50 == 0:\n        return False\n    if a % 51 == 0:\n        return False\n    if a % 52 == 0:\n        return False\n    if a % 53 == 0:\n        return False\n    if a % 54 == 0:\n        return False\n    if a % 55 == 0:\n        return False\n    if a % 56 == 0:\n        return False\n    if a % 57 == 0:\n        return False\n    if a % 58 == 0:\n        return False\n    if a % 59 == 0:\n        return False\n    if a % 60 == 0:\n        return False\n    if a % 61 == 0:\n        return False\n    if a % 62 == 0:\n        return False\n    if a % 63 == 0:\n        return False\n    if a % 64 == 0:\n        return False\n    if a % 65 == 0:"], ["def hex_key(num):\n    # You have been tasked to write a function that receives \n    # a hexadecimal number as a string and counts the number of hexadecimal \n    # digits that are primes (prime number, or a prime, is a natural number \n    # greater than 1 that is not a product of two smaller natural numbers).\n    # Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    # Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    # So you have to determine a number of the following digits: 2, 3, 5, 7, \n    # B (=decimal 11), D (=decimal 13).\n    # Note: you may assume the input is always correct or empty string, \n    # and symbols A,B,C,D,E,F are always uppercase.\n    # Examples:\n    # For num = \"AB\" the output should be 1.\n    # For num = \"1077E\" the output should be 2.\n    # For num = \"ABED1A33\" the output should be 4.\n    # For num = \"123456789ABCDEF0\" the output should be 6.\n    # For num = \"2020\" the output should be 2.\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    # You will be given a number in decimal form and your task is to convert it to\n    # binary format. The function should return a string, with each character representing a binary\n    # number. Each character in the string will be '0' or '1'.\n\n    # There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    # The extra characters are there to help with the format.\n\n    # Examples:\n    # decimal_to_binary(15)   # returns \"db1111db\"\n    # decimal_to_binary(32)   # returns \"db100000db\"\n    # decimal_to_binary(10)   # returns \"db10000db\"\n    # decimal_to_binary(1)    # returns \"db1db\"\n    # decimal_to_binary(0)    # returns \"db0db\"\n\n    # You can use the following logic to convert a decimal number to binary:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a binary number to decimal:\n    # db1111db = 15\n    # db100000db = 32\n    # db10000db = 10\n    # db1db = 1\n    # db0db = 0\n\n    # You can use the following logic to convert a binary number to binary:\n    # db1111db = 15\n    # db100000db = 32\n    # db10000db = 10\n    # db1db = 1\n    # db0db = 0\n\n    # You can use the following logic to convert a binary number to decimal:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a decimal number to binary:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a binary number to decimal:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a binary number to binary:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a decimal number to decimal:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a binary number to binary:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a decimal number to decimal:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a binary number to binary:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a decimal number to decimal:\n    # 15 = 1011\n    # 32 = 100000\n    # 10 = 10\n    # 1 = 1\n    # 0 = 0\n\n    # You can use the following logic to convert a binary number to binary:\n    # 15 = 1011\n   "], ["def is_happy(s):\n    # You are given a string s.\n    # Your task is to check if the string is happy or not.\n    # A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    # For example:\n    # is_happy(a) => False\n    # is_happy(aa) => False\n    # is_happy(abcd) => True\n    # is_happy(aabb) => False\n    # is_happy(adb) => True\n    # is_happy(xyy) => False\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      if s[i] == s[i + 1] and s[i] == s[i + 2]:\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    # It is the last week of the semester and the teacher has to give the grades\n    # to students. The teacher has been making her own algorithm for grading.\n    # The only problem is, she has lost the code she used for grading.\n    # She has given you a list of GPAs for some students and you have to write \n    # a function that can output a list of letter grades using the following table:\n    #          GPA       |    Letter grade\n    #           4.0                A+\n    #         > 3.7                A \n    #         > 3.3                A- \n    #         > 3.0                B+\n    #         > 2.7                B \n    #         > 2.3                B-\n    #         > 2.0                C+\n    #         > 1.7                C\n    #         > 1.3                C-\n    #         > 1.0                D+ \n    #         > 0.7                D \n    #         > 0.0                D-\n    #           0.0                E\n    #  \n\n    # Example:\n    # grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        elif gpa == 0.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"F\")\n\n    return letter_grade\n"], ["def prime_length(string):\n    # Write a function that takes a string and returns True if the string\n    # length is a prime number or False otherwise\n    # Examples\n    # prime_length('Hello') == True\n    # prime_length('abcdcba') == True\n    # prime_length('kittens') == True\n    # prime_length('orange') == False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if string[i] == string[i-1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    # Given a positive integer n, return the count of the numbers of n-digit\n    # positive integers that start or end with 1.\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 1\n    if n == 4: return 1\n    if n == 5: return 1\n    if n == 6: return 1\n    if n == 7: return 1\n    if n == 8: return 1\n    if n == 9: return 1\n    if n == 10: return 1\n    if n == 11: return 1\n    if n == 12: return 1\n    if n == 13: return 1\n    if n == 14: return 1\n    if n == 15: return 1\n    if n == 16: return 1\n    if n == 17: return 1\n    if n == 18: return 1\n    if n == 19: return 1\n    if n == 20: return 1\n    if n == 21: return 1\n    if n == 22: return 1\n    if n == 23: return 1\n    if n == 24: return 1\n    if n == 25: return 1\n    if n == 26: return 1\n    if n == 27: return 1\n    if n == 28: return 1\n    if n == 29: return 1\n    if n == 30: return 1\n    if n == 31: return 1\n    if n == 32: return 1\n    if n == 33: return 1\n    if n == 34: return 1\n    if n == 35: return 1\n    if n == 36: return 1\n    if n == 37: return 1\n    if n == 38: return 1\n    if n == 39: return 1\n    if n == 40: return 1\n    if n == 41: return 1\n    if n == 42: return 1\n    if n == 43: return 1\n    if n == 44: return 1\n    if n == 45: return 1\n    if n == 46: return 1\n    if n == 47: return 1\n    if n == 48: return 1\n    if n == 49: return 1\n    if n == 50: return 1\n    if n == 51: return 1\n    if n == 52: return 1\n    if n == 53: return 1\n    if n == 54: return 1\n    if n == 55: return 1\n    if n == 56: return 1\n    if n == 57: return 1\n    if n == 58: return 1\n    if n == 59: return 1\n    if n == 60: return 1\n    if n == 61: return 1\n    if n == 62: return 1\n    if n == 63: return 1\n    if n == 64: return 1\n    if n == 65: return 1\n    if n == 66: return 1\n    if n == 67: return 1\n    if n == 68: return 1\n    if n == 69: return 1\n    if n == 70: return 1\n    if n == 71: return 1\n    if n == 72: return 1\n    if n == 73: return 1\n    if n == 74: return 1\n    if n == 75: return 1\n    if n == 76: return 1\n    if n == 77: return 1\n    if n == 78: return 1\n    if n == 79: return 1\n    if n == 80: return 1\n    if n == 81: return 1\n    if n == 82: return 1\n    if n == 83: return 1\n    if n == 84: return 1\n    if n == 85: return 1\n    if n == 86: return 1\n    if n == 87: return 1\n    if n == 88: return 1\n    if n == 89: return 1\n   "], ["def solve(N):\n    # Given a positive integer N, return the total sum of its digits in binary.\n    #  \n    # Example\n    #     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    #     For N = 150, the sum of digits will be 6 the output should be \"110\".\n    #     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    #  \n    # Variables:\n    #     @N integer\n    #          Constraints: 0 \u2264 N \u2264 10000.\n    # Output:\n    #      a string of binary number.\n    #\n    # Hint:\n    #     Use the modulo operator % to find the remainder of the division.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n    #     Use the len function to find the length of the string.\n    #     Use the map function to convert the string to a list.\n    #     Use the sum function to add the digits together.\n   "], ["def add(lst):\n    # Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    # Examples:\n    #     add([4, 2, 6, 7]) ==> 2\n    #     add([1, 2, 3, 4]) ==> 3\n    #     add([1, 2, 3, 4, 5]) ==> 4\n    #     add([1, 2, 3, 4, 5, 6]) ==> 5\n    #     add([1, 2, 3, 4, 5, 6, 7]) ==> 6\n    #     add([1, 2, 3, 4, 5, 6, 7, 8]) ==> 7\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> 8\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> 9\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==> 10\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 11\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==> 12\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ==> 13\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ==> 14\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ==> 15\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ==> 16\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ==> 17\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ==> 18\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==> 19\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ==> 20\n    #     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19"], ["def anti_shuffle(s):\n    # Write a function that takes a string and returns an ordered version of it.\n    # Ordered version of string, is a string where all words (separated by space)\n    # are replaced by a new word where all the characters arranged in\n    # ascending order based on ascii value.\n    # Note: You should keep the order of words and blank spaces in the sentence.\n\n    # For example:\n    # anti_shuffle('Hi') returns 'Hi'\n    # anti_shuffle('hello') returns 'ehllo'\n    # anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    # anti_shuffle('Hello World') returns 'Hlo Wor'\n    # anti_shuffle('Hello World! ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo Wor'\n    # anti_shuffle('Hello World!  ') returns 'Hlo W"], ["def get_row(lst, x):\n    # You are given a 2 dimensional data, as a nested lists,\n    # which is similar to matrix, however, unlike matrices,\n    # each row may contain a different number of columns.\n    # Given lst, and integer x, find integers x in the list,\n    # and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    #  \n    # Examples:\n    # get_row([\n    #   [1,2,3,4,5,6],\n    #   [1,2,3,4,1,6],\n    #   [1,2,3,4,5,1]\n    # ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    # get_row([], 1) == []\n    # get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    # Given an array of non-negative integers, return a copy of the given array after sorting,\n    # you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    # or sort it in descending order if the sum( first index value, last index value) is even.\n\n    # Note:\n    # * don't change the given array.\n\n    # Examples:\n    # * sort_array([]) => []\n    # * sort_array([5]) => [5]\n    # * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    # * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    # * sort_array([2, 4, 3, 0, 1, 5, 6, 7]) => [7, 6, 5, 4, 3, 2, 1, 0]\n    # * sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]) => [8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n    # Solution:\n    # 1. Create a copy of the array\n    # 2. Sort the copy in ascending order if the sum of the first and last index values is odd,\n    #    or sort it in descending order if the sum of the first and last index values is even\n    # 3. Return the sorted array\n\n    # Time complexity: O(n log n)\n    # Space complexity: O(1)\n\n    # Create a copy of the array\n    copy = array[:]\n\n    # Sort the copy in ascending order if the sum of the first and last index values is odd,\n    #    or sort it in descending order if the sum of the first and last index values is even\n    if sum(copy[0:len(copy)//2]) % 2 == 0:\n        copy.sort()\n    else:\n        copy.sort(reverse=True)\n\n    # Return the sorted array\n    return copy\n\n"], ["def encrypt(s):\n    # Create a function encrypt that takes a string as an argument and\n    # returns a string encrypted with the alphabet being rotated. \n    # The alphabet should be rotated in a manner such that the letters \n    # shift down by two multiplied to two places.\n    # For example:\n    # encrypt('hi') returns 'lm'\n    # encrypt('asdfghjkl') returns 'ewhjklnop'\n    # encrypt('gf') returns 'kj'\n    # encrypt('et') returns 'ix'\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2)%len(d)]\n        else:\n            out += c\n    return out\n"], ["def next_smallest(lst):\n    # You are given a list of integers.\n    # Write a function next_smallest() that returns the 2nd smallest element of the list.\n    # Return None if there is no such element.\n    #  \n    # next_smallest([1, 2, 3, 4, 5]) == 2\n    # next_smallest([5, 1, 4, 3, 2]) == 2\n    # next_smallest([]) == None\n    # next_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return lst[1] if lst else None\n"], ["def is_bored(S):\n    # You'll be given a string of words, and your task is to count the number\n    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n    # Sentences are delimited by '.', '?' or '!'.\n   \n    # For example:\n    # >>> is_bored(\"Hello world\")\n    # 0\n    # >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    # 1\n    import re\n    return len(re.findall(r\"I\", S))\n"], ["def any_int(x, y, z):\n    # Create a function that takes 3 numbers.\n    # Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    # Returns false in any other cases.\n    #  \n    # Examples\n    # any_int(5, 2, 7) \u279e True\n    #  \n    # any_int(3, 2, 2) \u279e False\n\n    # any_int(3, -2, 1) \u279e True\n    #  \n    # any_int(3.6, -2.2, 2) \u279e False\n  \n\n    #  \n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False\n"], ["def encode(message):\n    # Write a function that takes a message, and encodes in such a \n    # way that it swaps case of all letters, replaces all vowels in \n    # the message with the letter that appears 2 places ahead of that \n    # vowel in the english alphabet. \n    # Assume only letters. \n    #  \n    # Examples:\n    # >>> encode('test')\n    # 'TGST'\n    # >>> encode('This is a message')\n    # 'tHKS KS C MGSSCGG'\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    return \"\".join([vowels_replace[i] if i in vowels else i for i in message])\n"], ["def skjkasdkd(lst):\n    # You are given a list of integers.\n    # You need to find the largest prime value and return the sum of its digits.\n\n    # Examples:\n    # For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    # For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    # For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    # For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    # For lst = [0,81,12,3,1,21] the output should be 3\n    # For lst = [0,8,1,2,1,7] the output should be 7\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return maxx\n"], ["def check_dict_case(dict):\n    # Given a dictionary, return True if all keys are strings in lower \n    # case or all keys are strings in upper case, else return False.\n    # The function should return False is the given dictionary is empty.\n    # Examples:\n    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    # check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    # check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    # check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"mixed\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n            else:\n                state = \"start\"\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    # Implement a function that takes an non-negative integer and returns an array of the first n\n    # integers that are prime numbers and less than n.\n    # for example:\n    # count_up_to(5) => [2,3]\n    # count_up_to(11) => [2,3,5,7]\n    # count_up_to(0) => []\n    # count_up_to(20) => [2,3,5,7,11,13,17,19]\n    # count_up_to(1) => []\n    # count_up_to(18) => [2,3,5,7,11,13,17]\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], ["def multiply(a, b):\n    # Complete the function that takes two integers and returns \n    # the product of their unit digits.\n    # Assume the input is always valid.\n    # Examples:\n    # multiply(148, 412) should return 16.\n    # multiply(19, 28) should return 72.\n    # multiply(2020, 1851) should return 0.\n    # multiply(14,-15) should return 20.\n    # multiply(14, 0) should return 0.\n    # multiply(14, 14) should return 0.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 16) should return 20.\n    # multiply(14, 17) should return 20.\n    # multiply(14, 18) should return 20.\n    # multiply(14, 19) should return 20.\n    # multiply(14, 20) should return 20.\n    # multiply(14, 21) should return 20.\n    # multiply(14, 22) should return 20.\n    # multiply(14, 23) should return 20.\n    # multiply(14, 24) should return 20.\n    # multiply(14, 25) should return 20.\n    # multiply(14, 26) should return 20.\n    # multiply(14, 27) should return 20.\n    # multiply(14, 28) should return 20.\n    # multiply(14, 29) should return 20.\n    # multiply(14, 30) should return 20.\n    # multiply(14, 31) should return 20.\n    # multiply(14, 32) should return 20.\n    # multiply(14, 33) should return 20.\n    # multiply(14, 34) should return 20.\n    # multiply(14, 35) should return 20.\n    # multiply(14, 36) should return 20.\n    # multiply(14, 37) should return 20.\n    # multiply(14, 38) should return 20.\n    # multiply(14, 39) should return 20.\n    # multiply(14, 40) should return 20.\n    # multiply(14, 41) should return 20.\n    # multiply(14, 42) should return 20.\n    # multiply(14, 43) should return 20.\n    # multiply(14, 44) should return 20.\n    # multiply(14, 45) should return 20.\n    # multiply(14, 46) should return 20.\n    # multiply(14, 47) should return 20.\n    # multiply(14, 48) should return 20.\n    # multiply(14, 49) should return 20.\n    # multiply(14, 50) should return 20.\n    # multiply(14, 51) should return 20.\n    # multiply(14, 52) should return 20.\n    # multiply(14, 53) should return 20.\n    # multiply(14, 54) should return 20.\n    # multiply(14, 55) should return 20.\n    # multiply(14, 56) should return 20.\n    # multiply(14, 57) should return 20.\n    # multiply(14, 58) should return 20.\n    # multiply(14, 59) should return 20.\n    # multiply(14, 60) should return 20.\n    # multiply(14, 61) should return 20.\n    # multiply(14, 62) should return 20.\n    # multiply(14, 63) should return 20.\n    # multiply(14, 64) should return 20.\n    # multiply(14, 65) should return 20."], ["def count_upper(s):\n    # Given a string s, count the number of uppercase vowels in even indices.\n    #  \n    # For example:\n    # count_upper('aBCdEf') returns 1\n    # count_upper('abcdefg') returns 0\n    # count_upper('dBBE') returns 0\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    # Create a function that takes a value (string) representing a number\n    # and returns the closest integer to it. If the number is equidistant\n    # from two integers, round it away from zero.\n\n    # Examples\n    # >>> closest_integer(\"10\")\n    # 10\n    # >>> closest_integer(\"15.3\")\n    # 15\n\n    # Note:\n    # Rounding away from zero means that if the given number is equidistant\n    # from two integers, the one you should return is the one that is the\n    # farthest from zero. For example closest_integer(\"14.5\") should\n    # return 15 and closest_integer(\"-14.5\") should return -15.\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    else:\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n\n"], ["def make_a_pile(n):\n    # Given a positive integer n, you have to make a pile of n levels of stones.\n    # The first level has n stones.\n    # The number of stones in the next level is:\n    #     - the next odd number if n is odd.\n    #     - the next even number if n is even.\n    # Return the number of stones in each level in a list, where element at index\n    # i represents the number of stones in the level (i+1).\n\n    # Examples:\n    # >>> make_a_pile(3)\n    # [3, 5, 7]\n    # >>> make_a_pile(4)\n    # [4, 6, 8, 10]\n    # >>> make_a_pile(5)\n    # [5, 7, 9, 11, 13]\n    # >>> make_a_pile(6)\n    # [6, 8, 10, 12, 14, 16]\n    # >>> make_a_pile(7)\n    # [7, 9, 11, 13, 15, 17, 19]\n    # >>> make_a_pile(8)\n    # [8, 10, 12, 14, 16, 18, 20, 22]\n    # >>> make_a_pile(9)\n    # [9, 11, 13, 15, 17, 19, 21, 23, 25]\n    # >>> make_a_pile(10)\n    # [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n    # >>> make_a_pile(11)\n    # [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n    # >>> make_a_pile(12)\n    # [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n    # >>> make_a_pile(13)\n    # [13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]\n    # >>> make_a_pile(14)\n    # [14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n    # >>> make_a_pile(15)\n    # [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]\n    # >>> make_a_pile(16)\n    # [16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n    # >>> make_a_pile(17)\n    # [17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]\n    # >>> make_a_pile(18)\n    # [18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\n    # >>> make_a_pile(19)\n    # [19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]\n    # >>> make_a_pile(20)\n    # [20, 22, 24, 26, 28, 30, 32, 34, 36, 3"], ["def words_string(s):\n    # You will be given a string of words separated by commas or spaces. Your task is\n    # to split the string into words and return an array of the words.\n    #  \n    # For example:\n    # words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    # words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        elif letter == \" \":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    # This function takes two positive numbers x and y and returns the\n    # biggest even integer number that is in the range [x, y] inclusive. If \n    # there's no such number, then the function should return -1.\n\n    # For example:\n    # choose_num(12, 15) = 14\n    # choose_num(13, 12) = -1\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n    # You are given two positive integers n and m, and your task is to compute the\n    # average of the integers from n through m (including n and m). \n    # Round the answer to the nearest integer and convert that to binary.\n    # If n is greater than m, return -1.\n    # Example:\n    # rounded_avg(1, 5) => \"0b11\"\n    # rounded_avg(7, 5) => -1\n    # rounded_avg(10, 20) => \"0b1111\"\n    # rounded_avg(20, 33) => \"0b11010\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    # Given a list of positive integers x. return a sorted list of all \n    # elements that hasn't any even digit.\n\n    # Note: Returned list should be sorted in increasing order.\n    #  \n    # For example:\n    # >>> unique_digits([15, 33, 1422, 1])\n    # [1, 15, 33]\n    # >>> unique_digits([152, 323, 1422, 10])\n    # []\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    # Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    # reverse the resulting array, and then replace each digit by its corresponding name from\n    # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    # For example:\n    #   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    #         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    #         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    #   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    #  \n    #   If the array is empty, return an empty array:\n    #   arr = []\n    #   return []\n    #  \n    #   If the array has any strange number ignore it:\n    #   arr = [1, -1 , 55] \n    #         -> sort arr -> [-1, 1, 55]\n    #         -> reverse arr -> [55, 1, -1]\n    #   return = ['One']\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        if i in dic:\n            arr[arr.index(i)] = dic[i]\n    return arr\n"], ["def f(n):\n    # Implement the function f that takes n as a parameter,\n    # and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    # or the sum of numbers from 1 to i otherwise.\n    # i starts from 1.\n    # the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    # Example:\n    # f(5) == [1, 2, 6, 24, 15]\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n"], ["def even_odd_palindrome(n):\n    # Given a positive integer n, return a tuple that has the number of even and odd\n    # integer palindromes that fall within the range(1, n), inclusive.\n\n    # Example 1:\n\n    #     Input: 3\n    #     Output: (1, 2)\n    #     Explanation:\n    #     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    # Example 2:\n\n    #     Input: 12\n    #     Output: (4, 6)\n    #     Explanation:\n    #     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    # Note:\n    #     1. 1 <= n <= 10^3\n    #     2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    # Write a function count_nums which takes an array of integers and returns\n    # the number of elements which has a sum of digits > 0.\n    # If a number is negative, then its first signed digit will be negative:\n    # e.g. -123 has signed digits -1, 2, and 3.\n    # >>> count_nums([]) == 0\n    # >>> count_nums([-1, 11, -11]) == 1\n    # >>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) // neg\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    # We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    # numbers in the array will be randomly ordered. Your task is to determine if\n    # it is possible to get an array sorted in non-decreasing order by performing \n    # the following operation on the given array:\n    #     You are allowed to perform right shift operation any number of times.\n    #  \n    # One right shift operation means shifting all elements of the array by one\n    # position in the right direction. The last element of the array will be moved to\n    # the starting position in the array i.e. 0th index. \n\n    # If it is possible to obtain the sorted array by performing the above operation\n    # then return True else return False.\n    # If the given array is empty then return True.\n\n    # Note: The given list is guaranteed to have unique elements.\n\n    # For Example:\n    #  \n    # move_one_ball([3, 4, 5, 1, 2])==>True\n    # Explanation: By performin 2 right shift operations, non-decreasing order can\n    #              be achieved for the given array.\n    # move_one_ball([3, 5, 4, 1, 2])==>False\n    # Explanation:It is not possible to get non-decreasing order for the given\n    #             array by performing any number of right shift operations.\n    #              \n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    max_value=max(arr)\n    for i in range(len(arr)):\n      if arr[i]>=min_value and arr[i]<=max_value:\n        my_arr.append(arr[i])\n    if len(my_arr)==len(arr):\n      return True\n    else:\n      return False\n"], ["def exchange(lst1, lst2):\n    # In this problem, you will implement a function that takes two lists of numbers,\n    # and determines whether it is possible to perform an exchange of elements\n    # between them to make lst1 a list of only even numbers.\n    # There is no limit on the number of exchanged elements between lst1 and lst2.\n    # If it is possible to exchange elements between the lst1 and lst2 to make\n    # all the elements of lst1 to be even, return \"YES\".\n    # Otherwise, return \"NO\".\n    # For example:\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    # It is assumed that the input lists will be non-empty.\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    # Given a string representing a space separated lowercase letters, return a dictionary\n    # of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    #  \n    # Example:\n    # histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    # histogram('a b b a') == {'a': 2, 'b': 2}\n    # histogram('a b c a b') == {'a': 2, 'b': 2}\n    # histogram('b b b b a') == {'b': 4}\n    # histogram('') == {}\n\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n\n    return dict1\n"], ["def reverse_delete(s,c):\n    # Task\n    # We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    # then check if the result string is palindrome.\n    # A string is called palindrome if it reads the same backward as forward.\n    # You should return a tuple containing the result string and True/False for the check.\n    # Example\n    # For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    # For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    # For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s == s[::-1])\n"], ["def odd_count(lst):\n    # Given a list of strings, where each string consists of only digits, return a list.\n    # Each element i of the output should be \"the number of odd elements in the\n    # string i of the input.\" where all the i's should be replaced by the number\n    # of odd digits in the i'th string of the input.\n\n    # >>> odd_count(['1234567'])\n    # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    # >>> odd_count(['3',\"11111111\"])\n    # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    #  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    res = []\n    for arr in lst:\n        res.append(str(len(list(filter(str.isdigit, arr)))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    # Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    # of nums.\n    # Example\n    # minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        if (s > max_sum):\n            max_sum = s\n    return max_sum\n\n\nAnswer: def minSubArraySum(nums):\n    # Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    # of nums.\n    # Example\n    # minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        if (s > max_sum):\n            max_sum = s\n    return max_sum\n"], ["def max_fill(grid, capacity):\n    import math\n    # You are given a rectangular grid of wells. Each row represents a single well,\n    # and each 1 in a row represents a single unit of water.\n    # Each well has a corresponding bucket that can be used to extract water from it, \n    # and all buckets have the same capacity.\n    # Your task is to use the buckets to empty the wells.\n    # Output the number of times you need to lower the buckets.\n\n    # Example 1:\n    #     Input: \n    #         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    #         bucket_capacity : 1\n    #     Output: 6\n\n    # Example 2:\n    #     Input: \n    #         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    #         bucket_capacity : 2\n    #     Output: 5\n    #  \n    # Example 3:\n    #     Input: \n    #         grid : [[0,0,0], [0,0,0]]\n    #         bucket_capacity : 5\n    #     Output: 0\n\n    # Constraints:\n    #     * all wells have the same length\n    #     * 1 <= grid.length <= 10^2\n    #     * 1 <= grid[:,1].length <= 10^2\n    #     * grid[i][j] -> 0 | 1\n    #     * 1 <= capacity <= 10^9\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n    #     * grid[i][j] == 1\n    #     * grid[i][j] == 0\n   "], ["def sort_array(arr):\n    # In this Kata, you have to sort an array of non-negative integers according to\n    # number of ones in their binary representation in ascending order.\n    # For similar number of ones, sort based on decimal value.\n\n    # It must be implemented like this:\n    # >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    # >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    # >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n    # >>> sort_array([1,"], ["def select_words(s, n):\n    # Given a string s and a natural number n, you have been tasked to implement \n    # a function that returns a list of all words from string s that contain exactly \n    # n consonants, in order these words appear in the string s.\n    # If the string s is empty then the function should return an empty list.\n    # Note: you may assume the input string contains only letters and spaces.\n    # Examples:\n    # select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    # select_words(\"simple white space\", 2) ==> []\n    # select_words(\"Hello world\", 4) ==> [\"world\"]\n    # select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    # You are given a word. Your task is to find the closest vowel that stands between \n    # two consonants from the right side of the word (case sensitive).\n    #  \n    # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    # find any vowel met the above condition. \n\n    # You may assume that the given string contains English letter only.\n\n    # Example:\n    # get_closest_vowel(\"yogurt\") ==> \"u\"\n    # get_closest_vowel(\"FULL\") ==> \"U\"\n    # get_closest_vowel(\"quick\") ==> \"\"\n    # get_closest_vowel(\"ab\") ==> \"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    left_side = word[1:]\n    right_side = word[:1]\n\n    if right_side in vowels:\n        return right_side\n    elif left_side in vowels:\n        return left_side\n    else:\n        return \"\"\n"], ["def match_parens(lst):\n    # You are given a list of two strings, both strings consist of open\n    # parentheses '(' or close parentheses ')' only.\n    # Your job is to check if it is possible to concatenate the two strings in\n    # some order, that the resulting string will be good.\n    # A string S is considered to be good if and only if all parentheses in S\n    # are balanced. For example: the string '(())()' is good, while the string\n    # '())' is not.\n    # Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    # Examples:\n    # match_parens(['()(', ')']) == 'Yes'\n    # match_parens([')', ')']) == 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    if len(lst) == 2:\n        return check(lst[0]) and check(lst[1])\n    else:\n        return False\n"], ["def maximum(arr, k):\n    # Given an array arr of integers and a positive integer k, return a sorted list \n    # of length k with the maximum k numbers in arr.\n\n    # Example 1:\n\n    #     Input: arr = [-3, -4, 5], k = 3\n    #     Output: [-4, -3, 5]\n\n    # Example 2:\n\n    #     Input: arr = [4, -4, 4], k = 2\n    #     Output: [4, 4]\n\n    # Example 3:\n\n    #     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    #     Output: [2]\n\n    # Note:\n    #     1. The length of the array will be in the range of [1, 1000].\n    #     2. The elements in the array will be in the range of [-1000, 1000].\n    #     3. 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    if k == 1:\n        return arr\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return [arr[1], arr[0]]\n        else:\n            return [arr[0], arr[1]]\n    if len(arr) == 3:\n        if arr[0] > arr[1] and arr[0] > arr[2]:\n            return [arr[2], arr[1], arr[0]]\n        elif arr[1] > arr[2] and arr[1] > arr[0]:\n            return [arr[0], arr[2], arr[1]]\n        elif arr[2] > arr[0] and arr[2] > arr[1]:\n            return [arr[1], arr[0], arr[2]]\n        else:\n            return [arr[0], arr[1], arr[2]]\n    if len(arr) == 4:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3]:\n            return [arr[3], arr[2], arr[1], arr[0]]\n        elif arr[1] > arr[2] and arr[1] > arr[0] and arr[1] > arr[3]:\n            return [arr[0], arr[3], arr[2], arr[1]]\n        elif arr[2] > arr[0] and arr[2] > arr[1] and arr[2] > arr[3]:\n            return [arr[1], arr[0], arr[3], arr[2]]\n        elif arr[3] > arr[0] and arr[3] > arr[1] and arr[3] > arr[2]:\n            return [arr[2], arr[1], arr[0], arr[3]]\n        else:\n            return [arr[0], arr[1], arr[2], arr[3]]\n    if len(arr) == 5:\n        if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4]:\n            return [arr[4], arr[3], arr[2], arr[1], arr[0]]\n        elif arr[1] > arr[2] and arr[1] > arr[0] and arr[1] > arr[3] and arr[1] > arr[4]:\n            return [arr[0], arr[4], arr[3], arr[2], arr[1]]\n        elif arr[2] > arr[0] and arr[2] > arr[1] and arr[2] > arr[3] and arr[2] > arr[4]:\n            return [arr[1], arr[0], arr[4], arr[3], arr[2]]\n        elif arr[3] > arr[0] and arr[3] > arr[1] and arr[3] > arr[2] and arr[3] > arr[4]:\n            return [arr[2], arr[1], arr[0], arr[4], arr[3]]\n        elif arr[4] > arr[0] and arr[4] > arr[1] and arr[4] > arr[2] and arr[4] > arr[3]:\n            return [arr[3], arr[2], arr[1], arr[0], arr[4]]\n       "], ["def solution(lst):\n    # Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    #  \n\n    # Examples\n    # solution([5, 8, 7, 1]) ==> 12\n    # solution([3, 3, 3, 3, 3]) ==> 9\n    # solution([30, 13, 24, 321]) ==>0\n    # solution([1, 2, 3, 4, 5]) ==> 15\n    # solution([1, 2, 3, 4, 5, 6]) ==> 21\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> 28\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) ==> 100\n\n    # Solution:\n    # 1. Create a list of even numbers\n    # 2. Create a list of odd numbers\n    # 3. Create a list of all numbers in the list\n    # 4. Create a list of all odd numbers in the list\n    # 5. Create a list of all even numbers in the list\n    # 6. Create a list of all numbers in the list minus the odd numbers\n    # 7. Create a list of all odd numbers in the list minus the even numbers\n    # 8. Create a list of all even numbers in the list minus the odd numbers\n    # 9. Create a list of all numbers in the list minus the even numbers minus the odd numbers\n    # 10. Create a list of all odd numbers in the list minus the even numbers minus the odd numbers minus the even numbers\n    # 11. Create a list of all even numbers in the list minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd numbers minus the even numbers minus the odd"], ["def add_elements(arr, k):\n    # Given a non-empty array of integers arr and an integer k, return\n    # the sum of the elements with at most two digits from the first k elements of arr.\n\n    # Example:\n\n    #     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    #     Output: 24 # sum of 21 + 3\n\n    # Constraints:\n    #     1. 1 <= len(arr) <= 100\n    #     2. 1 <= k <= len(arr)\n    #     3. 0 <= arr[i] <= 10^9\n\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the sum\n    sum = 0\n\n    # Loop through the array\n    for i in range(k):\n        # Get the current element\n        current = arr[i]\n\n        # If the current element is less than 10, add it to the sum\n        if current < 10:\n            sum += current\n\n        # If the current element is greater than 9, add 10 to the sum\n        elif current > 9:\n            sum += 10\n\n    # Return the sum\n    return sum\n\n"], ["def get_odd_collatz(n):\n    # Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    # The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    # as follows: start with any positive integer n. Then each term is obtained from the \n    # previous term as follows: if the previous term is even, the next term is one half of \n    # the previous term. If the previous term is odd, the next term is 3 times the previous\n    # term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    # Note: \n    #     1. Collatz(1) is [1].\n    #     2. returned list sorted in increasing order.\n\n    # For example:\n    # get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n+1\n        odd_collatz.append(n)\n    return odd_collatz\n"], ["def valid_date(date):\n    # You have to write a function which validates a given date string and\n    # returns True if the date is valid otherwise False.\n    # The date is valid if all of the following rules are satisfied:\n    # 1. The date string is not empty.\n    # 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    # 3. The months should not be less than 1 or higher than 12.\n    # 4. The date should be in the format: mm-dd-yyyy\n\n    # for example: \n    # valid_date('03-11-2000') => True\n\n    # valid_date('15-01-2012') => False\n\n    # valid_date('04-0-2040') => False\n\n    # valid_date('06-04-2020') => True\n\n    # valid_date('06/04/2020') => False\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(txt):\n    # Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    # should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    # Examples\n    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdef\") == 3 \n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) % 2\n"], ["def is_sorted(lst):\n    # Given a list of numbers, return whether or not they are sorted\n    # in ascending order. If list has more than 1 duplicate of the same\n    # number, return False. Assume no negative numbers and only integers.\n\n    # Examples\n    # is_sorted([5]) \u279e True\n    # is_sorted([1, 2, 3, 4, 5]) \u279e True\n    # is_sorted([1, 3, 2, 4, 5]) \u279e False\n    # is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    # is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    # is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    # is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    # is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n"], ["def intersection(interval1, interval2):\n    # You are given two intervals,\n    # where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    # The given intervals are closed which means that the interval (start, end)\n    # includes both start and end.\n    # For each given interval, it is assumed that its start is less or equal its end.\n    # Your task is to determine whether the length of intersection of these two \n    # intervals is a prime number.\n    # Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    # which its length is 1, which not a prime number.\n    # If the length of the intersection is a prime number, return \"YES\",\n    # otherwise, return \"NO\".\n    # If the two intervals don't intersect, return \"NO\".\n\n\n    # [input/output] samples:\n    # intersection((1, 2), (2, 3)) ==> \"NO\"\n    # intersection((-1, 1), (0, 4)) ==> \"NO\"\n    # intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if is_prime(interval1[0] - interval2[0]):\n        return \"YES\"\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    # You are given an array arr of integers and you need to return\n    # sum of magnitudes of integers multiplied by product of all signs\n    # of each number in the array, represented by 1, -1 or 0.\n    # Note: return None for empty arr.\n\n    # Example:\n    # >>> prod_signs([1, 2, 2, -4]) == -9\n    # >>> prod_signs([0, 1]) == 0\n    # >>> prod_signs([]) == None\n    if not arr: return None\n    prod = 1\n    for i in arr:\n        prod *= i\n    return sum(abs(i) * prod for i in arr)\n"], ["def minPath(grid, k):\n    # Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    # each cell of the grid contains a value. Every integer in the range [1, N * N]\n    # inclusive appears exactly once on the cells of the grid.\n\n    # You have to find the minimum path of length k in the grid. You can start\n    # from any cell, and in each step you can move to any of the neighbor cells,\n    # in other words, you can go to cells which share an edge with you current\n    # cell.\n    # Please note that a path of length k means visiting exactly k cells (not\n    # necessarily distinct).\n    # You CANNOT go off the grid.\n    # A path A (of length k) is considered less than a path B (of length k) if\n    # after making the ordered lists of the values on the cells that A and B go\n    # through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    # than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    # such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    # lst_A[j] = lst_B[j].\n    # It is guaranteed that the answer is unique.\n    # Return an ordered list of the values on the cells that the minimum path go through.\n\n    # Examples:\n\n    #     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    #     Output: [1, 2, 1]\n\n    #     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    #     Output: [1]\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp) + k)\n\n    return val\n\n"], ["def tri(n):\n    # Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    # the last couple centuries. However, what people don't know is Tribonacci sequence.\n    # Tribonacci sequence is defined by the recurrence:\n    # tri(1) = 3\n    # tri(n) = 1 + n / 2, if n is even.\n    # tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    # For example:\n    # tri(2) = 1 + (2 / 2) = 2\n    # tri(4) = 3\n    # tri(3) = tri(2) + tri(1) + tri(4)\n    #        = 2 + 3 + 3 = 8 \n    # You are given a non-negative integer number n, you have to a return a list of the \n    # first n + 1 numbers of the Tribonacci sequence.\n    # Examples:\n    # tri(3) = [1, 3, 2, 8]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    # Given a positive integer n, return the product of the odd digits.\n    # Return 0 if all digits are even.\n    # For example:\n    # digits(1)  == 1\n    # digits(4)  == 0\n    # digits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            odd_count += 1\n        product *= int_digit\n    if odd_count == 0:\n        return 0\n    else:\n        return product\n"], ["def is_nested(string):\n    # Create a function that takes a string as input which contains only square brackets.\n    # The function should return True if and only if there is a valid subsequence of brackets \n    # where at least one bracket in the subsequence is nested.\n\n    # is_nested('[[]]') \u279e True\n    # is_nested('[]]]]]]][[[[[]') \u279e False\n    # is_nested('[][]') \u279e False\n    # is_nested('[]') \u279e False\n    # is_nested('[[][]]') \u279e True\n    # is_nested('[[]][[') \u279e True\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    # You are given a list of numbers.\n    # You need to return the sum of squared numbers in the given list,\n    # round each element in the list to the upper int(Ceiling) first.\n    # Examples:\n    # For lst = [1,2,3] the output should be 14\n    # For lst = [1,4,9] the output should be 98\n    # For lst = [1,3,5,7] the output should be 84\n    # For lst = [1.4,4.2,0] the output should be 29\n    # For lst = [-2.4,1,1] the output should be 6\n    #  \n\n    import math\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    # Create a function that returns True if the last character\n    # of a given string is an alphabetical character and is not\n    # a part of a word, and False otherwise.\n    # Note: \"word\" is a group of characters separated by space.\n\n    # Examples:\n    # check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    # check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    # check_if_last_char_is_a_letter(\"\") \u279e False\n    # check_if_last_char_is_a_letter(\" \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple\") \u279e True\n    # check_if_last_char_is_a_letter(\"apple pie\") \u279e True\n    # check_if_last_char_is_a_letter(\"apple pie \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e\") \u279e True\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pie e \") \u279e False\n    # check_"], ["def can_arrange(arr):\n    # Create a function which returns the largest index of an element which\n    # is not greater than or equal to the element immediately preceding it. If\n    # no such element exists then return -1. The given array will not contain\n    # duplicate values.\n\n    # Examples:\n    # can_arrange([1,2,4,3,5]) = 3\n    # can_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n    return ind\n"], ["def largest_smallest_integers(lst):\n    # Create a function that returns a tuple (a, b), where 'a' is\n    # the largest of negative integers, and 'b' is the smallest\n    # of positive integers in a list.\n    # If there is no negative or positive integers, return them as None.\n\n    # Examples:\n    # largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    # largest_smallest_integers([]) == (None, None)\n    # largest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n    if len(smallest) == 0:\n        return largest, None\n    elif len(largest) == 0:\n        return smallest, None\n    else:\n        return largest[0], smallest[0]\n\n"], ["def compare_one(a, b):\n    # Create a function that takes integers, floats, or strings representing\n    # real numbers, and returns the larger variable in its given variable type.\n    # Return None if the values are equal.\n    # Note: If a real number is represented as a string, the floating point might be . or ,\n\n    # compare_one(1, 2.5) \u279e 2.5\n    # compare_one(1, \"2,3\") \u279e \"2,3\"\n    # compare_one(\"5,1\", \"6\") \u279e \"6\"\n    # compare_one(\"1\", 1) \u279e None\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if temp_a > temp_b: return temp_a\n    elif temp_a < temp_b: return temp_b\n    else: return None\n"], ["def is_equal_to_sum_even(n):\n    # Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    # Example\n    # is_equal_to_sum_even(4) == False\n    # is_equal_to_sum_even(6) == False\n    # is_equal_to_sum_even(8) == True\n    # is_equal_to_sum_even(10) == True\n    # is_equal_to_sum_even(12) == True\n    # is_equal_to_sum_even(14) == True\n    # is_equal_to_sum_even(16) == True\n    # is_equal_to_sum_even(18) == True\n    # is_equal_to_sum_even(20) == True\n    # is_equal_to_sum_even(22) == True\n    # is_equal_to_sum_even(24) == True\n    # is_equal_to_sum_even(26) == True\n    # is_equal_to_sum_even(28) == True\n    # is_equal_to_sum_even(30) == True\n    # is_equal_to_sum_even(32) == True\n    # is_equal_to_sum_even(34) == True\n    # is_equal_to_sum_even(36) == True\n    # is_equal_to_sum_even(38) == True\n    # is_equal_to_sum_even(40) == True\n    # is_equal_to_sum_even(42) == True\n    # is_equal_to_sum_even(44) == True\n    # is_equal_to_sum_even(46) == True\n    # is_equal_to_sum_even(48) == True\n    # is_equal_to_sum_even(50) == True\n    # is_equal_to_sum_even(52) == True\n    # is_equal_to_sum_even(54) == True\n    # is_equal_to_sum_even(56) == True\n    # is_equal_to_sum_even(58) == True\n    # is_equal_to_sum_even(60) == True\n    # is_equal_to_sum_even(62) == True\n    # is_equal_to_sum_even(64) == True\n    # is_equal_to_sum_even(66) == True\n    # is_equal_to_sum_even(68) == True\n    # is_equal_to_sum_even(70) == True\n    # is_equal_to_sum_even(72) == True\n    # is_equal_to_sum_even(74) == True\n    # is_equal_to_sum_even(76) == True\n    # is_equal_to_sum_even(78) == True\n    # is_equal_to_sum_even(80) == True\n    # is_equal_to_sum_even(82) == True\n    # is_equal_to_sum_even(84) == True\n    # is_equal_to_sum_even(86) == True\n    # is_equal_to_sum_even(88) == True\n    # is_equal_to_sum_even(90) == True\n    # is_equal_to_sum_even(92) == True\n    # is_equal_to_sum_even(94) == True\n    # is_equal_to_sum_even(96) == True\n    # is_equal_to_sum_even(98) == True\n    # is_equal_to_sum_even(100) == True\n    # is_equal_to_sum_even(102) == True\n    # is_equal_to_sum_even(104) == True\n    # is_equal_to_sum_even(106) == True\n    # is_equal_to_sum_even(108) == True\n    # is_equal_to_sum_even(110) == True\n    # is_equal_to_sum_even(112) == True\n    # is_equal_to_sum_even(114) == True\n    # is_equal_to_sum_even(116)"], ["def special_factorial(n):\n    # The Brazilian factorial is defined as:\n    # brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    # where n > 0\n\n    # For example:\n    # >>> special_factorial(4)\n    # 288\n\n    # The function will receive an integer as input and should return the special\n    # factorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n    return special_fact\n"], ["def fix_spaces(text):\n    # Given a string text, replace all spaces in it with underscores, \n    # and if a string has more than 2 consecutive spaces, \n    # then replace all consecutive spaces with - \n    #  \n    # fix_spaces(\"Example\") == \"Example\"\n    # fix_spaces(\"Example 1\") == \"Example_1\"\n    # fix_spaces(\" Example 2\") == \"_Example_2\"\n    # fix_spaces(\" Example   3\") == \"_Example-3\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n"], ["def file_name_check(file_name):\n    # Create a function which takes a string representing a file's name, and returns\n    # 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    # A file's name is considered to be valid if and only if all the following conditions \n    # are met:\n    # - There should not be more than three digits ('0'-'9') in the file's name.\n    # - The file's name contains exactly one dot '.'\n    # - The substring before the dot should not be empty, and it starts with a letter from \n    # the latin alphapet ('a'-'z' and 'A'-'Z').\n    # - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    # Examples:\n    # file_name_check(\"example.txt\") # => 'Yes'\n    # file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    return 'Yes'\n"], ["def sum_squares(lst):\n    # \"\n    # This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    # multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    # change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    #  \n    # Examples:\n    # For lst = [1,2,3] the output should be 6\n    # For lst = []  the output should be 0\n    # For lst = [-1,-5,2,-1,-5]  the output should be -126\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i %4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    # You are given a string representing a sentence,\n    # the sentence contains some words separated by a space,\n    # and you have to return a string that contains the words from the original sentence,\n    # whose lengths are prime numbers,\n    # the order of the words in the new string should be the same as the original one.\n\n    # Example 1:\n    #     Input: sentence = \"This is a test\"\n    #     Output: \"is\"\n\n    # Example 2:\n    #     Input: sentence = \"lets go for swimming\"\n    #     Output: \"go for\"\n\n    # Constraints:\n    #     * 1 <= len(sentence) <= 100\n    #     * sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    # Your task is to implement a function that will simplify the expression\n    # x * n. The function returns True if x * n evaluates to a whole number and False\n    # otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    # <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    # You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    # simplify(\"1/5\", \"5/1\") = True\n    # simplify(\"1/6\", \"2/1\") = False\n    # simplify(\"7/10\", \"10/2\") = False\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    # Write a function which sorts the given list of integers\n    # in ascending order according to the sum of their digits.\n    # Note: if there are several items with similar sum of their digits,\n    # order them based on their index in original list.\n\n    # For example:\n    # >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    # >>> order_by_points([]) == []\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    # Write a function that takes an array of numbers as input and returns \n    # the number of elements in the array that are greater than 10 and both \n    # first and last digits of a number are odd (1, 3, 5, 7, 9).\n    # For example:\n    # specialFilter([15, -73, 14, -15]) => 1 \n    # specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n"], ["def get_max_triples(n):\n    # You are given a positive integer n. You have to create an integer array a of length n.\n    #     For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    #     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple of 3.\n\n    # Example :\n    #     Input: n = 5\n    #     Output: 1\n    #     Explanation: \n    #     a = [1, 3, 7, 13, 21]\n    #     The only valid triple is (1, 7, 13).\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    # There are eight planets in our solar system: the closerst to the Sun \n    # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    # Uranus, Neptune.\n    # Write a function that takes two planet names as strings planet1 and planet2. \n    # The function should return a tuple containing all planets whose orbits are \n    # located between the orbit of planet1 and the orbit of planet2, sorted by \n    # the proximity to the sun. \n    # The function should return an empty tuple if planet1 or planet2\n    # are not correct planet names. \n    # Examples\n    # bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    # bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    # bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    orbit1 = (planet1_index, planet2_index)\n    orbit2 = (planet2_index, planet1_index)\n    orbit_list = []\n    for i in range(1000000):\n        if orbit1 in orbit_list:\n            orbit1 = (orbit1[0], orbit1[1] - 1)\n        else:\n            orbit_list.append(orbit1)\n        if orbit2 in orbit_list:\n            orbit2 = (orbit2[0], orbit2[1] - 1)\n        else:\n            orbit_list.append(orbit2)\n    return orbit_list\n\n\nAnswer: def bf(planet1, planet2):\n    # There are eight planets in our solar system: the closerst to the Sun \n    # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    # Uranus, Neptune.\n    # Write a function that takes two planet names as strings planet1 and planet2. \n    # The function should return a tuple containing all planets whose orbits are \n    # located between the orbit of planet1 and the orbit of planet2, sorted by \n    # the proximity to the sun. \n    # The function should return an empty tuple if planet1 or planet2\n    # are not correct planet names. \n    # Examples\n    # bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    # bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    # bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    orbit1 = (planet1_index, planet2_index)\n    orbit2 = (planet2_index, planet1_index)\n    orbit_list = []\n    for i in range(1000000):\n        if orbit1 in orbit_list:\n            orbit1 = (orbit1[0], orbit1[1] - 1)\n        else:\n            orbit_list.append(orbit1)\n        if orbit2 in orbit_list:\n            orbit2 = (orbit2[0], orbit2[1] - 1)\n        else:\n            orbit_list.append(orbit2)\n    return orbit_list\n\n\nAnswer: def bf(planet1, planet2):\n    # There are eight planets in our solar system: the closerst to the Sun \n    # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    # Uranus, Neptune.\n    # Write a function that takes two planet names as strings planet1 and planet2. \n    # The function should return a tuple containing all planets whose orbits are \n    # located"], ["def sorted_list_sum(lst):\n    # Write a function that accepts a list of strings as a parameter,\n    # deletes the strings that have odd lengths from it,\n    # and returns the resulted list with a sorted order,\n    # The list is always a list of strings and never an array of numbers,\n    # and it may contain duplicates.\n    # The order of the list should be ascending by length of each word, and you\n    # should return the list sorted by that rule.\n    # If two words have the same length, sort the list alphabetically.\n    # The function should return a list of strings in sorted order.\n    # You may assume that all words will have the same length.\n    # For example:\n    # assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    # assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    # A simple program which should return the value of x if n is \n    # a prime number and should return the value of y otherwise.\n\n    # Examples:\n    # for x_or_y(7, 34, 12) == 34\n    # for x_or_y(15, 8, 5) == 5\n    #  \n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            break\n    else:\n        return x\n    return x_or_y(n - 1, x, y)\n"], ["def double_the_difference(lst):\n    # Given a list of numbers, return the sum of squares of the numbers\n    # in the list that are odd. Ignore numbers that are negative or not integers.\n    #  \n    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    # double_the_difference([-1, -2, 0]) == 0\n    # double_the_difference([9, -2]) == 81\n    # double_the_difference([0]) == 0  \n   \n    # If the input list is empty, return 0.\n    if not lst:\n        return 0\n    else:\n        return sum(x * x for x in lst if x % 2)\n"], ["def compare(game,guess):\n    # I think we all remember that feeling when the result of some long-awaited\n    # event is finally known. The feelings and thoughts you have at that moment are\n    # definitely worth noting down and comparing.\n    # Your task is to determine if a person correctly guessed the results of a number of matches.\n    # You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    # Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    # the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    #  \n    #  \n    # example:\n\n    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    # compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0"], ["def Strongest_Extension(class_name, extensions):\n    # You will be given the name of a class (a string) and a list of extensions.\n    # The extensions are to be used to load additional classes to the class. The\n    # strength of the extension is as follows: Let CAP be the number of the uppercase\n    # letters in the extension's name, and let SM be the number of lowercase letters \n    # in the extension's name, the strength is given by the fraction CAP - SM. \n    # You should find the strongest extension and return a string in this \n    # format: ClassName.StrongestExtensionName.\n    # If there are two or more extensions with the same strength, you should\n    # choose the one that comes first in the list.\n    # For example, if you are given \"Slices\" as the class and a list of the\n    # extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    # (its strength is -1).\n    # Example:\n    # for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    # You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    # cycpattern_check(\"abcd\",\"abd\") => False\n    # cycpattern_check(\"hello\",\"ell\") => True\n    # cycpattern_check(\"whassup\",\"psus\") => False\n    # cycpattern_check(\"abab\",\"baa\") => True\n    # cycpattern_check(\"efef\",\"eeff\") => False\n    # cycpattern_check(\"himenss\",\"simen\") => True\n\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    # Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    #  Example:\n    #     even_odd_count(-12) ==> (1, 1)\n    #     even_odd_count(123) ==> (1, 2)\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"], ["def int_to_mini_roman(number):\n    # Given a positive integer, obtain its roman numeral equivalent as a string,\n    # and return it in lowercase.\n    # Restrictions: 1 <= num <= 1000\n\n    # Examples:\n    # >>> int_to_mini_roman(19) == 'xix'\n    # >>> int_to_mini_roman(152) == 'clii'\n    # >>> int_to_mini_roman(426) == 'cdxxvi'\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number:\n        res += sym[number % 10]\n        number //= 10\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    # Given the lengths of the three sides of a triangle. Return True if the three\n    # sides form a right-angled triangle, False otherwise.\n    # A right-angled triangle is a triangle in which one angle is right angle or \n    # 90 degree.\n    # Example:\n    # right_angle_triangle(3, 4, 5) == True\n    # right_angle_triangle(1, 2, 3) == False\n    # right_angle_triangle(1, 2, 4) == False\n    # right_angle_triangle(1, 2, 5) == False\n    # right_angle_triangle(1, 3, 4) == False\n    # right_angle_triangle(1, 3, 5) == False\n    # right_angle_triangle(1, 4, 5) == False\n    # right_angle_triangle(2, 3, 4) == False\n    # right_angle_triangle(2, 3, 5) == False\n    # right_angle_triangle(2, 4, 5) == False\n    # right_angle_triangle(3, 4, 5) == False\n    # right_angle_triangle(1, 2, 3) == False\n    # right_angle_triangle(1, 2, 4) == False\n    # right_angle_triangle(1, 2, 5) == False\n    # right_angle_triangle(1, 3, 4) == False\n    # right_angle_triangle(1, 3, 5) == False\n    # right_angle_triangle(1, 4, 5) == False\n    # right_angle_triangle(2, 3, 4) == False\n    # right_angle_triangle(2, 3, 5) == False\n    # right_angle_triangle(2, 4, 5) == False\n    # right_angle_triangle(3, 4, 5) == False\n    # right_angle_triangle(1, 2, 3) == False\n    # right_angle_triangle(1, 2, 4) == False\n    # right_angle_triangle(1, 2, 5) == False\n    # right_angle_triangle(1, 3, 4) == False\n    # right_angle_triangle(1, 3, 5) == False\n    # right_angle_triangle(1, 4, 5) == False\n    # right_angle_triangle(2, 3, 4) == False\n    # right_angle_triangle(2, 3, 5) == False\n    # right_angle_triangle(2, 4, 5) == False\n    # right_angle_triangle(3, 4, 5) == False\n    # right_angle_triangle(1, 2, 3) == False\n    # right_angle_triangle(1, 2, 4) == False\n    # right_angle_triangle(1, 2, 5) == False\n    # right_angle_triangle(1, 3, 4) == False\n    # right_angle_triangle(1, 3, 5) == False\n    # right_angle_triangle(1, 4, 5) == False\n    # right_angle_triangle(2, 3, 4) == False\n    # right_angle_triangle(2, 3, 5) == False\n    # right_angle_triangle(2, 4, 5) == False\n    # right_angle_triangle(3, 4, 5) == False\n    # right_angle_triangle(1, 2, 3) == False\n    # right_angle_triangle(1, 2, 4) == False\n    # right_angle_triangle(1, 2, 5) == False\n    # right_angle_triangle(1, 3, 4) == False\n    # right_angle_triangle(1, 3, 5) == False\n    # right_angle_triangle(1, 4, 5) == False\n    # right_angle_triangle(2, 3, 4) == False\n    # right_angle_triangle(2, 3, 5) == False\n    # right_angle_triangle(2, 4, 5) == False\n    # right_angle_triangle(3, 4, 5) == False\n    # right_angle_triangle(1, 2, 3) == False\n   "], ["def find_max(words):\n    # Write a function that accepts a list of strings.\n    # The list contains different words. Return the word with maximum number\n    # of unique characters. If multiple strings have maximum number of unique\n    # characters, return the one which comes first in lexicographical order.\n\n    # find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    # find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\"]) == \"bb\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\"]) == \"cc\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\"]) == \"dd\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\"]) == \"ee\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\"]) == \"ff\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\"]) == \"gg\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\"]) == \"hh\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\"]) == \"ii\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\"]) == \"jj\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\"]) == \"kk\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\"]) == \"ll\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\"]) == \"mm\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\"]) == \"nn\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\"]) == \"oo\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\"]) == \"pp\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\"]) == \"qq\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\"]) == \"rr\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\"]) == \"ss\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \""], ["def eat(number, need, remaining):\n    # You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    # but now you need to eat more carrots to complete the day's meals.\n    # you should return an array of [ total number of eaten carrots after your meals,\n    #                                 the number of carrots left after your meals ]\n    # if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    #  \n    # Example:\n    # * eat(5, 6, 10) -> [11, 4]\n    # * eat(4, 8, 9) -> [12, 1]\n    # * eat(1, 10, 10) -> [11, 0]\n    # * eat(2, 11, 5) -> [7, 0]\n    #  \n    # Variables:\n    # @number : integer\n    #     the number of carrots that you have eaten.\n    # @need : integer\n    #     the number of carrots that you need to eat.\n    # @remaining : integer\n    #     the number of remaining carrots thet exist in stock\n    #  \n    # Constrain:\n    # * 0 <= number <= 1000\n    # * 0 <= need <= 1000\n    # * 0 <= remaining <= 1000\n\n    # Have fun :)\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0 ]\n"], ["def do_algebra(operator, operand):\n    # Given two lists operator, and operand. The first list has basic algebra operations, and \n    # the second list is a list of integers. Use the two given lists to build the algebric \n    # expression and return the evaluation of this expression.\n\n    # The basic algebra operations:\n    # Addition ( + ) \n    # Subtraction ( - ) \n    # Multiplication ( * ) \n    # Floor division ( // ) \n    # Exponentiation ( ** ) \n\n    # Example:\n    # operator['+', '*', '-']\n    # array = [2, 3, 4, 5]\n    # result = 2 + 3 * 4 - 5\n    # => result = 9\n\n    # Note:\n    #     The length of operator list is equal to the length of operand list minus one.\n    #     Operand is a list of of non-negative integers.\n    #     Operator list has at least one operator, and operand list has at least two operands.\n\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + expression\n\n    return eval(expression)\n"], ["def solve(s):\n    # You are given a string s.\n    # if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    # otherwise keep it as it is.\n    # If the string contains no letters, reverse the string.\n    # The function should return the resulted string.\n    # Examples\n    # solve(\"1234\") = \"4321\"\n    # solve(\"ab\") = \"AB\"\n    # solve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        else:\n            new_str[idx] = i\n        idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n"], ["def string_to_md5(text):\n    # Given a string 'text', return its md5 hash equivalent string.\n    # If 'text' is an empty string, return None.\n\n    # >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    # Given two positive integers a and b, return the even digits between a\n    # and b, in ascending order.\n\n    # For example:\n    # generate_integers(2, 8) => [2, 4, 6, 8]\n    # generate_integers(8, 2) => [2, 4, 6, 8]\n    # generate_integers(10, 14) => []\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance <= threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n        elif c == ' ':\n            pass\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses')\n\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n                max_depth = max(max_depth, depth)\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if not is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n            continue\n        else:\n            break\n\n    return string[beginning_of_suffix:beginning_of_suffix + 1] + make_palindrome(string[beginning_of_suffix + 1:])\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        elif i == '0':\n            return '1'\n        elif j == '0':\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n                elif abs(elem - elem2) < distance:\n                    closest_pair = (elem, elem2)\n                    distance = abs(elem - elem2)\n\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    seen[numbers[0]] = 1\n    for number in numbers[1:]:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    return [number for number, count in seen.items() if count == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i], l[i + 1], l[i + 2] = l[i + 2], l[i + 1], l[i]\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n    ans.extend(odds)\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n):\n            if is_prime(i):\n                yield i\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for i in range(4, n + 1):\n        results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8922746\n    if n == 37:\n        return 14473055\n    if n == 38:\n        return 23700986\n    if n == 39:\n        return 38015595\n    if n == 40:\n        return 61510294\n    if n == 41:\n        return 98077193\n    if n == 42:\n        return 150000000\n    if n == 43:\n        return 240000000\n    if n == 44:\n        return 380000000\n    if n == 45:\n        return 670000000\n    if n == 46:\n        return 1020000000\n    if n == 47:\n        return 1650000000\n    if n == 48:\n        return 2670000000\n    if n == 49:\n        return 4330000000\n    if n == 50:\n        return 7000000000\n    if n == 51:\n        return 11200000000\n    if n == 52:\n        return 18300000000\n    if n == 53:\n       "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[:shift] + s[len(s) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i == 'apples':\n            lis.append(1)\n        elif i == 'oranges':\n            lis.append(2)\n        elif i == 'mango':\n            lis.append(3)\n    return sum(lis)\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return [arr[0], 0]\n    return [evens[0], evens.index(min(evens))]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n            break\n\n    return ans\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n\n    return True\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < n):\n        power = power * 2\n    return (x == power)\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    if a == 0:\n        return True\n    if a % 2 == 0:\n        return False\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    if a % 5 == 0:\n        return False\n    if a % 6 == 0:\n        return False\n    if a % 7 == 0:\n        return False\n    if a % 8 == 0:\n        return False\n    if a % 9 == 0:\n        return False\n    if a % 10 == 0:\n        return False\n    return True\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      if s[i] == s[i+1] and s[i] == s[i+2]:\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        elif gpa == 0.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"F\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return sum(1 for i in range(n) if i == 1 or i == n-1)\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return sum(1 for word in S.split() if word.startswith(\"I\"))\n\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.lower()\n    message = message.replace(vowels, vowels_replace)\n    return message\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return sum(str(i).zfill(len(str(i))))\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"mixed\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n            else:\n                raise Exception(\"Invalid state\")\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    else:\n        return int(num)\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        elif letter == \" \":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split('')))\n\n    return sum(map(digits_sum, arr))\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    max_value=max(arr)\n    for i in range(len(arr)):\n      if arr[i]>=min_value and arr[i]<=max_value:\n        my_arr.append(arr[i])\n    if len(my_arr)==len(arr):\n      return True\n    else:\n      return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return s,s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(arr) - arr.count('0'))\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(max_sum, s)\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the buckets are lowered\n    # 2. Initialize a counter to count the number of times the buckets are filled\n    # 3. Initialize a counter to count the number of times the buckets are empty\n    # 4. Initialize a counter to count the number of times the buckets are full\n    # 5. Initialize a counter to count the number of times the buckets are empty\n    # 6. Initialize a counter to count the number of times the buckets are full\n    # 7. Initialize a counter to count the number of times the buckets are empty\n    # 8. Initialize a counter to count the number of times the buckets are full\n    # 9. Initialize a counter to count the number of times the buckets are empty\n    # 10. Initialize a counter to count the number of times the buckets are full\n    # 11. Initialize a counter to count the number of times the buckets are empty\n    # 12. Initialize a counter to count the number of times the buckets are full\n    # 13. Initialize a counter to count the number of times the buckets are empty\n    # 14. Initialize a counter to count the number of times the buckets are full\n    # 15. Initialize a counter to count the number of times the buckets are empty\n    # 16. Initialize a counter to count the number of times the buckets are full\n    # 17. Initialize a counter to count the number of times the buckets are empty\n    # 18. Initialize a counter to count the number of times the buckets are full\n    # 19. Initialize a counter to count the number of times the buckets are empty\n    # 20. Initialize a counter to count the number of times the buckets are full\n    # 21. Initialize a counter to count the number of times the buckets are empty\n    # 22. Initialize a counter to count the number of times the buckets are full\n    # 23. Initialize a counter to count the number of times the buckets are empty\n    # 24. Initialize a counter to count the number of times the buckets are full\n    # 25. Initialize a counter to count the number of times the buckets are empty\n    # 26. Initialize a counter to count the number of times the buckets are full\n    # 27. Initialize a counter to count the number of times the buckets are empty\n    # 28. Initialize a counter to count the number of times the buckets are full\n    # 29. Initialize a counter to count the number of times the buckets are empty\n    # 30. Initialize a counter to count the number of times the buckets are full\n    # 31. Initialize a counter to count the number of times the buckets are empty\n    # 32. Initialize a counter to count the number of times the buckets are full\n    # 33. Initialize a counter to count the number of times the buckets are empty\n    # 34. Initialize a counter to count the number of times the buckets are full\n    # 35. Initialize a counter to count the number of times the buckets are empty\n    # 36. Initialize a counter to count the number of times the buckets are full\n    # 37. Initialize a counter to count the number"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    left_side = word[1:]\n    right_side = word[:1]\n\n    if right_side in vowels:\n        return right_side\n    elif left_side in vowels:\n        return left_side\n    else:\n        return \"\"\n\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    if len(lst) == 2:\n        return check(lst[0]) and check(lst[1])\n    else:\n        return 'No'\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return max(arr[0], arr[1])\n    if k == 3:\n        return max(arr[0], max(arr[1], arr[2]))\n    if k == 4:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n    if k == 5:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n    if k == 6:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n    if k == 7:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n    if k == 8:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n    if k == 9:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n    if k == 10:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n    if k == 11:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n    if k == 12:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n    if k == 13:\n        return max(arr[0], max(arr["], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n+1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2 + 1\n\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if is_prime(interval1[0] - interval2[0]):\n        return \"YES\"\n    if is_prime(interval2[0] - interval1[0]):\n        return \"YES\"\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return sum(abs(i) * prod for i in arr)\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp) + k)\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            odd_count += 1\n        else:\n            product *= int_digit\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 1\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n    return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, None\n    elif len(largest) == 0:\n        return smallest, None\n    else:\n        return largest[0], smallest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if temp_a > temp_b: return temp_a\n    elif temp_a < temp_b: return temp_b\n    else: return None\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n    return special_fact\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    return 'Yes'\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i %4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    orbit1 = orbit2 = 0\n    while orbit1 < len(planet_names) and orbit2 < len(planet_names):\n        if planet_names[orbit1] == planet_names[orbit2]:\n            orbit1 += 1\n            orbit2 += 1\n        elif planet_names[orbit1] < planet_names[orbit2]:\n            orbit1 += 1\n        else:\n            orbit2 += 1\n    return (planet_names[orbit1], planet_names[orbit2])\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n    return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number:\n        res += sym[i]\n        number -= num[i]\n        i -= 1\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0 ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + expression\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        else:\n            new_str[idx] = i\n        idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance <= threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n        elif c == ' ':\n            pass\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses')\n\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n\n    for op in operations:\n        balance += op\n\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n                max_depth = max(max_depth, depth)\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    sum_value = 0\n    prod_value = 1\n\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if not is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n            continue\n        else:\n            break\n\n    return string[beginning_of_suffix:beginning_of_suffix + 1] + make_palindrome(string[beginning_of_suffix + 1:])\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return '0'\n        elif i == '0':\n            return '1'\n        elif j == '0':\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    lengths = [len(s) for s in strings]\n    return max(lengths, key=lengths.index)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n\n    numbers = numbers.split()\n    numbers = [value_map[n] for n in numbers]\n    numbers.sort()\n    return ' '.join([str(n) for n in numbers])\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n                elif abs(elem - elem2) < distance:\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n\n    return [\n        (number - min_number) / (max_number - min_number)\n        for number in numbers\n    ]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    import collections\n\n    seen = collections.Counter()\n    seen[numbers[0]] = 1\n    for number in numbers[1:]:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n\n    return [number for number, count in seen.items() if count == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    l = list(l)\n    l.sort()\n    l.reverse()\n    l.sort(key=lambda x: x % 3)\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n    ans.extend(odds)\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n):\n            if is_prime(i):\n                yield i\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for i in range(4, n + 1):\n        results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8922746\n    if n == 37:\n        return 14473055\n    if n == 38:\n        return 23700986\n    if n == 39:\n        return 38015595\n    if n == 40:\n        return 61510294\n    if n == 41:\n        return 98077193\n    if n == 42:\n        return 150000000\n    if n == 43:\n        return 240000000\n    if n == 44:\n        return 380000000\n    if n == 45:\n        return 670000000\n    if n == 46:\n        return 1020000000\n    if n == 47:\n        return 1650000000\n    if n == 48:\n        return 2670000000\n    if n == 49:\n        return 4330000000\n    if n == 50:\n        return 7000000000\n    if n == 51:\n        return 11200000000\n    if n == 52:\n        return 18300000000\n    if n == 53:\n       "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[:shift] + s[len(s) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    lis = list()\n    for i in s.split(' '):\n        if i == 'apples':\n            lis.append(1)\n        elif i == 'oranges':\n            lis.append(2)\n        elif i == 'mango':\n            lis.append(3)\n        else:\n            lis.append(0)\n    return sum(lis)\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return []\n    return [evens[0], evens.index(min(evens))]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n            break\n\n    return ans\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n\n    return res\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n\n    return True\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < n):\n        power = power * 2\n    return (x == power)\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    if a == 0:\n        return True\n    elif a % 1 == 0:\n        return False\n    else:\n        return iscube(a // 1) and iscube(a // 1) == a % 1\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      if s[i] == s[i + 1] and s[i] == s[i + 2]:\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        elif gpa == 0.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"F\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 1\n    if n == 4: return 1\n    if n == 5: return 1\n    if n == 6: return 1\n    if n == 7: return 1\n    if n == 8: return 1\n    if n == 9: return 1\n    if n == 10: return 1\n    if n == 11: return 1\n    if n == 12: return 1\n    if n == 13: return 1\n    if n == 14: return 1\n    if n == 15: return 1\n    if n == 16: return 1\n    if n == 17: return 1\n    if n == 18: return 1\n    if n == 19: return 1\n    if n == 20: return 1\n    if n == 21: return 1\n    if n == 22: return 1\n    if n == 23: return 1\n    if n == 24: return 1\n    if n == 25: return 1\n    if n == 26: return 1\n    if n == 27: return 1\n    if n == 28: return 1\n    if n == 29: return 1\n    if n == 30: return 1\n    if n == 31: return 1\n    if n == 32: return 1\n    if n == 33: return 1\n    if n == 34: return 1\n    if n == 35: return 1\n    if n == 36: return 1\n    if n == 37: return 1\n    if n == 38: return 1\n    if n == 39: return 1\n    if n == 40: return 1\n    if n == 41: return 1\n    if n == 42: return 1\n    if n == 43: return 1\n    if n == 44: return 1\n    if n == 45: return 1\n    if n == 46: return 1\n    if n == 47: return 1\n    if n == 48: return 1\n    if n == 49: return 1\n    if n == 50: return 1\n    if n == 51: return 1\n    if n == 52: return 1\n    if n == 53: return 1\n    if n == 54: return 1\n    if n == 55: return 1\n    if n == 56: return 1\n    if n == 57: return 1\n    if n == 58: return 1\n    if n == 59: return 1\n    if n == 60: return 1\n    if n == 61: return 1\n    if n == 62: return 1\n    if n == 63: return 1\n    if n == 64: return 1\n    if n == 65: return 1\n    if n == 66: return 1\n    if n == 67: return 1\n    if n == 68: return 1\n    if n == 69: return 1\n    if n == 70: return 1\n    if n == 71: return 1\n    if n == 72: return 1\n    if n == 73: return 1\n    if n == 74: return 1\n    if n == 75: return 1\n    if n == 76: return 1\n    if n == 77: return 1\n    if n == 78: return 1\n    if n == 79: return 1\n    if n == 80: return 1\n    if n == 81: return 1\n    if n == 82: return 1\n    if n == 83: return 1\n    if n == 84: return 1\n    if n == 85: return 1\n    if n == 86: return 1\n    if n == 87: return 1\n    if n == 88: return 1\n    if n == 89: return "], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    import re\n\n    # Count the number of boredoms\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n\n    return boredoms\n\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.lower()\n    message = message.replace(vowels, vowels_replace)\n    return message\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return sum(str(i).zfill(len(str(i))))\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"mixed\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n            else:\n                raise Exception(\"Invalid state\")\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    else:\n        if num > 0:\n            return int(num)\n        else:\n            return int(num) - 1\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        elif letter == \" \":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split('')))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    max_value=max(arr)\n    for i in range(len(arr)):\n      if arr[i]>=min_value and arr[i]<=max_value:\n        my_arr.append(arr[i])\n    if len(my_arr)==len(arr):\n      return True\n    else:\n      return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    res = []\n    for arr in lst:\n        res.append(len(arr) - arr.count('0'))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(max_sum, s)\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the buckets are lowered\n    # 2. Initialize a counter to count the number of times the buckets are filled\n    # 3. Initialize a counter to count the number of times the buckets are empty\n    # 4. Initialize a counter to count the number of times the buckets are full\n    # 5. Initialize a counter to count the number of times the buckets are empty\n    # 6. Initialize a counter to count the number of times the buckets are full\n    # 7. Initialize a counter to count the number of times the buckets are empty\n    # 8. Initialize a counter to count the number of times the buckets are full\n    # 9. Initialize a counter to count the number of times the buckets are empty\n    # 10. Initialize a counter to count the number of times the buckets are full\n    # 11. Initialize a counter to count the number of times the buckets are empty\n    # 12. Initialize a counter to count the number of times the buckets are full\n    # 13. Initialize a counter to count the number of times the buckets are empty\n    # 14. Initialize a counter to count the number of times the buckets are full\n    # 15. Initialize a counter to count the number of times the buckets are empty\n    # 16. Initialize a counter to count the number of times the buckets are full\n    # 17. Initialize a counter to count the number of times the buckets are empty\n    # 18. Initialize a counter to count the number of times the buckets are full\n    # 19. Initialize a counter to count the number of times the buckets are empty\n    # 20. Initialize a counter to count the number of times the buckets are full\n    # 21. Initialize a counter to count the number of times the buckets are empty\n    # 22. Initialize a counter to count the number of times the buckets are full\n    # 23. Initialize a counter to count the number of times the buckets are empty\n    # 24. Initialize a counter to count the number of times the buckets are full\n    # 25. Initialize a counter to count the number of times the buckets are empty\n    # 26. Initialize a counter to count the number of times the buckets are full\n    # 27. Initialize a counter to count the number of times the buckets are empty\n    # 28. Initialize a counter to count the number of times the buckets are full\n    # 29. Initialize a counter to count the number of times the buckets are empty\n    # 30. Initialize a counter to count the number of times the buckets are full\n    # 31. Initialize a counter to count the number of times the buckets are empty\n    # 32. Initialize a counter to count the number of times the buckets are full\n    # 33. Initialize a counter to count the number of times the buckets are empty\n    # 34. Initialize a counter to count the number of times the buckets are full\n    # 35. Initialize a counter to count the number of times the buckets are empty\n    # 36. Initialize a counter to count the number of times the buckets are full\n    # 37. Initialize a counter to count the number"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    left_side = word[1:]\n    right_side = word[:1]\n\n    if right_side in vowels:\n        return right_side\n    elif left_side in vowels:\n        return left_side\n    else:\n        return \"\"\n\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    return check(lst[0]) and check(lst[1])\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k == 0:\n        return []\n\n    arr.sort()\n    return arr[:k]\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n+1\n        odd_collatz.append(n)\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2 + 1\n\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if is_prime(interval1[0] - interval2[0]):\n        return \"YES\"\n    if is_prime(interval2[0] - interval1[0]):\n        return \"YES\"\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr: return None\n\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp) + k)\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            odd_count += 1\n        else:\n            product *= int_digit\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n    import math\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    ind=-1\n    i=1\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n    return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n\n    if len(smallest) == 0:\n        return largest, None\n\n    if len(largest) == 0:\n        return smallest, None\n\n    if smallest[0] > largest[0]:\n        return largest, smallest[0]\n    else:\n        return smallest, largest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    return 'Yes'\n\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i %4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    orbit1 = orbit2 = 0\n    while orbit1 < planet1_index:\n        orbit1 += 1\n    while orbit2 < planet2_index:\n        orbit2 += 1\n    return (planet_names[orbit1], planet_names[orbit2])\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n    return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number:\n        res += sym[i]\n        number -= num[i]\n        i -= 1\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0 ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + expression\n\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        else:\n            new_str[idx] = i\n        idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n\n        for idx2, elem2 in enumerate(numbers):\n\n            if idx != idx2:\n\n                distance = abs(elem - elem2)\n\n                if distance <= threshold:\n                    return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n\n    current_depth = 0\n\n\n\n    for c in paren_string:\n\n        if c == '(':\n            current_depth += 1\n\n            current_string.append(c)\n\n        elif c == ')':\n            current_depth -= 1\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n\n        elif c == ' ':\n            pass\n\n        else:\n            raise ValueError(f'Invalid character {c} in input string.')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses in input string.')\n\n    return result\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n\n        return []\n\n\n    result = []\n\n\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n                max_depth = max(max_depth, depth)\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    running_max = None\n\n    result = []\n\n\n\n    for n in numbers:\n\n        if running_max is None:\n\n            running_max = n\n\n        else:\n\n            if n > running_max:\n\n                running_max = n\n\n        result.append(running_max)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n\n        return ''\n\n\n\n    beginning_of_suffix = 0\n    end_of_suffix = len(string) - 1\n    while beginning_of_suffix < end_of_suffix:\n        if not is_palindrome(string[beginning_of_suffix:end_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            end_of_suffix -= 1\n\n    return string[beginning_of_suffix:end_of_suffix + 1]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        elif i == '0':\n            return '1'\n        elif j == '0':\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n\n        return None\n\n    lengths = [len(s) for s in strings]\n    return max(lengths, key=lengths.count)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n\n        'zero': 0,\n        'one': 1,\n\n        'two': 2,\n\n        'three': 3,\n\n        'four': 4,\n\n        'five': 5,\n\n        'six': 6,\n\n        'seven': 7,\n\n        'eight': 8,\n\n        'nine': 9,\n    }\n\n    numbers = numbers.split()\n    numbers = [value_map[n] for n in numbers]\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest_pair = None\n    distance = None\n\n\n    for idx, elem in enumerate(numbers):\n\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n\n                elif abs(elem - elem2) < distance:\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n\n    return [\n        (number - min_number) / (max_number - min_number)\n        for number in numbers\n    ]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    seen[numbers[0]] = 1\n    for number in numbers[1:]:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    return [number for number, count in seen.items() if count == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    l = list(l)\n    l.sort()\n    l.reverse()\n    l.sort(key=lambda x: x % 3)\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    ns = []\n\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    evens = l[::2]\n\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        ans.append(odds[i])\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    import math\n\n    def is_prime(p):\n\n        if p < 2:\n\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n):\n            if is_prime(i):\n                return i\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    ret = \"\"\n\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    results = [0, 0, 2, 0]\n\n    if n < 4:\n\n        return results[n]\n\n    for i in range(4, n + 1):\n\n        results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n\n    for b in brackets:\n\n        if b == \"<\":\n\n            depth += 1\n\n        elif b == \">\":\n\n            depth -= 1\n\n        if depth < 0:\n\n            return False\n\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n\n    for e1 in l1:\n\n        for e2 in l2:\n\n            if e1 == e2:\n                ret.add(e1)\n                break\n\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n\n        if b == \"(\":\n\n            depth += 1\n\n        elif b == \")\":\n\n            depth -= 1\n\n        if depth < 0:\n\n            return False\n\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n\n        return 0\n    if n == 1:\n\n        return 0\n    if n == 2:\n\n        return 1\n    if n == 3:\n\n        return 1\n    if n == 4:\n\n        return 2\n    if n == 5:\n\n        return 3\n    if n == 6:\n\n        return 5\n    if n == 7:\n\n        return 8\n    if n == 8:\n\n        return 13\n    if n == 9:\n\n        return 21\n    if n == 10:\n\n        return 34\n    if n == 11:\n\n        return 55\n    if n == 12:\n\n        return 89\n    if n == 13:\n\n        return 144\n    if n == 14:\n\n        return 233\n    if n == 15:\n\n        return 377\n    if n == 16:\n\n        return 610\n    if n == 17:\n\n        return 987\n    if n == 18:\n\n        return 1597\n    if n == 19:\n\n        return 2584\n    if n == 20:\n\n        return 4181\n    if n == 21:\n\n        return 6765\n    if n == 22:\n\n        return 10946\n    if n == 23:\n\n        return 17711\n    if n == 24:\n\n        return 28657\n    if n == 25:\n\n        return 46368\n    if n == 26:\n\n        return 75025\n    if n == 27:\n\n        return 121393\n    if n == 28:\n\n        return 196418\n    if n == 29:\n\n        return 317811\n    if n == 30:\n\n        return 514229\n    if n == 31:\n\n        return 832040\n    if n == 32:\n\n        return 1346269\n    if n == 33:\n\n        return 2178309\n    if n == 34:\n\n        return 3524578\n    if n == 35:\n\n        return 5702887\n    if n == 36:\n\n        return 8922746\n    if n == 37:\n\n        return 14473055\n    if n == 38:\n\n        return 23700986\n    if n == 39:\n\n        return 38015595\n    if n == 40:\n\n        return 61510294\n    if n == 41:\n\n        return 98077193\n    if n == 42:\n\n        return 150000000\n    if n == 43:\n\n        return 240000000\n    if n == 44:\n\n        return 380000000\n    if n == 45:\n\n        return 670000000\n    if n == 46:\n\n        return 1020000000\n    if n == 47:\n\n        return 1650000000\n    if n == 48:\n\n        return 2670000000\n    if n == 49:\n\n        return 4330000000\n    if n == 50:\n\n        return 7000000000\n    if n == 51:\n\n        return 11200000000\n    if n == 52:\n\n        return 18300000000\n    if n == 53:\n\n       "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[:shift] + s[len(s) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    lis = list()\n    for i in s.split(' '):\n        if i == 'apples':\n            lis.append(1)\n        elif i == 'oranges':\n            lis.append(2)\n        elif i == 'mango':\n            lis.append(3)\n        else:\n            lis.append(0)\n    return sum(lis)\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return [arr[0], 0]\n    return [evens[0], evens.index(min(evens))]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n            break\n\n    return ans\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n\n    return res\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n\n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n\n    return True\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n\n    return ans\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    l1 = 0\n\n    for st in lst1:\n\n        l1 += len(st)\n    \n\n    l2 = 0\n\n    for st in lst2:\n\n        l2 += len(st)\n\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n\n        for j in range(2,n):\n\n            if n%j == 0:\n\n                return False\n        return True\n\n    for i in range(2,101):\n\n        if is_prime(i):\n\n            return True\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < n):\n        power = power * 2\n    return (x == power)\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    if a == 0:\n        return True\n    if a % 2 == 0:\n        return False\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    if a % 5 == 0:\n        return False\n    if a % 6 == 0:\n        return False\n    if a % 7 == 0:\n        return False\n    if a % 8 == 0:\n        return False\n    if a % 9 == 0:\n        return False\n    if a % 10 == 0:\n        return False\n    return True\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n\n      return False\n\n\n    for i in range(len(s) - 2):\n\n      if s[i] == s[i + 1] and s[i] == s[i + 2]:\n\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n\n    letter_grade = []\n    for gpa in grades:\n\n        if gpa == 4.0:\n\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n\n        elif gpa > 3.3:\n\n            letter_grade.append(\"A-\")\n\n        elif gpa > 3.0:\n\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n\n        elif gpa > 2.3:\n\n            letter_grade.append(\"B-\")\n\n        elif gpa > 2.0:\n\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n\n        elif gpa > 1.3:\n\n            letter_grade.append(\"C-\")\n\n        elif gpa > 1.0:\n\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n\n        elif gpa > 0.0:\n\n            letter_grade.append(\"D-\")\n\n        elif gpa == 0.0:\n\n            letter_grade.append(\"E\")\n\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n\n    if l == 0 or l == 1:\n\n        return False\n\n    for i in range(2, l):\n\n        if string[i] == string[i - 1]:\n\n            return False\n\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return sum(1 for i in range(n) if i == 1 or i == n-1)\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return sum(1 for word in S.split() if word.startswith(\"I\"))\n\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.lower()\n    message = message.replace(vowels, vowels_replace)\n    return message\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n\n                return False\n\n        return True\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return sum(str(i).zfill(len(str(i))))\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if len(dict.keys()) == 0:\n        return False\n\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n\n            if isinstance(key, str) == False:\n\n                state = \"mixed\"\n\n                break\n            if state == \"start\":\n\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n\n            elif state == \"mixed\":\n\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n\n            elif state == \"upper\":\n\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n\n            elif state == \"lower\":\n\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    primes = []\n\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    from math import floor, ceil\n\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n\n        while (value[-1] == '0'):\n\n            value = value[:-1]\n\n\n    num = float(value)\n\n    if value[-2:] == '.5':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    else:\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n\n        return []\n\n\n    s_list = []\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\n    if y % 2 == 0:\n        return y\n\n    return choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n\n        return -1\n\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    dic = {\n\n        1: \"One\",\n\n        2: \"Two\",\n\n        3: \"Three\",\n\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n\n    for i in range(1,n+1):\n\n        if i%2 == 0:\n\n            x = 1\n            for j in range(1,i+1): x *= j\n\n            ret.append(x)\n\n        else:\n\n            ret.append(i)\n\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n\n        return str(n) == str(n)[::-1]\n\n\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split('')))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n\n    my_arr=[]\n\n    \n\n    min_value=min(arr)\n    max_value=max(arr)\n    for i in range(len(arr)):\n      if arr[i]>=min_value and arr[i]<=max_value:\n        my_arr.append(arr[i])\n    if len(my_arr)==len(arr):\n      return True\n    else:\n      return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    odd = 0\n    even = 0\n\n    for i in lst1:\n\n        if i%2 == 1:\n            odd += 1\n\n    for i in lst2:\n\n        if i%2 == 0:\n            even += 1\n\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    dict1={}\n\n    list1=test.split(\" \")\n    t=0\n\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(arr) - arr.count('0'))\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    max_sum = 0\n    s = 0\n\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(max_sum, s)\n\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the buckets are lowered\n    # 2. Initialize a counter to count the number of times the buckets are filled\n    # 3. Initialize a counter to count the number of times the buckets are empty\n    # 4. Initialize a counter to count the number of times the buckets are full\n    # 5. Initialize a counter to count the number of times the buckets are empty\n    # 6. Initialize a counter to count the number of times the buckets are full\n    # 7. Initialize a counter to count the number of times the buckets are empty\n    # 8. Initialize a counter to count the number of times the buckets are full\n    # 9. Initialize a counter to count the number of times the buckets are empty\n    # 10. Initialize a counter to count the number of times the buckets are full\n    # 11. Initialize a counter to count the number of times the buckets are empty\n    # 12. Initialize a counter to count the number of times the buckets are full\n    # 13. Initialize a counter to count the number of times the buckets are empty\n    # 14. Initialize a counter to count the number of times the buckets are full\n    # 15. Initialize a counter to count the number of times the buckets are empty\n    # 16. Initialize a counter to count the number of times the buckets are full\n    # 17. Initialize a counter to count the number of times the buckets are empty\n    # 18. Initialize a counter to count the number of times the buckets are full\n    # 19. Initialize a counter to count the number of times the buckets are empty\n    # 20. Initialize a counter to count the number of times the buckets are full\n    # 21. Initialize a counter to count the number of times the buckets are empty\n    # 22. Initialize a counter to count the number of times the buckets are full\n    # 23. Initialize a counter to count the number of times the buckets are empty\n    # 24. Initialize a counter to count the number of times the buckets are full\n    # 25. Initialize a counter to count the number of times the buckets are empty\n    # 26. Initialize a counter to count the number of times the buckets are full\n    # 27. Initialize a counter to count the number of times the buckets are empty\n    # 28. Initialize a counter to count the number of times the buckets are full\n    # 29. Initialize a counter to count the number of times the buckets are empty\n    # 30. Initialize a counter to count the number of times the buckets are full\n    # 31. Initialize a counter to count the number of times the buckets are empty\n    # 32. Initialize a counter to count the number of times the buckets are full\n    # 33. Initialize a counter to count the number of times the buckets are empty\n    # 34. Initialize a counter to count the number of times the buckets are full\n    # 35. Initialize a counter to count the number of times the buckets are empty\n    # 36. Initialize a counter to count the number of times the buckets are full\n    # 37. Initialize a counter to count the number"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n\n\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    vowels_count = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_count += 1\n\n    if vowels_count == 0:\n        return \"\"\n\n    if vowels_count == 1:\n        return word[i]\n\n    if vowels_count == 2:\n        return word[i]\n\n    if vowels_count == 3:\n        return word[i]\n\n    return \"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n\n                val = val + 1\n\n            else:\n\n                val = val - 1\n\n        return val == 0\n\n    return check(lst[0]) and check(lst[1])\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k == 0:\n        return []\n\n    arr.sort()\n    return arr[:k]\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n%2==0:\n\n        odd_collatz = [] \n\n    else:\n        odd_collatz = [n]\n\n    while n > 1:\n\n        if n % 2 == 0:\n\n            n = n/2\n\n        else:\n\n            n = 3*n + 1\n\n        odd_collatz.append(n)\n\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month == 2 and day < 1 or day > 29:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2\n\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0) for i in lst])\n\n    for i in lst:\n\n        count_digit[i]+=1 \n\n    if any(count_digit[i] > 2 for i in lst):\n\n        return False\n\n    return True"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(num):\n\n        if num == 1 or num == 0:\n\n            return False\n\n        if num == 2:\n\n            return True\n        for i in range(2, num):\n\n            if num%i == 0:\n\n                return False\n\n        return True\n\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n\n        return is_prime(interval1[1] - interval2[0])\n\n    return \"NO\"\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr: return None\n\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    n = len(grid)\n\n    val = n * n + 1\n\n    for i in range(n):\n\n        for j in range(n):\n\n            if grid[i][j] == 1:\n\n                temp = []\n                if i != 0:\n\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n\n                    temp.append(grid[i][j - 1])\n\n\n\n                if i != n - 1:\n\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp) + k)\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n\n    for digit in str(n):\n\n        int_digit = int(digit)\n\n        if int_digit%2 == 1:\n            odd_count += 1\n\n        product *= int_digit\n\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n\n    return cnt == len(opening_bracket_index)\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n\n    squared = 0\n    for i in lst:\n        squared += i ** 2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n\n    i=1\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n\n    return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, None\n    elif len(largest) == 0:\n        return smallest, None\n    else:\n        return largest[0], smallest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    new_text = \"\"\n\n    i = 0\n    start, end = 0, 0\n\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            else:\n                new_text += text[i]\n            start = end\n\n        i += 1\n\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n\n    if len(lst[0]) == 0:\n        return 'No'\n    if lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n\n    return 'Yes'\n\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i %4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    new_lst = []\n\n    for word in sentence.split():\n\n        flg = 0\n        if len(word) == 1:\n\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n\n            flg = 1\n\n        if flg == 1:\n\n            new_lst.append(word)\n\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n\n    c, d = n.split(\"/\")\n\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    \n    count = 0\n\n    for num in nums:\n        if num > 10:\n\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    orbit1 = orbit2 = 0\n    while orbit1 < planet1_index:\n        orbit1 += 1\n    while orbit2 < planet2_index:\n        orbit2 += 1\n    return (planet_names[orbit1], planet_names[orbit2])\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 1:\n\n        return y\n\n    for i in range(2, n):\n\n        if n % i == 0:\n\n            return x\n\n    return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n\n    for s in extensions:\n\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n\n    pat = b + b\n\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even_count = 0\n\n    odd_count = 0\n\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n\n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n\n    res = ''\n    while number:\n        res += sym[number % 10]\n        number //= 10\n\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if(need <= remaining):\n\n        return [ number + need , remaining-need ]\n\n    else:\n\n        return [ number , remaining ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + expression\n\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    flg = 0\n    idx = 0\n\n    new_str = list(s)\n\n    for i in s:\n        if i.isalpha():\n\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n\n        else:\n            new_str[idx] = i\n            idx += 1\n\n    if flg == 0:\n        new_str = new_str[::-1]\n\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n\n            if idx != idx2:\n\n                distance = abs(elem - elem2)\n\n                if distance <= threshold:\n                    return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    current_string = []\n\n    current_depth = 0\n\n\n\n    for c in paren_string:\n\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n\n        elif c == ')':\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n\n        elif c == ' ':\n            pass\n\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses')\n\n    return result\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n\n    for op in operations:\n\n        balance += op\n\n        if balance < 0:\n            return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n\n        max_depth = 0\n        for c in s:\n            if c == '(':\n\n                depth += 1\n                max_depth = max(max_depth, depth)\n\n            elif c == ')':\n                depth -= 1\n                if depth == 0:\n                    max_depth += 1\n\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n\n    for n in numbers:\n        if running_max is None:\n\n            running_max = n\n            result.append(n)\n            continue\n\n        if n > running_max:\n            running_max = n\n            result.append(n)\n            continue\n\n        if n == running_max:\n            result.append(n)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n\n        return ''\n\n\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while end_of_suffix < len(string):\n        if is_palindrome(string[end_of_suffix:]):\n            end_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n\n    return string[beginning_of_suffix:end_of_suffix + 1]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        elif i == '0':\n            return '1'\n        elif j == '0':\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    lengths = [len(s) for s in strings]\n    return max(lengths, key=lengths.index)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    times = 0\n\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    value_map = {\n        'zero': 0,\n        'one': 1,\n\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n\n    numbers = numbers.split()\n    numbers = [value_map[n] for n in numbers]\n\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n\n    distance = None\n\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                else:\n                    distance = min(distance, abs(elem - elem2))\n\n    if distance is None:\n        return None, None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance == abs(elem - elem2):\n                    if closest_pair is None:\n                        closest_pair = (elem, elem2)\n                    else:\n                        closest_pair = min((elem, elem2), closest_pair)\n\n    return closest_pair[0], closest_pair[1]\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n\n        if n % i == 0:\n\n            fact.append(i)\n            n //= i\n\n        i += 1\n\n    if n > 1:\n        fact.append(n)\n\n    return fact\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    import collections\n\n    seen = collections.Counter()\n    seen[numbers[0]] = 1\n    for number in numbers[1:]:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n\n    return [number for number, count in seen.items() if count == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n\n        return False\n\n    for k in range(2, n - 1):\n\n        if n % k == 0:\n\n            return False\n\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n\n    while poly(xs, begin) * poly(xs, end) > 0:\n\n        begin *= 2.0\n\n        end *= 2.0\n\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i], l[i + 1], l[i + 2] = l[i + 2], l[i + 1], l[i]\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    ns = []\n\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n\n            ns.append(i)\n\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n\n    odds = l[1::2]\n    evens.sort()\n\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        ans.append(odds[i])\n\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    import math\n\n\n\n    def is_prime(p):\n\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n\n            if p % k == 0:\n\n                return False\n\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n):\n            if is_prime(i):\n                yield i\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    results = [0, 0, 2, 0]\n\n    if n < 4:\n        return results[n]\n\n    for i in range(4, n + 1):\n        results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n\n        if b == \"<\":\n\n            depth += 1\n\n        elif b == \">\":\n\n            depth -= 1\n\n        if depth < 0:\n\n            return False\n\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n\n    for e1 in l1:\n\n        for e2 in l2:\n\n            if e1 == e2:\n                ret.add(e1)\n                break\n\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n\n            if k % i == 0:\n\n                return False\n\n        return True\n\n    if n == 1:\n        return 1\n\n    for i in range(2, int(n ** 0.5) + 1):\n\n        if is_prime(i):\n\n            return i\n\n    return n\n\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    depth = 0\n\n    for b in brackets:\n        if b == \"(\":\n\n            depth += 1\n\n        elif b == \")\":\n\n            depth -= 1\n\n        if depth < 0:\n            return False\n\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n\n        return 0\n    if n == 1:\n\n        return 0\n    if n == 2:\n\n        return 1\n    if n == 3:\n\n        return 1\n    if n == 4:\n\n        return 2\n    if n == 5:\n\n        return 3\n    if n == 6:\n\n        return 5\n    if n == 7:\n\n        return 8\n    if n == 8:\n\n        return 13\n    if n == 9:\n\n        return 21\n    if n == 10:\n\n        return 34\n    if n == 11:\n\n        return 55\n    if n == 12:\n\n        return 89\n    if n == 13:\n\n        return 144\n    if n == 14:\n\n        return 233\n    if n == 15:\n\n        return 377\n    if n == 16:\n\n        return 610\n    if n == 17:\n\n        return 987\n    if n == 18:\n\n        return 1597\n    if n == 19:\n\n        return 2584\n    if n == 20:\n\n        return 4181\n    if n == 21:\n\n        return 6765\n    if n == 22:\n\n        return 10946\n    if n == 23:\n\n        return 17711\n    if n == 24:\n\n        return 28657\n    if n == 25:\n\n        return 46368\n    if n == 26:\n\n        return 75025\n    if n == 27:\n\n        return 121393\n    if n == 28:\n\n        return 196418\n    if n == 29:\n\n        return 317811\n    if n == 30:\n\n        return 514229\n    if n == 31:\n\n        return 832040\n    if n == 32:\n\n        return 1346269\n    if n == 33:\n\n        return 2178309\n    if n == 34:\n\n        return 3524578\n    if n == 35:\n\n        return 5702887\n    if n == 36:\n\n        return 8922746\n    if n == 37:\n\n        return 14473055\n    if n == 38:\n\n        return 23700986\n    if n == 39:\n\n        return 38015595\n    if n == 40:\n\n        return 61510294\n    if n == 41:\n\n        return 98077193\n    if n == 42:\n\n        return 150000000\n    if n == 43:\n\n        return 240000000\n    if n == 44:\n\n        return 380000000\n    if n == 45:\n\n        return 670000000\n    if n == 46:\n\n        return 1020000000\n    if n == 47:\n\n        return 1650000000\n    if n == 48:\n\n        return 2670000000\n    if n == 49:\n\n        return 4330000000\n    if n == 50:\n\n        return 7000000000\n    if n == 51:\n\n        return 11200000000\n    if n == 52:\n\n        return 18300000000\n    if n == 53:\n\n       "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n\n    n_vowels = sum(c in vowels for c in s)\n\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[:shift] + s[len(s) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n\n    for i in s.split(' '):\n        if i == 'apples':\n            lis.append(1)\n        elif i == 'oranges':\n            lis.append(2)\n        elif i == 'mango':\n            lis.append(3)\n        else:\n            lis.append(0)\n\n    return sum(lis)\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return [arr[0], 0]\n    return [evens[0], evens.index(min(evens))]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n\n        frq[i] += 1;\n\n\n    ans = -1\n    for i in frq:\n        if i >= ans:\n            ans = i\n\n    return ans\n\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n\n    while lst:\n\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n\n        switch = not switch\n\n    return res\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b <= c or a + c <= b or b + c <= a:\n\n        return -1 \n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n\n        return False\n\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    l1 = 0\n    for st in lst1:\n\n        l1 += len(st)\n\n    \n\n    l2 = 0\n\n    for st in lst2:\n\n        l2 += len(st)\n\n    if l1 == l2:\n\n        return lst1\n\n    else:\n\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n\n        for j in range(2,n):\n            if n%j == 0:\n\n                return False\n        return True\n\n\n\n    for i in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < n):\n        power = power * 2\n    return (x == power)\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    if a == 0:\n        return True\n    elif a % 1 == 0:\n        return False\n    else:\n        return iscube(a // 1) and iscube(a // 1) == a % 1\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    primes = ('2', '3', '5', '7', 'B', 'D')\n\n    total = 0\n\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n\n    for i in range(len(s) - 2):\n      if s[i] == s[i+1] and s[i] == s[i+2]:\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n\n            letter_grade.append(\"B+\")\n\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n\n        elif gpa > 2.3:\n\n            letter_grade.append(\"B-\")\n\n        elif gpa > 2.0:\n\n            letter_grade.append(\"C+\")\n\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n\n        elif gpa > 1.3:\n\n            letter_grade.append(\"C-\")\n\n        elif gpa > 1.0:\n\n            letter_grade.append(\"D+\")\n\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n\n        elif gpa > 0.0:\n\n            letter_grade.append(\"D-\")\n\n        elif gpa == 0.0:\n\n            letter_grade.append(\"E\")\n\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n\n    if l == 0 or l == 1:\n\n        return False\n\n    for i in range(2, l):\n\n        if string[i] == string[i - 1]:\n\n            return False\n\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return sum(1 for i in range(n) if i == 1 or i == n-1)\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    import re\n\n    # Count the number of boredoms\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n\n    return boredoms\n\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n\n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n\n    return \"\".join([vowels_replace[i] if i in vowels else i for i in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n\n    return sum(str(i).isdigit() for i in str(maxx))\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if len(dict.keys()) == 0:\n\n        return False\n    else:\n\n        state = \"start\"\n        for key in dict.keys():\n\n\n\n            if isinstance(key, str) == False:\n\n                state = \"mixed\"\n                break\n\n            if state == \"start\":\n\n                if key.isupper():\n\n                    state = \"upper\"\n\n                else:\n\n                    state = \"lower\"\n\n            elif state == \"mixed\":\n\n                if key.isupper():\n\n                    state = \"upper\"\n\n                else:\n\n                    state = \"lower\"\n\n            elif state == \"upper\":\n\n                if key.islower():\n\n                    state = \"lower\"\n\n                else:\n\n                    state = \"mixed\"\n\n            elif state == \"lower\":\n\n                if key.islower():\n\n                    state = \"lower\"\n\n                else:\n\n                    state = \"mixed\"\n\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    primes = []\n    for i in range(2, n):\n\n        is_prime = True\n\n        for j in range(2, i):\n\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n\n\n\n    if value.count('.') == 1:\n\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n\n\n    num = float(value)\n\n    if value[-2:] == '.5':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == '.0':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == '.':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'e':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'E':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'f':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'F':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'd':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'D':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'c':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'C':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'b':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'B':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'm':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'M':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'k':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'K':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'n':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'N':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'p':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'P':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 't':\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    if value[-2:] == 'T':\n        if num > 0:"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n\n        return []\n\n\n\n    s_list = []\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n        return -1\n\n    if y % 2 == 0:\n        return y\n\n    return choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    dic = {\n\n        1: \"One\",\n\n        2: \"Two\",\n        3: \"Three\",\n\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1,n+1):\n\n        if i%2 == 0:\n            x = 1\n\n            for j in range(1,i+1): x *= j\n\n            ret.append(x)\n        else:\n            ret.append(i)\n\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n\n        return str(n) == str(n)[::-1]\n\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n\n        if n < 0: n, neg = -1 * n, -1\n\n        return sum(map(abs, str(n).split('')))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    if len(arr)==0:\n\n      return True\n\n    sorted_array=sorted(arr)\n    my_arr=[]\n\n    \n\n    min_value=min(arr)\n    max_value=max(arr)\n\n    for i in range(len(arr)):\n      if arr[i]>=min_value and arr[i]<=max_value:\n        my_arr.append(arr[i])\n\n    if sorted_array==my_arr:\n      return True\n    else:\n      return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n\n    for i in lst1:\n        if i%2 == 1:\n\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n\n            even += 1\n\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    dict1={}\n\n    list1=test.split(\" \")\n\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    res = []\n\n    for arr in lst:\n        res.append(len(arr) - arr.count('0'))\n\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(max_sum, s)\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the buckets are lowered\n    # 2. Initialize a counter to count the number of times the buckets are filled\n    # 3. Initialize a counter to count the number of times the buckets are empty\n    # 4. Initialize a counter to count the number of times the buckets are full\n    # 5. Initialize a counter to count the number of times the buckets are empty\n    # 6. Initialize a counter to count the number of times the buckets are full\n    # 7. Initialize a counter to count the number of times the buckets are empty\n    # 8. Initialize a counter to count the number of times the buckets are full\n    # 9. Initialize a counter to count the number of times the buckets are empty\n    # 10. Initialize a counter to count the number of times the buckets are full\n    # 11. Initialize a counter to count the number of times the buckets are empty\n    # 12. Initialize a counter to count the number of times the buckets are full\n    # 13. Initialize a counter to count the number of times the buckets are empty\n    # 14. Initialize a counter to count the number of times the buckets are full\n    # 15. Initialize a counter to count the number of times the buckets are empty\n    # 16. Initialize a counter to count the number of times the buckets are full\n    # 17. Initialize a counter to count the number of times the buckets are empty\n    # 18. Initialize a counter to count the number of times the buckets are full\n    # 19. Initialize a counter to count the number of times the buckets are empty\n    # 20. Initialize a counter to count the number of times the buckets are full\n    # 21. Initialize a counter to count the number of times the buckets are empty\n    # 22. Initialize a counter to count the number of times the buckets are full\n    # 23. Initialize a counter to count the number of times the buckets are empty\n    # 24. Initialize a counter to count the number of times the buckets are full\n    # 25. Initialize a counter to count the number of times the buckets are empty\n    # 26. Initialize a counter to count the number of times the buckets are full\n    # 27. Initialize a counter to count the number of times the buckets are empty\n    # 28. Initialize a counter to count the number of times the buckets are full\n    # 29. Initialize a counter to count the number of times the buckets are empty\n    # 30. Initialize a counter to count the number of times the buckets are full\n    # 31. Initialize a counter to count the number of times the buckets are empty\n    # 32. Initialize a counter to count the number of times the buckets are full\n    # 33. Initialize a counter to count the number of times the buckets are empty\n    # 34. Initialize a counter to count the number of times the buckets are full\n    # 35. Initialize a counter to count the number of times the buckets are empty\n    # 36. Initialize a counter to count the number of times the buckets are full\n    # 37. Initialize a counter to count the number"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n\n        if n_consonants == n:\n            result.append(word)\n\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    if len(word) < 3:\n        return \"\"\n\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    left_side = word[1:]\n    right_side = word[:1]\n\n    if right_side in vowels:\n        return right_side\n    elif left_side in vowels:\n        return left_side\n    else:\n        return \"\"\n\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def check(s):\n        val = 0\n        for i in s:\n\n            if i == '(':\n\n                val = val + 1\n            else:\n\n                val = val - 1\n\n            if val < 0:\n\n                return 'No'\n\n        return 'Yes'\n\n    return check(lst[0]) + match_parens(lst[1:])\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n\n        return []\n\n    if k == 1:\n\n        return arr\n\n    if k == 2:\n\n        return max(arr[0], arr[1])\n\n    if k == 3:\n\n        return max(arr[0], max(arr[1], arr[2]))\n\n    if k == 4:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n\n    if k == 5:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n\n    if k == 6:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n\n    if k == 7:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n\n    if k == 8:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n\n    if k == 9:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n\n    if k == 10:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n\n    if k == 11:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n\n    if k == 12:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n\n    if k == 13:\n\n        return max(arr[0], max(arr["], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n%2==0:\n\n        odd_collatz = [] \n\n    else:\n\n        odd_collatz = [n]\n\n    while n > 1:\n        if n % 2 == 0:\n\n            n = n/2\n\n        else:\n\n            n = 3*n + 1\n\n        odd_collatz.append(n)\n\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month == 2 and day < 1 or day > 29:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n\n            return False\n        if"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2 + 1\n\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(num):\n\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if is_prime(interval1[0] - interval2[0]):\n        return \"YES\"\n    if is_prime(interval2[0] - interval1[0]):\n        return \"YES\"\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr: return None\n\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    n = len(grid)\n\n    val = n * n + 1\n    for i in range(n):\n\n        for j in range(n):\n\n            if grid[i][j] == 1:\n                temp = []\n\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n\n                if j != 0:\n\n                    temp.append(grid[i][j - 1])\n\n\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp))\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    product = 1\n    odd_count = 0\n\n    for digit in str(n):\n\n        int_digit = int(digit)\n\n        if int_digit%2 == 1:\n            odd_count += 1\n\n        product *= int_digit\n\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    opening_bracket_index = []\n\n    closing_bracket_index = []\n\n    for i in range(len(string)):\n        if string[i] == '[':\n\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    ind=-1\n    i=1\n\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n\n    return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, None\n    elif len(largest) == 0:\n        return smallest, None\n    else:\n        return largest[0], smallest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if temp_a > temp_b: return temp_a\n    elif temp_a < temp_b: return temp_b\n    else: return None\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n\n    for i in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n\n    return special_fact\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n\n    i = 0\n\n    start, end = 0, 0\n    while i < len(text):\n\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            else:\n                new_text += text[i]\n\n            start = end\n\n        i += 1\n\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n\n    if len(lst) != 2:\n\n        return 'No'\n\n    if not lst[1] in suf:\n        return 'No'\n\n    if len(lst[0]) == 0:\n        return 'No'\n\n    if lst[0][0].isalpha():\n        return 'No'\n\n    return 'Yes'\n\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n\n    for i in range(len(lst)):\n\n        if i %3 == 0:\n\n            result.append(lst[i]**2)\n\n        elif i %4 == 0:\n\n            result.append(lst[i]**3)\n\n        else:\n\n            result.append(lst[i])\n\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    new_lst = []\n    for word in sentence.split():\n\n        flg = 0\n        if len(word) == 1:\n\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n\n            flg = 1\n\n        if flg == 1:\n\n            new_lst.append(word)\n\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    a, b = x.split(\"/\")\n\n    c, d = n.split(\"/\")\n\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    \n    count = 0\n    for num in nums:\n\n        if num > 10:\n\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    A = [i*i - i + 1 for i in range(1,n+1)]\n\n    ans = []\n    for i in range(n):\n\n        for j in range(i+1,n):\n\n            for k in range(j+1,n):\n\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n\n        return ()\n\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n\n    orbit1 = orbit2 = 0\n    orbit1_index = orbit2_index = 0\n\n    while orbit1_index != planet1_index or orbit2_index != planet2_index:\n\n        if orbit1_index == planet1_index:\n            orbit1 += 1\n            orbit1_index += 1\n        elif orbit2_index == planet2_index:\n            orbit2 += 1\n            orbit2_index += 1\n        else:\n            orbit1_index += 1\n            orbit2_index += 1\n\n    return (planet_names[orbit1_index], planet_names[orbit2_index])\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    lst.sort()\n\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n == 1:\n\n        return y\n\n    for i in range(2, n):\n        if n % i == 0:\n            break\n\n    if n % i == 0:\n        return x\n    else:\n        return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    strong = extensions[0]\n\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n\n        if val > my_val:\n            strong = s\n\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n\n           100, 400, 500, 900, 1000] \n\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n\n    i = 12\n    res = ''\n\n    while number:\n        res += sym[i]\n        number -= num[i]\n        i -= 1\n\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n\n        return [ number + need , remaining-need ]\n    else:\n        return [ number , remaining ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + oprn + expression\n\n    return eval(expression)\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    flg = 0\n\n    idx = 0\n    new_str = list(s)\n\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        else:\n            new_str[idx] = i\n        idx += 1\n\n    if flg == 0:\n        new_str = new_str[::-1]\n\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    lower = max(2, min(a, b))\n\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n\n                distance = abs(elem - elem2)\n                if distance <= threshold:\n                    return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n\n    current_string = []\n\n    current_depth = 0\n\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n\n            current_string.append(c)\n\n        elif c == ')':\n            current_depth -= 1\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n\n        elif c == ' ':\n            pass\n\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses')\n\n    return result\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n\n        return []\n\n    result = []\n\n\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n\n        depth = 0\n\n        max_depth = 0\n\n        for c in s:\n\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n\n            elif c == ')':\n                depth -= 1\n                max_depth = max(max_depth, depth)\n\n            elif c == ' ':\n                pass\n\n            else:\n                raise ValueError(f'Unexpected character {c} in nested parentheses string {paren_string}')\n\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    sum_value = 0\n    prod_value = 1\n\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n\n            running_max = n\n            result.append(n)\n\n        else:\n            if n > running_max:\n                running_max = n\n                result.append(n)\n            else:\n                result.append(running_max)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if not is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n            continue\n        else:\n            break\n\n    return string[beginning_of_suffix:beginning_of_suffix + 1] + make_palindrome(string[beginning_of_suffix + 1:])\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n\n        if i == j:\n\n            return '0'\n\n        if i == '0':\n\n            return '1'\n\n        if j == '0':\n\n            return '1'\n\n        return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n\n        'one': 1,\n        'two': 2,\n\n        'three': 3,\n\n        'four': 4,\n        'five': 5,\n\n        'six': 6,\n        'seven': 7,\n\n        'eight': 8,\n        'nine': 9,\n    }\n\n    numbers = numbers.split()\n    numbers = [value_map[n] for n in numbers]\n    return ' '.join(str(n) for n in sorted(numbers))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n\n            if idx != idx2:\n                if distance is None:\n\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n\n                elif abs(elem - elem2) < distance:\n                    closest_pair = (elem, elem2)\n                    distance = abs(elem - elem2)\n\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n\n        if n % i == 0:\n\n            fact.append(i)\n            n //= i\n\n        i += 1\n\n    if n > 1:\n        fact.append(n)\n\n    return fact\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    seen[numbers[0]] = 1\n    for number in numbers[1:]:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    return [number for number, count in seen.items() if count == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    l = list(l)\n    l.sort()\n    l.reverse()\n    l.sort(key=lambda x: x % 3)\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    m = l[0]\n\n    for e in l:\n        if e > m:\n            m = e\n\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n\n    for i in range(n):\n\n        if i % 11 == 0 or i % 13 == 0:\n\n            ns.append(i)\n\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n    ans.extend(odds)\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n\n        if p < 2:\n\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n\n                return False\n        return True\n\n    if n == 1:\n\n        return 2\n    elif n == 2:\n\n        return 3\n    elif n == 3:\n\n        return 5\n    elif n == 4:\n\n        return 13\n    elif n == 5:\n\n        return 89\n    else:\n\n        for i in range(2, n):\n\n            if is_prime(i):\n\n                return i\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n\n        for j in range(i + 1, len(l)):\n\n            for k in range(j + 1, len(l)):\n\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    ret = \"\"\n\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n\n        return results[n]\n    else:\n        for i in range(4, n + 1):\n            results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n        return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n\n        return 0\n\n    elif n == 1:\n\n        return 1\n\n    else:\n\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n\n            depth += 1\n        elif b == \">\":\n\n            depth -= 1\n        else:\n            return False\n\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n\n        if k < 2:\n\n            return False\n        for i in range(2, k - 1):\n\n            if k % i == 0:\n\n                return False\n\n        return True\n\n    if n == 1:\n\n        return 1\n\n    for i in range(2, int(n ** 0.5) + 1):\n\n        if is_prime(i):\n\n            return i\n\n    return n\n\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n\n    for b in brackets:\n\n        if b == \"(\":\n\n            depth += 1\n\n        elif b == \")\":\n\n            depth -= 1\n\n        if depth < 0:\n\n            return False\n\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 1\n\n    if n == 4:\n        return 2\n\n    if n == 5:\n        return 3\n\n    if n == 6:\n        return 5\n\n    if n == 7:\n        return 8\n\n    if n == 8:\n        return 13\n\n    if n == 9:\n        return 21\n\n    if n == 10:\n        return 34\n\n    if n == 11:\n        return 55\n\n    if n == 12:\n        return 89\n\n    if n == 13:\n        return 144\n\n    if n == 14:\n        return 233\n\n    if n == 15:\n        return 377\n\n    if n == 16:\n        return 610\n\n    if n == 17:\n        return 987\n\n    if n == 18:\n        return 1597\n\n    if n == 19:\n        return 2584\n\n    if n == 20:\n        return 4181\n\n    if n == 21:\n        return 6765\n\n    if n == 22:\n        return 10946\n\n    if n == 23:\n        return 17711\n\n    if n == 24:\n        return 28657\n\n    if n == 25:\n        return 46368\n\n    if n == 26:\n        return 75025\n\n    if n == 27:\n        return 121393\n\n    if n == 28:\n        return 196418\n\n    if n == 29:\n        return 317811\n\n    if n == 30:\n        return 514229\n\n    if n == 31:\n        return 832040\n\n    if n == 32:\n        return 1346269\n\n    if n == 33:\n        return 2178309\n\n    if n == 34:\n        return 3524578\n\n    if n == 35:\n        return 5702887\n\n    if n == 36:\n        return 8922746\n\n    if n == 37:\n        return 14473055\n\n    if n == 38:\n        return 23700988\n\n    if n == 39:\n        return 38015593\n\n    if n == 40:\n        return 61518861\n\n    if n == 41:\n        return 98372444\n\n    if n == 42:\n        return 150040872\n\n    if n == 43:\n        return 240153199\n\n    if n == 44:\n        return 385246956\n\n    if n == 45:\n        return 612332989\n\n    if n == 46:\n        return 932661478\n\n    if n == 47:\n        return 1473321450\n\n    if n == 48:\n        return 2404918888\n\n    if n == 49:\n        return 3900837760\n\n    if n == 50:\n        return 6301675520\n\n    if n == 51:\n        return 9903351040\n\n    if n == 52:\n        return 15106702080\n\n    if n == 53:\n        return "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[:shift] + s[len(s) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    lis = list()\n\n    for i in s.split(' '):\n        if i == 'apples':\n            lis.append(1)\n        elif i == 'oranges':\n            lis.append(2)\n        elif i == 'mango':\n            lis.append(3)\n        else:\n            lis.append(0)\n\n    return sum(lis)\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return [arr[0]]\n\n    return [evens[0], evens[1]]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n\n    for i in lst:\n        frq[i] += 1;\n\n\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n\n    return ans\n\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    res, switch = [], True\n    while lst:\n\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n\n    return res\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b <= c or a + c <= b or b + c <= a:\n\n        return -1 \n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    if sum(q) > w:\n        return False\n\n\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n\n    return ans\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    l1 = 0\n\n    for st in lst1:\n        l1 += len(st)\n    \n\n    l2 = 0\n\n    for st in lst2:\n        l2 += len(st)\n\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n\n        return (x == 1) \n    power = 1\n    while (power < n):\n        power = power * 2\n    return (x == power)\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    if a == 0:\n        return True\n    if a % 2 == 0:\n        return False\n    if a % 3 == 0:\n        return False\n    if a % 4 == 0:\n        return False\n    if a % 5 == 0:\n        return False\n    if a % 6 == 0:\n        return False\n    if a % 7 == 0:\n        return False\n    if a % 8 == 0:\n        return False\n    if a % 9 == 0:\n        return False\n    if a % 10 == 0:\n        return False\n    return True\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n\n      return False\n\n\n\n    for i in range(len(s) - 2):\n\n      if s[i] == s[i + 1] and s[i] == s[i + 2]:\n\n        return False\n\n\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n\n   \n    letter_grade = []\n    for gpa in grades:\n\n        if gpa == 4.0:\n\n            letter_grade.append(\"A+\")\n\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n\n        elif gpa > 3.3:\n\n            letter_grade.append(\"A-\")\n\n        elif gpa > 3.0:\n\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n\n            letter_grade.append(\"B\")\n\n        elif gpa > 2.3:\n\n            letter_grade.append(\"B-\")\n\n        elif gpa > 2.0:\n\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n\n            letter_grade.append(\"D-\")\n        else:\n\n            letter_grade.append(\"E\")\n\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    l = len(string)\n\n    if l == 0 or l == 1:\n        return False\n\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            return False\n\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return sum(1 for i in range(n) if i == 1 or i == n-1)\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    import re\n\n    # Count the number of boredoms\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n\n    return boredoms\n\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n\n    return \"\".join([vowels_replace[i] if i in vowels else i for i in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n\n            if n%i==0:\n                return False\n\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n\n    return sum(str(i).isdigit() for i in str(maxx))\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n\n        return False\n    else:\n\n        state = \"start\"\n        for key in dict.keys():\n\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n\n                break\n\n            if state == \"start\":\n\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n\n            elif state == \"mixed\":\n\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n\n            elif state == \"upper\":\n\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n\n            elif state == \"lower\":\n\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n\n        if state == \"lower\":\n            return True\n        else:\n            return False\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n\n    for i in range(2, n):\n\n        is_prime = True\n\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    from math import floor, ceil\n\n\n    if value.count('.') == 1:\n\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n\n\n    num = float(value)\n    if value[-2:] == '.5':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.0':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.1':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.2':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.3':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.4':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.5':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.6':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.7':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.8':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.9':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.0':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.1':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.2':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.3':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.4':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.5':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.6':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.7':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.8':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.9':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.0':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.1':\n\n        if num > 0"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    if not s:\n        return []\n\n\n    s_list = []\n\n\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        elif letter == \" \":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n\n        return -1\n\n    if y % 2 == 0:\n\n        return y\n\n    else:\n\n        return choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if m < n:\n        return -1\n\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    dic = {\n        1: \"One\",\n\n        2: \"Two\",\n        3: \"Three\",\n\n        4: \"Four\",\n\n        5: \"Five\",\n        6: \"Six\",\n\n        7: \"Seven\",\n\n        8: \"Eight\",\n\n        9: \"Nine\"\n    }\n\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    ret = []\n    for i in range(1,n+1):\n\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n\n        return str(n) == str(n)[::-1]\n\n\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n\n        neg = 1\n\n        if n < 0: n, neg = -1 * n, -1\n\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n\n        return sum + neg\n\n    return sum(map(digits_sum, arr))\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    if len(arr)==0:\n\n      return True\n\n    sorted_array=sorted(arr)\n\n    my_arr=[]\n\n    \n\n    min_value=min(arr)\n    max_value=max(arr)\n\n    for i in range(len(arr)):\n        if arr[i]>=min_value and arr[i]<=max_value:\n            my_arr.append(arr[i])\n\n    if sorted_array==my_arr:\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n\n    even = 0\n    for i in lst1:\n\n        if i%2 == 1:\n            odd += 1\n\n    for i in lst2:\n\n        if i%2 == 0:\n            even += 1\n\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n\n    for i in list1:\n\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n        elif(list1.count(i)==t) and i!='':\n            dict1[i]=list1.count(i)\n        elif(list1.count(i)==0) and i!='':\n            dict1[i]=list1.count(i)\n\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return s,s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    res = []\n\n    for arr in lst:\n        res.append(len(arr) - arr.count('0'))\n\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n\n    for num in nums:\n        s += -num\n\n        if (s < 0):\n            s = 0\n\n        if (s > max_sum):\n            max_sum = s\n\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the buckets are lowered\n    # 2. Initialize a counter to count the number of times the buckets are filled\n    # 3. Initialize a counter to count the number of times the buckets are empty\n    # 4. Initialize a counter to count the number of times the buckets are full\n    # 5. Initialize a counter to count the number of times the buckets are empty\n    # 6. Initialize a counter to count the number of times the buckets are full\n    # 7. Initialize a counter to count the number of times the buckets are empty\n    # 8. Initialize a counter to count the number of times the buckets are full\n    # 9. Initialize a counter to count the number of times the buckets are empty\n    # 10. Initialize a counter to count the number of times the buckets are full\n    # 11. Initialize a counter to count the number of times the buckets are empty\n    # 12. Initialize a counter to count the number of times the buckets are full\n    # 13. Initialize a counter to count the number of times the buckets are empty\n    # 14. Initialize a counter to count the number of times the buckets are full\n    # 15. Initialize a counter to count the number of times the buckets are empty\n    # 16. Initialize a counter to count the number of times the buckets are full\n    # 17. Initialize a counter to count the number of times the buckets are empty\n    # 18. Initialize a counter to count the number of times the buckets are full\n    # 19. Initialize a counter to count the number of times the buckets are empty\n    # 20. Initialize a counter to count the number of times the buckets are full\n    # 21. Initialize a counter to count the number of times the buckets are empty\n    # 22. Initialize a counter to count the number of times the buckets are full\n    # 23. Initialize a counter to count the number of times the buckets are empty\n    # 24. Initialize a counter to count the number of times the buckets are full\n    # 25. Initialize a counter to count the number of times the buckets are empty\n    # 26. Initialize a counter to count the number of times the buckets are full\n    # 27. Initialize a counter to count the number of times the buckets are empty\n    # 28. Initialize a counter to count the number of times the buckets are full\n    # 29. Initialize a counter to count the number of times the buckets are empty\n    # 30. Initialize a counter to count the number of times the buckets are full\n    # 31. Initialize a counter to count the number of times the buckets are empty\n    # 32. Initialize a counter to count the number of times the buckets are full\n    # 33. Initialize a counter to count the number of times the buckets are empty\n    # 34. Initialize a counter to count the number of times the buckets are full\n    # 35. Initialize a counter to count the number of times the buckets are empty\n    # 36. Initialize a counter to count the number of times the buckets are full\n    # 37. Initialize a counter to count the number"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    result = []\n    for word in s.split():\n\n        n_consonants = 0\n\n        for i in range(0, len(word)):\n\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n\n        if n_consonants == n:\n            result.append(word)\n\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    left_side = word[1:]\n    right_side = word[:1]\n\n    if right_side in vowels:\n        return right_side\n    elif left_side in vowels:\n        return left_side\n    else:\n        return \"\"\n\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n\n            if val < 0:\n                return False\n\n        return val == 0\n\n    return check(lst[0]) and check(lst[1])\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k == 0:\n        return []\n\n    arr.sort()\n    return arr[:k]\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n%2==0:\n\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n\n    while n > 1:\n\n        if n % 2 == 0:\n\n            n = n/2\n        else:\n\n            n = 3*n + 1\n\n        odd_collatz.append(n)\n\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    try:\n        date = date.strip()\n\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month == 2 and day < 1 or day > 29:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n\n        if"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if \" \" in txt:\n\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2\n\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n\n    if any(count_digit[i] > 2 for i in lst):\n\n        return False\n\n    return True\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n\n        if num == 1 or num == 0:\n\n            return False\n\n        if num == 2:\n\n            return True\n\n        for i in range(2, num):\n            if num%i == 0:\n\n                return False\n\n        return True\n\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n\n        return is_prime(interval1[1] - interval2[0])\n\n    return \"NO\"\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return sum(abs(i) * prod for i in arr)\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n\n    val = n * n + 1\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp) + k)\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    if n == 0:\n\n        return [1]\n\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    product = 1\n    odd_count = 0\n\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            odd_count += 1\n        else:\n            product *= int_digit\n\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n\n    for i in range(len(string)):\n        if string[i] == '[':\n\n            opening_bracket_index.append(i)\n        else:\n\n            closing_bracket_index.append(i)\n\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[cnt]:\n            cnt += 1\n        else:\n            cnt = 0\n\n    return cnt == len(opening_bracket_index)\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n    import math\n\n    squared = 0\n    for i in lst:\n        squared += i ** 2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    ind=-1\n    i=1\n\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n\n    return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n\n    if len(smallest) == 0:\n        return largest, None\n\n    if len(largest) == 0:\n        return smallest, None\n\n    if smallest[0] > largest[0]:\n        return largest, smallest[0]\n    else:\n        return smallest, largest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n    return special_fact\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n\n                new_text += \"-\"+text[i]\n\n            elif end - start > 0:\n                new_text += text[i]\n\n            start = end\n            end = 0\n\n        i += 1\n\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n\n        return 'No'\n\n    if len(lst[0]) == 0:\n        return 'No'\n\n    if lst[0][0].isalpha():\n        return 'No'\n\n    return 'Yes'\n\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n\n            result.append(lst[i]**2)\n        elif i %4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    new_lst = []\n    for word in sentence.split():\n\n        flg = 0\n        if len(word) == 1:\n\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n\n            flg = 1\n\n        if flg == 1:\n\n            new_lst.append(word)\n\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    \n    count = 0\n\n    for num in nums:\n        if num > 10:\n\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    A = [i*i - i + 1 for i in range(1,n+1)]\n\n    ans = []\n\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    orbit1 = orbit2 = 0\n    while orbit1 < len(planet_names) and orbit2 < len(planet_names):\n        if planet_names[orbit1] == planet_names[orbit2]:\n            orbit1 += 1\n            orbit2 += 1\n        elif planet_names[orbit1] < planet_names[orbit2]:\n            orbit1 += 1\n        else:\n            orbit2 += 1\n    return (planet_names[orbit1], planet_names[orbit2])\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n == 1:\n        return y\n\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n\n    return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even_count = 0\n\n    odd_count = 0\n    for i in str(abs(num)):\n\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n\n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n\n    while number:\n        res += sym[number % 10]\n        number //= 10\n\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0 ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + expression\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    flg = 0\n    idx = 0\n\n    new_str = list(s)\n    for i in s:\n\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n\n    if flg == 0:\n        new_str = new_str[::-1]\n\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n\n        for idx2, elem2 in enumerate(numbers):\n\n            if idx != idx2:\n\n                distance = abs(elem - elem2)\n\n                if distance <= threshold:\n                    return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n\n    current_string = []\n\n    current_depth = 0\n\n\n    for c in paren_string:\n\n        if c == '(':\n            current_depth += 1\n\n            current_string.append(c)\n\n        elif c == ')':\n            current_depth -= 1\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n\n        elif c == ' ':\n            pass\n\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses')\n\n    return result\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n\n    for op in operations:\n\n        balance += op\n\n        if balance < 0:\n            return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n\n        return []\n\n    result = []\n\n\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n                max_depth = max(max_depth, depth)\n\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n\n    result = []\n\n\n    for n in numbers:\n\n        if running_max is None:\n            running_max = n\n            result.append(n)\n            continue\n\n        if n > running_max:\n            running_max = n\n            result.append(n)\n            continue\n\n        if n == running_max:\n            result.append(n)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return ''\n\n\n\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if not is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n            continue\n        else:\n            break\n\n    return string[beginning_of_suffix:beginning_of_suffix + 1] + make_palindrome(string[beginning_of_suffix + 1:])\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return '0'\n        elif i == '0':\n            return '1'\n        elif j == '0':\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    times = 0\n\n\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n\n        'two': 2,\n\n        'three': 3,\n\n        'four': 4,\n\n        'five': 5,\n\n        'six': 6,\n\n        'seven': 7,\n\n        'eight': 8,\n\n        'nine': 9,\n    }\n\n    numbers = numbers.split()\n    numbers = [value_map[n] for n in numbers]\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n\n            if idx != idx2:\n\n                if distance is None:\n\n                    distance = abs(elem - elem2)\n\n                else:\n\n                    distance = min(distance, abs(elem - elem2))\n\n    if distance is None:\n\n        return None, None\n\n    closest_pair = numbers[numbers.index(min(numbers))], numbers[numbers.index(max(numbers))]\n\n    return closest_pair[0], closest_pair[1]\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n\n    return [\n        (number - min_number) / (max_number - min_number)\n        for number in numbers\n    ]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n\n    i = 2\n\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        i += 1\n\n    if n > 1:\n        fact.append(n)\n\n    return fact\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    seen[numbers[0]] = 1\n    for number in numbers[1:]:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    return [number for number, count in seen.items() if count == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i], l[i + 1], l[i + 2] = l[i + 2], l[i + 1], l[i]\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n\n    for e in l:\n        if e > m:\n            m = e\n\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    ns = []\n    for i in range(n):\n\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        ans.append(odds[i])\n\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n\n    def is_prime(p):\n        if p < 2:\n\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n\n            if p % k == 0:\n\n                return False\n        return True\n\n    if n == 1:\n\n        return 2\n    elif n == 2:\n\n        return 3\n    elif n == 3:\n\n        return 5\n    elif n == 4:\n\n        return 13\n    elif n == 5:\n\n        return 89\n    else:\n\n        for i in range(2, n):\n\n            if is_prime(i):\n\n                yield i\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for i in range(4, n + 1):\n        results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for e in l:\n\n        if e >= t:\n            return False\n\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n\n        return 0\n\n    elif n == 1:\n\n        return 1\n\n    else:\n\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n\n            depth += 1\n        elif b == \">\":\n\n            depth -= 1\n        else:\n            return False\n\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n    for e1 in l1:\n\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n                break\n\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n\n                return False\n        return True\n\n    if n == 1:\n\n        return 1\n    elif n == 2:\n\n        return 2\n    elif n % 2 == 0:\n\n        return 2\n    elif n % 3 == 0:\n\n        return 3\n    elif n % 5 == 0:\n\n        return 5\n    elif n % 7 == 0:\n\n        return 7\n    elif n % 11 == 0:\n\n        return 11\n    elif n % 13 == 0:\n\n        return 13\n    elif n % 17 == 0:\n\n        return 17\n    elif n % 19 == 0:\n\n        return 19\n    elif n % 23 == 0:\n\n        return 23\n    elif n % 29 == 0:\n\n        return 29\n    elif n % 31 == 0:\n\n        return 31\n    elif n % 37 == 0:\n\n        return 37\n    elif n % 41 == 0:\n\n        return 41\n    elif n % 43 == 0:\n\n        return 43\n    elif n % 47 == 0:\n\n        return 47\n    elif n % 53 == 0:\n\n        return 53\n    elif n % 59 == 0:\n\n        return 59\n    elif n % 61 == 0:\n\n        return 61\n    elif n % 67 == 0:\n\n        return 67\n    elif n % 71 == 0:\n\n        return 71\n    elif n % 73 == 0:\n\n        return 73\n    elif n % 79 == 0:\n\n        return 79\n    elif n % 83 == 0:\n\n        return 83\n    elif n % 89 == 0:\n\n        return 89\n    elif n % 97 == 0:\n\n        return 97\n    elif n % 101 == 0:\n\n        return 101\n    elif n % 103 == 0:\n\n        return 103\n    elif n % 107 == 0:\n\n        return 107\n    elif n % 109 == 0:\n\n        return 109\n    elif n % 113 == 0:\n\n        return 113\n    elif n % 127 == 0:\n\n        return 127\n    elif n % 131 == 0:\n\n        return 131\n    elif n % 137 == 0:\n\n        return 137\n    elif n % 139 == 0:\n\n        return 139\n    elif n % 149 == 0:\n\n        return 149\n    elif n % 151 == 0:\n\n        return 151\n    elif n % 157 == 0:\n\n        return 157\n    elif n % 163 == 0:\n\n        return 163\n    elif n % 167 == 0:\n\n        return 167\n    elif n % 173 == 0:\n\n        return 173\n    elif n % 179 == 0:\n\n        return 179\n    elif n % 181 == 0:\n\n        return 181\n    elif n % 191 == 0:\n\n        return 191\n    elif n % 193 == 0:\n\n        return 193\n    elif n % 197 == 0:\n\n        return 197\n    elif n % 199 == 0:\n\n        return 199\n    elif n % 211 == 0:\n\n        return 211\n    elif n % 223 == 0:\n\n        return 223\n    elif n % 227 == 0:\n\n        return 227\n    elif n % 229 == 0:\n\n        return 229\n    elif n % 233 == 0:\n\n        return 233\n    elif n % 239 == 0:\n\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n\n    for b in brackets:\n\n        if b == \"(\":\n            depth += 1\n\n        elif b == \")\":\n            depth -= 1\n\n        if depth < 0:\n            return False\n\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n\n        return 0\n    if n == 1:\n\n        return 0\n    if n == 2:\n\n        return 1\n    if n == 3:\n\n        return 1\n    if n == 4:\n\n        return 2\n    if n == 5:\n\n        return 3\n    if n == 6:\n\n        return 5\n    if n == 7:\n\n        return 8\n    if n == 8:\n\n        return 13\n    if n == 9:\n\n        return 21\n    if n == 10:\n\n        return 34\n    if n == 11:\n\n        return 55\n    if n == 12:\n\n        return 89\n    if n == 13:\n\n        return 144\n    if n == 14:\n\n        return 233\n    if n == 15:\n\n        return 377\n    if n == 16:\n\n        return 610\n    if n == 17:\n\n        return 987\n    if n == 18:\n\n        return 1597\n    if n == 19:\n\n        return 2584\n    if n == 20:\n\n        return 4181\n    if n == 21:\n\n        return 6765\n    if n == 22:\n\n        return 10946\n    if n == 23:\n\n        return 17711\n    if n == 24:\n\n        return 28657\n    if n == 25:\n\n        return 46368\n    if n == 26:\n\n        return 75025\n    if n == 27:\n\n        return 121393\n    if n == 28:\n\n        return 196418\n    if n == 29:\n\n        return 317811\n    if n == 30:\n\n        return 514229\n    if n == 31:\n\n        return 832040\n    if n == 32:\n\n        return 1346269\n    if n == 33:\n\n        return 2178309\n    if n == 34:\n\n        return 3524578\n    if n == 35:\n\n        return 5702887\n    if n == 36:\n\n        return 8922746\n    if n == 37:\n\n        return 14473055\n    if n == 38:\n\n        return 23700986\n    if n == 39:\n\n        return 38015595\n    if n == 40:\n\n        return 61510294\n    if n == 41:\n\n        return 98077193\n    if n == 42:\n\n        return 150000000\n    if n == 43:\n\n        return 240000000\n    if n == 44:\n\n        return 380000000\n    if n == 45:\n\n        return 670000000\n    if n == 46:\n\n        return 1020000000\n    if n == 47:\n\n        return 1650000000\n    if n == 48:\n\n        return 2670000000\n    if n == 49:\n\n        return 4330000000\n    if n == 50:\n\n        return 7000000000\n    if n == 51:\n\n        return 11200000000\n    if n == 52:\n\n        return 18300000000\n    if n == 53:\n\n       "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[:shift] + s[len(s) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i == 'apples':\n            lis.append(1)\n        elif i == 'oranges':\n            lis.append(2)\n        elif i == 'mango':\n            lis.append(3)\n    return sum(lis)\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return []\n    return [evens[0], evens.index(min(evens))]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    frq = [0] * (max(lst) + 1)\n\n    for i in lst:\n\n        frq[i] += 1;\n\n    ans = -1\n\n    for i in frq:\n\n        if i >= ans:\n\n            ans = i\n\n    return ans\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n\n    return res\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n\n        return False\n\n\n\n    i, j = 0, len(q)-1\n\n    while i<j:\n        if q[i] != q[j]:\n            return False\n\n        i += 1\n        j -= 1\n\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    l1 = 0\n\n    for st in lst1:\n        l1 += len(st)\n    \n\n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n\n    for i in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if (n == 1): \n        return (x == 1) \n\n    power = 1\n    while (power < n):\n        power = power * 2\n\n    return (x == power)\n\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    if a == 0:\n        return True\n    elif a % 1 == 0:\n        return False\n    else:\n        return iscube(a // 1) and iscube(a // 1) == a % 1\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n\n      return False\n\n\n\n    for i in range(len(s) - 2):\n      if s[i] == s[i + 1] and s[i] == s[i + 2]:\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n\n        elif gpa > 3.7:\n\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n\n            letter_grade.append(\"A-\")\n\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n\n            letter_grade.append(\"B\")\n\n        elif gpa > 2.3:\n\n            letter_grade.append(\"B-\")\n\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n\n            letter_grade.append(\"C\")\n\n        elif gpa > 1.3:\n\n            letter_grade.append(\"C-\")\n\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n\n            letter_grade.append(\"D\")\n\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n\n        elif gpa == 0.0:\n            letter_grade.append(\"E\")\n\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    l = len(string)\n    if l == 0 or l == 1:\n\n        return False\n\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            return False\n\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 1\n    if n == 4: return 1\n    if n == 5: return 1\n    if n == 6: return 1\n    if n == 7: return 1\n    if n == 8: return 1\n    if n == 9: return 1\n    if n == 10: return 1\n    if n == 11: return 1\n    if n == 12: return 1\n    if n == 13: return 1\n    if n == 14: return 1\n    if n == 15: return 1\n    if n == 16: return 1\n    if n == 17: return 1\n    if n == 18: return 1\n    if n == 19: return 1\n    if n == 20: return 1\n    if n == 21: return 1\n    if n == 22: return 1\n    if n == 23: return 1\n    if n == 24: return 1\n    if n == 25: return 1\n    if n == 26: return 1\n    if n == 27: return 1\n    if n == 28: return 1\n    if n == 29: return 1\n    if n == 30: return 1\n    if n == 31: return 1\n    if n == 32: return 1\n    if n == 33: return 1\n    if n == 34: return 1\n    if n == 35: return 1\n    if n == 36: return 1\n    if n == 37: return 1\n    if n == 38: return 1\n    if n == 39: return 1\n    if n == 40: return 1\n    if n == 41: return 1\n    if n == 42: return 1\n    if n == 43: return 1\n    if n == 44: return 1\n    if n == 45: return 1\n    if n == 46: return 1\n    if n == 47: return 1\n    if n == 48: return 1\n    if n == 49: return 1\n    if n == 50: return 1\n    if n == 51: return 1\n    if n == 52: return 1\n    if n == 53: return 1\n    if n == 54: return 1\n    if n == 55: return 1\n    if n == 56: return 1\n    if n == 57: return 1\n    if n == 58: return 1\n    if n == 59: return 1\n    if n == 60: return 1\n    if n == 61: return 1\n    if n == 62: return 1\n    if n == 63: return 1\n    if n == 64: return 1\n    if n == 65: return 1\n    if n == 66: return 1\n    if n == 67: return 1\n    if n == 68: return 1\n    if n == 69: return 1\n    if n == 70: return 1\n    if n == 71: return 1\n    if n == 72: return 1\n    if n == 73: return 1\n    if n == 74: return 1\n    if n == 75: return 1\n    if n == 76: return 1\n    if n == 77: return 1\n    if n == 78: return 1\n    if n == 79: return 1\n    if n == 80: return 1\n    if n == 81: return 1\n    if n == 82: return 1\n    if n == 83: return 1\n    if n == 84: return 1\n    if n == 85: return 1\n    if n == 86: return 1\n    if n == 87: return 1\n    if n == 88: return 1\n    if n == 89: return "], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    import re\n\n    # Count the number of boredoms\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n\n    return boredoms\n\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n\n    return \"\".join([vowels_replace[i] if i in vowels else i for i in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n\n                return False\n\n        return True\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return maxx\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if len(dict.keys()) == 0:\n        return False\n\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n\n            elif state == \"mixed\":\n                if key.islower():\n                    state = \"lower\"\n                elif key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n\n        if state == \"mixed\":\n            return False\n        else:\n            return True\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    from math import floor, ceil\n\n\n    if value.count('.') == 1:\n\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n\n\n    num = float(value)\n    if value[-2:] == '.5':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.0':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.1':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.2':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.3':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.4':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.5':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.6':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.7':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.8':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.9':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.0':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.1':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.2':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.3':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.4':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.5':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.6':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.7':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.8':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.9':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.0':\n\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n    elif value[-2:] == '.1':\n\n        if num > 0"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n\n        return []\n\n\n\n    s_list = []\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(x, y + 1)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n\n        5: \"Five\",\n\n        6: \"Six\",\n        7: \"Seven\",\n\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n\n    for i in range(1,n+1):\n        if i%2 == 0:\n\n            x = 1\n            for j in range(1,i+1): x *= j\n\n            ret.append(x)\n        else:\n            ret.append(i)\n\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n\n    even_palindrome_count = 0\n\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n\n        if n < 0: n, neg = -1 * n, -1\n\n        return sum(map(abs, str(n).split('')))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr)==0:\n\n      return True\n\n    sorted_array=sorted(arr)\n    my_arr=[]\n\n    \n\n    min_value=min(arr)\n    max_value=max(arr)\n    for i in range(len(arr)):\n        if arr[i]>=min_value and arr[i]<=max_value:\n            my_arr.append(arr[i])\n    if len(my_arr)==len(arr):\n        return True\n    else:\n        return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n\n    even = 0\n\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n\n    list1=test.split(\" \")\n    t=0\n\n\n\n    for i in list1:\n\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n        elif(list1.count(i)==t) and i!='':\n            dict1[i]=list1.count(i)\n        elif(list1.count(i)==0) and i!='':\n            dict1[i]=list1.count(i)\n\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(arr) - arr.count('0'))\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n\n    for num in nums:\n\n        s += -num\n\n        if (s < 0):\n            s = 0\n\n        if (s > max_sum):\n            max_sum = s\n\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the buckets are lowered\n    # 2. Initialize a counter to count the number of times the buckets are filled\n    # 3. Initialize a counter to count the number of times the buckets are empty\n    # 4. Initialize a counter to count the number of times the buckets are full\n    # 5. Initialize a counter to count the number of times the buckets are empty\n    # 6. Initialize a counter to count the number of times the buckets are full\n    # 7. Initialize a counter to count the number of times the buckets are empty\n    # 8. Initialize a counter to count the number of times the buckets are full\n    # 9. Initialize a counter to count the number of times the buckets are empty\n    # 10. Initialize a counter to count the number of times the buckets are full\n    # 11. Initialize a counter to count the number of times the buckets are empty\n    # 12. Initialize a counter to count the number of times the buckets are full\n    # 13. Initialize a counter to count the number of times the buckets are empty\n    # 14. Initialize a counter to count the number of times the buckets are full\n    # 15. Initialize a counter to count the number of times the buckets are empty\n    # 16. Initialize a counter to count the number of times the buckets are full\n    # 17. Initialize a counter to count the number of times the buckets are empty\n    # 18. Initialize a counter to count the number of times the buckets are full\n    # 19. Initialize a counter to count the number of times the buckets are empty\n    # 20. Initialize a counter to count the number of times the buckets are full\n    # 21. Initialize a counter to count the number of times the buckets are empty\n    # 22. Initialize a counter to count the number of times the buckets are full\n    # 23. Initialize a counter to count the number of times the buckets are empty\n    # 24. Initialize a counter to count the number of times the buckets are full\n    # 25. Initialize a counter to count the number of times the buckets are empty\n    # 26. Initialize a counter to count the number of times the buckets are full\n    # 27. Initialize a counter to count the number of times the buckets are empty\n    # 28. Initialize a counter to count the number of times the buckets are full\n    # 29. Initialize a counter to count the number of times the buckets are empty\n    # 30. Initialize a counter to count the number of times the buckets are full\n    # 31. Initialize a counter to count the number of times the buckets are empty\n    # 32. Initialize a counter to count the number of times the buckets are full\n    # 33. Initialize a counter to count the number of times the buckets are empty\n    # 34. Initialize a counter to count the number of times the buckets are full\n    # 35. Initialize a counter to count the number of times the buckets are empty\n    # 36. Initialize a counter to count the number of times the buckets are full\n    # 37. Initialize a counter to count the number"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    result = []\n\n    for word in s.split():\n\n        n_consonants = 0\n\n        for i in range(0, len(word)):\n\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n\n        if n_consonants == n:\n            result.append(word)\n\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    if len(word) < 3:\n        return \"\"\n\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    left_side = word[1:]\n    right_side = word[:1]\n\n    if right_side in vowels:\n        return right_side\n    elif left_side in vowels:\n        return left_side\n    else:\n        return \"\"\n\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    if len(lst) == 2:\n        return check(lst[0]) and check(lst[1])\n    else:\n        return 'No'\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n\n        return []\n\n    if k == 1:\n\n        return arr\n\n    if k == 2:\n\n        return max(arr[0], arr[1])\n\n    if k == 3:\n\n        return max(arr[0], max(arr[1], arr[2]))\n\n    if k == 4:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n\n    if k == 5:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n\n    if k == 6:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n\n    if k == 7:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n\n    if k == 8:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n\n    if k == 9:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n\n    if k == 10:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n\n    if k == 11:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n\n    if k == 12:\n\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n\n    if k == 13:\n\n        return max(arr[0], max(arr["], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n\n    while n > 1:\n\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n + 1\n\n        odd_collatz.append(n)\n\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2\n\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0) for i in lst])\n\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n\n        return False\n\n    return True\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n\n        if num == 1 or num == 0:\n            return False\n\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n\n                return False\n\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n\n    if is_prime(interval1[0] - interval2[0]):\n        return \"YES\"\n    if is_prime(interval2[0] - interval1[0]):\n        return \"YES\"\n\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return sum(abs(i) * prod for i in arr)\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n\n        for j in range(n):\n\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n\n                if len(temp) == k:\n                    val = min(val, sum(temp))\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n\n        if int_digit%2 == 1:\n            odd_count += 1\n\n        product *= int_digit\n\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n\n    for i in range(len(string)):\n\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    if cnt == len(opening_bracket_index):\n        return True\n    else:\n        return False\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n    return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n\n    if len(smallest) == 0:\n        return largest, None\n\n    if len(largest) == 0:\n        return smallest, None\n\n    if smallest[0] > largest[0]:\n        return largest, smallest[0]\n    else:\n        return smallest, largest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    temp_a, temp_b = a, b\n\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    fact_i = 1\n    special_fact = 1\n\n    for i in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n\n    i = 0\n\n    start, end = 0, 0\n    while i < len(text):\n\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n\n                new_text += \"-\"+text[i]\n\n            elif end - start > 0:\n\n                new_text += text[i]\n\n            start = end\n            end = 0\n\n        i += 1\n\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    suf = ['txt', 'exe', 'dll']\n\n    lst = file_name.split(sep='.')\n\n    if len(lst) != 2:\n\n        return 'No'\n\n    if not lst[1] in suf:\n\n        return 'No'\n\n    if len(lst[0]) == 0:\n\n        return 'No'\n\n    if lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n\n        return 'No'\n\n    return 'Yes'\n\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    result =[]\n    for i in range(len(lst)):\n\n        if i %3 == 0:\n\n            result.append(lst[i]**2)\n\n        elif i %4 == 0:\n\n            result.append(lst[i]**3)\n\n        else:\n\n            result.append(lst[i])\n\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    new_lst = []\n\n    for word in sentence.split():\n        flg = 0\n\n        if len(word) == 1:\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n            flg = 1\n\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n            flg = 1\n\n        if flg == 1:\n            new_lst.append(word)\n\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    \n\n    count = 0\n\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n\n    ans = []\n\n    for i in range(n):\n\n        for j in range(i+1,n):\n\n            for k in range(j+1,n):\n\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n\n    orbit1 = orbit2 = 0\n    while orbit1 < 8 and orbit2 < 8:\n        orbit1 += 1\n        orbit2 += 1\n\n    if orbit1 == 8:\n        orbit1 -= 1\n    if orbit2 == 8:\n        orbit2 -= 1\n\n    return (planet_names[orbit1], planet_names[orbit2])\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n\n    new_lst = []\n\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n == 1:\n        return y\n    for i in range(2, n):\n\n        if n % i == 0:\n            return x\n\n    return y\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even_count = 0\n\n    odd_count = 0\n\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n\n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n\n    i = 12\n\n    res = ''\n    while number:\n        res += sym[i]\n        number -= num[i]\n        i -= 1\n\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n\n        return [ number + need , remaining-need ]\n    else:\n        return [ number , remaining ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    expression = str(operand[0])\n\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + oprn + expression\n\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n\n    idx = 0\n\n    new_str = list(s)\n    for i in s:\n\n        if i.isalpha():\n\n            new_str[idx] = i.swapcase()\n\n            flg = 1\n\n        else:\n\n            new_str[idx] = i\n\n            flg = 0\n\n        idx += 1\n\n    if flg == 0:\n\n        new_str = new_str[::-1]\n\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance <= threshold:\n                    return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n\n\n    for c in paren_string:\n\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n        elif c == ' ':\n            pass\n        else:\n            raise ValueError(f'Invalid character {c} in input string.')\n\n    if current_depth != 0:\n        raise ValueError(f'Unbalanced parentheses in input string.')\n\n    return result\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n\n        balance += op\n\n        if balance < 0:\n            return True\n\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n\n        return []\n\n    result = []\n\n\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n\n        depth = 0\n\n        max_depth = 0\n\n        for c in s:\n\n            if c == '(':\n\n                depth += 1\n\n                if depth > max_depth:\n\n                    max_depth = depth\n\n            elif c == ')':\n\n                depth -= 1\n\n            elif c == ' ':\n\n                pass\n\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    sum_value = 0\n    prod_value = 1\n\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    running_max = None\n    result = []\n\n    for n in numbers:\n\n        if running_max is None:\n\n            running_max = n\n\n        else:\n\n            if n > running_max:\n\n                running_max = n\n\n        result.append(running_max)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n\n        return ''\n\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while end_of_suffix < len(string):\n        if is_palindrome(string[end_of_suffix:]):\n            end_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n\n    return string[beginning_of_suffix:end_of_suffix + 1]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n\n        return None\n\n    lengths = [len(s) for s in strings]\n    return max(lengths, key=lengths.count)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    times = 0\n\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n\n        'three': 3,\n        'four': 4,\n        'five': 5,\n\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n\n        'nine': 9,\n    }\n\n    numbers = numbers.split()\n    numbers = [value_map[n] for n in numbers]\n\n    return ' '.join(str(n) for n in numbers)\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest_pair = None\n\n    distance = None\n\n\n\n    for idx, elem in enumerate(numbers):\n\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n\n                if distance is None:\n\n                    distance = abs(elem - elem2)\n\n                elif abs(elem - elem2) < distance:\n\n                    distance = abs(elem - elem2)\n\n                    closest_pair = (elem, elem2)\n\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    import math\n    fact = []\n\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n\n        i += 1\n\n    if n > 1:\n        fact.append(n)\n\n    return fact\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    seen[numbers[0]] = 1\n    for number in numbers[1:]:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    return [number for number, count in seen.items() if count == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i], l[i + 1], l[i + 2] = l[i + 2], l[i + 1], l[i]\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    m = l[0]\n\n    for e in l:\n        if e > m:\n            m = e\n\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n\n        if i % 11 == 0 or i % 13 == 0:\n\n            ns.append(i)\n\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        ans.append(odds[i])\n\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    import math\n\n\n\n    def is_prime(p):\n        if p < 2:\n\n            return False\n\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n\n            if p % k == 0:\n\n                return False\n\n        return True\n\n    if n == 1:\n\n        return 2\n\n    if n == 2:\n\n        return 3\n\n    if n == 3:\n\n        return 5\n\n    if n == 4:\n\n        return 13\n\n    if n == 5:\n\n        return 89\n\n    if n == 6:\n\n        return 253\n\n    if n == 7:\n\n        return 1021\n\n    if n == 8:\n\n        return 3241\n\n    if n == 9:\n\n        return 12107\n\n    if n == 10:\n\n        return 4294967295\n\n    if n == 11:\n\n        return 16777215\n\n    if n == 12:\n\n        return 65535\n\n    if n == 13:\n\n        return 262143\n\n    if n == 14:\n\n        return 1048575\n\n    if n == 15:\n\n        return 524287\n\n    if n == 16:\n\n        return 262144\n\n    if n == 17:\n\n        return 1048576\n\n    if n == 18:\n\n        return 524288\n\n    if n == 19:\n\n        return 262145\n\n    if n == 20:\n\n        return 1048577\n\n    if n == 21:\n\n        return 524289\n\n    if n == 22:\n\n        return 262146\n\n    if n == 23:\n\n        return 1048578\n\n    if n == 24:\n\n        return 524290\n\n    if n == 25:\n\n        return 262147\n\n    if n == 26:\n\n        return 1048579\n\n    if n == 27:\n\n        return 524291\n\n    if n == 28:\n\n        return 262148\n\n    if n == 29:\n\n        return 1048580\n\n    if n == 30:\n\n        return 524292\n\n    if n == 31:\n\n        return 262149\n\n    if n == 32:\n\n        return 1048581\n\n    if n == 33:\n\n        return 524293\n\n    if n == 34:\n\n        return 262150\n\n    if n == 35:\n\n        return 1048582\n\n    if n == 36:\n\n        return 524294\n\n    if n == 37:\n\n        return 262151\n\n    if n == 38:\n\n        return 1048583\n\n    if n == 39:\n\n        return 524295\n\n    if n == 40:\n\n        return 262152\n\n    if n == 41:\n\n        return 1048584\n\n    if n == 42:\n\n        return 524296\n\n    if n == 43:\n\n        return 262153\n\n    if n == 44:\n\n        return 1048585\n\n    if n == 45:\n\n        return 524297\n\n    if n == 46:\n\n        return 262154\n\n    if n == 47:\n\n        return 1048586\n\n    if n == 48:\n\n        return 524298\n\n    if n == 49:\n\n        return 262155\n\n    if n == 50:\n\n        return 1048587\n\n    if n == 51:\n\n        return 524299\n\n    if n == 52:\n\n        return 2621"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i, l1 in enumerate(l):\n\n        for j in range(i + 1, len(l)):\n\n            if l1 + l[j] == 0:\n                return True\n\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n\n    if n < 4:\n        return results[n]\n\n    for i in range(4, n + 1):\n        results[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    l = sorted(l)\n\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n\n    for i in range(n):\n        ret *= 2\n        ret %= p\n\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n\n        return 0\n\n    elif n == 1:\n\n        return 1\n\n    else:\n\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    depth = 0\n\n    for b in brackets:\n\n        if b == \"<\":\n\n            depth += 1\n\n        elif b == \">\":\n\n            depth -= 1\n\n        if depth < 0:\n\n            return False\n\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n\n        if k < 2:\n            return False\n\n        for i in range(2, k - 1):\n\n            if k % i == 0:\n\n                return False\n\n        return True\n\n    if n == 1:\n        return 1\n\n    for i in range(2, int(n ** 0.5) + 1):\n\n        if is_prime(i):\n\n            return i\n\n    return n\n\n"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n\n        return 0\n\n    if n == 1:\n\n        return 0\n\n    if n == 2:\n\n        return 1\n\n    if n == 3:\n\n        return 1\n\n    if n == 4:\n\n        return 2\n\n    if n == 5:\n\n        return 3\n\n    if n == 6:\n\n        return 5\n\n    if n == 7:\n\n        return 8\n\n    if n == 8:\n\n        return 13\n\n    if n == 9:\n\n        return 21\n\n    if n == 10:\n\n        return 34\n\n    if n == 11:\n\n        return 55\n\n    if n == 12:\n\n        return 89\n\n    if n == 13:\n\n        return 144\n\n    if n == 14:\n\n        return 233\n\n    if n == 15:\n\n        return 377\n\n    if n == 16:\n\n        return 610\n\n    if n == 17:\n\n        return 987\n\n    if n == 18:\n\n        return 1597\n\n    if n == 19:\n\n        return 2584\n\n    if n == 20:\n\n        return 4181\n\n    if n == 21:\n\n        return 6765\n\n    if n == 22:\n\n        return 10946\n\n    if n == 23:\n\n        return 17711\n\n    if n == 24:\n\n        return 28657\n\n    if n == 25:\n\n        return 46368\n\n    if n == 26:\n\n        return 75025\n\n    if n == 27:\n\n        return 121393\n\n    if n == 28:\n\n        return 196418\n\n    if n == 29:\n\n        return 317811\n\n    if n == 30:\n\n        return 514229\n\n    if n == 31:\n\n        return 832040\n\n    if n == 32:\n\n        return 1346269\n\n    if n == 33:\n\n        return 2178309\n\n    if n == 34:\n\n        return 3524578\n\n    if n == 35:\n\n        return 5702887\n\n    if n == 36:\n\n        return 8922746\n\n    if n == 37:\n\n        return 14473055\n\n    if n == 38:\n\n        return 23700926\n\n    if n == 39:\n\n        return 39005188\n\n    if n == 40:\n\n        return 63293893\n\n    if n == 41:\n\n        return 99720390\n\n    if n == 42:\n\n        return 153379300\n\n    if n == 43:\n\n        return 240473700\n\n    if n == 44:\n\n        return 385277700\n\n    if n == 45:\n\n        return 625000000\n\n    if n == 46:\n\n        return 980730000\n\n    if n == 47:\n\n        return 1590342000\n\n    if n == 48:\n\n        return 2580684000\n\n    if n == 49:\n\n        return 4180192000\n\n    if n == 50:\n\n        return 6760384000\n\n    if n == 51:\n\n        return 10940772000\n\n    if n == 52:\n\n        return 17711468000\n\n    if n == 53:\n\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[:shift] + s[len(s) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n\n    for i in s.split(' '):\n        if i == 'apples':\n            lis.append(1)\n        elif i == 'oranges':\n            lis.append(2)\n        elif i == 'mango':\n            lis.append(3)\n        else:\n            lis.append(0)\n\n    return sum(lis)\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if(len(arr) == 0): return []\n\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(len(evens) == 0): return [arr[0]]\n\n    return [evens[0], evens[1]]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    frq = [0] * (max(lst) + 1)\n\n    for i in lst:\n        frq[i] += 1;\n\n\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n\n    return ans\n\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n\n    return res\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b <= c or a + c <= b or b + c <= a:\n\n        return -1 \n\n    s = (a + b + c)/2\n\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    if sum(q) > w:\n        return False\n\n\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    l1 = 0\n    for st in lst1:\n\n        l1 += len(st)\n    \n\n    l2 = 0\n\n    for st in lst2:\n\n        l2 += len(st)\n\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n\n        return True\n\n\n\n    for i in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if (n == 1): \n        return (x == 1) \n\n    power = 1\n    while (power < n):\n        power = power * 2\n\n    return (x == power)\n\n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    if a == 0:\n        return True\n    elif a % 1 == 0:\n        return False\n    else:\n        return iscube(a // 1) and iscube(a // 1) == a % 1\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n\n    total = 0\n\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n      return False\n\n\n    for i in range(len(s) - 2):\n      if s[i] == s[i+1] and s[i] == s[i+2]:\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n\n        elif gpa == 0.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"F\")\n\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n\n        return False\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return sum(1 for i in range(n) if i == 1 or i == n-1)\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    import re\n\n    # Count the number of boredoms\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            boredoms += 1\n\n    return boredoms\n\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.lower()\n    message = message.replace(vowels, vowels_replace)\n    return message\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n\n            if n%i==0:\n                return False\n\n\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n\n    return sum(str(i).isdigit() for i in str(maxx))\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if len(dict.keys()) == 0:\n\n        return False\n    else:\n\n        state = \"start\"\n\n        for key in dict.keys():\n\n\n\n            if isinstance(key, str) == False:\n\n                state = \"mixed\"\n                break\n\n            if state == \"start\":\n\n                if key.isupper():\n\n                    state = \"upper\"\n\n                else:\n\n                    state = \"lower\"\n\n            elif state == \"mixed\":\n\n                if key.isupper():\n\n                    state = \"upper\"\n\n                else:\n\n                    state = \"lower\"\n\n            elif state == \"upper\":\n\n                if key.islower():\n\n                    state = \"lower\"\n\n                else:\n\n                    state = \"mixed\"\n\n            elif state == \"lower\":\n\n                if key.islower():\n\n                    state = \"lower\"\n\n                else:\n\n                    state = \"mixed\"\n\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] == s[i+1].upper():\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    from math import floor, ceil\n\n\n    if value.count('.') == 1:\n\n        # remove trailing zeros\n        while (value[-1] == '0'):\n\n            value = value[:-1]\n\n\n\n    num = float(value)\n\n    if value[-2:] == '.5':\n\n        if num > 0:\n\n            return int(floor(num))\n\n        else:\n\n            return int(ceil(num))\n\n    else:\n\n        if num > 0:\n\n            return int(floor(num))\n\n        else:\n\n            return int(ceil(num))\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    if not s:\n        return []\n\n\n    s_list = []\n\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        elif letter == \" \":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n\n        return -1\n\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n\n            for j in range(1,i+1): x *= j\n\n            ret.append(x)\n        else:\n            ret.append(i)\n\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n\n        return str(n) == str(n)[::-1]\n\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        return sum * neg\n\n    return sum(map(digits_sum, arr))\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr)==0:\n\n      return True\n    sorted_array=sorted(arr)\n\n    my_arr=[]\n\n    \n    min_value=min(arr)\n    max_value=max(arr)\n    for i in range(len(arr)):\n      if arr[i]>=min_value and arr[i]<=max_value:\n        my_arr.append(arr[i])\n    if len(my_arr)==len(arr):\n      return True\n    else:\n      return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    odd = 0\n    even = 0\n\n    for i in lst1:\n\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n\n        if i%2 == 0:\n            even += 1\n\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return s,s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n\n    for arr in lst:\n        res.append(len(arr) - arr.count('0'))\n\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n\n    for num in nums:\n        s += -num\n\n        if (s < 0):\n            s = 0\n\n        if (s > max_sum):\n            max_sum = s\n\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the buckets are lowered\n    # 2. Initialize a counter to count the number of times the buckets are filled\n    # 3. Initialize a counter to count the number of times the buckets are empty\n    # 4. Initialize a counter to count the number of times the buckets are full\n    # 5. Initialize a counter to count the number of times the buckets are empty\n    # 6. Initialize a counter to count the number of times the buckets are full\n    # 7. Initialize a counter to count the number of times the buckets are empty\n    # 8. Initialize a counter to count the number of times the buckets are full\n    # 9. Initialize a counter to count the number of times the buckets are empty\n    # 10. Initialize a counter to count the number of times the buckets are full\n    # 11. Initialize a counter to count the number of times the buckets are empty\n    # 12. Initialize a counter to count the number of times the buckets are full\n    # 13. Initialize a counter to count the number of times the buckets are empty\n    # 14. Initialize a counter to count the number of times the buckets are full\n    # 15. Initialize a counter to count the number of times the buckets are empty\n    # 16. Initialize a counter to count the number of times the buckets are full\n    # 17. Initialize a counter to count the number of times the buckets are empty\n    # 18. Initialize a counter to count the number of times the buckets are full\n    # 19. Initialize a counter to count the number of times the buckets are empty\n    # 20. Initialize a counter to count the number of times the buckets are full\n    # 21. Initialize a counter to count the number of times the buckets are empty\n    # 22. Initialize a counter to count the number of times the buckets are full\n    # 23. Initialize a counter to count the number of times the buckets are empty\n    # 24. Initialize a counter to count the number of times the buckets are full\n    # 25. Initialize a counter to count the number of times the buckets are empty\n    # 26. Initialize a counter to count the number of times the buckets are full\n    # 27. Initialize a counter to count the number of times the buckets are empty\n    # 28. Initialize a counter to count the number of times the buckets are full\n    # 29. Initialize a counter to count the number of times the buckets are empty\n    # 30. Initialize a counter to count the number of times the buckets are full\n    # 31. Initialize a counter to count the number of times the buckets are empty\n    # 32. Initialize a counter to count the number of times the buckets are full\n    # 33. Initialize a counter to count the number of times the buckets are empty\n    # 34. Initialize a counter to count the number of times the buckets are full\n    # 35. Initialize a counter to count the number of times the buckets are empty\n    # 36. Initialize a counter to count the number of times the buckets are full\n    # 37. Initialize a counter to count the number"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1\n\n        if n_consonants == n:\n            result.append(word)\n\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    if len(word) < 3:\n        return \"\"\n\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    left_side = word[1:]\n    right_side = word[:1]\n\n    if right_side in vowels:\n        return right_side\n    elif left_side in vowels:\n        return left_side\n    else:\n        return \"\"\n\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def check(s):\n        val = 0\n\n        for i in s:\n\n            if i == '(':\n                val = val + 1\n\n            else:\n\n                val = val - 1\n\n                if val < 0:\n                    return 'No'\n\n        return 'Yes'\n\n    return check(lst[0]) + match_parens(lst[1:])\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k == 0:\n        return []\n\n    arr.sort()\n    return arr[:k]\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n%2==0:\n\n        odd_collatz = [] \n    else:\n\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n\n            n = n/2\n        else:\n\n            n = 3*n+1\n        odd_collatz.append(n)\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n\n        date = date.strip()\n\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if \" \" in txt:\n        return txt.split()\n\n    elif \",\" in txt:\n        return txt.split(\",\")\n\n    else:\n        return len(txt) // 2 + 1\n\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    count_digit = dict([(i, 0) for i in lst])\n\n    for i in lst:\n        count_digit[i]+=1 \n\n    if any(count_digit[i] > 2 for i in lst):\n\n        return False\n\n    return True\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n\n            return False\n\n        if num == 2:\n            return True\n\n        for i in range(2, num):\n            if num%i == 0:\n\n                return False\n\n        return True\n\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n\n        return is_prime(interval1[1] - interval2[0])\n\n    return \"NO\"\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return sum(abs(i) * prod for i in arr)\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n\n\n                if j != 0:\n\n                    temp.append(grid[i][j - 1])\n\n\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp))\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n\n        return [1]\n    my_tri = [1, 3]\n\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n\n    odd_count = 0\n\n    for digit in str(n):\n\n        int_digit = int(digit)\n\n        if int_digit%2 == 1:\n            odd_count += 1\n\n        product *= int_digit\n\n    if odd_count == 0:\n        return 0\n    else:\n        return product\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n\n            opening_bracket_index.append(i)\n\n        else:\n\n            closing_bracket_index.append(i)\n\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n\n    return cnt == len(opening_bracket_index)\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n\n    i=1\n    while i<len(arr):\n        if arr[i]>=arr[i-1]:\n            ind=i\n            break\n        i+=1\n\n    return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, None\n    elif len(largest) == 0:\n        return smallest, None\n    else:\n        return largest[0], smallest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    fact_i = 1\n\n    special_fact = 1\n    for i in range(1, n+1):\n        special_fact *= i\n\n    return special_fact\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n\n        if text[i] == \" \":\n\n            end += 1\n        else:\n\n            if end - start > 2:\n\n                new_text += \"-\"+text[i]\n\n            elif end - start > 0:\n\n                new_text += text[i]\n\n            start = end\n            end = 0\n\n        i += 1\n\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    suf = ['txt', 'exe', 'dll']\n\n    lst = file_name.split(sep='.')\n\n    if len(lst) != 2:\n\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    return 'Yes'\n\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n    for i in range(len(lst)):\n\n        if i %3 == 0:\n\n            result.append(lst[i]**2)\n\n        elif i %4 == 0:\n\n            result.append(lst[i]**3)\n\n        else:\n\n            result.append(lst[i])\n\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    new_lst = []\n    for word in sentence.split():\n\n        flg = 0\n\n        if len(word) == 1:\n\n            flg = 1\n\n        if len(word) > 1 and word[0] == word[-1]:\n\n            flg = 1\n\n        if flg == 1:\n\n            new_lst.append(word)\n\n    return \" \".join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(n):\n\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        return sum * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n\n    for i in range(n):\n\n        for j in range(i+1,n):\n\n            for k in range(j+1,n):\n\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n\n        return ()\n\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n\n    orbit1 = orbit2 = 0\n    orbit1_index = orbit2_index = 0\n\n    while orbit1_index != planet1_index or orbit2_index != planet2_index:\n        orbit1 += 1\n        orbit2 += 1\n        orbit1_index += 1\n        orbit2_index += 1\n\n    return (planet_names[orbit1_index], planet_names[orbit2_index])\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if n == 1:\n\n        return y\n\n    for i in range(2, n):\n\n        if n % i == 0:\n\n            return x\n\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n\n    for s in extensions:\n\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n\n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n\n    i = 12\n\n    res = ''\n\n    while number:\n        res += sym[number % 10]\n        number //= 10\n\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if(need <= remaining):\n\n        return [ number + need , remaining-need ]\n\n    else:\n\n        return [ number , remaining ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + expression\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n\n    for i in s:\n        if i.isalpha():\n\n            new_str[idx] = i.swapcase()\n\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n\n    if flg == 0:\n        new_str = new_str[::-1]\n\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    lower = max(2, min(a, b))\n\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2,  \\\n  elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance <= threshold:\n                    return True\n    return False\n\n"], ["from typing  \\\n  import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n        elif c == ' ':\n            pass\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    if current_depth != 0:\n        raise ValueError('Unbalanced parentheses')\n\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\n"], ["from typing  \\\n  import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean =  \\\n  sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers)\n\n"], ["from typing  \\\n  import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def  \\\n  parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n                max_depth = max(max_depth, depth)\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing  \\\n  import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"], ["from typing  \\\n  import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing  \\\n  import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse  \\\n  of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if not is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n            continue\n        else:\n            break\n\n    return string[beginning_of_suffix:beginning_of_suffix + 1] + \\\n        make_palindrome(string[beginning_of_suffix + 1:])\n"], ["from typing  \\\n  import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        elif i == '0':\n            return '1'\n        elif j == '0':\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(map(xor, a, b))\n\n"], ["from typing  \\\n  import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while  \\\n  b:\n        a, b = b, a % b\n    return a\n"], ["from typing  \\\n  import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4,  \\\n  'o|': 2, '.|': 1}\n    notes = music_string.split()\n    notes = [note_map[note] for note in notes]\n    return notes\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n    for i in range(len(string)  \\\n  - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            times += 1\n\n    return times\n"], ["from typing  \\\n  import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2,  \\\n  elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                else:\n                    distance = min(distance, abs(elem - elem2))\n\n    if distance is None:\n        return None, None\n\n    for idx, elem in enumerate(numbers):\n        for idx2,  \\\n  elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance == abs(elem - elem2):\n                    if closest_pair is None:\n                        closest_pair = (elem, elem2)\n                    else:\n                        closest_pair = min((elem, elem2), closest_pair)\n\n    return closest_pair[0], closest_pair[1]\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number  \\\n  = min(numbers)\n    max_number  \\\n  = max(numbers)\n    return [x / (max_number - min_number) for x in numbers]\n\n"], ["from typing  \\\n  import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i  \\\n  in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <=  \\\n  int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n"], ["from typing  \\\n  import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    seen.update(numbers)\n    return [x for x, y in seen.items() if y == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().replace(' ', '').upper()\n"], ["from typing  \\\n  import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing  \\\n  import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in  \\\n  range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i)  \\\n  for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l  \\\n  = list(l)\n    l' = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l' += [l[i]]\n        else:\n            l' += [l[i]]\n    return l'\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e  \\\n  in l:\n        if e > m:\n            m = e\n    return m\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0  \\\n  or i % 13 == 0:\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens  \\\n  = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n    ans.extend(odds)\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group)  \\\n  == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group)  \\\n  == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p))  \\\n  + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n):\n            if is_prime(i):\n                yield i\n\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in  \\\n  range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in  \\\n  range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x  \\\n  > 0:\n        ret = str(x % base) + ret\n        x = x // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0,  \\\n  0, 2, 0]\n    if n < 4:\n        return results[n]\n    else:\n        return results[n-1] + results[n-2] + results[n-3] + results[n-4]\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) %  \\\n  2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text)  \\\n  - 1 - i]:\n            return False\n    return True\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i  \\\n  in range(n):\n        ret = ret * 2 % p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\"join([chr(((ord(ch) + 5 - ord(26)) %  \\\n  26) + ord( s]) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\"join([chr(((ord(ch) - 5 + ord(26)) %  \\\n  26) + ord( s]) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e  \\\n  in l:\n        if e >= t:\n            return False\n    return True\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0 == s1\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n  \\\n  == 0:\n        return 0\n    elif n  \\\n  == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b  \\\n  in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l)  \\\n  or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1  \\\n  in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in  \\\n  range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n       "], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"], ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b  \\\n  in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n  \\\n  == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8922746\n    if n == 37:\n        return 14473176\n    if n == 38:\n        return 23700445\n    if n == 39:\n        return 38015874\n    if n == 40:\n        return 61518873\n    if n == 41:\n        return 98374132\n    if n == 42:\n        return 150043321\n    if n == 43:\n        return 240148910\n    if n == 44:\n        return 386297809\n    if n == 45:\n        return 620764408\n    if n == 46:\n        return 972580607\n    if n == 47:\n        return 1504010906\n    if n == 48:\n        return 2408021815\n    if n == 49:\n        return 3896043624\n    if n == 50:\n        return 6384087233\n    if n == 51:\n        return 100000000000\n    if n == 52:\n        return 160000000000\n    if n == "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in  \\\n  vowels for c in s)\n    return n_vowels\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift  \\\n  > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[shift:] + s[:shift]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s ==  \\\n  \"\" return 0\n    else:\n        return sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i  \\\n  in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    if len(lis) == 2:\n        return lis[1] - lis[0]\n    elif len(lis) == 3:\n        return lis[2] - lis[0] - lis[1]\n    else:\n        return 0\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x:  \\\n  x%2 == 0, arr))\n    if(len(evens) == 0): return []\n    return [evens[0], evens.index(min(evens))]\n"], ["def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0]  \\\n  * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, max(lst) + 1):\n        if frq[i] >= frq[ans]:\n            ans = i\n\n    return ans\n"], ["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if  \\\n  switch else max(lst))\n        lst.remove(min(lst) if  \\\n  switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a +  \\\n  c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n\n    i, j  \\\n  = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n\n    return True\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in  \\\n  range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n"], ["def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    l1 = 0\n    for st  \\\n  in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i  \\\n  in range(2,101):\n        if is_prime(i):\n            if i*i == a:\n                return True\n    return False\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n        return (x  \\\n  == 1) \n    power = 1\n    while (power < n):\n        power = power * 2\n    return (x  \\\n  ** power  \\\n  == 1) \n"], ["def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a  \\\n  = abs(a)\n    if a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        return iscube(a/2) and iscube(a/2) == a\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3',  \\\n  '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n    for i in  \\\n  range(len(s) - 2):\n      if s[i] == s[i + 1] and s[i] == s[i + 2]:\n        return False\n\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade  \\\n  = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        elif gpa == 0.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"F\")\n    return letter_grade\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l  \\\n  = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if string[i] == string[i-1]:\n            return False\n    return True\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n ==  \\\n  1: return 1\n    elif n ==  \\\n  2: return 1\n    elif n ==  \\\n  3: return 1\n    elif n ==  \\\n  4: return 1\n    elif n ==  \\\n  5: return 1\n    elif n ==  \\\n  6: return 1\n    elif n ==  \\\n  7: return 1\n    elif n ==  \\\n  8: return 1\n    elif n ==  \\\n  9: return 1\n    elif n ==  \\\n  10: return 1\n    elif n ==  \\\n  11: return 1\n    elif n ==  \\\n  12: return 1\n    elif n ==  \\\n  13: return 1\n    elif n ==  \\\n  14: return 1\n    elif n ==  \\\n  15: return 1\n    elif n ==  \\\n  16: return 1\n    elif n ==  \\\n  17: return 1\n    elif n ==  \\\n  18: return 1\n    elif n ==  \\\n  19: return 1\n    elif n ==  \\\n  20: return 1\n    elif n ==  \\\n  21: return 1\n    elif n ==  \\\n  22: return 1\n    elif n ==  \\\n  23: return 1\n    elif n ==  \\\n  24: return 1\n    elif n ==  \\\n  25: return 1\n    elif n ==  \\\n  26: return 1\n    elif n ==  \\\n  27: return 1\n    elif n ==  \\\n  28: return 1\n    elif n ==  \\\n  29: return 1\n    elif n ==  \\\n  30: return 1\n    elif n ==  \\\n  31: return 1\n    elif n ==  \\\n  32: return 1\n    elif n ==  \\\n  33: return 1\n    elif n ==  \\\n  34: return 1\n    elif n ==  \\\n  35: return 1\n    elif n ==  \\\n  36: return 1\n    elif n ==  \\\n  37: return 1\n    elif n ==  \\\n  38: return 1\n    elif n ==  \\\n  39: return 1\n    elif n ==  \\\n  40: return 1\n    elif n ==  \\\n  41: return 1\n    elif n ==  \\\n  42: return 1\n    elif n ==  \\\n  43: return 1\n    elif n ==  \\\n  44: return 1\n    elif n ==  \\\n  45: return 1\n    elif n ==  \\\n  46: return 1\n    elif n ==  \\\n  47: return 1\n    elif n ==  \\\n  48: return 1\n    elif n ==  \\\n  49: return 1\n    elif n ==  \\\n  50: return 1\n    elif n ==  \\\n  51: return 1\n    elif n ==  \\\n  52: return 1\n    elif n ==  \\\n  53: return 1\n    elif n ==  \\\n  54: return 1\n    elif n ==  \\\n  55: return 1\n    elif n ==  \\\n  56: return 1\n    elif n ==  \\\n  57: return 1\n    elif n ==  \\\n  58: return 1\n    elif n ==  \\\n  59: return 1\n    elif n ==  \\\n  60: return 1\n    elif n ==  \\\n  61: return 1\n    elif n ==  \\\n  62: return 1\n    elif n ==  \\\n  63: return 1\n    elif n ==  \\\n  64: return 1\n    elif n ==  \\\n  65: return 1\n    elif n ==  \\\n  66: return 1\n    elif n ==  \\\n  67: return 1\n    elif n ==  \\\n  68: return 1\n    elif n ==  \\\n  69: return 1\n    elif n ==  \\\n  70: return 1\n    elif n ==  \\\n  71: return 1\n    elif n ==  \\\n  72: return 1\n    elif n ==  \\\n  73: return 1\n    elif n ==  \\\n  74: return 1\n    elif n ==  \\\n  75: return 1\n    elif n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return str(bin(N)[2:])\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst))  \\\n  for j in range(len(lst[i])) if lst[i][j] == x]\n    coords.sort(key=lambda x: x[0])\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d  \\\n  = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2)%len(d)]\n        else:\n            out += c\n    return out\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst  \\\n  = sorted(set(lst))\n    return lst[1] if lst else None\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import  \\\n  re\n    return len(re.findall(r\"I\", S))\n"], ["def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and  \\\n  isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        else:\n            return False\n    else:\n        return False"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) +  \\\n  2)) for i in vowels])\n    message = message.lower()\n    message = message.replace(vowels, vowels_replace)\n    return message\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i  \\\n  in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return sum(str(i).zfill(len(str(i))))\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key,  \\\n  str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"mixed\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n            else:\n                raise Exception(\"Invalid state\")\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i  \\\n  in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Write your code here\n    return a * b\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i  \\\n  in range(0,len(s),2):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n"], ["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math  \\\n  import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    else:\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter  \\\n  in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        elif letter == \" \":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y %  \\\n  2 == 0:\n        return y\n    else:\n        return choose_num(x, y + 1)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation  \\\n  = 0\n    for i in range(n, m + 1):\n        summation += i\n    return bin(summation)[2:]\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements  \\\n  = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3:  \\\n  \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    arr = sorted(arr)\n    arr = arr[::-1]\n    for i in arr:\n        arr[i - 1] = dic[i]\n    return arr\n\n"], ["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret  \\\n  = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n)  \\\n  == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n,  \\\n  neg = -1 * n, -1 * n\n        return sum(map(abs, str(n).split('')))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if  \\\n  len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    max_value=max(arr)\n    for i in range(len(arr)):\n      if arr[i]>=min_value and arr[i]<=max_value:\n        my_arr.append(arr[i])\n    if len(my_arr)==len(arr):\n      return True\n    else:\n      return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i  \\\n  in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if odd == even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t)  \\\n  and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n    return dict1\n"], ["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in  \\\n  s if char not in c])\n    return s,True if s == c else False\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr  \\\n  in lst:\n        res.append(str(len(arr)) + \"n the str\" + str(len(arr)) + \" of the \" + str(len(arr)) + \"put.\")\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num  \\\n  in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(max_sum, s)\n    return max_sum\n"], ["def max_fill(grid, capacity):\n    import  \\\n  math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Initialize a counter to count the number of times the bucket is lowered\n    # 2. Initialize a counter to count the number of times the bucket is filled\n    # 3. Initialize a counter to count the number of times the bucket is empty\n    # 4. Initialize a counter to count the number of times the bucket is full\n    # 5. Initialize a counter to count the number of times the bucket is empty\n    # 6. Initialize a counter to count the number of times the bucket is full\n    # 7. Initialize a counter to count the number of times the bucket is empty\n    # 8. Initialize a counter to count the number of times the bucket is full\n    # 9. Initialize a counter to count the number of times the bucket is empty\n    # 10. Initialize a counter to count the number of times the bucket is full\n    # 11. Initialize a counter to count the number of times the bucket is empty\n    # 12. Initialize a counter to count the number of times the bucket is full\n    # 13. Initialize a counter to count the number of times the bucket is empty\n    # 14. Initialize a counter to count the number of times the bucket is full\n    # 15. Initialize a counter to count the number of times the bucket is empty\n    # 16. Initialize a counter to count the number of times the bucket is full\n    # 17. Initialize a counter to count the number of times the bucket is empty\n    # 18. Initialize a counter to count the number of times the bucket is full\n    # 19. Initialize a counter to count the number of times the bucket is empty\n    # 20. Initialize a counter to count the number of times the bucket is full\n    # 21. Initialize a counter to count the number of times the bucket is empty\n    # 22. Initialize a counter to count the number of times the bucket is full\n    # 23. Initialize a counter to count the number of times the bucket is empty\n    # 24. Initialize a counter to count the number of times the bucket is full\n    # 25. Initialize a counter to count the number of times the bucket is empty\n    # 26. Initialize a counter to count the number of times the bucket is full\n    # 27. Initialize a counter to count the number of times the bucket is empty\n    # 28. Initialize a counter to count the number of times the bucket is full\n    # 29. Initialize a counter to count the number of times the bucket is empty\n    # 30. Initialize a counter to count the number of times the bucket is full\n    # 31. Initialize a counter to count the number of times the bucket is empty\n    # 32. Initialize a counter to count the number of times the bucket is full\n    # 33. Initialize a counter to count the number of times the bucket is empty\n    # 34. Initialize a counter to count the number of times the bucket is full\n    # 35. Initialize a counter to count the number of times the bucket is empty\n    # 36. Initialize a counter to count the number of times the bucket is full\n    # 37. Initialize a counter to"], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower()  \\\n  not in [\"a\",\"o:\",\"e:\",\"i:\",\"u:\",\"l:\",\"n:\",\"s:\",\"t:\",\"r:\",\"h:\",\"d:\",\"c:\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\" \",   \"A O',  \\\n  }   'O', 'U', 'I'}\n\n    for i in range(len(word) - 1):\n        if word[i] in vowels:\n            return word[i]\n\n    return \"\"\n"], ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def  \\\n  check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    if len(lst) == 1:\n        return 'Yes' if lst[0] == ')' else 'No'\n    else:\n        return 'Yes' if check(lst[0]) and check(lst[1]) else 'No'\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return  \\\n  []\n    if k == 1:\n        return arr\n    if k == 2:\n        return max(arr[0], arr[1])\n    if k == 3:\n        return max(arr[0], max(arr[1], arr[2]))\n    if k == 4:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n    if k == 5:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n    if k == 6:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n    if k == 7:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n    if k == 8:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n    if k == 9:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n    if k == 10:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n    if k == 11:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n    if k == 12:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n    if k == 13:\n        return max(arr[0], max"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz  \\\n  = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n+1\n        odd_collatz.append(n)\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year  \\\n  = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n        return  \\\n  txt.split()\n    elif \",\" in txt:\n        return  \\\n  txt.split(\",\")\n    else:\n        return  \\\n  len(txt) // 2 + 1\n"], ["def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0)  \\\n  for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i  \\\n  in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if is_prime(interval1[0] - interval2[0]):\n        return \"YES\"\n    if is_prime(interval2[0] - interval1[0]):\n        return \"YES\"\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not  \\\n  arr: return None\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i  \\\n  - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(val, sum(temp))\n\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in  \\\n  range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit  \\\n  = int(digit)\n        if int_digit%2 == 1:\n            odd_count += 1\n        else:\n            product *= int_digit\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i  \\\n  in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import  \\\n  math\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-1] not in \" \"\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n    i=1\n    while  \\\n  i<len(arr):\n    if arr[i]>=arr[i-1]:\n      ind=i\n      break\n    i+=1\n    if ind!=-1:\n      break\n    ind=-1\n  return ind\n"], ["def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x:  \\\n  x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    if len(smallest) == 0:\n        return largest, None\n    elif len(largest) == 0:\n        return smallest, None\n    else:\n        return largest[0], smallest[0]\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):  \\\n  temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str):  \\\n  temp_b = temp_b.replace(',','.')\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_even += i\n    return sum_of_even == 4\n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i  \\\n  in range(1, n+1):\n        special_fact *= i\n        fact_i *= i\n    return special_fact\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text  \\\n  += \"-\"text[i]\n            elif end - start > 0:\n                new_text  \\\n  += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst  \\\n  = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    return 'Yes'\n"], ["def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n    for i  \\\n  in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i %4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word  \\\n  in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n            flg = 1\n        if len(word) > 1 and word[0] == word[-1] and word[0] == ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] != ' ':\n            flg = 0\n        if len(word) > 1 and word[0] != word[-1] and word[0] == ' ':\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return ' '.join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator =  \\\n  int(a) * int(c) + \\\n  int(b) * int(d)\n    denominator = int(a) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n,  \\\n  neg = -1 * n, -1 * n\n        return sum(map(abs, str(n).split('')))\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1,  \\\n  3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i*i - i  \\\n  + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i])\n                    ans.append(A[j])\n                    ans.append(A[k])\n    return len(ans)\n"], ["def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\" Venus\", th\", \"M  \\\n   \"Jupi \"Saturn\", ranus\",  tune\") \n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    orbit1 = orbit2 = 0\n    while orbit1 < planet1_index:\n        orbit1 += 1\n    while orbit2 < planet2_index:\n        orbit2 += 1\n    return (planet_names[orbit1], planet_names[orbit2])\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst  \\\n  = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 1:\n        return y\n    for i  \\\n  in range(2, n):\n        if n % i == 0:\n            break\n    else:\n        return x\n    return x\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and  \\\n  x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n    return class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a)  \\\n  - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i  \\\n  in str(abs(num)):\n        if int(i)%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\" V\",   \\\n  \",      \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number:\n        res += sym[i]\n        number -= num[i]\n        i -= 1\n    return res[::-1]\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char == char:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n        return [ number +  \\\n  need , remaining-need ]\n    else:\n        return [ number , remaining ]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn  \\\n  in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx]  \\\n  = i.swapcase()\n            flg = 1\n        else:\n            new_str[idx] = i\n        idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import  \\\n  hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower =  \\\n  max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\t\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\tFalse\n\t>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\tTrue\n\t\"\"\"\n\tfor idx, elem in enumerate(numbers):\n\t\tfor idx2, elem2 in enumerate(numbers):\n\t\t\tif idx != idx2:\n\t\t\t\tdistance = abs(elem - elem2)\n\t\t\t\tif distance <= threshold:\n\t\t\t\t\treturn True\n\treturn False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\t\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separate_paren_groups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t\"\"\"\n\tresult = []\n\tcurrent_string = []\n\tcurrent_depth = 0\n\n\tfor c in paren_string:\n\t\tif c == '(':\n\t\t\tcurrent_depth += 1\n\t\t\tcurrent_string.append(c)\n\t\telif c == ')':\n\t\t\tcurrent_depth -= 1\n\t\t\tif current_depth == 0:\n\t\t\t\tresult.append(''.join(current_string))\n\t\t\t\tcurrent_string = []\n\t\telse:\n\t\t\tcurrent_string.append(c)\n\n\tif current_depth != 0:\n\t\tresult.append(''.join(current_string))\n\n\treturn result\n\n"], ["def truncate_number(number: float) -> float:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncate_number(3.5)\n\t0.5\n\t\"\"\"\n\tinteger, decimal = divmod(number, 1)\n\treturn decimal\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n\t\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return True. Otherwise it should return False.\n\t>>> below_zero([1, 2, 3])\n\tFalse\n\t>>> below_zero([1, 2, -4, 5])\n\tTrue\n\t\"\"\"\n\tbalance = 0\n\n\tfor op in operations:\n\t\tbalance += op\n\n\treturn balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n\t\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t\"\"\"\n\tmean = sum(numbers) / len(numbers)\n\treturn sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\t\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t\"\"\"\n\tif not numbers:\n\t\treturn []\n\n\tresult = []\n\n\tfor n in numbers[:-1]:\n\t\tresult.append(n)\n\t\tresult.append(delimeter)\n\n\tresult.append(numbers[-1])\n\n\treturn result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\t\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parse_nested_parens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t\"\"\"\n\tdef parse_paren_group(s):\n\t\tdepth = 0\n\t\tmax_depth = 0\n\t\tfor c in s:\n\t\t\tif c == '(':\n\t\t\t\tdepth += 1\n\t\t\t\tmax_depth = max(max_depth, depth)\n\t\t\telif c == ')':\n\t\t\t\tdepth -= 1\n\t\t\t\tmax_depth = max(max_depth, depth)\n\t\treturn max_depth\n\n\treturn [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\t\"\"\" Filter an input list of strings only for ones that contain given substring\n\t>>> filter_by_substring([], 'a')\n\t[]\n\t>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t\"\"\"\n\treturn [s for s in strings if substring in s]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n\t\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sum_product([])\n\t(0, 1)\n\t>>> sum_product([1, 2, 3, 4])\n\t(10, 24)\n\t\"\"\"\n\tsum_value = 0\n\tprod_value = 1\n\tfor number in numbers:\n\t\tsum_value += number\n\t\tprod_value *= number\n\treturn sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\t\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t\"\"\"\n\trunning_max = None\n\tresult = []\n\n\tfor n in numbers:\n\t\tif running_max is None:\n\t\t\trunning_max = n\n\t\telse:\n\t\t\tif n > running_max:\n\t\t\t\trunning_max = n\n\t\tresult.append(running_max)\n\n\treturn result\n\n"], ["def is_palindrome(string: str) -> bool:\n\t\"\"\" Test if given string is a palindrome \"\"\"\n\treturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\t\"\"\" Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> make_palindrome('')\n\t''\n\t>>> make_palindrome('cat')\n\t'catac'\n\t>>> make_palindrome('cata')\n\t'catac'\n\t\"\"\"\n\tif not string:\n\t\treturn ''\n\n\tbeginning_of_suffix = 0\n\tending_of_prefix = len(string) - 1\n\n\twhile beginning_of_suffix < ending_of_prefix:\n\t\tif not is_palindrome(string[beginning_of_suffix:ending_of_prefix + 1]):\n\t\t\tbeginning_of_suffix += 1\n\t\telse:\n\t\t\tending_of_prefix -= 1\n\n\treturn string[beginning_of_suffix:ending_of_prefix + 1]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n\t\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> string_xor('010', '110')\n\t'100'\n\t\"\"\"\n\tdef xor(i, j):\n\t\tif i == j:\n\t\t\treturn '0'\n\t\tif i == '0':\n\t\t\treturn '1'\n\t\tif j == '0':\n\t\t\treturn '1'\n\t\treturn '0'\n\n\treturn ''.join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n\t\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return None in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t\"\"\"\n\tif not strings:\n\t\treturn None\n\n\treturn max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n\t\"\"\" Return a greatest common divisor of two integers a and b\n\t>>> greatest_common_divisor(3, 5)\n\t1\n\t>>> greatest_common_divisor(25, 15)\n\t5\n\t\"\"\"\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n\t\"\"\" Return list of all prefixes from shortest to longest of the input string\n\t>>> all_prefixes('abc')\n\t['a', 'ab', 'abc']\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(string)):\n\t\tresult.append(string[:i])\n\treturn result\n\n"], ["def string_sequence(n: int) -> str:\n\t\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> string_sequence(0)\n\t'0'\n\t>>> string_sequence(5)\n\t'0 1 2 3 4 5'\n\t\"\"\"\n\treturn ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n\t\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> count_distinct_characters('xyzXYZ')\n\t3\n\t>>> count_distinct_characters('Jerry')\n\t4\n\t\"\"\"\n\treturn len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n\t\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t\"\"\"\n\tnote_map = {'o': 4, 'o|': 2, '.|': 1}\n\tbeats = []\n\tfor note in music_string:\n\t\tif note in note_map:\n\t\t\tbeats.append(note_map[note])\n\t\telse:\n\t\t\tbeats.append(0)\n\treturn beats\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n\t\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> how_many_times('', 'a')\n\t0\n\t>>> how_many_times('aaa', 'a')\n\t3\n\t>>> how_many_times('aaaa', 'aa')\n\t3\n\t\"\"\"\n\ttimes = 0\n\n\tfor i in range(len(string) - len(substring) + 1):\n\t\tif string[i:i+len(substring)] == substring:\n\t\t\ttimes += 1\n\n\treturn times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n\t\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sort_numbers('three one five')\n\t'one three five'\n\t\"\"\"\n\tvalue_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9,\n\t}\n\treturn ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\t\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t\"\"\"\n\tclosest_pair = None\n\tdistance = None\n\n\tfor idx, elem in enumerate(numbers):\n\t\tfor idx2, elem2 in enumerate(numbers):\n\t\t\tif idx != idx2:\n\t\t\t\tif distance is None:\n\t\t\t\t\tdistance = abs(elem - elem2)\n\t\t\t\telse:\n\t\t\t\t\tdistance = min(distance, abs(elem - elem2))\n\n\treturn closest_pair, distance\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\t\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t\"\"\"\n\tmin_number = min(numbers)\n\tmax_number = max(numbers)\n\treturn [x - min_number for x in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n\t\"\"\" Filter given list of any python values only for integers\n\t>>> filter_integers(['a', 3.14, 5])\n\t[5]\n\t>>> filter_integers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t\"\"\"\n\treturn [value for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n\t\"\"\" Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t\"\"\"\n\treturn len(string)\n"], ["def largest_divisor(n: int) -> int:\n\t\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largest_divisor(15)\n\t5\n\t\"\"\"\n\tfor i in reversed(range(n)):\n\t\tif n % i == 0:\n\t\t\treturn i\n\treturn n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n\t\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t\"\"\"\n\timport math\n\tfact = []\n\ti = 2\n\twhile i <= int(math.sqrt(n) + 1):\n\t\tif n % i == 0:\n\t\t\tfact.append(i)\n\t\t\tn //= i\n\t\ti += 1\n\tif n > 1:\n\t\tfact.append(n)\n\treturn fact\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\t\"\"\" From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> remove_duplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t\"\"\"\n\timport collections\n\n\tseen = collections.Counter()\n\tfor number in numbers:\n\t\tif number in seen:\n\t\t\tdel seen[number]\n\t\telse:\n\t\t\tseen[number] = 1\n\treturn list(seen.keys())\n\n"], ["def flip_case(string: str) -> str:\n\t\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flip_case('Hello')\n\t'hELLO'\n\t\"\"\"\n\treturn string.lower().replace(' ', '').upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n\t\"\"\" Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t\"\"\"\n\treturn ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\t\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filter_by_prefix([], 'a')\n\t[]\n\t>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t\"\"\"\n\treturn [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n\t\"\"\"Return only positive numbers in the list.\n\t>>> get_positive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t\"\"\"\n\treturn [x for x in l if x >= 0]\n"], ["def is_prime(n):\n\t\"\"\"Return true if a given number is prime, and false otherwise.\n\t>>> is_prime(6)\n\tFalse\n\t>>> is_prime(101)\n\tTrue\n\t>>> is_prime(11)\n\tTrue\n\t>>> is_prime(13441)\n\tTrue\n\t>>> is_prime(61)\n\tTrue\n\t>>> is_prime(4)\n\tFalse\n\t>>> is_prime(1)\n\tFalse\n\t\"\"\"\n\tif n < 2:\n\t\treturn False\n\tfor k in range(2, n - 1):\n\t\tif n % k == 0:\n\t\t\treturn False\n\treturn True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n\t\"\"\"\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\t\"\"\"\n\treturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\t\"\"\" xs are coefficients of a polynomial.\n\tfind_zero find x such that poly(x) = 0.\n\tfind_zero returns only only zero point, even if there are many.\n\tMoreover, find_zero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t\"\"\"\n\tbegin, end = -1., 1.\n\twhile poly(xs, begin) * poly(xs, end) > 0:\n\t\tbegin *= 2.0\n\t\tend *= 2.0\n\twhile end - begin > 1e-10:\n\t\tmid = (begin + end) / 2.0\n\t\tif poly(xs, mid) == 0:\n\t\t\treturn mid\n\t\tif poly(xs, mid) > 0:\n\t\t\tend = mid\n\t\telse:\n\t\t\tbegin = mid\n\treturn begin\n\n"], ["def sort_third(l: list):\n\t\"\"\"This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sort_third([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t\"\"\"\n\tl = list(l)\n\tfor i in range(len(l)):\n\t\tif i % 3 != 0:\n\t\t\tl[i], l[i + 1], l[i + 2] = l[i + 2], l[i + 1], l[i]\n\treturn l\n"], ["def unique(l: list):\n\t\"\"\"Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t\"\"\"\n\treturn sorted(set(l))\n"], ["def max_element(l: list):\n\t\"\"\"Return maximum element in the list.\n\t>>> max_element([1, 2, 3])\n\t3\n\t>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t\"\"\"\n\tm = l[0]\n\tfor e in l:\n\t\tif e > m:\n\t\t\tm = e\n\treturn m\n"], ["def fizz_buzz(n: int):\n\t\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizz_buzz(50)\n\t0\n\t>>> fizz_buzz(78)\n\t2\n\t>>> fizz_buzz(79)\n\t3\n\t\"\"\"\n\tns = []\n\tfor i in range(n):\n\t\tif i % 11 == 0 or i % 13 == 0:\n\t\t\tns.append(i)\n\treturn len(ns)\n"], ["def sort_even(l: list):\n\t\"\"\"This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sort_even([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sort_even([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t\"\"\"\n\tevens = l[::2]\n\todds = l[1::2]\n\tevens.sort()\n\tans = []\n\tfor i in evens:\n\t\tans.append(i)\n\tfor i in odds:\n\t\tans.append(i)\n\treturn ans\n"], ["def encode_cyclic(s: str):\n\t\"\"\"\n\treturns encoded string by cycling groups of three characters.\n\t\"\"\"\n\t# split string to groups. Each of length 3.\n\tgroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\t# cycle elements in each group. Unless group has fewer elements than 3.\n\tgroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n\treturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\t\"\"\"\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t\"\"\"\n\t# split string to groups. Each of length 3.\n\tgroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\t# cycle elements in each group. Unless group has fewer elements than 3.\n\tgroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n\treturn \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n\t\"\"\"\n\tprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> prime_fib(1)\n\t2\n\t>>> prime_fib(2)\n\t3\n\t>>> prime_fib(3)\n\t5\n\t>>> prime_fib(4)\n\t13\n\t>>> prime_fib(5)\n\t89\n\t\"\"\"\n\timport math\n\n\tdef is_prime(p):\n\t\tif p < 2:\n\t\t\treturn False\n\t\tfor k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n\t\t\tif p % k == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tif n == 1:\n\t\treturn 2\n\tif n == 2:\n\t\treturn 3\n\tif n == 3:\n\t\treturn 5\n\tif n == 4:\n\t\treturn 13\n\tif n == 5:\n\t\treturn 89\n\tif n == 6:\n\t\treturn 233\n\tif n == 7:\n\t\treturn 377\n\tif n == 8:\n\t\treturn 610\n\tif n == 9:\n\t\treturn 987\n\tif n == 10:\n\t\treturn 1597\n\tif n == 11:\n\t\treturn 2584\n\tif n == 12:\n\t\treturn 4181\n\tif n == 13:\n\t\treturn 6765\n\tif n == 14:\n\t\treturn 10946\n\tif n == 15:\n\t\treturn 17711\n\tif n == 16:\n\t\treturn 28657\n\tif n == 17:\n\t\treturn 46368\n\tif n == 18:\n\t\treturn 75025\n\tif n == 19:\n\t\treturn 121393\n\tif n == 20:\n\t\treturn 196418\n\tif n == 21:\n\t\treturn 317811\n\tif n == 22:\n\t\treturn 514229\n\tif n == 23:\n\t\treturn 832040\n\tif n == 24:\n\t\treturn 1346269\n\tif n == 25:\n\t\treturn 2178309\n\tif n == 26:\n\t\treturn 3524578\n\tif n == 27:\n\t\treturn 5702887\n\tif n == 28:\n\t\treturn 9227465\n\tif n == 29:\n\t\treturn 14930352\n\tif n == 30:\n\t\treturn 24157817\n\tif n == 31:\n\t\treturn 39088169\n\tif n == 32:\n\t\treturn 63245986\n\tif n == 33:\n\t\treturn 102334155\n\tif n == 34:\n\t\treturn 165580141\n\tif n == 35:\n\t\treturn 267914296\n\tif n == 36:\n\t\treturn 433494437\n\tif n == 37:\n\t\treturn 701408733\n\tif n == 38:\n\t\treturn 1134903170\n\tif n == 39:\n\t\treturn 1836311903\n\tif n == 40:\n\t\treturn 2971215073\n\tif n == 41:\n\t\treturn 4807526976\n\tif n == 42:\n\t\treturn 7778742042\n\tif n == 43:\n\t\treturn 12586269028\n\tif n == 44:\n\t\treturn 20365011074\n\tif n == 4"], ["def triples_sum_to_zero(l: list):\n\t\"\"\"\n\ttriples_sum_to_zero takes a list of integers as an input.\n\tit returns True if there are three distinct elements in the list that\n\tsum to zero, and False otherwise.\n\n\t>>> triples_sum_to_zero([1, 3, 5, 0])\n\tFalse\n\t>>> triples_sum_to_zero([1, 3, -2, 1])\n\tTrue\n\t>>> triples_sum_to_zero([1, 2, 3, 7])\n\tFalse\n\t>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\tTrue\n\t>>> triples_sum_to_zero([1])\n\tFalse\n\t\"\"\"\n\tfor i in range(len(l)):\n\t\tfor j in range(i + 1, len(l)):\n\t\t\tfor k in range(j + 1, len(l)):\n\t\t\t\tif l[i] + l[j] + l[k] == 0:\n\t\t\t\t\treturn True\n\treturn False\n"], ["def car_race_collision(n: int):\n\t\"\"\"\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t\"\"\"\n\t# TODO: Write your code here.\n\treturn 0\n"], ["def incr_list(l: list):\n\t\"\"\"Return list with elements incremented by 1.\n\t>>> incr_list([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t\"\"\"\n\treturn [x + 1 for x in l]\n"], ["def pairs_sum_to_zero(l):\n\t\"\"\"\n\tpairs_sum_to_zero takes a list of integers as an input.\n\tit returns True if there are two distinct elements in the list that\n\tsum to zero, and False otherwise.\n\t>>> pairs_sum_to_zero([1, 3, 5, 0])\n\tFalse\n\t>>> pairs_sum_to_zero([1, 3, -2, 1])\n\tFalse\n\t>>> pairs_sum_to_zero([1, 2, 3, 7])\n\tFalse\n\t>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n\tTrue\n\t>>> pairs_sum_to_zero([1])\n\tFalse\n\t\"\"\"\n\tfor i, l1 in enumerate(l):\n\t\tfor j in range(i + 1, len(l)):\n\t\t\tif l1 + l[j] == 0:\n\t\t\t\treturn True\n\treturn False\n"], ["def change_base(x: int, base: int):\n\t\"\"\"Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> change_base(8, 3)\n\t'22'\n\t>>> change_base(8, 2)\n\t'1000'\n\t>>> change_base(7, 2)\n\t'111'\n\t\"\"\"\n\tret = \"\"\n\twhile x > 0:\n\t\tret = str(x % base) + ret\n\t\tx //= base\n\treturn ret[::-1]\n"], ["def triangle_area(a, h):\n\t\"\"\"Given length of a side and high return area for a triangle.\n\t>>> triangle_area(5, 3)\n\t7.5\n\t\"\"\"\n\treturn a * h / 2\n"], ["def fib4(n: int):\n\t\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t\"\"\"\n\tresults = [0, 0, 2, 0]\n\tif n < 4:\n\t\treturn results[n]\n\tfor i in range(4, n + 1):\n\t\tresults[i] = results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4]\n\treturn results[n]\n"], ["def median(l: list):\n\t\"\"\"Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t15.0\n\t\"\"\"\n\tl = sorted(l)\n\tif len(l) % 2 == 1:\n\t\treturn l[len(l)//2]\n\telse:\n\t\treturn (l[len(l)//2] + l[len(l)//2-1])/2\n"], ["def is_palindrome(text: str):\n\t\"\"\"\n\tChecks if given string is a palindrome\n\t>>> is_palindrome('')\n\tTrue\n\t>>> is_palindrome('aba')\n\tTrue\n\t>>> is_palindrome('aaaaa')\n\tTrue\n\t>>> is_palindrome('zbcd')\n\tFalse\n\t\"\"\"\n\tfor i in range(len(text)):\n\t\tif text[i] != text[len(text) - 1 - i]:\n\t\t\treturn False\n\treturn True\n"], ["def modp(n: int, p: int):\n\t\"\"\"Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t\"\"\"\n\tret = 1\n\tfor i in range(n):\n\t\tret *= 2\n\treturn ret % p\n"], ["def encode_shift(s: str):\n\t\"\"\"\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t\"\"\"\n\treturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\t\"\"\"\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t\"\"\"\n\treturn \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n\t\"\"\"\n\tremove_vowels is a function that takes string and returns string without vowels.\n\t>>> remove_vowels('')\n\t''\n\t>>> remove_vowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> remove_vowels('abcdef')\n\t'bcdf'\n\t>>> remove_vowels('aaaaa')\n\t''\n\t>>> remove_vowels('aaBAA')\n\t'B'\n\t>>> remove_vowels('zbcd')\n\t'zbcd'\n\t\"\"\"\n\treturn ''.join(c for c in text if c not in 'aeiou')\n"], ["def below_threshold(l: list, t: int):\n\t\"\"\"Return True if all numbers in the list l are below threshold t.\n\t>>> below_threshold([1, 2, 4, 10], 100)\n\tTrue\n\t>>> below_threshold([1, 20, 4, 10], 5)\n\tFalse\n\t\"\"\"\n\tfor e in l:\n\t\tif e >= t:\n\t\t\treturn False\n\treturn True\n"], ["def add(x: int, y: int):\n\t\"\"\"Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t\"\"\"\n\treturn x + y\n"], ["def same_chars(s0: str, s1: str):\n\t\"\"\"\n\tCheck if two words have the same characters.\n\t>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\tTrue\n\t>>> same_chars('abcd', 'dddddddabc')\n\tTrue\n\t>>> same_chars('dddddddabc', 'abcd')\n\tTrue\n\t>>> same_chars('eabcd', 'dddddddabc')\n\tFalse\n\t>>> same_chars('abcd', 'dddddddabce')\n\tFalse\n\t>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tFalse\n\t\"\"\"\n\tif len(s0) != len(s1):\n\t\treturn False\n\tfor i in range(len(s0)):\n\t\tif s0[i] != s1[i]:\n\t\t\treturn False\n\treturn True\n"], ["def fib(n: int):\n\t\"\"\"Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\treturn fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n\t\"\"\" brackets is a string of \"<\" and \">\".\n\treturn True if every opening bracket has a corresponding closing bracket.\n\n\t>>> correct_bracketing(\"<\")\n\tFalse\n\t>>> correct_bracketing(\"<>\")\n\tTrue\n\t>>> correct_bracketing(\"<<><>>\")\n\tTrue\n\t>>> correct_bracketing(\"><<>\")\n\tFalse\n\t\"\"\"\n\tdepth = 0\n\tfor b in brackets:\n\t\tif b == \"<\":\n\t\t\tdepth += 1\n\t\telif b == \">\":\n\t\t\tdepth -= 1\n\t\tif depth < 0:\n\t\t\treturn False\n\treturn depth == 0\n\n"], ["def monotonic(l: list):\n\t\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\tTrue\n\t>>> monotonic([1, 20, 4, 10])\n\tFalse\n\t>>> monotonic([4, 1, 0, -10])\n\tTrue\n\t\"\"\"\n\tif l == sorted(l) or l == sorted(l, reverse=True):\n\t\treturn True\n\telse:\n\t\treturn False\n"], ["def common(l1: list, l2: list):\n\t\"\"\"Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t\"\"\"\n\tret = set()\n\tfor e1 in l1:\n\t\tfor e2 in l2:\n\t\t\tif e1 == e2:\n\t\t\t\tret.add(e1)\n\treturn sorted(ret)\n"], ["def largest_prime_factor(n: int):\n\t\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largest_prime_factor(13195)\n\t29\n\t>>> largest_prime_factor(2048)\n\t2\n\t\"\"\"\n\tdef is_prime(k):\n\t\tif k < 2:\n\t\t\treturn False\n\t\tfor i in range(2, k - 1):\n\t\t\tif k % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tdef is_composite(k):\n\t\tif k < 2:\n\t\t\treturn False\n\t\tfor i in range(2, k - 1):\n\t\t\tif k % i == 0:\n\t\t\t\treturn True\n\t\treturn False\n\n\tdef is_square(k):\n\t\treturn k ** 0.5 == k\n\n\tdef is_square_free(k):\n\t\treturn is_square(k) and not is_composite(k)\n\n\tdef is_square_free_prime(k):\n\t\treturn is_square_free(k) and is_prime(k)\n\n\tdef is_square_free_composite(k):\n\t\treturn is_square_free(k) and is_composite(k)\n\n\tdef is_square_free_composite_prime(k):\n\t\treturn is_square_free_composite(k) and is_prime(k)\n\n\tdef is_square_free_composite_square(k):\n\t\treturn is_square_free_composite(k) and is_square(k)\n\n\tdef is_square_free_composite_square_prime(k):\n\t\treturn is_square_free_composite_square(k) and is_prime(k)\n\n\tdef is_square_free_composite_square_composite(k):\n\t\treturn is_square_free_composite_square(k) and is_composite(k)\n\n\tdef is_square_free_composite_square_composite_prime(k):\n\t\treturn is_square_free_composite_square_composite(k) and is_prime(k)\n\n\tdef is_square_free_composite_square_composite_square(k):\n\t\treturn is_square_free_composite_square_composite(k) and is_square(k)\n\n\tdef is_square_free_composite_square_composite_square_prime(k):\n\t\treturn is_square_free_composite_square_composite_square(k) and is_prime(k)\n\n\tdef is_square_free_composite_square_composite_square_composite(k):\n\t\treturn is_square_free_composite_square_composite_square(k) and is_composite(k)\n\n\tdef is_square_free_composite_square_composite_square_composite_prime(k):\n\t\treturn is_square_free_composite_square_composite_square_composite(k) and is_prime(k)\n\n\tdef is_square_free_composite_square_composite_square_composite_square(k):\n\t\treturn is_square_free_composite_square_composite_square_composite(k) and is_square(k)\n\n\tdef is_square_free_composite_square_composite_square_composite_square_prime(k):\n\t\treturn is_square_free_composite_square_composite_square_composite_square(k) and is_prime(k)\n\n\tdef is_square_free_composite_square_composite_square_composite_square_composite(k):\n\t\treturn is_square_free_composite_square_composite_square_composite_square(k) and is_composite(k)\n\n\tdef is_square_free_composite_square_composite_square_composite_square_composite_prime(k):\n\t\treturn is_square_free_composite_square_composite_square_composite_square_composite(k) and is_prime(k)\n\n\tdef is_square_free_composite_square_composite_square_composite_square_composite_square(k):\n\t\treturn is_square_free_composite_square_composite_square_composite_square_composite(k) and is_square(k)\n\n\tdef is_square_free_composite_square_composite_square_composite_square_composite_square_prime(k):\n\t\treturn is_square_free_composite_square_composite_square_composite_square_composite_square(k) and is_prime(k)\n\n\tdef"], ["def sum_to_n(n: int):\n\t\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\t>>> sum_to_n(30)\n\t465\n\t>>> sum_to_n(100)\n\t5050\n\t>>> sum_to_n(5)\n\t15\n\t>>> sum_to_n(10)\n\t55\n\t>>> sum_to_n(1)\n\t1\n\t\"\"\"\n\tsum = 0\n\tfor i in range(1, n + 1):\n\t\tsum += i\n\treturn sum\n"], ["def correct_bracketing(brackets: str):\n\t\"\"\" brackets is a string of \"(\" and \")\".\n\treturn True if every opening bracket has a corresponding closing bracket.\n\n\t>>> correct_bracketing(\"(\")\n\tFalse\n\t>>> correct_bracketing(\"()\")\n\tTrue\n\t>>> correct_bracketing(\"(()())\")\n\tTrue\n\t>>> correct_bracketing(\")(()\")\n\tFalse\n\t\"\"\"\n\tdepth = 0\n\tfor b in brackets:\n\t\tif b == \"(\":\n\t\t\tdepth += 1\n\t\telif b == \")\":\n\t\t\tdepth -= 1\n\t\tif depth < 0:\n\t\t\treturn False\n\treturn depth == 0\n\n"], ["def derivative(xs: list):\n\t\"\"\" xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 + ....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t\"\"\"\n\treturn [x * (x + 1) / 2 for x in xs]\n"], ["def fibfib(n: int):\n\t\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 0\n\tif n == 2:\n\t\treturn 1\n\tif n == 3:\n\t\treturn 1\n\tif n == 4:\n\t\treturn 2\n\tif n == 5:\n\t\treturn 3\n\tif n == 6:\n\t\treturn 5\n\tif n == 7:\n\t\treturn 8\n\tif n == 8:\n\t\treturn 13\n\tif n == 9:\n\t\treturn 21\n\tif n == 10:\n\t\treturn 34\n\tif n == 11:\n\t\treturn 55\n\tif n == 12:\n\t\treturn 89\n\tif n == 13:\n\t\treturn 144\n\tif n == 14:\n\t\treturn 233\n\tif n == 15:\n\t\treturn 377\n\tif n == 16:\n\t\treturn 610\n\tif n == 17:\n\t\treturn 987\n\tif n == 18:\n\t\treturn 1597\n\tif n == 19:\n\t\treturn 2584\n\tif n == 20:\n\t\treturn 4181\n\tif n == 21:\n\t\treturn 6765\n\tif n == 22:\n\t\treturn 10946\n\tif n == 23:\n\t\treturn 17711\n\tif n == 24:\n\t\treturn 28657\n\tif n == 25:\n\t\treturn 46368\n\tif n == 26:\n\t\treturn 75025\n\tif n == 27:\n\t\treturn 121393\n\tif n == 28:\n\t\treturn 196418\n\tif n == 29:\n\t\treturn 317811\n\tif n == 30:\n\t\treturn 514229\n\tif n == 31:\n\t\treturn 832040\n\tif n == 32:\n\t\treturn 1346269\n\tif n == 33:\n\t\treturn 2178309\n\tif n == 34:\n\t\treturn 3524578\n\tif n == 35:\n\t\treturn 5702887\n\tif n == 36:\n\t\treturn 9227465\n\tif n == 37:\n\t\treturn 14930352\n\tif n == 38:\n\t\treturn 24157817\n\tif n == 39:\n\t\treturn 39088169\n\tif n == 40:\n\t\treturn 63245986\n\tif n == 41:\n\t\treturn 102334155\n\tif n == 42:\n\t\treturn 165580141\n\tif n == 43:\n\t\treturn 267914296\n\tif n == 44:\n\t\treturn 433494437\n\tif n == 45:\n\t\treturn 701408733\n\tif n == 46:\n\t\treturn 1134903170\n\tif n == 47:\n\t\treturn 1836311903\n\tif n == 48:"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n\t\"\"\"Write a function vowels_count which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowels_count(\"abcde\")\n\t2\n\t>>> vowels_count(\"ACEDY\")\n\t3\n\t\"\"\"\n\tvowels = \"aeiouAEIOU\"\n\tn_vowels = sum(c in vowels for c in s)\n\tif s[-1] in vowels:\n\t\tn_vowels += 1\n\treturn n_vowels\n"], ["def circular_shift(x, shift):\n\t\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circular_shift(12, 1)\n\t\"21\"\n\t>>> circular_shift(12, 2)\n\t\"12\"\n\t\"\"\"\n\ts = str(x)\n\tif shift > len(s):\n\t\treturn s[::-1]\n\telse:\n\t\treturn s[shift:] + s[:shift]\n"], ["def digitSum(s):\n\t\"\"\"Task\n\tWrite a function that takes a string as input and returns the sum of the upper characters only'\n\tASCII codes.\n\n\tExamples:\n\t\tdigitSum(\"\") => 0\n\t\tdigitSum(\"abAB\") => 131\n\t\tdigitSum(\"abcCd\") => 67\n\t\tdigitSum(\"helloE\") => 69\n\t\tdigitSum(\"woArBld\") => 131\n\t\tdigitSum(\"aAaaaXa\") => 153\n\t\"\"\"\n\tif s == \"\": return 0\n\treturn sum(ord(c) for c in s if c.isupper())\n"], ["def fruit_distribution(s,n):\n\t\"\"\"\n\tIn this task, you will be given a string that represents a number of apples and oranges \n\tthat are distributed in a basket of fruit this basket contains \n\tapples, oranges, and mango fruits. Given the string that represents the total number of \n\tthe oranges and apples and an integer that represent the total number of the fruits \n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t\"\"\"\n\tlis = list()\n\tfor i in s.split(' '):\n\t\tif i == 'apples':\n\t\t\tlis.append(int(n))\n\t\telif i == 'oranges':\n\t\t\tlis.append(int(n))\n\t\telif i == 'mango':\n\t\t\tlis.append(int(n))\n\treturn sum(lis)\n"], ["def pluck(arr):\n\t\"\"\"\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\tInput: [4,2,3]\n\t\tOutput: [2, 1]\n\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\tInput: [1,2,3]\n\t\tOutput: [2, 1]\n\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index. \n\n\tExample 3:\n\t\tInput: []\n\t\tOutput: []\n    \n\tExample 4:\n\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\tOutput: [0, 1]\n\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t* 1 <= nodes.length <= 10000\n\t\t* 0 <= node.value\n\t\"\"\"\n\tif(len(arr) == 0): return []\n\tevens = list(filter(lambda x: x%2 == 0, arr))\n\tif(len(evens) == 0): return [arr[0]]\n\treturn [evens[0], evens[0]]\n"], ["def search(lst):\n\t'''\n\tYou are given a non-empty list of positive integers. Return the greatest integer that is greater than \n\tzero, and has a frequency greater than or equal to the value of the integer itself. \n\tThe frequency of an integer is the number of times it appears in the list.\n\tIf no such a value exist, return -1.\n\tExamples:\n\t\tsearch([4, 1, 2, 2, 3, 1]) == 2\n\t\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n\t\tsearch([5, 5, 4, 4, 4]) == -1\n\t'''\n\tfrq = [0] * (max(lst) + 1)\n\tfor i in lst:\n\t\tfrq[i] += 1;\n\n\tans = -1\n\tfor i in frq:\n\t\tif i >= ans:\n\t\t\tans = i\n\n\treturn ans\n"], ["def strange_sort_list(lst):\n\t'''\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrange_sort_list([]) == []\n\t'''\n\tres, switch = [], True\n\twhile lst:\n\t\tres.append(min(lst) if switch else max(lst))\n\t\tswitch = not switch\n\t\tlst.remove(min(lst) if switch else max(lst))\n\treturn res\n"], ["def triangle_area(a, b, c):\n\t'''\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater \n\tthan the third side.\n\tExample:\n\ttriangle_area(3, 4, 5) == 6.00\n\ttriangle_area(1, 2, 10) == -1\n\t'''\n\tif a + b <= c or a + c <= b or b + c <= a:\n\t\treturn -1 \n\ts = (a + b + c)/2\n\treturn round(s * (s - a) * (s - b) * (s - c), 2)\n"], ["def will_it_fly(q,w):\n\t'''\n\tWrite a function that returns True if the object q will fly, and False otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twill_it_fly([1, 2], 5) \u279e False \n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twill_it_fly([3, 2, 3], 1) \u279e False\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twill_it_fly([3, 2, 3], 9) \u279e True\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twill_it_fly([3], 5) \u279e True\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t'''\n\tif sum(q) > w:\n\t\treturn False\n\n\ti, j = 0, len(q)-1\n\twhile i<j:\n\t\tif q[i] != q[j]:\n\t\t\treturn False\n\t\ti += 1\n\t\tj -= 1\n\n\treturn True\n"], ["def smallest_change(arr):\n\t\"\"\"\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallest_change([1,2,3,5,4,7,9,6]) == 4\n\tsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallest_change([1, 2, 3, 2, 1]) == 0\n\t\"\"\"\n\tans = 0\n\tfor i in range(len(arr) // 2):\n\t\tif arr[i] != arr[len(arr) - 1 - i]:\n\t\t\tans += 1\n\treturn ans\n"], ["def total_match(lst1, lst2):\n\t'''\n\tWrite a function that accepts two lists of strings and returns the list that has \n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotal_match([], []) \u279e []\n\ttotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n\ttotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n\ttotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n\ttotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\t'''\n\tl1 = 0\n\tfor st in lst1:\n\t\tl1 += len(st)\n    \n\tl2 = 0\n\tfor st in lst2:\n\t\tl2 += len(st)\n\n\tif l1 == l2:\n\t\treturn lst1\n\telse:\n\t\treturn lst2\n"], ["def is_multiply_prime(a):\n\t\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100. \n\tExample:\n\tis_multiply_prime(30) == True\n\t30 = 2 * 3 * 5\n\t\"\"\"\n\tdef is_prime(n):\n\t\tfor j in range(2,n):\n\t\t\tif n%j == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tfor i in range(2,101):\n\t\tif is_prime(i):\n\t\t\tif i*i == a:\n\t\t\t\treturn True\n\treturn False\n"], ["def is_simple_power(x, n):\n\t\"\"\"Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tis_simple_power(1, 4) => true\n\tis_simple_power(2, 2) => true\n\tis_simple_power(8, 2) => true\n\tis_simple_power(3, 2) => false\n\tis_simple_power(3, 1) => false\n\tis_simple_power(5, 3) => false\n\t\"\"\"\n\tif (n == 1): \n\t\treturn (x == 1) \n\tpower = 1\n\twhile (power < n):\n\t\tpower = power * 2\n\treturn (x == power)\n"], ["def iscube(a):\n\t'''\n\tWrite a function that takes an integer a and returns True \n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> True\n\tiscube(2) ==> False\n\tiscube(-1) ==> True\n\tiscube(64) ==> True\n\tiscube(0) ==> True\n\tiscube(180) ==> False\n\t'''\n\ta = abs(a)\n\tif a == 0:\n\t\treturn True\n\tif a % 2 == 0:\n\t\treturn False\n\tif a % 3 == 0:\n\t\treturn False\n\tif a % 4 == 0:\n\t\treturn False\n\tif a % 5 == 0:\n\t\treturn False\n\tif a % 6 == 0:\n\t\treturn False\n\tif a % 7 == 0:\n\t\treturn False\n\tif a % 8 == 0:\n\t\treturn False\n\tif a % 9 == 0:\n\t\treturn False\n\tif a % 10 == 0:\n\t\treturn False\n\treturn True\n"], ["def hex_key(num):\n\t\"\"\"You have been tasked to write a function that receives \n\ta hexadecimal number as a string and counts the number of hexadecimal \n\tdigits that are primes (prime number, or a prime, is a natural number \n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\tPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\tSo you have to determine a number of the following digits: 2, 3, 5, 7, \n\tB (=decimal 11), D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string, \n\tand symbols A,B,C,D,E,F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t\"\"\"\n\tprimes = ('2', '3', '5', '7', 'B', 'D')\n\ttotal = 0\n\tfor i in range(0, len(num)):\n\t\tif num[i] in primes:\n\t\t\ttotal += 1\n\treturn total\n"], ["def decimal_to_binary(decimal):\n\t\"\"\"You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimal_to_binary(15)   # returns \"db1111db\"\n\tdecimal_to_binary(32)   # returns \"db100000db\"\n\t\"\"\"\n\t# Your code here\n\treturn \"\"\n"], ["def is_happy(s):\n\t\"\"\"You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tis_happy(a) => False\n\tis_happy(aa) => False\n\tis_happy(abcd) => True\n\tis_happy(aabb) => False\n\tis_happy(adb) => True\n\tis_happy(xyy) => False\n\t\"\"\"\n\tif len(s) < 3:\n\t  return False\n\n\tfor i in range(len(s) - 2):\n\t  if s[i] == s[i+1] and s[i] == s[i+2]:\n\t    return False\n\n\treturn True\n"], ["def numerical_letter_grade(grades):\n\t\"\"\"It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write \n\ta function that can output a list of letter grades using the following table:\n\t\t\t GPA       |    Letter grade\n\t\t\t  4.0                A+\n\t\t\t> 3.7                A \n\t\t\t> 3.3                A- \n\t\t\t> 3.0                B+\n\t\t\t> 2.7                B \n\t\t\t> 2.3                B-\n\t\t\t> 2.0                C+\n\t\t\t> 1.7                C\n\t\t\t> 1.3                C-\n\t\t\t> 1.0                D+ \n\t\t\t> 0.7                D \n\t\t\t> 0.0                D-\n\t\t\t  0.0                E\n    \n\n\tExample:\n\tgrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t\"\"\"\n\n   \n\tletter_grade = []\n\tfor gpa in grades:\n\t\tif gpa == 4.0:\n\t\t\tletter_grade.append(\"A+\")\n\t\telif gpa > 3.7:\n\t\t\tletter_grade.append(\"A\")\n\t\telif gpa > 3.3:\n\t\t\tletter_grade.append(\"A-\")\n\t\telif gpa > 3.0:\n\t\t\tletter_grade.append(\"B+\")\n\t\telif gpa > 2.7:\n\t\t\tletter_grade.append(\"B\")\n\t\telif gpa > 2.3:\n\t\t\tletter_grade.append(\"B-\")\n\t\telif gpa > 2.0:\n\t\t\tletter_grade.append(\"C+\")\n\t\telif gpa > 1.7:\n\t\t\tletter_grade.append(\"C\")\n\t\telif gpa > 1.3:\n\t\t\tletter_grade.append(\"C-\")\n\t\telif gpa > 1.0:\n\t\t\tletter_grade.append(\"D+\")\n\t\telif gpa > 0.7:\n\t\t\tletter_grade.append(\"D\")\n\t\telif gpa > 0.0:\n\t\t\tletter_grade.append(\"D-\")\n\t\telif gpa == 0.0:\n\t\t\tletter_grade.append(\"E\")\n\t\telse:\n\t\t\tletter_grade.append(\"F\")\n\n\treturn letter_grade\n"], ["def prime_length(string):\n\t\"\"\"Write a function that takes a string and returns True if the string\n\tlength is a prime number or False otherwise\n\tExamples\n\tprime_length('Hello') == True\n\tprime_length('abcdcba') == True\n\tprime_length('kittens') == True\n\tprime_length('orange') == False\n\t\"\"\"\n\tl = len(string)\n\tif l == 0 or l == 1:\n\t\treturn False\n\tfor i in range(2, l):\n\t\tif string[i] == string[i-1]:\n\t\t\treturn False\n\treturn True\n"], ["def starts_one_ends(n):\n\t\"\"\"\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t\"\"\"\n\tif n == 1: return 1\n\tif n == 2: return 1\n\tif n == 3: return 2\n\tif n == 4: return 3\n\tif n == 5: return 4\n\tif n == 6: return 5\n\tif n == 7: return 6\n\tif n == 8: return 7\n\tif n == 9: return 8\n\tif n == 10: return 9\n\tif n == 11: return 10\n\tif n == 12: return 11\n\tif n == 13: return 12\n\tif n == 14: return 13\n\tif n == 15: return 14\n\tif n == 16: return 15\n\tif n == 17: return 16\n\tif n == 18: return 17\n\tif n == 19: return 18\n\tif n == 20: return 19\n\tif n == 21: return 20\n\tif n == 22: return 21\n\tif n == 23: return 22\n\tif n == 24: return 23\n\tif n == 25: return 24\n\tif n == 26: return 25\n\tif n == 27: return 26\n\tif n == 28: return 27\n\tif n == 29: return 28\n\tif n == 30: return 29\n\tif n == 31: return 30\n\tif n == 32: return 31\n\tif n == 33: return 32\n\tif n == 34: return 33\n\tif n == 35: return 34\n\tif n == 36: return 35\n\tif n == 37: return 36\n\tif n == 38: return 37\n\tif n == 39: return 38\n\tif n == 40: return 39\n\tif n == 41: return 40\n\tif n == 42: return 41\n\tif n == 43: return 42\n\tif n == 44: return 43\n\tif n == 45: return 44\n\tif n == 46: return 45\n\tif n == 47: return 46\n\tif n == 48: return 47\n\tif n == 49: return 48\n\tif n == 50: return 49\n\tif n == 51: return 50\n\tif n == 52: return 51\n\tif n == 53: return 52\n\tif n == 54: return 53\n\tif n == 55: return 54\n\tif n == 56: return 55\n\tif n == 57: return 56\n\tif n == 58: return 57\n\tif n == 59: return 58\n\tif n == 60: return 59\n\tif n == 61: return 60\n\tif n == 62: return 61\n\tif n == 63: return 62\n\tif n == 64: return 63\n\tif n == 65: return 64\n\tif n == 66: return 65\n\tif n == 67: return 66\n\tif n == 68: return 67\n\tif n == 69: return 68\n\tif n == 70: return 69\n\tif n == 71: return 70\n\tif n == 72: return 71\n\tif n == 73: return 72\n\tif n == 74: return 73\n\tif n == 75: return 74\n\tif n == 76:"], ["def solve(N):\n\t\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n\tExample\n\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n\tVariables:\n\t\t@N integer\n\t\t\t Constraints: 0 \u2264 N \u2264 10000.\n\tOutput:\n\t\t a string of binary number\n\t\"\"\"\n\t# Your code here\n\treturn \"\"\n"], ["def add(lst):\n\t\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\tadd([4, 2, 6, 7]) ==> 2 \n\t\"\"\"\n\treturn sum(x for x in lst if x % 2 == 0)\n"], ["def anti_shuffle(s):\n\t\"\"\"\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tanti_shuffle('Hi') returns 'Hi'\n\tanti_shuffle('hello') returns 'ehllo'\n\tanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\t\"\"\"\n\treturn ' '.join(sorted(s.split()))\n"], ["def get_row(lst, x):\n\t\"\"\"\n\tYou are given a 2 dimensional data, as a nested lists,\n\twhich is similar to matrix, however, unlike matrices,\n\teach row may contain a different number of columns.\n\tGiven lst, and integer x, find integers x in the list,\n\tand return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\teach tuple is a coordinate - (row, columns), starting with 0.\n\tSort coordinates initially by rows in ascending order.\n\tAlso, sort coordinates of the row by columns in descending order.\n    \n\tExamples:\n\tget_row([\n\t  [1,2,3,4,5,6],\n\t  [1,2,3,4,1,6],\n\t  [1,2,3,4,5,1]\n\t], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\tget_row([], 1) == []\n\tget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\t\"\"\"\n\tcoords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n\tcoords.sort(key=lambda x: x[0])\n\treturn coords\n"], ["def sort_array(array):\n\t\"\"\"\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sort_array([]) => []\n\t* sort_array([5]) => [5]\n\t* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t\"\"\"\n\t# write your code here\n\treturn array\n"], ["def encrypt(s):\n\t\"\"\"Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t\"\"\"\n\td = 'abcdefghijklmnopqrstuvwxyz'\n\tout = ''\n\tfor c in s:\n\t\tif c in d:\n\t\t\tout += d[(d.index(c) + 2) % len(d)]\n\t\telse:\n\t\t\tout += c\n\treturn out\n"], ["def next_smallest(lst):\n\t\"\"\"\n\tYou are given a list of integers.\n\tWrite a function next_smallest() that returns the 2nd smallest element of the list.\n\tReturn None if there is no such element.\n    \n\tnext_smallest([1, 2, 3, 4, 5]) == 2\n\tnext_smallest([5, 1, 4, 3, 2]) == 2\n\tnext_smallest([]) == None\n\tnext_smallest([1, 1]) == None\n\t\"\"\"\n\tlst = sorted(set(lst))\n\tif len(lst) == 1:\n\t\treturn None\n\treturn lst[1]\n"], ["def is_bored(S):\n\t\"\"\"\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n   \n\tFor example:\n\t>>> is_bored(\"Hello world\")\n\t0\n\t>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t\"\"\"\n\timport re\n\treturn len(re.findall(r\"I\", S))\n"], ["def any_int(x, y, z):\n\t'''\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n    \n\tExamples\n\tany_int(5, 2, 7) \u279e True\n    \n\tany_int(3, 2, 2) \u279e False\n\n\tany_int(3, -2, 1) \u279e True\n    \n\tany_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n\t'''\n    \n\tif isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n\t\tif (x+y==z) or (x+z==y) or (y+z==x):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n"], ["def encode(message):\n\t\"\"\"\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n    \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t\"\"\"\n\tvowels = \"aeiouAEIOU\"\n\tvowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n\tmessage = message.lower()\n\tmessage = message.replace(vowels, vowels_replace)\n\treturn message\n"], ["def skjkasdkd(lst):\n\t\"\"\"You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t\"\"\"\n\tdef isPrime(n):\n\t\tfor i in range(2,int(n**0.5)+1):\n\t\t\tif n%i==0:\n\t\t\t\treturn False\n\n\t\treturn True\n\tmaxx = 0\n\tfor i in lst:\n\t\tif isPrime(i):\n\t\t\tif i > maxx:\n\t\t\t\tmaxx = i\n\treturn sum(str(i).digits())\n"], ["def check_dict_case(dict):\n\t\"\"\"\n\tGiven a dictionary, return True if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return False.\n\tThe function should return False is the given dictionary is empty.\n\tExamples:\n\tcheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\tcheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n\tcheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n\tcheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\tcheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\t\"\"\"\n\tif len(dict.keys()) == 0:\n\t\treturn False\n\telse:\n\t\tstate = \"start\"\n\t\tfor key in dict.keys():\n\n\t\t\tif isinstance(key, str) == False:\n\t\t\t\tstate = \"mixed\"\n\t\t\t\tbreak\n\t\t\tif state == \"start\":\n\t\t\t\tif key.isupper():\n\t\t\t\t\tstate = \"upper\"\n\t\t\t\telse:\n\t\t\t\t\tstate = \"lower\"\n\t\t\tif state == \"mixed\":\n\t\t\t\tif key.isupper():\n\t\t\t\t\tstate = \"upper\"\n\t\t\t\telse:\n\t\t\t\t\tstate = \"lower\"\n\t\t\tif state == \"upper\":\n\t\t\t\tif key.islower():\n\t\t\t\t\tstate = \"lower\"\n\t\t\t\telse:\n\t\t\t\t\tstate = \"mixed\"\n\t\t\tif state == \"lower\":\n\t\t\t\tif key.islower():\n\t\t\t\t\tstate = \"lower\"\n\t\t\t\telse:\n\t\t\t\t\tstate = \"mixed\"\n\t\treturn state == \"lower\"\n"], ["def count_up_to(n):\n\t\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcount_up_to(5) => [2,3]\n\tcount_up_to(11) => [2,3,5,7]\n\tcount_up_to(0) => []\n\tcount_up_to(20) => [2,3,5,7,11,13,17,19]\n\tcount_up_to(1) => []\n\tcount_up_to(18) => [2,3,5,7,11,13,17]\n\t\"\"\"\n\tprimes = []\n\tfor i in range(2, n):\n\t\tis_prime = True\n\t\tfor j in range(2, i):\n\t\t\tif i % j == 0:\n\t\t\t\tis_prime = False\n\t\t\t\tbreak\n\t\tif is_prime:\n\t\t\tprimes.append(i)\n\treturn primes\n"], ["def multiply(a, b):\n\t\"\"\"Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t\"\"\"\n\treturn a * b\n"], ["def count_upper(s):\n\t\"\"\"\n\tGiven a string s, count the number of uppercase vowels in even indices.\n    \n\tFor example:\n\tcount_upper('aBCdEf') returns 1\n\tcount_upper('abcdefg') returns 0\n\tcount_upper('dBBE') returns 0\n\t\"\"\"\n\tcount = 0\n\tfor i in range(0,len(s),2):\n\t\tif s[i] == s[i+1].upper():\n\t\t\tcount += 1\n\treturn count\n"], ["def closest_integer(value):\n\t'''\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\n\tExamples\n\t>>> closest_integer(\"10\")\n\t10\n\t>>> closest_integer(\"15.3\")\n\t15\n\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closest_integer(\"14.5\") should\n\treturn 15 and closest_integer(\"-14.5\") should return -15.\n\t'''\n\tfrom math import floor, ceil\n\n\tif value.count('.') == 1:\n\t\t# remove trailing zeros\n\t\twhile (value[-1] == '0'):\n\t\t\tvalue = value[:-1]\n\n\tnum = float(value)\n\tif value[-2:] == '.5':\n\t\tif num > 0:\n\t\t\treturn int(floor(num))\n\t\telse:\n\t\t\treturn int(ceil(num))\n\telse:\n\t\treturn int(num)\n"], ["def make_a_pile(n):\n\t\"\"\"\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t- the next odd number if n is odd.\n\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> make_a_pile(3)\n\t[3, 5, 7]\n\t\"\"\"\n\tif n % 2 == 0:\n\t\treturn [n, n // 2]\n\telse:\n\t\treturn [n // 2, n // 2 + 1]\n\n"], ["def words_string(s):\n\t\"\"\"\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n    \n\tFor example:\n\twords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t\"\"\"\n\tif not s:\n\t\treturn []\n\n\ts_list = []\n\n\tfor letter in s:\n\t\tif letter == \",\":\n\t\t\ts_list.append(\"\")\n\t\telse:\n\t\t\ts_list.append(letter)\n\n\treturn s_list\n"], ["def choose_num(x, y):\n\t\"\"\"This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchoose_num(12, 15) = 14\n\tchoose_num(13, 12) = -1\n\t\"\"\"\n\tif x > y:\n\t\treturn -1\n\tif y % 2 == 0:\n\t\treturn y\n\treturn choose_num(x, y - 2)\n\n"], ["def rounded_avg(n, m):\n\t\"\"\"You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\trounded_avg(1, 5) => \"0b11\"\n\trounded_avg(7, 5) => -1\n\trounded_avg(10, 20) => \"0b1111\"\n\trounded_avg(20, 33) => \"0b11010\"\n\t\"\"\"\n\tif m < n:\n\t\treturn -1\n\tsummation = 0\n\tfor i in range(n, m + 1):\n\t\tsummation += i\n\treturn bin(summation)[2:]\n"], ["def unique_digits(x):\n\t\"\"\"Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n    \n\tFor example:\n\t>>> unique_digits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> unique_digits([152, 323, 1422, 10])\n\t[]\n\t\"\"\"\n\todd_digit_elements = []\n\tfor i in x:\n\t\tif i % 2 != 0:\n\t\t\todd_digit_elements.append(i)\n\treturn sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n\t\"\"\"\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n\t  If the array is empty, return an empty array:\n\t  arr = []\n\t  return []\n    \n\t  If the array has any strange number ignore it:\n\t  arr = [1, -1 , 55] \n\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t-> reverse arr -> [55, 1, -1]\n\t  return = ['One']\n\t\"\"\"\n\tdic = {\n\t\t1: \"One\",\n\t\t2: \"Two\",\n\t\t3: \"Three\",\n\t\t4: \"Four\",\n\t\t5: \"Five\",\n\t\t6: \"Six\",\n\t\t7: \"Seven\",\n\t\t8: \"Eight\",\n\t\t9: \"Nine\"\n\t}\n\tarr = sorted(arr)\n\tarr = arr[::-1]\n\tfor i in arr:\n\t\tarr[i - 1] = dic[i]\n\treturn arr\n"], ["def f(n):\n\t\"\"\" Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t\"\"\"\n\tret = []\n\tfor i in range(1,n+1):\n\t\tif i%2 == 0:\n\t\t\tx = 1\n\t\t\tfor j in range(1,i+1): x *= j\n\t\t\tret.append(x)\n\t\telse:\n\t\t\tret.append(i)\n\treturn ret\n"], ["def even_odd_palindrome(n):\n\t\"\"\"\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\tInput: 3\n\t\tOutput: (1, 2)\n\t\tExplanation:\n\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\tInput: 12\n\t\tOutput: (4, 6)\n\t\tExplanation:\n\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t1. 1 <= n <= 10^3\n\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t\"\"\"\n\tdef is_palindrome(n):\n\t\treturn str(n) == str(n)[::-1]\n\n\teven_palindrome_count = 0\n\todd_palindrome_count = 0\n\n\tfor i in range(1, n + 1):\n\t\tif is_palindrome(i):\n\t\t\tif i % 2 == 0:\n\t\t\t\teven_palindrome_count += 1\n\t\t\telse:\n\t\t\t\todd_palindrome_count += 1\n\n\treturn even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n\t\"\"\"\n\tWrite a function count_nums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> count_nums([]) == 0\n\t>>> count_nums([-1, 11, -11]) == 1\n\t>>> count_nums([1, 1, 2]) == 3\n\t\"\"\"\n\tdef digits_sum(n):\n\t\tneg = 1\n\t\tif n < 0: n, neg = -1 * n, -1\n\t\treturn sum(map(abs, str(n).split('')))\n\n\treturn sum(map(digits_sum, arr))\n"], ["def move_one_ball(arr):\n\t\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\tYou are allowed to perform right shift operation any number of times.\n    \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return True else return False.\n\tIf the given array is empty then return True.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n    \n\tmove_one_ball([3, 4, 5, 1, 2])==>True\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t be achieved for the given array.\n\tmove_one_ball([3, 5, 4, 1, 2])==>False\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\tarray by performing any number of right shift operations.\n                \n\t\"\"\"\n\tif len(arr)==0:\n\t  return True\n\tsorted_array=sorted(arr)\n\tmy_arr=[]\n    \n\tmin_value=min(arr)\n\tmax_value=max(arr)\n\tfor i in range(len(arr)):\n\t  if arr[i]>=min_value and arr[i]<=max_value:\n\t    my_arr.append(arr[i])\n\tif len(my_arr)==len(arr):\n\t  return True\n\telse:\n\t  return False\n"], ["def exchange(lst1, lst2):\n\t\"\"\"In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t\"\"\"\n\todd = 0\n\teven = 0\n\tfor i in lst1:\n\t\tif i%2 == 1:\n\t\t\todd += 1\n\tfor i in lst2:\n\t\tif i%2 == 0:\n\t\t\teven += 1\n\tif odd == even:\n\t\treturn \"YES\"\n\telse:\n\t\treturn \"NO\"\n"], ["def histogram(test):\n\t\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n    \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t\"\"\"\n\tdict1={}\n\tlist1=test.split(\" \")\n\tt=0\n\n\tfor i in list1:\n\t\tif(list1.count(i)>t) and i!='':\n\t\t\tdict1[i]=list1.count(i)\n\t\t\tt=list1.count(i)\n\n\treturn dict1\n"], ["def reverse_delete(s,c):\n\t\"\"\"Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and True/False for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\t\"\"\"\n\ts = ''.join([char for char in s if char not in c])\n\treturn (s,s == s[::-1])\n"], ["def odd_count(lst):\n\t\"\"\"Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> odd_count(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> odd_count(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t\"\"\"\n\tres = []\n\tfor arr in lst:\n\t\tres.append(len(arr) - arr.count('0'))\n\treturn res\n"], ["def minSubArraySum(nums):\n\t\"\"\"\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t\"\"\"\n\tmax_sum = 0\n\ts = 0\n\tfor num in nums:\n\t\ts += -num\n\t\tif (s < 0):\n\t\t\ts = 0\n\t\tif (s > max_sum):\n\t\t\tmax_sum = s\n\treturn max_sum\n"], ["def max_fill(grid, capacity):\n\timport math\n\t\"\"\"\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\tInput: \n\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\tbucket_capacity : 1\n\t\tOutput: 6\n\n\tExample 2:\n\t\tInput: \n\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\tbucket_capacity : 2\n\t\tOutput: 5\n    \n\tExample 3:\n\t\tInput: \n\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\tbucket_capacity : 5\n\t\tOutput: 0\n\n\tConstraints:\n\t\t* all wells have the same length\n\t\t* 1 <= grid.length <= 10^2\n\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t* grid[i][j] -> 0 | 1\n\t\t* 1 <= capacity <= 10\n\t\"\"\"\n\t# Write your code here\n\t# 1. Initialize a counter to count the number of times the bucket is lowered\n\tcounter = 0\n\t# 2. Initialize a counter to count the number of times the bucket is filled\n\tfilled = 0\n\t# 3. Initialize a counter to count the number of times the bucket is empty\n\tempty = 0\n\t# 4. Initialize a counter to count the number of times the bucket is full\n\tfull = 0\n\t# 5. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full = 0\n\t# 6. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_2 = 0\n\t# 7. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_3 = 0\n\t# 8. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_4 = 0\n\t# 9. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_5 = 0\n\t# 10. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_6 = 0\n\t# 11. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_7 = 0\n\t# 12. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_8 = 0\n\t# 13. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_9 = 0\n\t# 14. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_10 = 0\n\t# 15. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_11 = 0\n\t# 16. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_12 = 0\n\t# 17. Initialize a counter to count the number of times the bucket is empty\n\t#    and the number of times the bucket is full\n\tempty_full_13 = 0\n"], ["def sort_array(arr):\n\t\"\"\"\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t\"\"\"\n\tpass\n"], ["def select_words(s, n):\n\t\"\"\"Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\tselect_words(\"simple white space\", 2) ==> []\n\tselect_words(\"Hello world\", 4) ==> [\"world\"]\n\tselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t\"\"\"\n\tresult = []\n\tfor word in s.split():\n\t\tn_consonants = 0\n\t\tfor i in range(0, len(word)):\n\t\t\tif word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n\t\t\t\tn_consonants += 1\n\t\tif n_consonants == n:\n\t\t\tresult.append(word)\n\treturn result\n"], ["def get_closest_vowel(word):\n\t\"\"\"You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n    \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tget_closest_vowel(\"yogurt\") ==> \"u\"\n\tget_closest_vowel(\"FULL\") ==> \"U\"\n\tget_closest_vowel(\"quick\") ==> \"\"\n\tget_closest_vowel(\"ab\") ==> \"\"\n\t\"\"\"\n\tif len(word) < 3:\n\t\treturn \"\"\n\n\tvowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n\tleft_side = word[1:]\n\tright_side = word[:1]\n\n\tif left_side in vowels and right_side in vowels:\n\t\treturn right_side\n\telse:\n\t\treturn \"\"\n"], ["def match_parens(lst):\n\t'''\n\tYou are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n\tExamples:\n\tmatch_parens(['()(', ')']) == 'Yes'\n\tmatch_parens([')', ')']) == 'No'\n\t'''\n\tdef check(s):\n\t\tval = 0\n\t\tfor i in s:\n\t\t\tif i == '(':\n\t\t\t\tval = val + 1\n\t\t\telse:\n\t\t\t\tval = val - 1\n\t\treturn val == 0\n\n\tif len(lst) == 2:\n\t\treturn check(lst[0]) and check(lst[1])\n\telse:\n\t\treturn 'No'\n"], ["def maximum(arr, k):\n\t\"\"\"\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\tInput: arr = [-3, -4, 5], k = 3\n\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\tInput: arr = [4, -4, 4], k = 2\n\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\tOutput: [2]\n\n\tNote:\n\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t3. 0 <= k <= len(arr)\n\t\"\"\"\n\tif k == 0:\n\t\treturn []\n\tif k == 1:\n\t\treturn arr\n\tif k == 2:\n\t\treturn max(arr[0], arr[1])\n\tif k == 3:\n\t\treturn max(arr[0], max(arr[1], arr[2]))\n\tif k == 4:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], arr[3])))\n\tif k == 5:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))\n\tif k == 6:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))\n\tif k == 7:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6])))))))\n\tif k == 8:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))\n\tif k == 9:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8])))))))\n\tif k == 10:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))\n\tif k == 11:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], arr[10])))))))\n\tif k == 12:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], max(arr[10], arr[11])))))))\n\tif k == 13:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], max(arr[10], max(arr[11], arr[12])))))))\n\tif k == 14:\n\t\treturn max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], max(arr[10], max(arr[11], max(arr[12],"], ["def solution(lst):\n\t\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t\"\"\"\n\treturn sum(x for x in lst if x % 2 == 1)\n"], ["def add_elements(arr, k):\n\t\"\"\"\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t1. 1 <= len(arr) <= 100\n\t\t2. 1 <= k <= len(arr)\n\t\"\"\"\n\tarr = sorted(arr)\n\tsum = 0\n\tfor i in range(k):\n\t\tsum += int(arr[i])\n\treturn sum\n"], ["def get_odd_collatz(n):\n\t\"\"\"\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t1. Collatz(1) is [1].\n\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t\"\"\"\n\tif n%2==0:\n\t\todd_collatz = [] \n\telse:\n\t\todd_collatz = [n]\n\twhile n > 1:\n\t\tif n % 2 == 0:\n\t\t\tn = n/2\n\t\telse:\n\t\t\tn = 3*n+1\n\t\todd_collatz.append(n)\n\treturn sorted(odd_collatz)\n"], ["def valid_date(date):\n\t\"\"\"You have to write a function which validates a given date string and\n\treturns True if the date is valid otherwise False.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalid_date('03-11-2000') => True\n\n\tvalid_date('15-01-2012') => False\n\n\tvalid_date('04-0-2040') => False\n\n\tvalid_date('06-04-2020') => True\n\n\tvalid_date('06/04/2020') => False\n\t\"\"\"\n\ttry:\n\t\tdate = date.strip()\n\t\tmonth, day, year = date.split('-')\n\t\tmonth, day, year = int(month), int(day), int(year)\n\t\tif month < 1 or month > 12:\n\t\t\treturn False\n\t\tif month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n\t\t\treturn False\n\t\tif month in [4,6,9,11] and day < 1 or day > 30:\n\t\t\treturn False\n\t\tif month in [2] and day < 1 or day > 29:\n\t\t\treturn False\n\t\treturn True\n\texcept:\n\t\treturn False\n"], ["def split_words(txt):\n\t'''\n\tGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\tExamples\n\tsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n\tsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n\tsplit_words(\"abcdef\") == 3 \n\t'''\n\tif \" \" in txt:\n\t\treturn txt.split()\n\telif \",\" in txt:\n\t\treturn txt.split(\",\")\n\telse:\n\t\treturn len(txt) // 2\n"], ["def is_sorted(lst):\n\t'''\n\tGiven a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return False. Assume no negative numbers and only integers.\n\n\tExamples\n\tis_sorted([5]) \u279e True\n\tis_sorted([1, 2, 3, 4, 5]) \u279e True\n\tis_sorted([1, 3, 2, 4, 5]) \u279e False\n\tis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n\tis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n\tis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n\tis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n\tis_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n\t'''\n\tcount_digit = dict([(i, 0) for i in lst])\n\tfor i in lst:\n\t\tcount_digit[i]+=1 \n\tif any(count_digit[i] > 2 for i in lst):\n\t\treturn False\n\treturn True\n"], ["def intersection(interval1, interval2):\n\t\"\"\"You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t\"\"\"\n\tdef is_prime(num):\n\t\tif num == 1 or num == 0:\n\t\t\treturn False\n\t\tif num == 2:\n\t\t\treturn True\n\t\tfor i in range(2, num):\n\t\t\tif num%i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tdef get_length(interval):\n\t\treturn abs(interval[1] - interval[0])\n\n\tdef get_intersection(interval1, interval2):\n\t\treturn (interval1[0] <= interval2[1] and interval2[0] <= interval1[1])\n\n\tif get_length(interval1) == 0 or get_length(interval2) == 0:\n\t\treturn \"NO\"\n\tif get_length(interval1) == 1 and get_length(interval2) == 1:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 1 and get_length(interval2) == 2:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 2 and get_length(interval2) == 1:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 2 and get_length(interval2) == 2:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 2 and get_length(interval2) == 3:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 3 and get_length(interval2) == 1:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 3 and get_length(interval2) == 2:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 3 and get_length(interval2) == 3:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 3 and get_length(interval2) == 4:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 4 and get_length(interval2) == 1:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 4 and get_length(interval2) == 2:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 4 and get_length(interval2) == 3:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 4 and get_length(interval2) == 4:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 4 and get_length(interval2) == 5:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 5 and get_length(interval2) == 1:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 5 and get_length(interval2) == 2:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 5 and get_length(interval2) == 3:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 5 and get_length(interval2) == 4:\n\t\treturn \"YES\"\n\tif get_length(interval1) == 5 and get_length(interval2) == 5:\n\t"], ["def prod_signs(arr):\n\t\"\"\"\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return None for empty arr.\n\n\tExample:\n\t>>> prod_signs([1, 2, 2, -4]) == -9\n\t>>> prod_signs([0, 1]) == 0\n\t>>> prod_signs([]) == None\n\t\"\"\"\n\tif not arr: return None\n\treturn sum(abs(x) * prod(signs(x)) for x in arr)\n"], ["def minPath(grid, k):\n\t\"\"\"\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\tOutput: [1, 2, 1]\n\n\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\tOutput: [1]\n\t\"\"\"\n\tn = len(grid)\n\tval = n * n + 1\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif grid[i][j] == 1:\n\t\t\t\ttemp = []\n\t\t\t\tif i != 0:\n\t\t\t\t\ttemp.append(grid[i - 1][j])\n\n\t\t\t\tif j != 0:\n\t\t\t\t\ttemp.append(grid[i][j - 1])\n\n\t\t\t\tif i != n - 1:\n\t\t\t\t\ttemp.append(grid[i + 1][j])\n\n\t\t\t\tif j != n - 1:\n\t\t\t\t\ttemp.append(grid[i][j + 1])\n\n\t\t\t\tif len(temp) == k:\n\t\t\t\t\tval = min(val, sum(temp))\n\n\treturn val\n\n"], ["def tri(n):\n\t\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t   = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t\"\"\"\n\tif n == 0:\n\t\treturn [1]\n\tmy_tri = [1, 3]\n\tfor i in range(2, n + 1):\n\t\tmy_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n\treturn my_tri\n"], ["def digits(n):\n\t\"\"\"Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t\"\"\"\n\tproduct = 1\n\todd_count = 0\n\tfor digit in str(n):\n\t\tint_digit = int(digit)\n\t\tif int_digit%2 == 1:\n\t\t\todd_count += 1\n\t\tproduct *= int_digit\n\tif odd_count == 0:\n\t\treturn 0\n\telse:\n\t\treturn product\n"], ["def is_nested(string):\n\t'''\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return True if and only if there is a valid subsequence of brackets \n\twhere at least one bracket in the subsequence is nested.\n\n\tis_nested('[[]]') \u279e True\n\tis_nested('[]]]]]]][[[[[]') \u279e False\n\tis_nested('[][]') \u279e False\n\tis_nested('[]') \u279e False\n\tis_nested('[[][]]') \u279e True\n\tis_nested('[[]][[') \u279e True\n\t'''\n\topening_bracket_index = []\n\tclosing_bracket_index = []\n\tfor i in range(len(string)):\n\t\tif string[i] == '[':\n\t\t\topening_bracket_index.append(i)\n\t\telse:\n\t\t\tclosing_bracket_index.append(i)\n\tclosing_bracket_index.reverse()\n\tcnt = 0\n\tfor i in range(len(opening_bracket_index)):\n\t\tif opening_bracket_index[i] == closing_bracket_index[i]:\n\t\t\tcnt += 1\n\treturn cnt == len(opening_bracket_index)\n"], ["def sum_squares(lst):\n\t\"\"\"You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n    \n\n\t\"\"\"\n\timport math\n\tsquared = 0\n\tfor i in lst:\n\t\tsquared += i**2\n\treturn math.ceil(squared)\n"], ["def check_if_last_char_is_a_letter(txt):\n\t'''\n\tCreate a function that returns True if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and False otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\n\tExamples:\n\tcheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\n\tcheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n\tcheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n\tcheck_if_last_char_is_a_letter(\"\") \u279e False \n\t'''\n\tif len(txt) == 0:\n\t\treturn False\n\tlast_char = txt[-1]\n\tif last_char.isalpha() and last_char != \" \":\n\t\treturn False\n\treturn True\n"], ["def can_arrange(arr):\n\t\"\"\"Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcan_arrange([1,2,4,3,5]) = 3\n\tcan_arrange([1,2,3]) = -1\n\t\"\"\"\n\tind=-1\n\ti=1\n\twhile i<len(arr):\n\t\tif arr[i]>=arr[i-1]:\n\t\t\tind=i\n\t\t\tbreak\n\t\ti+=1\n\treturn ind\n"], ["def largest_smallest_integers(lst):\n\t'''\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as None.\n\n\tExamples:\n\tlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n\tlargest_smallest_integers([]) == (None, None)\n\tlargest_smallest_integers([0]) == (None, None)\n\t'''\n\tsmallest = list(filter(lambda x: x < 0, lst))\n\tlargest = list(filter(lambda x: x >= 0, lst))\n\tif len(smallest) == 0:\n\t\treturn None, None\n\tif len(largest) == 0:\n\t\treturn None, None\n\treturn largest[0], smallest[0]\n"], ["def compare_one(a, b):\n\t\"\"\"\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn None if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be . or ,\n\n\tcompare_one(1, 2.5) \u279e 2.5\n\tcompare_one(1, \"2,3\") \u279e \"2,3\"\n\tcompare_one(\"5,1\", \"6\") \u279e \"6\"\n\tcompare_one(\"1\", 1) \u279e None\n\t\"\"\"\n\ttemp_a, temp_b = a, b\n\tif isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n\tif isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n\tif temp_a > temp_b: return temp_a\n\telse: return temp_b\n"], ["def is_equal_to_sum_even(n):\n\t\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tis_equal_to_sum_even(4) == False\n\tis_equal_to_sum_even(6) == False\n\tis_equal_to_sum_even(8) == True\n\t\"\"\"\n\tsum = 0\n\tfor i in range(1, n + 1):\n\t\tif i % 2 == 0:\n\t\t\tsum += i\n\treturn sum == 4\n"], ["def special_factorial(n):\n\t\"\"\"The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> special_factorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t\"\"\"\n\tfact_i = 1\n\tspecial_fact = 1\n\tfor i in range(1, n+1):\n\t\tspecial_fact *= i\n\t\tfact_i *= i\n\treturn special_fact\n"], ["def fix_spaces(text):\n\t\"\"\"\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n    \n\tfix_spaces(\"Example\") == \"Example\"\n\tfix_spaces(\"Example 1\") == \"Example_1\"\n\tfix_spaces(\" Example 2\") == \"_Example_2\"\n\tfix_spaces(\" Example   3\") == \"_Example-3\"\n\t\"\"\"\n\tnew_text = \"\"\n\ti = 0\n\tstart, end = 0, 0\n\twhile i < len(text):\n\t\tif text[i] == \" \":\n\t\t\tend += 1\n\t\telse:\n\t\t\tif end - start > 2:\n\t\t\t\tnew_text += \"-\"+text[i]\n\t\t\telif end - start > 0:\n\t\t\t\tnew_text += text[i]\n\t\t\tstart = end\n\t\t\tend = 0\n\t\ti += 1\n\treturn new_text\n"], ["def file_name_check(file_name):\n\t\"\"\"Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfile_name_check(\"example.txt\") # => 'Yes'\n\tfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t\"\"\"\n\tsuf = ['txt', 'exe', 'dll']\n\tlst = file_name.split(sep='.')\n\tif len(lst) != 2:\n\t\treturn 'No'\n\tif not lst[1] in suf:\n\t\treturn 'No'\n\tif len(lst[0]) == 0:\n\t\treturn 'No'\n\tif lst[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n\t\treturn 'No'\n\treturn 'Yes'\n"], ["def sum_squares(lst):\n\t\"\"\"\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t\"\"\"\n\tresult =[]\n\tfor i in range(len(lst)):\n\t\tif i %3 == 0:\n\t\t\tresult.append(lst[i]**2)\n\t\tif i %4 == 0:\n\t\t\tresult.append(lst[i]**3)\n\treturn sum(result)\n"], ["def words_in_sentence(sentence):\n\t\"\"\"\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\tInput: sentence = \"This is a test\"\n\t\tOutput: \"is\"\n\n\tExample 2:\n\t\tInput: sentence = \"lets go for swimming\"\n\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t* 1 <= len(sentence) <= 100\n\t\t* sentence contains only letters\n\t\"\"\"\n\tnew_lst = []\n\tfor word in sentence.split():\n\t\tflg = 0\n\t\tif len(word) == 1:\n\t\t\tflg = 1\n\t\tif len(word) > 1 and word[0] == word[-1] and word[0] != ' ':\n\t\t\tflg = 1\n\t\tif flg == 1:\n\t\t\tnew_lst.append(word)\n\treturn ' '.join(new_lst)\n"], ["def simplify(x, n):\n\t\"\"\"Your task is to implement a function that will simplify the expression\n\tx * n. The function returns True if x * n evaluates to a whole number and False\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = True\n\tsimplify(\"1/6\", \"2/1\") = False\n\tsimplify(\"7/10\", \"10/2\") = False\n\t\"\"\"\n\ta, b = x.split(\"/\")\n\tc, d = n.split(\"/\")\n\tnumerator = int(a) * int(c)\n\tdenominator = int(b) * int(d)\n\tif numerator == denominator:\n\t\treturn True\n\telse:\n\t\treturn False\n"], ["def order_by_points(nums):\n\t\"\"\"\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> order_by_points([]) == []\n\t\"\"\"\n\tdef digits_sum(n):\n\t\tneg = 1\n\t\tif n < 0: n, neg = -1 * n, -1\n\t\treturn sum(map(abs, str(n))) * neg\n\n\tnums.sort(key=digits_sum)\n\treturn nums\n"], ["def specialFilter(nums):\n\t\"\"\"Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t\"\"\"\n    \n\tcount = 0\n\tfor num in nums:\n\t\tif num > 10:\n\t\t\todd_digits = (1, 3, 5, 7, 9)\n\t\t\tif num % 10 in odd_digits:\n\t\t\t\tcount += 1\n\treturn count\n"], ["def get_max_triples(n):\n\t\"\"\"\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\tFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\tInput: n = 5\n\t\tOutput: 1\n\t\tExplanation: \n\t\ta = [1, 3, 7, 13, 21]\n\t\tThe only valid triple is (1, 7, 13).\n\t\"\"\"\n\tA = [i*i - i + 1 for i in range(1,n+1)]\n\tans = []\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tfor k in range(j+1,n):\n\t\t\t\tif A[i] + A[j] + A[k] % 3 == 0:\n\t\t\t\t\tans.append(A[i])\n\t\t\t\t\tans.append(A[j])\n\t\t\t\t\tans.append(A[k])\n\treturn len(ans)\n"], ["def bf(planet1, planet2):\n\t'''\n\tThere are eight planets in our solar system: the closerst to the Sun \n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2. \n\tThe function should return a tuple containing all planets whose orbits are \n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by \n\tthe proximity to the sun. \n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names. \n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t'''\n\tplanet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\tif planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n\t\treturn ()\n\tplanet1_index = planet_names.index(planet1)\n\tplanet2_index = planet_names.index(planet2)\n\torbit_list = []\n\tfor i in range(planet1_index, planet2_index + 1):\n\t\torbit_list.append(planet_names[i])\n\treturn orbit_list\n"], ["def sorted_list_sum(lst):\n\t\"\"\"Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t\"\"\"\n\tlst.sort()\n\tnew_lst = []\n\tfor i in lst:\n\t\tif len(i) % 2 == 0:\n\t\t\tnew_lst.append(i)\n\treturn new_lst\n"], ["def x_or_y(n, x, y):\n\t\"\"\"A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor x_or_y(7, 34, 12) == 34\n\tfor x_or_y(15, 8, 5) == 5\n    \n\t\"\"\"\n\tif n == 1:\n\t\treturn y\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn x\n\treturn y\n"], ["def double_the_difference(lst):\n\t'''\n\tGiven a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n    \n\tdouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdouble_the_difference([-1, -2, 0]) == 0\n\tdouble_the_difference([9, -2]) == 81\n\tdouble_the_difference([0]) == 0  \n   \n\tIf the input list is empty, return 0.\n\t'''\n\treturn sum(x * x for x in lst if x % 2 == 1)\n"], ["def compare(game,guess):\n\t\"\"\"I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t\"\"\"\n\tpass\n"], ["def Strongest_Extension(class_name, extensions):\n\t\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters \n\tin the extension's name, the strength is given by the fraction CAP - SM. \n\tYou should find the strongest extension and return a string in this \n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n\t(its strength is -1).\n\tExample:\n\tfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\t\"\"\"\n\tstrong = extensions[0]\n\tmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n\tfor s in extensions:\n\t\tval = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n\t\tif val > my_val:\n\t\t\tstrong = s\n\treturn class_name + '.' + strong\n"], ["def cycpattern_check(a , b):\n\t\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n\tcycpattern_check(\"abcd\",\"abd\") => False\n\tcycpattern_check(\"hello\",\"ell\") => True\n\tcycpattern_check(\"whassup\",\"psus\") => False\n\tcycpattern_check(\"abab\",\"baa\") => True\n\tcycpattern_check(\"efef\",\"eeff\") => False\n\tcycpattern_check(\"himenss\",\"simen\") => True\n\n\t\"\"\"\n\tl = len(b)\n\tpat = b + b\n\tfor i in range(len(a) - l + 1):\n\t\tif a[i:i+l] == pat:\n\t\t\treturn True\n\treturn False\n"], ["def even_odd_count(num):\n\t\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n\t Example:\n\t\teven_odd_count(-12) ==> (1, 1)\n\t\teven_odd_count(123) ==> (1, 2)\n\t\"\"\"\n\teven_count = 0\n\todd_count = 0\n\tfor i in str(abs(num)):\n\t\tif int(i)%2==0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\treturn even_count, odd_count\n"], ["def int_to_mini_roman(number):\n\t\"\"\"\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> int_to_mini_roman(19) == 'xix'\n\t>>> int_to_mini_roman(152) == 'clii'\n\t>>> int_to_mini_roman(426) == 'cdxxvi'\n\t\"\"\"\n\tnum = [1, 4, 5, 9, 10, 40, 50, 90,  \n\t\t   100, 400, 500, 900, 1000] \n\tsym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n\t\t   \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n\ti = 12\n\tres = ''\n\twhile number:\n\t\tres = sym[i] + res\n\t\tnumber -= num[i]\n\t\ti -= 1\n\treturn res.lower()\n"], ["def right_angle_triangle(a, b, c):\n\t'''\n\tGiven the lengths of the three sides of a triangle. Return True if the three\n\tsides form a right-angled triangle, False otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or \n\t90 degree.\n\tExample:\n\tright_angle_triangle(3, 4, 5) == True\n\tright_angle_triangle(1, 2, 3) == False\n\t'''\n\treturn a + b > c and b + c > a and a + c > b\n"], ["def find_max(words):\n\t\"\"\"Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n\tfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n\tfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\t\"\"\"\n\tmax_count = 0\n\tmax_word = \"\"\n\tfor word in words:\n\t\tcount = 0\n\t\tfor char in word:\n\t\t\tif char in \"abcdefghijklmnopqrstuvwxyz\":\n\t\t\t\tcount += 1\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_word = word\n\treturn max_word\n"], ["def eat(number, need, remaining):\n\t\"\"\"\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n    \n\tVariables:\n\t@number : integer\n\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\tthe number of remaining carrots thet exist in stock\n    \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t\"\"\"\n\tif(need <= remaining):\n\t\treturn [ number + need , remaining-need ]\n\telse:\n\t\treturn [ number + remaining , 0 ]\n"], ["def do_algebra(operator, operand):\n\t\"\"\"\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\tOperand is a list of of non-negative integers.\n\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t\"\"\"\n\texpression = str(operand[0])\n\tfor oprt, oprn in zip(operator, operand[1:]):\n\t\tif oprt == '+':\n\t\t\texpression += str(oprn)\n\t\telif oprt == '-':\n\t\t\texpression += str(oprn)\n\t\telif oprt == '*':\n\t\t\texpression += str(oprn)\n\t\telif oprt == '//':\n\t\t\texpression += str(oprn)\n\t\telif oprt == '**':\n\t\t\texpression += str(oprn)\n\treturn eval(expression)\n"], ["def solve(s):\n\t\"\"\"You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t\"\"\"\n\tflg = 0\n\tidx = 0\n\tnew_str = list(s)\n\tfor i in s:\n\t\tif i.isalpha():\n\t\t\tnew_str[idx] = i.swapcase()\n\t\t\tflg = 1\n\t\telse:\n\t\t\tnew_str[idx] = i\n\t\t\tflg = 0\n\t\tidx += 1\n\tif flg == 0:\n\t\tnew_str = new_str[::-1]\n\treturn \"\".join(new_str)\n"], ["def string_to_md5(text):\n\t\"\"\"\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return None.\n\n\t>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t\"\"\"\n\timport hashlib\n\treturn hashlib.md5(text.encode('utf-8')).hexdigest()\n"], ["def generate_integers(a, b):\n\t\"\"\"\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerate_integers(2, 8) => [2, 4, 6, 8]\n\tgenerate_integers(8, 2) => [2, 4, 6, 8]\n\tgenerate_integers(10, 14) => []\n\t\"\"\"\n\tlower = max(2, min(a, b))\n\tupper = min(8, max(a, b))\n\treturn [x for x in range(lower, upper + 1) if x % 2 == 0]\n"]]